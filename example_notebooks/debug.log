2019-10-10 14:37:54,826 [DEBUG] matplotlib: $HOME=/Users/deborahkhider
2019-10-10 14:37:54,827 [DEBUG] matplotlib: CONFIGDIR=/Users/deborahkhider/.matplotlib
2019-10-10 14:37:54,828 [DEBUG] matplotlib: matplotlib data path: //anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data
2019-10-10 14:37:54,833 [DEBUG] matplotlib: loaded rc file //anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc
2019-10-10 14:37:54,835 [DEBUG] matplotlib: matplotlib version 3.1.0
2019-10-10 14:37:54,835 [DEBUG] matplotlib: interactive is False
2019-10-10 14:37:54,836 [DEBUG] matplotlib: platform is darwin
2019-10-10 14:37:54,836 [DEBUG] matplotlib: loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'pygments.util', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'typing', 'typing.io', 'typing.re', 'IPython.core.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'pickle', '_compat_pickle', '_pickle', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'pickleshare', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.base', 'prompt_toolkit.log', 'prompt_toolkit.eventloop.coroutine', 'prompt_toolkit.eventloop.defaults', 'prompt_toolkit.utils', 'six.moves', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'prompt_toolkit.cache', 'prompt_toolkit.eventloop.future', 'prompt_toolkit.eventloop.context', 'prompt_toolkit.eventloop.async_generator', 'six.moves.queue', 'prompt_toolkit.eventloop.event', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.filters', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.enums', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters.cli', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.document', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.layout.screen', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.vt100', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.mouse_events', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.renderer', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.patch_stdout', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.evaluate', 'jedi.evaluate.utils', 'jedi.evaluate.imports', 'jedi.evaluate.sys_path', 'jedi.evaluate.cache', 'jedi.evaluate.base_context', 'jedi.common', 'jedi.common.context', 'jedi.evaluate.helpers', 'jedi.common.utils', 'jedi.evaluate.compiled', 'jedi.evaluate.compiled.context', 'jedi.evaluate.filters', 'jedi.evaluate.flow_analysis', 'jedi.evaluate.recursion', 'jedi.evaluate.lazy_context', 'jedi.evaluate.compiled.access', 'jedi.evaluate.compiled.getattr_static', 'jedi.evaluate.compiled.fake', 'jedi.evaluate.analysis', 'jedi.evaluate.context', 'jedi.evaluate.context.module', 'jedi.evaluate.context.klass', 'jedi.evaluate.context.function', 'jedi.evaluate.docstrings', 'jedi.evaluate.pep0484', 'jedi.evaluate.arguments', 'jedi.evaluate.context.iterable', 'jedi.evaluate.param', 'jedi.evaluate.context.asynchronous', 'jedi.evaluate.parser_cache', 'jedi.evaluate.context.instance', 'jedi.evaluate.syntax_tree', 'jedi.evaluate.finder', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.interpreter', 'jedi.evaluate.compiled.mixed', 'jedi.api.helpers', 'jedi.api.completion', 'jedi.api.environment', 'filecmp', 'jedi.evaluate.compiled.subprocess', 'jedi.evaluate.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.evaluate.usages', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_5', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'curses', '_curses', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.parentpoller', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'ipywidgets', 'ipywidgets._version', 'ipywidgets.widgets', 'ipywidgets.widgets.widget', 'ipywidgets.widgets.domwidget', 'ipywidgets.widgets.trait_types', 'ipywidgets.widgets.util', 'ipywidgets.widgets.widget_layout', 'ipywidgets.widgets.widget_style', 'ipywidgets.widgets.valuewidget', 'ipywidgets.widgets.widget_core', 'ipywidgets.widgets.widget_bool', 'ipywidgets.widgets.widget_description', 'ipywidgets.widgets.widget_button', 'ipywidgets.widgets.widget_box', 'ipywidgets.widgets.docutils', 'ipywidgets.widgets.widget_float', 'ipywidgets.widgets.widget_int', 'ipywidgets.widgets.widget_color', 'ipywidgets.widgets.widget_date', 'ipywidgets.widgets.widget_output', 'ipywidgets.widgets.widget_selection', 'ipywidgets.widgets.widget_selectioncontainer', 'ipywidgets.widgets.widget_string', 'ipywidgets.widgets.widget_controller', 'ipywidgets.widgets.interaction', 'ipywidgets.widgets.widget_link', 'ipywidgets.widgets.widget_media', 'ipywidgets.widgets.widget_templates', 'ipywidgets.widgets.widget_upload', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'zipfile', 'lipd.loggers', 'logging.config', 'socketserver', 'lipd.directory', 'lipd.bag', 'bagit', 'pkg_resources', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'lipd.csvs', 'csv', '_csv', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy._mklinit', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._internal', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.utils', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'mkl_fft', 'mkl_fft._pydfti', '_cython_0_29_7', 'mkl_fft._version', 'mkl_fft._numpy_fft', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.mtrand', 'mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._elliptic_curve', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._errors', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._types', 'asn1crypto._ordereddict', 'asn1crypto._ffi', 'asn1crypto._perf', 'asn1crypto._perf._big_num_ctypes', 'asn1crypto.algos', 'asn1crypto.core', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.x509.general_name', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'lipd.excel', 'xlrd', 'xlrd.info', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.formula', 'xlrd.book', 'xlrd.sheet', 'xlrd.formatting', 'xlrd.compdoc', 'mmap', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', '_cython_0_29_12', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'kiwisolver']
2019-10-10 14:37:54,896 [DEBUG] matplotlib: CACHEDIR=/Users/deborahkhider/.matplotlib
2019-10-10 14:37:54,899 [DEBUG] matplotlib.font_manager: Using fontManager instance from /Users/deborahkhider/.matplotlib/fontlist-v310.json
2019-10-10 14:37:55,283 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-10-10 14:37:56,069 [DEBUG] shapely.geos: Trying `CDLL(//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib)`
2019-10-10 14:37:56,080 [DEBUG] shapely.geos: Library path: '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib'
2019-10-10 14:37:56,080 [DEBUG] shapely.geos: DLL: <CDLL '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib', handle 7ff1d1bdc810 at 0x1a1d188f98>
2019-10-10 14:37:56,081 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-10-10 14:37:56,082 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-10-10 14:37:56,082 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 11388e050 at 0x1a1d194710>
2019-10-10 14:37:57,318 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-10-10 14:38:00,074 [INFO] directory: enter list_files
2019-10-10 14:38:00,075 [INFO] directory: exit list_files
2019-10-10 14:38:00,077 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpxzckxgq8
2019-10-10 14:38:00,078 [INFO] zips: enter unzip
2019-10-10 14:38:00,083 [INFO] zips: exit unzip
2019-10-10 14:38:00,114 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-10-10 14:38:00,114 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:00,115 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:00,115 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:00,115 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:00,115 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:00,116 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:00,116 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:00,116 [INFO] csvs: enter read_csvs
2019-10-10 14:38:00,116 [INFO] directory: enter list_files
2019-10-10 14:38:00,117 [INFO] directory: exit list_files
2019-10-10 14:38:00,117 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:00,117 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-10-10 14:38:00,118 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:00,118 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:00,118 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:00,120 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:00,120 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:00,121 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:00,121 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:00,122 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-10-10 14:38:00,122 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-10-10 14:38:00,122 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:00,123 [INFO] LiPD: lipd_read: record loaded: ../example_data/Arc-Yukon.D'Arrigo.2006.lpd
2019-10-10 14:38:00,124 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp1awvdcpt
2019-10-10 14:38:00,124 [INFO] zips: enter unzip
2019-10-10 14:38:00,128 [INFO] zips: exit unzip
2019-10-10 14:38:00,553 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-10-10 14:38:00,554 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:00,559 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:00,560 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:00,560 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:00,560 [INFO] jsons: enter import_data: chron
2019-10-10 14:38:00,561 [INFO] jsons: exit import_data: chron
2019-10-10 14:38:00,561 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:00,561 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:00,561 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:00,565 [INFO] csvs: enter read_csvs
2019-10-10 14:38:00,565 [INFO] directory: enter list_files
2019-10-10 14:38:00,565 [INFO] directory: exit list_files
2019-10-10 14:38:00,566 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:00,566 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-10-10 14:38:00,566 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:00,567 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:00,567 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-10-10 14:38:00,568 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:00,568 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:00,569 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-10-10 14:38:00,570 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:00,570 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:00,570 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-10-10 14:38:00,571 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:00,571 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:00,572 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:00,579 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:00,585 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:00,590 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:00,591 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:00,591 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:00,591 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-10-10 14:38:00,592 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:00,593 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:00,593 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:00,593 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:00,599 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-10-10 14:38:00,600 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-10-10 14:38:00,600 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-10-10 14:38:00,600 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-10-10 14:38:00,601 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:00,603 [INFO] LiPD: lipd_read: record loaded: ../example_data/MD97-2121.Marr.2013.lpd
2019-10-10 14:38:00,604 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpd1lqwb4j
2019-10-10 14:38:00,604 [INFO] zips: enter unzip
2019-10-10 14:38:00,606 [INFO] zips: exit unzip
2019-10-10 14:38:00,633 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-10-10 14:38:00,633 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:00,634 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:00,634 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:00,634 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:00,634 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:00,635 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:00,635 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:00,635 [INFO] csvs: enter read_csvs
2019-10-10 14:38:00,636 [INFO] directory: enter list_files
2019-10-10 14:38:00,636 [INFO] directory: exit list_files
2019-10-10 14:38:00,636 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:00,637 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-10-10 14:38:00,638 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:00,639 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:00,639 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:00,641 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:00,641 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:00,641 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:00,641 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:00,643 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-10-10 14:38:00,643 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-10-10 14:38:00,643 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:00,644 [INFO] LiPD: lipd_read: record loaded: ../example_data/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-10-10 14:38:00,645 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpifruw9lk
2019-10-10 14:38:00,645 [INFO] zips: enter unzip
2019-10-10 14:38:00,699 [INFO] zips: exit unzip
2019-10-10 14:38:00,965 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-10-10 14:38:00,966 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:00,970 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:00,970 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:00,970 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:00,971 [INFO] jsons: enter import_data: chron
2019-10-10 14:38:00,971 [INFO] jsons: enter import_model
2019-10-10 14:38:00,971 [INFO] jsons: exit import_model: chron0model
2019-10-10 14:38:00,971 [INFO] jsons: exit import_data: chron
2019-10-10 14:38:00,972 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:00,972 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:00,972 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:00,974 [INFO] csvs: enter read_csvs
2019-10-10 14:38:00,975 [INFO] directory: enter list_files
2019-10-10 14:38:00,975 [INFO] directory: exit list_files
2019-10-10 14:38:00,975 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:00,976 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-10-10 14:38:01,842 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:01,843 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:01,843 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-10-10 14:38:01,849 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:01,850 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:01,850 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:01,853 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:01,854 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:01,854 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:01,854 [INFO] csvs: enter merge_csv_model
2019-10-10 14:38:02,382 [INFO] csvs: exit merge_csv_model
2019-10-10 14:38:02,382 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:02,383 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:02,383 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:03,405 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-10-10 14:38:03,406 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-10-10 14:38:03,406 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-10-10 14:38:03,407 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-10-10 14:38:03,407 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-10-10 14:38:03,407 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:03,411 [INFO] LiPD: lipd_read: record loaded: ../example_data/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-10-10 14:38:03,431 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpxxhihtpb
2019-10-10 14:38:03,432 [INFO] zips: enter unzip
2019-10-10 14:38:03,572 [INFO] zips: exit unzip
2019-10-10 14:38:03,759 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-10-10 14:38:03,759 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:03,761 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:03,762 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:03,762 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:03,762 [INFO] jsons: enter import_data: chron
2019-10-10 14:38:03,763 [INFO] jsons: enter import_model
2019-10-10 14:38:03,763 [INFO] jsons: exit import_model: chron0model
2019-10-10 14:38:03,763 [INFO] jsons: exit import_data: chron
2019-10-10 14:38:03,764 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:03,764 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:03,764 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:03,766 [INFO] csvs: enter read_csvs
2019-10-10 14:38:03,766 [INFO] directory: enter list_files
2019-10-10 14:38:03,767 [INFO] directory: exit list_files
2019-10-10 14:38:03,767 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:03,767 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-10-10 14:38:03,769 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:03,769 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:03,769 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-10-10 14:38:03,771 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:03,771 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:03,771 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-10-10 14:38:03,861 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:03,862 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:03,862 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-10-10 14:38:03,947 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:03,947 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:03,947 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-10-10 14:38:04,033 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,033 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:04,034 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-10-10 14:38:04,131 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,131 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:04,131 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-10-10 14:38:04,218 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,218 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:04,218 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-10-10 14:38:04,304 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,304 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:04,304 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-10-10 14:38:04,389 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,390 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:04,390 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-10-10 14:38:04,478 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,479 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:04,479 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-10-10 14:38:04,562 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,562 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:04,563 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-10-10 14:38:04,655 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,656 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:04,656 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-10-10 14:38:04,788 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,788 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:04,789 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-10-10 14:38:04,881 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,881 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:04,882 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-10-10 14:38:04,883 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,883 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:04,883 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-10-10 14:38:04,975 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:04,975 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:04,975 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:04,978 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:04,978 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:04,979 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-10-10 14:38:04,980 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:04,980 [INFO] csvs: enter merge_csv_model
2019-10-10 14:38:04,981 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,083 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,115 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,146 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,178 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,209 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,241 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,274 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,306 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,337 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,369 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,400 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,433 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:05,433 [INFO] csvs: exit merge_csv_model
2019-10-10 14:38:05,434 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:05,434 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:05,434 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:06,195 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-10-10 14:38:06,195 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-10-10 14:38:06,196 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-10-10 14:38:06,196 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-10-10 14:38:06,196 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-10-10 14:38:06,197 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:06,200 [INFO] LiPD: lipd_read: record loaded: ../example_data/MD982176.Stott.2004.lpd
2019-10-10 14:38:06,207 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpu_w_g0_o
2019-10-10 14:38:06,207 [INFO] zips: enter unzip
2019-10-10 14:38:06,211 [INFO] zips: exit unzip
2019-10-10 14:38:06,296 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-10-10 14:38:06,296 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:06,299 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:06,299 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:06,300 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:06,300 [INFO] jsons: enter import_data: chron
2019-10-10 14:38:06,300 [INFO] jsons: exit import_data: chron
2019-10-10 14:38:06,301 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:06,301 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:06,301 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:06,302 [INFO] csvs: enter read_csvs
2019-10-10 14:38:06,303 [INFO] directory: enter list_files
2019-10-10 14:38:06,303 [INFO] directory: exit list_files
2019-10-10 14:38:06,303 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,303 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-10-10 14:38:06,304 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,304 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,305 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-10-10 14:38:06,310 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,311 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:06,311 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,317 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,317 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,318 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,319 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-10-10 14:38:06,321 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-10-10 14:38:06,321 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-10-10 14:38:06,322 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,322 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,322 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:06,322 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:06,327 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-10-10 14:38:06,327 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-10-10 14:38:06,327 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-10-10 14:38:06,327 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-10-10 14:38:06,327 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:06,328 [INFO] LiPD: lipd_read: record loaded: ../example_data/Juxtlahuaca.Lachniet.2012.lpd
2019-10-10 14:38:06,329 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp_99opan1
2019-10-10 14:38:06,329 [INFO] zips: enter unzip
2019-10-10 14:38:06,332 [INFO] zips: exit unzip
2019-10-10 14:38:06,363 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-10-10 14:38:06,363 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:06,364 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:06,364 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:06,365 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:06,365 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:06,365 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:06,365 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:06,366 [INFO] csvs: enter read_csvs
2019-10-10 14:38:06,366 [INFO] directory: enter list_files
2019-10-10 14:38:06,366 [INFO] directory: exit list_files
2019-10-10 14:38:06,366 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,366 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-10-10 14:38:06,367 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,368 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:06,368 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,369 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,369 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,369 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:06,369 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:06,370 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-10-10 14:38:06,371 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-10-10 14:38:06,371 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:06,372 [INFO] LiPD: lipd_read: record loaded: ../example_data/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-10-10 14:38:06,372 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpnpjrz3u2
2019-10-10 14:38:06,372 [INFO] zips: enter unzip
2019-10-10 14:38:06,375 [INFO] zips: exit unzip
2019-10-10 14:38:06,412 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-10-10 14:38:06,412 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:06,413 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:06,413 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:06,413 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:06,414 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:06,414 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:06,414 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:06,415 [INFO] csvs: enter read_csvs
2019-10-10 14:38:06,415 [INFO] directory: enter list_files
2019-10-10 14:38:06,415 [INFO] directory: exit list_files
2019-10-10 14:38:06,416 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,416 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-10-10 14:38:06,418 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,418 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:06,419 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,423 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,423 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,423 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:06,424 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:06,427 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-10-10 14:38:06,427 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-10-10 14:38:06,427 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:06,428 [INFO] LiPD: lipd_read: record loaded: ../example_data/Asi-Dasuopu.Thompson.2000.lpd
2019-10-10 14:38:06,429 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp3p5vu68d
2019-10-10 14:38:06,429 [INFO] zips: enter unzip
2019-10-10 14:38:06,432 [INFO] zips: exit unzip
2019-10-10 14:38:06,458 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-10-10 14:38:06,458 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:06,458 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:06,459 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:06,459 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:06,459 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:06,459 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:06,459 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:06,460 [INFO] csvs: enter read_csvs
2019-10-10 14:38:06,460 [INFO] directory: enter list_files
2019-10-10 14:38:06,460 [INFO] directory: exit list_files
2019-10-10 14:38:06,461 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,461 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-10-10 14:38:06,462 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,462 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:06,462 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,463 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,464 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,464 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:06,464 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:06,465 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-10-10 14:38:06,465 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-10-10 14:38:06,465 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:06,466 [INFO] LiPD: lipd_read: record loaded: ../example_data/Asi-TH001.Buckley.2010.lpd
2019-10-10 14:38:06,467 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmps83nlw5r
2019-10-10 14:38:06,467 [INFO] zips: enter unzip
2019-10-10 14:38:06,469 [INFO] zips: exit unzip
2019-10-10 14:38:06,519 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-10-10 14:38:06,519 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:06,520 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:06,520 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:06,520 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:06,521 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:06,521 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:06,521 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:06,521 [INFO] csvs: enter read_csvs
2019-10-10 14:38:06,522 [INFO] directory: enter list_files
2019-10-10 14:38:06,522 [INFO] directory: exit list_files
2019-10-10 14:38:06,522 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,522 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-10-10 14:38:06,523 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,523 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,524 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-10-10 14:38:06,525 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,525 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:06,526 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,528 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-10-10 14:38:06,528 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,529 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,529 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,530 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:06,530 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:06,532 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-10-10 14:38:06,532 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-10-10 14:38:06,533 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:06,533 [INFO] LiPD: lipd_read: record loaded: ../example_data/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-10-10 14:38:06,534 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp1g5pkr5a
2019-10-10 14:38:06,534 [INFO] zips: enter unzip
2019-10-10 14:38:06,537 [INFO] zips: exit unzip
2019-10-10 14:38:06,573 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-10-10 14:38:06,573 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:06,574 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:06,574 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:06,574 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:06,575 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:06,575 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:06,575 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:06,575 [INFO] csvs: enter read_csvs
2019-10-10 14:38:06,576 [INFO] directory: enter list_files
2019-10-10 14:38:06,576 [INFO] directory: exit list_files
2019-10-10 14:38:06,576 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,576 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-10-10 14:38:06,579 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,579 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:06,580 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,582 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,582 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,582 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:06,582 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:06,585 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-10-10 14:38:06,585 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-10-10 14:38:06,586 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:06,587 [INFO] LiPD: lipd_read: record loaded: ../example_data/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-10-10 14:38:06,587 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmptmj0esm8
2019-10-10 14:38:06,587 [INFO] zips: enter unzip
2019-10-10 14:38:06,590 [INFO] zips: exit unzip
2019-10-10 14:38:06,674 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-10-10 14:38:06,675 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:06,677 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:06,677 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:06,677 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:06,677 [INFO] jsons: enter import_data: chron
2019-10-10 14:38:06,678 [INFO] jsons: exit import_data: chron
2019-10-10 14:38:06,678 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:06,678 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:06,678 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:06,679 [INFO] csvs: enter read_csvs
2019-10-10 14:38:06,679 [INFO] directory: enter list_files
2019-10-10 14:38:06,680 [INFO] directory: exit list_files
2019-10-10 14:38:06,680 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,680 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-10-10 14:38:06,681 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,681 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,681 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-10-10 14:38:06,682 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,682 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:06,682 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,685 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,685 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,685 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,686 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-10-10 14:38:06,687 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,687 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,687 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:06,688 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:06,689 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-10-10 14:38:06,690 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-10-10 14:38:06,690 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-10-10 14:38:06,690 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-10-10 14:38:06,690 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:06,692 [INFO] LiPD: lipd_read: record loaded: ../example_data/MD98-2170.Stott.2004.lpd
2019-10-10 14:38:06,693 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp654h9_19
2019-10-10 14:38:06,693 [INFO] zips: enter unzip
2019-10-10 14:38:06,697 [INFO] zips: exit unzip
2019-10-10 14:38:06,813 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-10-10 14:38:06,813 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:06,815 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:06,815 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:06,815 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:06,815 [INFO] jsons: enter import_data: chron
2019-10-10 14:38:06,816 [INFO] jsons: exit import_data: chron
2019-10-10 14:38:06,816 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:06,816 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:06,816 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:06,817 [INFO] csvs: enter read_csvs
2019-10-10 14:38:06,818 [INFO] directory: enter list_files
2019-10-10 14:38:06,818 [INFO] directory: exit list_files
2019-10-10 14:38:06,818 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,818 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-10-10 14:38:06,819 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,819 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,819 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-10-10 14:38:06,821 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,821 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:06,821 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,827 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,827 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,827 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,828 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-10-10 14:38:06,829 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,829 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,830 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:06,830 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:06,833 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-10-10 14:38:06,833 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-10-10 14:38:06,833 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-10-10 14:38:06,833 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-10-10 14:38:06,834 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:06,835 [INFO] LiPD: lipd_read: record loaded: ../example_data/MD01-2378.Xu.2008.lpd
2019-10-10 14:38:06,836 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpeqo0pdnp
2019-10-10 14:38:06,836 [INFO] zips: enter unzip
2019-10-10 14:38:06,839 [INFO] zips: exit unzip
2019-10-10 14:38:06,871 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-10-10 14:38:06,871 [INFO] jsons: exit read_json_from_file
2019-10-10 14:38:06,872 [INFO] jsons: enter idx_num_to_name
2019-10-10 14:38:06,872 [INFO] jsons: enter import_data: paleo
2019-10-10 14:38:06,872 [INFO] jsons: exit import_data: paleo
2019-10-10 14:38:06,873 [INFO] jsons: exit idx_num_to_name
2019-10-10 14:38:06,873 [INFO] misc: enter remove_empty_doi
2019-10-10 14:38:06,873 [INFO] misc: exit remove_empty_doi
2019-10-10 14:38:06,874 [INFO] csvs: enter read_csvs
2019-10-10 14:38:06,874 [INFO] directory: enter list_files
2019-10-10 14:38:06,874 [INFO] directory: exit list_files
2019-10-10 14:38:06,874 [INFO] csvs: enter read_csv_from_file
2019-10-10 14:38:06,875 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-10-10 14:38:06,875 [INFO] csvs: exit read_csv_from_file
2019-10-10 14:38:06,875 [INFO] csvs: enter merge_csv_metadata
2019-10-10 14:38:06,876 [INFO] csvs: enter merge_csv_section
2019-10-10 14:38:06,877 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-10-10 14:38:06,877 [INFO] csvs: exit merge_csv_section
2019-10-10 14:38:06,877 [INFO] csvs: exit merge_csv_metadata
2019-10-10 14:38:06,877 [INFO] csvs: enter get_csv_from_metadata
2019-10-10 14:38:06,878 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-10-10 14:38:06,878 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-10-10 14:38:06,878 [INFO] csvs: exit get_csv_from_metadata
2019-10-10 14:38:06,879 [INFO] LiPD: lipd_read: record loaded: ../example_data/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-10-10 14:38:06,880 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.78 seconds
2019-10-21 16:11:02,755 [DEBUG] shapely.geos: Trying `CDLL(/home/fzhu/Apps/miniconda3/envs/py3.7/lib/libgeos_c.so.1)`
2019-10-21 16:11:02,757 [DEBUG] shapely.geos: Library path: '/home/fzhu/Apps/miniconda3/envs/py3.7/lib/libgeos_c.so.1'
2019-10-21 16:11:02,757 [DEBUG] shapely.geos: DLL: <CDLL '/home/fzhu/Apps/miniconda3/envs/py3.7/lib/libgeos_c.so.1', handle 560afedd40e0 at 0x7f2b54538f50>
2019-10-21 16:11:02,765 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2019-10-21 16:11:02,765 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2019-10-21 16:11:02,765 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7f2b904e14f0 at 0x7f2b8494a450>
2019-10-21 16:11:03,155 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-10-21 16:12:16,359 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=22.0.
2019-10-21 16:12:16,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 2.335
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 3.335
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2019-10-21 16:12:16,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-10-21 16:12:16,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2019-10-21 16:12:16,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-10-21 16:12:16,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal roman normal>) = 11.145
2019-10-21 16:12:16,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-ThinItalic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal roman normal>) = 10.145
2019-10-21 16:12:16,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal book normal>) = 11.05
2019-10-21 16:12:16,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-BoldIt.otf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-It.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Slanted' (LinLibertine_aRL.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Georgian' (DroidSansGeorgian.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-LightIt.otf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal book normal>) = 10.05
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Inconsolata' (Inconsolata-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal regular normal>) = 11.05
2019-10-21 16:12:16,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Tamil' (DroidSansTamil-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2019-10-21 16:12:16,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Hebrew' (DroidSansHebrew-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-ExtraLight.otf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiTml1' (akruti1b.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiTml1' (akruti1.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 6.05
2019-10-21 16:12:16,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Initials' (LinLibertine_I.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TSCu_Paranar' (TSCu_Paranar.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-It.otf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
2019-10-21 16:12:16,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-ThinItalic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans' (DroidSans.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville BT' (BaskervilleItalicBT.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiMal2' (mal2-b.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-MediumItalic.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Bold-0.5.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal bold condensed>) = 11.535
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal bold normal>) = 6.335
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-BlackItalic.ttf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TSCu_Times' (TSCu_Times.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TAMu_Kadambri' (TAMu_Kadampari.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Medium.otf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-10-21 16:12:16,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'orya' (oriya.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Serif' (DroidSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hack' (Hack-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal bold condensed>) = 10.535
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Grantha' (NotoSansGrantha-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hack' (Hack-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_RI.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-SemiboldIt.ttf) italic normal semibold normal>) = 11.24
2019-10-21 16:12:16,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal book normal>) = 10.05
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (BASKE1.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville BT' (BaskervilleBoldItalicBT.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Deseret' (NotoSansDeseret-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-BlackIt.ttf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hack' (Hack-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Semibold.otf) normal normal semibold normal>) = 10.24
2019-10-21 16:12:16,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TSCu_Paranar' (TSCu_paranari.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Display Capitals' (LinLibertine_aDRS.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-ThinItalic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings3.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 7.05
2019-10-21 16:12:16,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_RBI.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'C059' (C059-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Arabic Kufi' (DroidKufi-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-BoldIt.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (BASKE9.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal bold normal>) = 11.335
2019-10-21 16:12:16,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial_Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2019-10-21 16:12:16,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 3.25
2019-10-21 16:12:16,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'C059' (C059-Roman.otf) normal normal roman normal>) = 10.145
2019-10-21 16:12:16,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_RB.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal bold condensed>) = 10.535
2019-10-21 16:12:16,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 5.335
2019-10-21 16:12:16,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-ThinItalic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Arabic Kufi' (DroidKufi-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-ExtraLight.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiMal2' (mal2-n.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'malayalam' (malayalam.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'MalOtf' (MalOtf.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_RZ.ttf) normal normal semibold normal>) = 10.24
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings2.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal bold condensed>) = 3.535
2019-10-21 16:12:16,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-MediumIt.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 4.335
2019-10-21 16:12:16,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cantarell' (Cantarell-ExtraBold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-MediumItalic.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-10-21 16:12:16,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-LightItalic.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi-1.2b' (Gargi-1.2b.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sagar' (SagarNormal.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Akaash' (AkaashNormal.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Arabic' (DroidSansArabic.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-LightItalic.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Serif' (DroidSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Adlam Unjoined' (NotoSansAdlamUnjoined-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hack' (Hack-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Slanted' (LinLibertine_aBL.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Semibold.ttf) normal normal semibold normal>) = 10.24
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cantarell' (Cantarell-Regular.otf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Japanese' (DroidSansJapanese.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
2019-10-21 16:12:16,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville Bold font.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-LightIt.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiTml2' (akruti2.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Capitals' (LinLibertine_aBS.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallback.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (baskervi.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'MT Extra' (MTExtraPlain.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial_Normal.ttf) normal normal 400 normal>) = 0.05
2019-10-21 16:12:16,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal roman normal>) = 10.145
2019-10-21 16:12:16,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Light.otf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TAMu_Maduram' (TAMu_Maduram.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'GurbaniBoliLite' (GurbaniBoliLite.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols2' (NotoSansSymbols2-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Thai' (DroidSansThai.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cantarell' (Cantarell-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'P052' (P052-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Hebrew' (DroidSansHebrew-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-LightItalic.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial_Black_Heavy.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-ExtraLightIt.otf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal light normal>) = 2.24
2019-10-21 16:12:16,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Armenian' (DroidSansArmenian.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Mono' (DroidSansMono.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Ethiopic' (DroidSansEthiopic-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-MediumIt.otf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Capitals' (LinLibertine_aSI.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Ethiopic' (DroidSansEthiopic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 2.25
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_RZI.ttf) italic normal semibold normal>) = 11.24
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Arabic Naskh' (DroidNaskh-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Slanted' (LinLibertine_aZL.ttf) italic normal semibold normal>) = 11.24
2019-10-21 16:12:16,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-MediumItalic.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Arabic Naskh' (DroidNaskh-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TSCu_Paranar' (TSCu_paranarb.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Devanagari' (DroidSansDevanagari-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TSCu_Comic' (TSCu_Comic.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-LightItalic.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackLegacy.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiMal1' (mal1-b.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Capitals' (LinLibertine_aS.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_R.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-BlackItalic.ttf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-BlackItalic.ttf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-BlackIt.otf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal book normal>) = 11.05
2019-10-21 16:12:16,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'P052' (P052-Roman.otf) normal normal roman normal>) = 10.145
2019-10-21 16:12:16,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal bold condensed>) = 2.535
2019-10-21 16:12:16,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Music' (NotoMusic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal roman normal>) = 11.145
2019-10-21 16:12:16,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville BT' (baskerville bold bt.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiMal1' (mal1-n.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-ExtraLightIt.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TAMu_Kalyani' (TAMu_Kalyani.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal bold normal>) = 7.335
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville BT' (BaskervilleBT.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville BT' (BaskervilleBoldBT.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cantarell' (Cantarell-Thin.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Black.otf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Display' (LinLibertine_DR.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (BASKRV_L.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Anatolian Hieroglyphs' (NotoSansAnatolianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Serif' (DroidSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Tamil' (DroidSansTamil-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Naskh Shift Alt' (DroidNaskh-Regular-SystemUI.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Capitals' (LinLibertine_aSZI.ttf) italic normal semibold normal>) = 11.24
2019-10-21 16:12:16,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Inconsolata' (Inconsolata-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-10-21 16:12:16,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sampige' (Sampige.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'icomoon' (icomoon_Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (ani.ttf) normal normal 700 normal>) = 10.335
2019-10-21 16:12:16,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans' (DroidSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal demi normal>) = 11.24
2019-10-21 16:12:16,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (BASKE10.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (baskvl.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2019-10-21 16:12:16,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-SemiboldIt.otf) italic normal semibold normal>) = 11.24
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Serif' (DroidSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cantarell' (Cantarell-Light.otf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'GurbaniBoliLite' (gbolilite.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiTml2' (akruti2b.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Math' (NotoSansMath-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal demi normal>) = 10.24
2019-10-21 16:12:16,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-BlackItalic.ttf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2019-10-21 16:12:16,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-MediumItalic.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,429 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=22.0 to Arial ('/home/fzhu/.fonts/Arial_Normal.ttf') with score of 0.050000.
2019-10-21 16:12:16,466 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=20.0.
2019-10-21 16:12:16,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 2.335
2019-10-21 16:12:16,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 3.335
2019-10-21 16:12:16,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2019-10-21 16:12:16,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-10-21 16:12:16,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2019-10-21 16:12:16,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-10-21 16:12:16,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal roman normal>) = 11.145
2019-10-21 16:12:16,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-ThinItalic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal roman normal>) = 10.145
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal book normal>) = 11.05
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-BoldIt.otf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-It.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Slanted' (LinLibertine_aRL.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Georgian' (DroidSansGeorgian.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-LightIt.otf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal book normal>) = 10.05
2019-10-21 16:12:16,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Inconsolata' (Inconsolata-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal regular normal>) = 11.05
2019-10-21 16:12:16,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Tamil' (DroidSansTamil-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2019-10-21 16:12:16,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Hebrew' (DroidSansHebrew-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-ExtraLight.otf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiTml1' (akruti1b.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiTml1' (akruti1.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 6.05
2019-10-21 16:12:16,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Initials' (LinLibertine_I.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TSCu_Paranar' (TSCu_Paranar.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-It.otf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-ThinItalic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans' (DroidSans.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville BT' (BaskervilleItalicBT.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiMal2' (mal2-b.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-MediumItalic.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Bold-0.5.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal bold condensed>) = 11.535
2019-10-21 16:12:16,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal bold normal>) = 6.335
2019-10-21 16:12:16,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-BlackItalic.ttf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TSCu_Times' (TSCu_Times.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TAMu_Kadambri' (TAMu_Kadampari.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Medium.otf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'orya' (oriya.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Serif' (DroidSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hack' (Hack-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal bold condensed>) = 10.535
2019-10-21 16:12:16,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Grantha' (NotoSansGrantha-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hack' (Hack-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_RI.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-SemiboldIt.ttf) italic normal semibold normal>) = 11.24
2019-10-21 16:12:16,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal book normal>) = 10.05
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (BASKE1.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville BT' (BaskervilleBoldItalicBT.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Deseret' (NotoSansDeseret-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-BlackIt.ttf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hack' (Hack-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Semibold.otf) normal normal semibold normal>) = 10.24
2019-10-21 16:12:16,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TSCu_Paranar' (TSCu_paranari.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Display Capitals' (LinLibertine_aDRS.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-ThinItalic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings3.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 7.05
2019-10-21 16:12:16,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_RBI.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'C059' (C059-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Arabic Kufi' (DroidKufi-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-BoldIt.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (BASKE9.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal bold normal>) = 11.335
2019-10-21 16:12:16,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial_Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2019-10-21 16:12:16,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 3.25
2019-10-21 16:12:16,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'C059' (C059-Roman.otf) normal normal roman normal>) = 10.145
2019-10-21 16:12:16,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_RB.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal bold condensed>) = 10.535
2019-10-21 16:12:16,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 5.335
2019-10-21 16:12:16,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-ThinItalic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Arabic Kufi' (DroidKufi-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-ExtraLight.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiMal2' (mal2-n.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'malayalam' (malayalam.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'MalOtf' (MalOtf.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_RZ.ttf) normal normal semibold normal>) = 10.24
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings2.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal bold condensed>) = 3.535
2019-10-21 16:12:16,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-MediumIt.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 4.335
2019-10-21 16:12:16,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cantarell' (Cantarell-ExtraBold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-MediumItalic.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-10-21 16:12:16,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-LightItalic.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi-1.2b' (Gargi-1.2b.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sagar' (SagarNormal.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Akaash' (AkaashNormal.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Arabic' (DroidSansArabic.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-LightItalic.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Serif' (DroidSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Adlam Unjoined' (NotoSansAdlamUnjoined-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hack' (Hack-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Slanted' (LinLibertine_aBL.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Semibold.ttf) normal normal semibold normal>) = 10.24
2019-10-21 16:12:16,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cantarell' (Cantarell-Regular.otf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Japanese' (DroidSansJapanese.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
2019-10-21 16:12:16,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville Bold font.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-LightIt.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiTml2' (akruti2.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Capitals' (LinLibertine_aBS.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallback.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (baskervi.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'MT Extra' (MTExtraPlain.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial_Normal.ttf) normal normal 400 normal>) = 0.05
2019-10-21 16:12:16,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal roman normal>) = 10.145
2019-10-21 16:12:16,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Light.otf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TAMu_Maduram' (TAMu_Maduram.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'GurbaniBoliLite' (GurbaniBoliLite.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols2' (NotoSansSymbols2-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Thai' (DroidSansThai.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cantarell' (Cantarell-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'P052' (P052-Bold.otf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Hebrew' (DroidSansHebrew-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-LightItalic.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial_Black_Heavy.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-ExtraLightIt.otf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal light normal>) = 2.24
2019-10-21 16:12:16,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Armenian' (DroidSansArmenian.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Mono' (DroidSansMono.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Ethiopic' (DroidSansEthiopic-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-MediumIt.otf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Capitals' (LinLibertine_aSI.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Ethiopic' (DroidSansEthiopic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 2.25
2019-10-21 16:12:16,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_RZI.ttf) italic normal semibold normal>) = 11.24
2019-10-21 16:12:16,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Arabic Naskh' (DroidNaskh-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Slanted' (LinLibertine_aZL.ttf) italic normal semibold normal>) = 11.24
2019-10-21 16:12:16,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-MediumItalic.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-10-21 16:12:16,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Arabic Naskh' (DroidNaskh-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TSCu_Paranar' (TSCu_paranarb.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Devanagari' (DroidSansDevanagari-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TSCu_Comic' (TSCu_Comic.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-LightItalic.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackLegacy.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiMal1' (mal1-b.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Capitals' (LinLibertine_aS.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine' (LinLibertine_R.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-BlackItalic.ttf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-BlackItalic.ttf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-BlackIt.otf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal book normal>) = 11.05
2019-10-21 16:12:16,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'P052' (P052-Roman.otf) normal normal roman normal>) = 10.145
2019-10-21 16:12:16,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal bold condensed>) = 2.535
2019-10-21 16:12:16,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Music' (NotoMusic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal roman normal>) = 11.145
2019-10-21 16:12:16,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville BT' (baskerville bold bt.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiMal1' (mal1-n.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-ExtraLightIt.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'TAMu_Kalyani' (TAMu_Kalyani.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal bold normal>) = 7.335
2019-10-21 16:12:16,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville BT' (BaskervilleBT.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville BT' (BaskervilleBoldBT.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cantarell' (Cantarell-Thin.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-Black.otf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Display' (LinLibertine_DR.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (BASKRV_L.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Anatolian Hieroglyphs' (NotoSansAnatolianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Serif' (DroidSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Tamil' (DroidSansTamil-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Naskh Shift Alt' (DroidNaskh-Regular-SystemUI.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Linux Libertine Capitals' (LinLibertine_aSZI.ttf) italic normal semibold normal>) = 11.24
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Inconsolata' (Inconsolata-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sampige' (Sampige.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'icomoon' (icomoon_Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (ani.ttf) normal normal 700 normal>) = 10.335
2019-10-21 16:12:16,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans' (DroidSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal demi normal>) = 11.24
2019-10-21 16:12:16,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (BASKE10.ttf) italic normal light normal>) = 11.24
2019-10-21 16:12:16,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (baskvl.ttf) normal normal normal normal>) = 10.0
2019-10-21 16:12:16,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2019-10-21 16:12:16,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Source Code Pro' (SourceCodePro-SemiboldIt.otf) italic normal semibold normal>) = 11.24
2019-10-21 16:12:16,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif' (NotoSerif-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Serif' (DroidSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cantarell' (Cantarell-Light.otf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-10-21 16:12:16,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'GurbaniBoliLite' (gbolilite.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Thin.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AkrutiTml2' (akruti2b.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Math' (NotoSansMath-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Light.ttf) normal normal light normal>) = 10.24
2019-10-21 16:12:16,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal demi normal>) = 10.24
2019-10-21 16:12:16,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans' (NotoSans-BlackItalic.ttf) italic normal black normal>) = 11.525
2019-10-21 16:12:16,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2019-10-21 16:12:16,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-MediumItalic.ttf) italic normal medium normal>) = 11.145
2019-10-21 16:12:16,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Regular.ttf) normal normal regular normal>) = 10.05
2019-10-21 16:12:16,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Medium.ttf) normal normal medium normal>) = 10.145
2019-10-21 16:12:16,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Black.ttf) normal normal black normal>) = 10.525
2019-10-21 16:12:16,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2019-10-21 16:12:16,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Bold.ttf) normal normal bold normal>) = 10.335
2019-10-21 16:12:16,537 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=20.0 to Arial ('/home/fzhu/.fonts/Arial_Normal.ttf') with score of 0.050000.
