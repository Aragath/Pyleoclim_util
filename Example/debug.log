2019-04-18 11:55:19,127 [DEBUG] matplotlib: $HOME=/Users/deborahkhider
2019-04-18 11:55:19,128 [DEBUG] matplotlib: CONFIGDIR=/Users/deborahkhider/.matplotlib
2019-04-18 11:55:19,128 [DEBUG] matplotlib: matplotlib data path: /anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data
2019-04-18 11:55:19,132 [DEBUG] matplotlib: loaded rc file /anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc
2019-04-18 11:55:19,133 [DEBUG] matplotlib: matplotlib version 3.0.2
2019-04-18 11:55:19,133 [DEBUG] matplotlib: interactive is False
2019-04-18 11:55:19,134 [DEBUG] matplotlib: platform is darwin
2019-04-18 11:55:19,134 [DEBUG] matplotlib: loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', '_sysconfigdata_x86_64_apple_darwin13_4_0', '_osx_support', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'pygments.util', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'typing', 'typing.io', 'typing.re', 'IPython.core.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'pickle', '_compat_pickle', '_pickle', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'pickleshare', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.base', 'prompt_toolkit.log', 'prompt_toolkit.eventloop.coroutine', 'prompt_toolkit.eventloop.defaults', 'prompt_toolkit.utils', 'six.moves', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'prompt_toolkit.cache', 'prompt_toolkit.eventloop.future', 'prompt_toolkit.eventloop.context', 'prompt_toolkit.eventloop.async_generator', 'six.moves.queue', 'prompt_toolkit.eventloop.event', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.filters', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.enums', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters.cli', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.document', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.layout.screen', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.vt100', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.mouse_events', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.renderer', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.patch_stdout', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.utils', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.evaluate', 'jedi.evaluate.utils', 'jedi.evaluate.imports', 'jedi.evaluate.sys_path', 'jedi.evaluate.cache', 'jedi.evaluate.base_context', 'jedi.common', 'jedi.common.context', 'jedi.evaluate.helpers', 'jedi.common.utils', 'jedi.evaluate.compiled', 'jedi.evaluate.compiled.context', 'jedi.evaluate.filters', 'jedi.evaluate.flow_analysis', 'jedi.evaluate.recursion', 'jedi.evaluate.lazy_context', 'jedi.evaluate.compiled.access', 'jedi.evaluate.compiled.getattr_static', 'jedi.evaluate.compiled.fake', 'jedi.evaluate.analysis', 'jedi.evaluate.context', 'jedi.evaluate.context.module', 'jedi.evaluate.context.klass', 'jedi.evaluate.context.function', 'jedi.evaluate.docstrings', 'jedi.evaluate.pep0484', 'jedi.evaluate.arguments', 'jedi.evaluate.context.iterable', 'jedi.evaluate.param', 'jedi.evaluate.context.asynchronous', 'jedi.evaluate.parser_cache', 'jedi.evaluate.context.instance', 'jedi.evaluate.syntax_tree', 'jedi.evaluate.finder', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.interpreter', 'jedi.evaluate.compiled.mixed', 'jedi.api.helpers', 'jedi.api.completion', 'jedi.api.environment', 'filecmp', 'jedi.evaluate.compiled.subprocess', 'jedi.evaluate.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.evaluate.usages', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_28_5', 'zmq.backend.cython.error', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'curses', '_curses', 'tornado.stack_context', 'tornado.platform', 'tornado.platform.auto', 'tornado.platform.posix', 'tornado.platform.common', 'tornado.platform.interface', 'monotonic', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.parentpoller', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'ipywidgets', 'ipywidgets._version', 'ipywidgets.widgets', 'ipywidgets.widgets.widget', 'ipywidgets.widgets.domwidget', 'ipywidgets.widgets.trait_types', 'ipywidgets.widgets.widget_layout', 'ipywidgets.widgets.widget_style', 'ipywidgets.widgets.valuewidget', 'ipywidgets.widgets.widget_core', 'ipywidgets.widgets.widget_bool', 'ipywidgets.widgets.widget_description', 'ipywidgets.widgets.widget_button', 'ipywidgets.widgets.widget_box', 'ipywidgets.widgets.docutils', 'ipywidgets.widgets.widget_float', 'ipywidgets.widgets.widget_int', 'ipywidgets.widgets.widget_color', 'ipywidgets.widgets.widget_date', 'ipywidgets.widgets.widget_output', 'ipywidgets.widgets.widget_selection', 'ipywidgets.widgets.widget_selectioncontainer', 'ipywidgets.widgets.widget_string', 'ipywidgets.widgets.widget_controller', 'ipywidgets.widgets.interaction', 'ipywidgets.widgets.widget_link', 'ipywidgets.widgets.widget_media', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'zipfile', 'lipd.loggers', 'logging.config', 'socketserver', 'lipd.directory', 'lipd.bag', 'bagit', 'pkg_resources', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'lipd.csvs', 'csv', '_csv', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing.decorators', 'numpy.testing.nose_tools', 'numpy.testing.nose_tools.decorators', 'numpy.testing.nose_tools.utils', 'numpy.lib.utils', 'numpy.testing.nosetester', 'numpy.testing.nose_tools.nosetester', 'numpy.testing.utils', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy._distributor_init', 'numpy._mklinit', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._elliptic_curve', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._errors', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._types', 'asn1crypto._ordereddict', 'asn1crypto._ffi', 'asn1crypto._perf', 'asn1crypto._perf._big_num_ctypes', 'asn1crypto.algos', 'asn1crypto.core', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.x509.general_name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.primitives.mac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'lipd.excel', 'xlrd', 'xlrd.info', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.formula', 'xlrd.book', 'xlrd.sheet', 'xlrd.formatting', 'xlrd.compdoc', 'mmap', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'distutils', 'distutils.version', 'pandas.compat.chainmap', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.np_datetime', '_cython_0_28_4', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.config', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.printing', 'pandas.core.dtypes', 'pandas.core.dtypes.inference', 'pandas.io.formats.console', 'pandas.io.formats.terminal', 'pandas.core.api', 'pandas.core.algorithms', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.missing', 'pandas.core.common', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util._validators', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'bottleneck', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.version', 'bottleneck.benchmark', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'pandas.core.missing', 'pandas.core.groupby', 'pandas.core.groupby.groupby', 'pandas.core.index', 'pandas.core.indexes', 'pandas.core.indexes.api', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.resolution', 'pandas.tseries', 'pandas.tseries.offsets', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'dateutil.easter', 'pandas._libs.tslibs.offsets', 'pandas.tseries.frequencies', 'pandas._libs.join', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.indexes.frozen', 'pandas.core.dtypes.concat', 'pandas.core.sorting', 'pandas.core.strings', 'pandas.core.indexes.category', 'pandas.core.indexes.multi', 'pandas.core.indexes.interval', 'pandas._libs.interval', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.numeric', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.range', 'pandas.core.indexes.period', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas._libs.internals', 'pandas.core.sparse', 'pandas.core.sparse.array', 'pandas._libs.sparse', 'pandas.io.formats.format', 'pandas.io.common', 'pandas.core.series', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._misc', 'pandas.plotting._style', 'pandas.plotting._compat', 'pandas.plotting._tools', 'pandas.plotting._core', 'pandas.plotting._converter', 'matplotlib', 'matplotlib.cbook', 'gzip', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version']
2019-04-18 11:55:19,354 [DEBUG] matplotlib: CACHEDIR=/Users/deborahkhider/.matplotlib
2019-04-18 11:55:19,356 [DEBUG] matplotlib.font_manager: Using fontManager instance from /Users/deborahkhider/.matplotlib/fontlist-v300.json
2019-04-18 11:55:19,522 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-04-18 11:55:20,812 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-04-18 11:55:24,616 [INFO] directory: enter list_files
2019-04-18 11:55:24,617 [INFO] directory: exit list_files
2019-04-18 11:55:24,620 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmplb855e6l
2019-04-18 11:55:24,620 [INFO] zips: enter unzip
2019-04-18 11:55:24,625 [INFO] zips: exit unzip
2019-04-18 11:55:24,656 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-04-18 11:55:24,656 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:24,657 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:24,657 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:24,657 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:24,657 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:24,658 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:24,658 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:24,658 [INFO] csvs: enter read_csvs
2019-04-18 11:55:24,658 [INFO] directory: enter list_files
2019-04-18 11:55:24,658 [INFO] directory: exit list_files
2019-04-18 11:55:24,659 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:24,659 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-04-18 11:55:24,660 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:24,660 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:24,661 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:24,664 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:24,664 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:24,664 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:24,664 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:24,666 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-18 11:55:24,667 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-18 11:55:24,667 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:24,668 [INFO] LiPD: lipd_read: record loaded: ./Arc-Yukon.D'Arrigo.2006.lpd
2019-04-18 11:55:24,669 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpfafgb_nb
2019-04-18 11:55:24,669 [INFO] zips: enter unzip
2019-04-18 11:55:24,674 [INFO] zips: exit unzip
2019-04-18 11:55:25,074 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-04-18 11:55:25,074 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:25,079 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:25,079 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:25,079 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:25,080 [INFO] jsons: enter import_data: chron
2019-04-18 11:55:25,080 [INFO] jsons: exit import_data: chron
2019-04-18 11:55:25,080 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:25,080 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:25,080 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:25,082 [INFO] csvs: enter read_csvs
2019-04-18 11:55:25,082 [INFO] directory: enter list_files
2019-04-18 11:55:25,083 [INFO] directory: exit list_files
2019-04-18 11:55:25,083 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:25,083 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-04-18 11:55:25,084 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:25,084 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:25,084 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-04-18 11:55:25,085 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:25,085 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:25,085 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-04-18 11:55:25,086 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:25,086 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:25,087 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-04-18 11:55:25,087 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:25,087 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:25,088 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:25,092 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:25,097 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:25,101 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:25,101 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:25,101 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:25,102 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-04-18 11:55:25,103 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:25,103 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:25,103 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:25,103 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:25,109 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-18 11:55:25,110 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-18 11:55:25,110 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-18 11:55:25,110 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-18 11:55:25,110 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:25,111 [INFO] LiPD: lipd_read: record loaded: ./MD97-2121.Marr.2013.lpd
2019-04-18 11:55:25,112 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpsb84jxig
2019-04-18 11:55:25,112 [INFO] zips: enter unzip
2019-04-18 11:55:25,115 [INFO] zips: exit unzip
2019-04-18 11:55:25,141 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-04-18 11:55:25,141 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:25,142 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:25,143 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:25,143 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:25,143 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:25,143 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:25,144 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:25,144 [INFO] csvs: enter read_csvs
2019-04-18 11:55:25,144 [INFO] directory: enter list_files
2019-04-18 11:55:25,145 [INFO] directory: exit list_files
2019-04-18 11:55:25,145 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:25,145 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-04-18 11:55:25,146 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:25,146 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:25,147 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:25,148 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:25,148 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:25,149 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:25,149 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:25,150 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-18 11:55:25,150 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-18 11:55:25,151 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:25,152 [INFO] LiPD: lipd_read: record loaded: ./Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-04-18 11:55:25,153 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpe_r6_45q
2019-04-18 11:55:25,153 [INFO] zips: enter unzip
2019-04-18 11:55:25,207 [INFO] zips: exit unzip
2019-04-18 11:55:25,469 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-04-18 11:55:25,469 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:25,472 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:25,472 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:25,473 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:25,473 [INFO] jsons: enter import_data: chron
2019-04-18 11:55:25,473 [INFO] jsons: enter import_model
2019-04-18 11:55:25,473 [INFO] jsons: exit import_model: chron0model
2019-04-18 11:55:25,473 [INFO] jsons: exit import_data: chron
2019-04-18 11:55:25,474 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:25,474 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:25,474 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:25,475 [INFO] csvs: enter read_csvs
2019-04-18 11:55:25,475 [INFO] directory: enter list_files
2019-04-18 11:55:25,476 [INFO] directory: exit list_files
2019-04-18 11:55:25,476 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:25,476 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-04-18 11:55:26,402 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:26,402 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:26,402 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-04-18 11:55:26,405 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:26,405 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:26,405 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:26,407 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:26,407 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:26,407 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:26,408 [INFO] csvs: enter merge_csv_model
2019-04-18 11:55:26,980 [INFO] csvs: exit merge_csv_model
2019-04-18 11:55:26,981 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:26,981 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:26,981 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:27,959 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-18 11:55:27,960 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-18 11:55:27,960 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-18 11:55:27,960 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-04-18 11:55:27,960 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-18 11:55:27,961 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:27,963 [INFO] LiPD: lipd_read: record loaded: ./Arc-LakeNataujärvi.Ojala.2005.lpd
2019-04-18 11:55:27,982 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpxrz1qtn3
2019-04-18 11:55:27,983 [INFO] zips: enter unzip
2019-04-18 11:55:28,138 [INFO] zips: exit unzip
2019-04-18 11:55:28,339 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-04-18 11:55:28,339 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:28,340 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:28,340 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:28,340 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:28,340 [INFO] jsons: enter import_data: chron
2019-04-18 11:55:28,341 [INFO] jsons: enter import_model
2019-04-18 11:55:28,341 [INFO] jsons: exit import_model: chron0model
2019-04-18 11:55:28,341 [INFO] jsons: exit import_data: chron
2019-04-18 11:55:28,341 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:28,341 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:28,341 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:28,342 [INFO] csvs: enter read_csvs
2019-04-18 11:55:28,343 [INFO] directory: enter list_files
2019-04-18 11:55:28,343 [INFO] directory: exit list_files
2019-04-18 11:55:28,343 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:28,343 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-04-18 11:55:28,344 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:28,344 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:28,344 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-04-18 11:55:28,345 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:28,346 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:28,346 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-04-18 11:55:28,434 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:28,435 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:28,435 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-04-18 11:55:28,527 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:28,527 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:28,527 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-04-18 11:55:28,618 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:28,619 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:28,619 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-04-18 11:55:28,717 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:28,718 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:28,718 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-04-18 11:55:28,804 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:28,805 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:28,805 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-04-18 11:55:28,910 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:28,910 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:28,910 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-04-18 11:55:29,004 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:29,004 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:29,005 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-04-18 11:55:29,091 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:29,092 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:29,092 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-04-18 11:55:29,185 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:29,185 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:29,186 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-04-18 11:55:29,275 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:29,275 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:29,275 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-04-18 11:55:29,416 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:29,416 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:29,417 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-04-18 11:55:29,500 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:29,500 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:29,501 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-04-18 11:55:29,502 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:29,502 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:29,502 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-04-18 11:55:29,593 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:29,594 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:29,594 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:29,597 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:29,597 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:29,598 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-04-18 11:55:29,598 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:29,598 [INFO] csvs: enter merge_csv_model
2019-04-18 11:55:29,600 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:29,718 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:29,760 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:29,791 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:29,823 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:29,856 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:29,887 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:29,918 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:29,951 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:29,985 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:30,017 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:30,051 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:30,084 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:30,084 [INFO] csvs: exit merge_csv_model
2019-04-18 11:55:30,084 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:30,085 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:30,085 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:30,861 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-18 11:55:30,861 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-18 11:55:30,862 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-04-18 11:55:30,862 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-04-18 11:55:30,862 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-04-18 11:55:30,862 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:30,866 [INFO] LiPD: lipd_read: record loaded: ./MD982176.Stott.2004.lpd
2019-04-18 11:55:30,874 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmppavl7g2m
2019-04-18 11:55:30,874 [INFO] zips: enter unzip
2019-04-18 11:55:30,877 [INFO] zips: exit unzip
2019-04-18 11:55:30,965 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-04-18 11:55:30,966 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:30,967 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:30,967 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:30,968 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:30,968 [INFO] jsons: enter import_data: chron
2019-04-18 11:55:30,968 [INFO] jsons: exit import_data: chron
2019-04-18 11:55:30,968 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:30,968 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:30,969 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:30,969 [INFO] csvs: enter read_csvs
2019-04-18 11:55:30,969 [INFO] directory: enter list_files
2019-04-18 11:55:30,970 [INFO] directory: exit list_files
2019-04-18 11:55:30,970 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:30,970 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-04-18 11:55:30,971 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:30,971 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:30,971 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-04-18 11:55:30,974 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:30,975 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:30,975 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:30,980 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:30,980 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:30,980 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:30,981 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-04-18 11:55:30,982 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-04-18 11:55:30,983 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-04-18 11:55:30,983 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:30,983 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:30,983 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:30,984 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:30,987 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-18 11:55:30,987 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-18 11:55:30,988 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-18 11:55:30,988 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-18 11:55:30,988 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:30,989 [INFO] LiPD: lipd_read: record loaded: ./Juxtlahuaca.Lachniet.2012.lpd
2019-04-18 11:55:30,989 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpaaqb0bvv
2019-04-18 11:55:30,990 [INFO] zips: enter unzip
2019-04-18 11:55:30,993 [INFO] zips: exit unzip
2019-04-18 11:55:31,022 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-04-18 11:55:31,023 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:31,023 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:31,023 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:31,023 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:31,024 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:31,024 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:31,024 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:31,024 [INFO] csvs: enter read_csvs
2019-04-18 11:55:31,025 [INFO] directory: enter list_files
2019-04-18 11:55:31,025 [INFO] directory: exit list_files
2019-04-18 11:55:31,025 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,025 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-04-18 11:55:31,026 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,026 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:31,026 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,027 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,028 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,028 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:31,028 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:31,029 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-18 11:55:31,029 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-18 11:55:31,029 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:31,030 [INFO] LiPD: lipd_read: record loaded: ./Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-04-18 11:55:31,031 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp4q303v8z
2019-04-18 11:55:31,031 [INFO] zips: enter unzip
2019-04-18 11:55:31,034 [INFO] zips: exit unzip
2019-04-18 11:55:31,067 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-04-18 11:55:31,068 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:31,068 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:31,068 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:31,068 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:31,069 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:31,069 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:31,069 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:31,069 [INFO] csvs: enter read_csvs
2019-04-18 11:55:31,069 [INFO] directory: enter list_files
2019-04-18 11:55:31,070 [INFO] directory: exit list_files
2019-04-18 11:55:31,070 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,070 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-04-18 11:55:31,072 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,072 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:31,073 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,077 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,077 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,077 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:31,078 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:31,080 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-18 11:55:31,081 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-18 11:55:31,081 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:31,082 [INFO] LiPD: lipd_read: record loaded: ./Asi-Dasuopu.Thompson.2000.lpd
2019-04-18 11:55:31,083 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpn3trzrvb
2019-04-18 11:55:31,083 [INFO] zips: enter unzip
2019-04-18 11:55:31,086 [INFO] zips: exit unzip
2019-04-18 11:55:31,113 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-04-18 11:55:31,113 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:31,114 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:31,114 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:31,114 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:31,114 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:31,114 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:31,115 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:31,115 [INFO] csvs: enter read_csvs
2019-04-18 11:55:31,115 [INFO] directory: enter list_files
2019-04-18 11:55:31,115 [INFO] directory: exit list_files
2019-04-18 11:55:31,115 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,116 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-04-18 11:55:31,116 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,117 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:31,117 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,118 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,118 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,118 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:31,118 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:31,119 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-18 11:55:31,119 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-18 11:55:31,120 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:31,120 [INFO] LiPD: lipd_read: record loaded: ./Asi-TH001.Buckley.2010.lpd
2019-04-18 11:55:31,121 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp4to9ct3i
2019-04-18 11:55:31,121 [INFO] zips: enter unzip
2019-04-18 11:55:31,124 [INFO] zips: exit unzip
2019-04-18 11:55:31,171 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-04-18 11:55:31,171 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:31,172 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:31,172 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:31,172 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:31,172 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:31,172 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:31,173 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:31,173 [INFO] csvs: enter read_csvs
2019-04-18 11:55:31,173 [INFO] directory: enter list_files
2019-04-18 11:55:31,174 [INFO] directory: exit list_files
2019-04-18 11:55:31,174 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,174 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-04-18 11:55:31,175 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,175 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,175 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-04-18 11:55:31,177 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,177 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:31,177 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,179 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-04-18 11:55:31,179 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,180 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,180 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,181 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:31,181 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:31,183 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-18 11:55:31,183 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-18 11:55:31,183 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:31,184 [INFO] LiPD: lipd_read: record loaded: ./Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-04-18 11:55:31,185 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp665n3cyc
2019-04-18 11:55:31,185 [INFO] zips: enter unzip
2019-04-18 11:55:31,188 [INFO] zips: exit unzip
2019-04-18 11:55:31,216 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-04-18 11:55:31,216 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:31,217 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:31,217 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:31,217 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:31,217 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:31,217 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:31,218 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:31,218 [INFO] csvs: enter read_csvs
2019-04-18 11:55:31,218 [INFO] directory: enter list_files
2019-04-18 11:55:31,218 [INFO] directory: exit list_files
2019-04-18 11:55:31,219 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,219 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-04-18 11:55:31,221 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,222 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:31,222 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,224 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,224 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,224 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:31,224 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:31,227 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-18 11:55:31,227 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-18 11:55:31,227 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:31,228 [INFO] LiPD: lipd_read: record loaded: ./Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-04-18 11:55:31,229 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpj_ldm4hb
2019-04-18 11:55:31,229 [INFO] zips: enter unzip
2019-04-18 11:55:31,232 [INFO] zips: exit unzip
2019-04-18 11:55:31,314 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-04-18 11:55:31,315 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:31,316 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:31,317 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:31,317 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:31,317 [INFO] jsons: enter import_data: chron
2019-04-18 11:55:31,317 [INFO] jsons: exit import_data: chron
2019-04-18 11:55:31,317 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:31,317 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:31,318 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:31,318 [INFO] csvs: enter read_csvs
2019-04-18 11:55:31,319 [INFO] directory: enter list_files
2019-04-18 11:55:31,319 [INFO] directory: exit list_files
2019-04-18 11:55:31,319 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,319 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-04-18 11:55:31,320 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,320 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,320 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-04-18 11:55:31,320 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,321 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:31,321 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,323 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,323 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,323 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,324 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-04-18 11:55:31,324 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,324 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,325 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:31,325 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:31,326 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-18 11:55:31,326 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-18 11:55:31,326 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-18 11:55:31,327 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-18 11:55:31,327 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:31,328 [INFO] LiPD: lipd_read: record loaded: ./MD98-2170.Stott.2004.lpd
2019-04-18 11:55:31,328 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpaucpp7dm
2019-04-18 11:55:31,329 [INFO] zips: enter unzip
2019-04-18 11:55:31,332 [INFO] zips: exit unzip
2019-04-18 11:55:31,442 [INFO] jsons: Read JSONLD successful: Ocn-MontegoBayJamaica.Haase-Schramm.2003.jsonld
2019-04-18 11:55:31,442 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:31,444 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:31,445 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:31,445 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:31,445 [INFO] jsons: enter import_data: chron
2019-04-18 11:55:31,446 [INFO] jsons: exit import_data: chron
2019-04-18 11:55:31,446 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:31,446 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:31,447 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:31,448 [INFO] csvs: enter read_csvs
2019-04-18 11:55:31,448 [INFO] directory: enter list_files
2019-04-18 11:55:31,448 [INFO] directory: exit list_files
2019-04-18 11:55:31,449 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,449 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo1measurement1.csv
2019-04-18 11:55:31,450 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,450 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,450 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo2measurement1.csv
2019-04-18 11:55:31,451 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,451 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,451 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron1measurement1.csv
2019-04-18 11:55:31,452 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,452 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:31,452 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,454 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,455 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,455 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,455 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,456 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,456 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:31,456 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:31,458 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-18 11:55:31,458 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-18 11:55:31,458 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-18 11:55:31,458 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-18 11:55:31,459 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:31,460 [INFO] LiPD: lipd_read: record loaded: ./Ocn-MontegoBayJamaica.Haase-Schramm.2003.lpd
2019-04-18 11:55:31,461 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpq54hy6im
2019-04-18 11:55:31,461 [INFO] zips: enter unzip
2019-04-18 11:55:31,464 [INFO] zips: exit unzip
2019-04-18 11:55:31,593 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-04-18 11:55:31,593 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:31,594 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:31,594 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:31,595 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:31,595 [INFO] jsons: enter import_data: chron
2019-04-18 11:55:31,595 [INFO] jsons: exit import_data: chron
2019-04-18 11:55:31,595 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:31,595 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:31,596 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:31,597 [INFO] csvs: enter read_csvs
2019-04-18 11:55:31,597 [INFO] directory: enter list_files
2019-04-18 11:55:31,597 [INFO] directory: exit list_files
2019-04-18 11:55:31,597 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,598 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-04-18 11:55:31,598 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,598 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,598 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-04-18 11:55:31,600 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,601 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:31,601 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,605 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,606 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,606 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,606 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-04-18 11:55:31,608 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,608 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,608 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:31,608 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:31,610 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-18 11:55:31,611 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-18 11:55:31,611 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-18 11:55:31,611 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-18 11:55:31,611 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:31,612 [INFO] LiPD: lipd_read: record loaded: ./MD01-2378.Xu.2008.lpd
2019-04-18 11:55:31,613 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpve7y_s8c
2019-04-18 11:55:31,613 [INFO] zips: enter unzip
2019-04-18 11:55:31,615 [INFO] zips: exit unzip
2019-04-18 11:55:31,649 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-04-18 11:55:31,650 [INFO] jsons: exit read_json_from_file
2019-04-18 11:55:31,650 [INFO] jsons: enter idx_num_to_name
2019-04-18 11:55:31,650 [INFO] jsons: enter import_data: paleo
2019-04-18 11:55:31,651 [INFO] jsons: exit import_data: paleo
2019-04-18 11:55:31,651 [INFO] jsons: exit idx_num_to_name
2019-04-18 11:55:31,651 [INFO] misc: enter remove_empty_doi
2019-04-18 11:55:31,651 [INFO] misc: exit remove_empty_doi
2019-04-18 11:55:31,652 [INFO] csvs: enter read_csvs
2019-04-18 11:55:31,652 [INFO] directory: enter list_files
2019-04-18 11:55:31,652 [INFO] directory: exit list_files
2019-04-18 11:55:31,652 [INFO] csvs: enter read_csv_from_file
2019-04-18 11:55:31,652 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-04-18 11:55:31,653 [INFO] csvs: exit read_csv_from_file
2019-04-18 11:55:31,653 [INFO] csvs: enter merge_csv_metadata
2019-04-18 11:55:31,653 [INFO] csvs: enter merge_csv_section
2019-04-18 11:55:31,654 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-18 11:55:31,654 [INFO] csvs: exit merge_csv_section
2019-04-18 11:55:31,655 [INFO] csvs: exit merge_csv_metadata
2019-04-18 11:55:31,655 [INFO] csvs: enter get_csv_from_metadata
2019-04-18 11:55:31,655 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-18 11:55:31,655 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-18 11:55:31,656 [INFO] csvs: exit get_csv_from_metadata
2019-04-18 11:55:31,656 [INFO] LiPD: lipd_read: record loaded: ./Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-04-18 11:55:31,657 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 7.02 seconds
2019-04-18 11:55:38,372 [INFO] time_series: enter extract_main
2019-04-18 11:55:38,373 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:38,373 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:38,374 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:38,375 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:38,375 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:38,375 [INFO] time_series: enter extract_authors
2019-04-18 11:55:38,375 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:38,375 [INFO] time_series: processing publication #: 1
2019-04-18 11:55:38,376 [INFO] time_series: enter extract_authors
2019-04-18 11:55:38,376 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:38,376 [INFO] time_series: enter extract_pc
2019-04-18 11:55:38,376 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:38,377 [INFO] time_series: enter extract_special
2019-04-18 11:55:38,378 [INFO] time_series: enter extract_columns
2019-04-18 11:55:38,379 [INFO] time_series: enter extract_columns
2019-04-18 11:55:38,379 [INFO] time_series: exit extract_main
2019-04-18 11:55:38,387 [INFO] time_series: enter extract_main
2019-04-18 11:55:38,388 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:38,388 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:38,388 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:38,389 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:38,389 [INFO] time_series: enter extract_authors
2019-04-18 11:55:38,389 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-04-18 11:55:38,389 [INFO] time_series: exit extract_main
2019-04-18 11:55:38,392 [INFO] time_series: enter extract_main
2019-04-18 11:55:38,392 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:38,393 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:38,393 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:38,393 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:38,393 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:38,393 [INFO] time_series: enter extract_authors
2019-04-18 11:55:38,394 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:38,394 [INFO] time_series: processing publication #: 1
2019-04-18 11:55:38,394 [INFO] time_series: enter extract_authors
2019-04-18 11:55:38,394 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:38,394 [INFO] time_series: enter extract_pc
2019-04-18 11:55:38,394 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:38,395 [INFO] time_series: enter extract_special
2019-04-18 11:55:38,395 [INFO] time_series: enter extract_columns
2019-04-18 11:55:38,396 [INFO] time_series: enter extract_columns
2019-04-18 11:55:38,396 [INFO] time_series: exit extract_main
2019-04-18 11:55:39,446 [INFO] time_series: enter extract_main
2019-04-18 11:55:39,447 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:39,447 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:39,447 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:39,448 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:39,448 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:39,448 [INFO] time_series: enter extract_authors
2019-04-18 11:55:39,448 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:39,448 [INFO] time_series: processing publication #: 1
2019-04-18 11:55:39,449 [INFO] time_series: enter extract_authors
2019-04-18 11:55:39,449 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:39,449 [INFO] time_series: enter extract_pc
2019-04-18 11:55:39,449 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:39,449 [INFO] time_series: enter extract_special
2019-04-18 11:55:39,451 [INFO] time_series: enter extract_columns
2019-04-18 11:55:39,453 [INFO] time_series: enter extract_columns
2019-04-18 11:55:39,453 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,387 [INFO] time_series: enter extract_main
2019-04-18 11:55:40,389 [INFO] time_series: enter _extract_funding
2019-04-18 11:55:40,389 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,389 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,389 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:40,390 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:40,390 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,390 [INFO] time_series: enter extract_pc
2019-04-18 11:55:40,390 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,390 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,391 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,392 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,392 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,393 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,393 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,394 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,394 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,407 [INFO] time_series: enter extract_main
2019-04-18 11:55:40,407 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,407 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,407 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:40,407 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:40,408 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,408 [INFO] time_series: enter extract_pc
2019-04-18 11:55:40,408 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,408 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,410 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,412 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,413 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,415 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,415 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,416 [INFO] time_series: enter extract_main
2019-04-18 11:55:40,417 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,417 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,417 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,417 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:40,417 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:40,418 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,418 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,418 [INFO] time_series: processing publication #: 1
2019-04-18 11:55:40,418 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,418 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,419 [INFO] time_series: processing publication #: 2
2019-04-18 11:55:40,419 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,419 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,419 [INFO] time_series: enter extract_pc
2019-04-18 11:55:40,420 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,420 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,421 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,421 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,421 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,424 [INFO] time_series: enter extract_main
2019-04-18 11:55:40,424 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,425 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,425 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,425 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:40,425 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:40,425 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,425 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,426 [INFO] time_series: processing publication #: 1
2019-04-18 11:55:40,426 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,426 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,426 [INFO] time_series: enter extract_pc
2019-04-18 11:55:40,426 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,427 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,427 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,428 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,429 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,429 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,430 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,430 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,431 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,432 [INFO] time_series: enter extract_main
2019-04-18 11:55:40,432 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,432 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,432 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,433 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:40,433 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:40,433 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,433 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,433 [INFO] time_series: processing publication #: 1
2019-04-18 11:55:40,434 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,434 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,434 [INFO] time_series: enter extract_pc
2019-04-18 11:55:40,434 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,434 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,435 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,435 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,436 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,438 [INFO] time_series: enter extract_main
2019-04-18 11:55:40,438 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,438 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,438 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,439 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:40,439 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:40,439 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,439 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,439 [INFO] time_series: processing publication #: 1
2019-04-18 11:55:40,439 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,440 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,440 [INFO] time_series: processing publication #: 2
2019-04-18 11:55:40,440 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,440 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,440 [INFO] time_series: enter extract_pc
2019-04-18 11:55:40,441 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,441 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,441 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,442 [INFO] time_series: enter extract_calibration
2019-04-18 11:55:40,442 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-18 11:55:40,442 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,442 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,443 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,443 [INFO] time_series: enter extract_calibration
2019-04-18 11:55:40,443 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-18 11:55:40,443 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,446 [INFO] time_series: enter extract_main
2019-04-18 11:55:40,446 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,446 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,446 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,447 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:40,447 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:40,447 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,447 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,447 [INFO] time_series: processing publication #: 1
2019-04-18 11:55:40,447 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,448 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,448 [INFO] time_series: processing publication #: 2
2019-04-18 11:55:40,448 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,448 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,448 [INFO] time_series: enter extract_pc
2019-04-18 11:55:40,448 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,449 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,450 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,452 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,452 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,453 [INFO] time_series: enter extract_main
2019-04-18 11:55:40,454 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,454 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,454 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:40,454 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:40,455 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,455 [INFO] time_series: enter extract_pc
2019-04-18 11:55:40,455 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,455 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,455 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,456 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,456 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,456 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,457 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,457 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,457 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,459 [INFO] time_series: enter extract_main
2019-04-18 11:55:40,459 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,459 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,460 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,460 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:40,460 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:40,460 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,460 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,460 [INFO] time_series: processing publication #: 1
2019-04-18 11:55:40,461 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,461 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,461 [INFO] time_series: enter extract_pc
2019-04-18 11:55:40,461 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,461 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,462 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,462 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,462 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,463 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,463 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,464 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,464 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,466 [INFO] time_series: enter extract_main
2019-04-18 11:55:40,467 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,467 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,467 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:40,467 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:40,467 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,468 [INFO] time_series: enter extract_pc
2019-04-18 11:55:40,468 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,468 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,468 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-04-18 11:55:40,469 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,469 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,470 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,470 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,471 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,471 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,472 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,472 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,472 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,473 [INFO] time_series: enter extract_main
2019-04-18 11:55:40,474 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,474 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,474 [INFO] time_series: enter ts_extract_geo
2019-04-18 11:55:40,474 [INFO] time_series: enter _extract_pub
2019-04-18 11:55:40,474 [INFO] time_series: processing publication #: 0
2019-04-18 11:55:40,474 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,475 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,475 [INFO] time_series: processing publication #: 1
2019-04-18 11:55:40,475 [INFO] time_series: enter extract_authors
2019-04-18 11:55:40,475 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-18 11:55:40,475 [INFO] time_series: enter extract_pc
2019-04-18 11:55:40,475 [INFO] time_series: enter extract_table_root
2019-04-18 11:55:40,476 [INFO] time_series: enter extract_special
2019-04-18 11:55:40,476 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,476 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,477 [INFO] time_series: enter extract_columns
2019-04-18 11:55:40,477 [INFO] time_series: exit extract_main
2019-04-18 11:55:40,477 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 2.1 seconds
2019-04-18 11:55:51,316 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-04-18 11:56:02,881 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-18 11:56:02,915 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=8.0 to DejaVu Sans ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2019-04-18 11:56:02,973 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-18 11:56:02,985 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-18 11:56:02,992 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-18 11:57:50,929 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-04-18 11:58:02,251 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-18 11:58:02,476 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-18 11:58:02,488 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-18 11:58:02,500 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:47:03,393 [DEBUG] shapely.geos: Trying `CDLL(/anaconda3/bin/../lib/libgeos_c.dylib)`
2019-04-23 14:47:03,395 [DEBUG] shapely.geos: Library path: '/anaconda3/bin/../lib/libgeos_c.dylib'
2019-04-23 14:47:03,396 [DEBUG] shapely.geos: DLL: <CDLL '/anaconda3/bin/../lib/libgeos_c.dylib', handle 7f977ca7de80 at 0x1a22206e48>
2019-04-23 14:47:03,397 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-04-23 14:47:03,397 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-04-23 14:47:03,398 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 109688e50 at 0x11b187898>
2019-04-23 14:47:04,439 [INFO] directory: enter list_files
2019-04-23 14:47:04,439 [INFO] directory: exit list_files
2019-04-23 14:47:04,442 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmppokjqbhq
2019-04-23 14:47:04,442 [INFO] zips: enter unzip
2019-04-23 14:47:04,447 [INFO] zips: exit unzip
2019-04-23 14:47:04,475 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-04-23 14:47:04,475 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:04,476 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:04,476 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:04,477 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:04,477 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:04,477 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:04,478 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:04,478 [INFO] csvs: enter read_csvs
2019-04-23 14:47:04,478 [INFO] directory: enter list_files
2019-04-23 14:47:04,479 [INFO] directory: exit list_files
2019-04-23 14:47:04,479 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:04,479 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-04-23 14:47:04,480 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:04,481 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:04,481 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:04,483 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:04,483 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:04,483 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:04,484 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:04,485 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 14:47:04,485 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 14:47:04,485 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:04,486 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-04-23 14:47:04,487 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpchypmkbr
2019-04-23 14:47:04,487 [INFO] zips: enter unzip
2019-04-23 14:47:04,492 [INFO] zips: exit unzip
2019-04-23 14:47:04,919 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-04-23 14:47:04,919 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:04,927 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:04,927 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:04,928 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:04,928 [INFO] jsons: enter import_data: chron
2019-04-23 14:47:04,929 [INFO] jsons: exit import_data: chron
2019-04-23 14:47:04,929 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:04,929 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:04,929 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:04,932 [INFO] csvs: enter read_csvs
2019-04-23 14:47:04,932 [INFO] directory: enter list_files
2019-04-23 14:47:04,933 [INFO] directory: exit list_files
2019-04-23 14:47:04,933 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:04,933 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-04-23 14:47:04,934 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:04,934 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:04,934 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-04-23 14:47:04,936 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:04,936 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:04,936 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-04-23 14:47:04,937 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:04,937 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:04,938 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-04-23 14:47:04,938 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:04,939 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:04,939 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:04,945 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:04,951 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:04,957 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:04,957 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:04,958 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:04,958 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-04-23 14:47:04,959 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:04,960 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:04,960 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:04,960 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:04,966 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 14:47:04,967 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 14:47:04,967 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 14:47:04,967 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 14:47:04,967 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:04,969 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-04-23 14:47:04,969 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp_jbmhb5e
2019-04-23 14:47:04,970 [INFO] zips: enter unzip
2019-04-23 14:47:04,973 [INFO] zips: exit unzip
2019-04-23 14:47:04,998 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-04-23 14:47:04,998 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:04,999 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:04,999 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:04,999 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:04,999 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:04,999 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:05,000 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:05,000 [INFO] csvs: enter read_csvs
2019-04-23 14:47:05,000 [INFO] directory: enter list_files
2019-04-23 14:47:05,001 [INFO] directory: exit list_files
2019-04-23 14:47:05,001 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:05,001 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-04-23 14:47:05,003 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:05,003 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:05,003 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:05,005 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:05,005 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:05,005 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:05,005 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:05,007 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 14:47:05,007 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 14:47:05,007 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:05,008 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-04-23 14:47:05,009 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpap0da8kw
2019-04-23 14:47:05,010 [INFO] zips: enter unzip
2019-04-23 14:47:05,060 [INFO] zips: exit unzip
2019-04-23 14:47:05,325 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-04-23 14:47:05,326 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:05,330 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:05,330 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:05,330 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:05,331 [INFO] jsons: enter import_data: chron
2019-04-23 14:47:05,331 [INFO] jsons: enter import_model
2019-04-23 14:47:05,331 [INFO] jsons: exit import_model: chron0model
2019-04-23 14:47:05,331 [INFO] jsons: exit import_data: chron
2019-04-23 14:47:05,332 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:05,332 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:05,332 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:05,334 [INFO] csvs: enter read_csvs
2019-04-23 14:47:05,334 [INFO] directory: enter list_files
2019-04-23 14:47:05,334 [INFO] directory: exit list_files
2019-04-23 14:47:05,335 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:05,335 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-04-23 14:47:06,194 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:06,195 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:06,195 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-04-23 14:47:06,198 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:06,198 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:06,198 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:06,201 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:06,201 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:06,201 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:06,201 [INFO] csvs: enter merge_csv_model
2019-04-23 14:47:06,698 [INFO] csvs: exit merge_csv_model
2019-04-23 14:47:06,699 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:06,699 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:06,699 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:07,678 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 14:47:07,679 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 14:47:07,679 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 14:47:07,679 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-04-23 14:47:07,680 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 14:47:07,680 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:07,683 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-04-23 14:47:07,704 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpz_47697l
2019-04-23 14:47:07,704 [INFO] zips: enter unzip
2019-04-23 14:47:07,856 [INFO] zips: exit unzip
2019-04-23 14:47:08,064 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-04-23 14:47:08,065 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:08,066 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:08,067 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:08,067 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:08,067 [INFO] jsons: enter import_data: chron
2019-04-23 14:47:08,067 [INFO] jsons: enter import_model
2019-04-23 14:47:08,068 [INFO] jsons: exit import_model: chron0model
2019-04-23 14:47:08,068 [INFO] jsons: exit import_data: chron
2019-04-23 14:47:08,068 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:08,068 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:08,068 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:08,069 [INFO] csvs: enter read_csvs
2019-04-23 14:47:08,070 [INFO] directory: enter list_files
2019-04-23 14:47:08,070 [INFO] directory: exit list_files
2019-04-23 14:47:08,070 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,070 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-04-23 14:47:08,071 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:08,071 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,072 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-04-23 14:47:08,073 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:08,073 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,073 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-04-23 14:47:08,163 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:08,163 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,164 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-04-23 14:47:08,257 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:08,258 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,258 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-04-23 14:47:08,351 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:08,352 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,353 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-04-23 14:47:08,455 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:08,455 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,456 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-04-23 14:47:08,555 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:08,556 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,556 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-04-23 14:47:08,656 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:08,657 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,657 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-04-23 14:47:08,753 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:08,754 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,754 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-04-23 14:47:08,846 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:08,847 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,847 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-04-23 14:47:08,933 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:08,934 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:08,934 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-04-23 14:47:09,024 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:09,025 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:09,025 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-04-23 14:47:09,163 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:09,163 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:09,164 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-04-23 14:47:09,253 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:09,254 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:09,254 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-04-23 14:47:09,255 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:09,255 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:09,255 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-04-23 14:47:09,340 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:09,341 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:09,341 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:09,345 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:09,345 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:09,346 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-04-23 14:47:09,346 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,347 [INFO] csvs: enter merge_csv_model
2019-04-23 14:47:09,348 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,452 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,487 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,519 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,551 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,583 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,615 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,648 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,683 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,724 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,759 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,794 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,828 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:09,828 [INFO] csvs: exit merge_csv_model
2019-04-23 14:47:09,829 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:09,829 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:09,829 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:10,646 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 14:47:10,647 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 14:47:10,647 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 14:47:10,647 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-04-23 14:47:10,647 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 14:47:10,648 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:10,650 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-04-23 14:47:10,658 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpdr7wuu1u
2019-04-23 14:47:10,658 [INFO] zips: enter unzip
2019-04-23 14:47:10,662 [INFO] zips: exit unzip
2019-04-23 14:47:10,756 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-04-23 14:47:10,756 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:10,758 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:10,758 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:10,758 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:10,759 [INFO] jsons: enter import_data: chron
2019-04-23 14:47:10,759 [INFO] jsons: exit import_data: chron
2019-04-23 14:47:10,759 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:10,759 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:10,760 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:10,760 [INFO] csvs: enter read_csvs
2019-04-23 14:47:10,761 [INFO] directory: enter list_files
2019-04-23 14:47:10,761 [INFO] directory: exit list_files
2019-04-23 14:47:10,761 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:10,761 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-04-23 14:47:10,762 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:10,762 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:10,762 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-04-23 14:47:10,766 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:10,767 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:10,767 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:10,773 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:10,774 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:10,774 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:10,776 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-04-23 14:47:10,777 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-04-23 14:47:10,778 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-04-23 14:47:10,778 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:10,779 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:10,779 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:10,779 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:10,784 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 14:47:10,784 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 14:47:10,785 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 14:47:10,785 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 14:47:10,785 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:10,786 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-04-23 14:47:10,787 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp8k87pilc
2019-04-23 14:47:10,787 [INFO] zips: enter unzip
2019-04-23 14:47:10,791 [INFO] zips: exit unzip
2019-04-23 14:47:10,828 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-04-23 14:47:10,829 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:10,829 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:10,830 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:10,830 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:10,830 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:10,831 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:10,831 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:10,832 [INFO] csvs: enter read_csvs
2019-04-23 14:47:10,832 [INFO] directory: enter list_files
2019-04-23 14:47:10,832 [INFO] directory: exit list_files
2019-04-23 14:47:10,832 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:10,833 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-04-23 14:47:10,834 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:10,834 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:10,834 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:10,836 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:10,837 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:10,837 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:10,837 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:10,839 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 14:47:10,839 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 14:47:10,839 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:10,840 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-04-23 14:47:10,841 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpqney4y7t
2019-04-23 14:47:10,841 [INFO] zips: enter unzip
2019-04-23 14:47:10,845 [INFO] zips: exit unzip
2019-04-23 14:47:10,891 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-04-23 14:47:10,891 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:10,892 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:10,892 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:10,892 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:10,892 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:10,893 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:10,893 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:10,893 [INFO] csvs: enter read_csvs
2019-04-23 14:47:10,893 [INFO] directory: enter list_files
2019-04-23 14:47:10,894 [INFO] directory: exit list_files
2019-04-23 14:47:10,894 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:10,894 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-04-23 14:47:10,896 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:10,896 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:10,896 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:10,900 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:10,900 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:10,900 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:10,900 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:10,903 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 14:47:10,903 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 14:47:10,904 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:10,905 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-04-23 14:47:10,906 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp9_cm5tys
2019-04-23 14:47:10,906 [INFO] zips: enter unzip
2019-04-23 14:47:10,909 [INFO] zips: exit unzip
2019-04-23 14:47:10,937 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-04-23 14:47:10,937 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:10,938 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:10,938 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:10,938 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:10,938 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:10,939 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:10,939 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:10,939 [INFO] csvs: enter read_csvs
2019-04-23 14:47:10,939 [INFO] directory: enter list_files
2019-04-23 14:47:10,940 [INFO] directory: exit list_files
2019-04-23 14:47:10,940 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:10,940 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-04-23 14:47:10,941 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:10,941 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:10,941 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:10,943 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:10,943 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:10,943 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:10,943 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:10,944 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 14:47:10,944 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 14:47:10,945 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:10,946 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-04-23 14:47:10,946 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmphunplpru
2019-04-23 14:47:10,946 [INFO] zips: enter unzip
2019-04-23 14:47:10,951 [INFO] zips: exit unzip
2019-04-23 14:47:11,018 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-04-23 14:47:11,018 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:11,019 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:11,019 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:11,019 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:11,020 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:11,020 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:11,020 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:11,021 [INFO] csvs: enter read_csvs
2019-04-23 14:47:11,021 [INFO] directory: enter list_files
2019-04-23 14:47:11,021 [INFO] directory: exit list_files
2019-04-23 14:47:11,022 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:11,022 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-04-23 14:47:11,023 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:11,023 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:11,024 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-04-23 14:47:11,025 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:11,026 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:11,026 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:11,028 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-04-23 14:47:11,028 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:11,030 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:11,030 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:11,030 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:11,030 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:11,032 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 14:47:11,033 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 14:47:11,033 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:11,034 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-04-23 14:47:11,034 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpnof_avaa
2019-04-23 14:47:11,035 [INFO] zips: enter unzip
2019-04-23 14:47:11,037 [INFO] zips: exit unzip
2019-04-23 14:47:11,068 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-04-23 14:47:11,069 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:11,069 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:11,069 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:11,070 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:11,070 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:11,070 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:11,070 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:11,071 [INFO] csvs: enter read_csvs
2019-04-23 14:47:11,071 [INFO] directory: enter list_files
2019-04-23 14:47:11,071 [INFO] directory: exit list_files
2019-04-23 14:47:11,071 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:11,071 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-04-23 14:47:11,074 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:11,074 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:11,075 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:11,077 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:11,077 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:11,077 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:11,077 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:11,080 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 14:47:11,080 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 14:47:11,081 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:11,082 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-04-23 14:47:11,082 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpfc4kn16n
2019-04-23 14:47:11,082 [INFO] zips: enter unzip
2019-04-23 14:47:11,085 [INFO] zips: exit unzip
2019-04-23 14:47:11,178 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-04-23 14:47:11,178 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:11,180 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:11,180 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:11,180 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:11,180 [INFO] jsons: enter import_data: chron
2019-04-23 14:47:11,181 [INFO] jsons: exit import_data: chron
2019-04-23 14:47:11,181 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:11,181 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:11,181 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:11,182 [INFO] csvs: enter read_csvs
2019-04-23 14:47:11,182 [INFO] directory: enter list_files
2019-04-23 14:47:11,182 [INFO] directory: exit list_files
2019-04-23 14:47:11,182 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:11,183 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-04-23 14:47:11,183 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:11,183 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:11,183 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-04-23 14:47:11,184 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:11,184 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:11,184 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:11,186 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:11,186 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:11,187 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:11,187 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-04-23 14:47:11,188 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:11,188 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:11,188 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:11,188 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:11,190 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 14:47:11,190 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 14:47:11,190 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 14:47:11,191 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 14:47:11,191 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:11,192 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-04-23 14:47:11,193 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp0bet0348
2019-04-23 14:47:11,193 [INFO] zips: enter unzip
2019-04-23 14:47:11,197 [INFO] zips: exit unzip
2019-04-23 14:47:11,274 [INFO] jsons: Read JSONLD successful: Ocn-MontegoBayJamaica.Haase-Schramm.2003.jsonld
2019-04-23 14:47:11,275 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:11,276 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:11,276 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:11,277 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:11,277 [INFO] jsons: enter import_data: chron
2019-04-23 14:47:11,277 [INFO] jsons: exit import_data: chron
2019-04-23 14:47:11,278 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:11,278 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:11,278 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:11,279 [INFO] csvs: enter read_csvs
2019-04-23 14:47:11,279 [INFO] directory: enter list_files
2019-04-23 14:47:11,280 [INFO] directory: exit list_files
2019-04-23 14:47:11,280 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:11,280 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo1measurement1.csv
2019-04-23 14:47:11,281 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:11,281 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:11,281 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo2measurement1.csv
2019-04-23 14:47:11,282 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:11,282 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:11,283 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron1measurement1.csv
2019-04-23 14:47:11,283 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:11,283 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:11,283 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:11,284 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:11,285 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:11,286 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:11,286 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:11,286 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:11,287 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:11,287 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:11,288 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 14:47:11,288 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 14:47:11,289 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 14:47:11,289 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 14:47:11,289 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:11,290 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MontegoBayJamaica.Haase-Schramm.2003.lpd
2019-04-23 14:47:11,291 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpw3xzrl8f
2019-04-23 14:47:11,291 [INFO] zips: enter unzip
2019-04-23 14:47:11,294 [INFO] zips: exit unzip
2019-04-23 14:47:11,413 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-04-23 14:47:11,414 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:11,415 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:11,415 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:11,416 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:11,416 [INFO] jsons: enter import_data: chron
2019-04-23 14:47:11,416 [INFO] jsons: exit import_data: chron
2019-04-23 14:47:11,416 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:11,417 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:11,417 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:11,418 [INFO] csvs: enter read_csvs
2019-04-23 14:47:11,418 [INFO] directory: enter list_files
2019-04-23 14:47:11,418 [INFO] directory: exit list_files
2019-04-23 14:47:11,419 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:11,419 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-04-23 14:47:11,419 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:11,420 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:11,420 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-04-23 14:47:11,421 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:11,422 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:11,422 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:11,427 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:11,427 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:11,427 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:11,428 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-04-23 14:47:11,429 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:11,429 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:11,429 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:11,430 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:11,432 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 14:47:11,432 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 14:47:11,432 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 14:47:11,433 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 14:47:11,433 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:11,434 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-04-23 14:47:11,435 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpx5ckf3p_
2019-04-23 14:47:11,435 [INFO] zips: enter unzip
2019-04-23 14:47:11,438 [INFO] zips: exit unzip
2019-04-23 14:47:11,469 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-04-23 14:47:11,469 [INFO] jsons: exit read_json_from_file
2019-04-23 14:47:11,470 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:47:11,470 [INFO] jsons: enter import_data: paleo
2019-04-23 14:47:11,470 [INFO] jsons: exit import_data: paleo
2019-04-23 14:47:11,471 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:47:11,471 [INFO] misc: enter remove_empty_doi
2019-04-23 14:47:11,471 [INFO] misc: exit remove_empty_doi
2019-04-23 14:47:11,471 [INFO] csvs: enter read_csvs
2019-04-23 14:47:11,472 [INFO] directory: enter list_files
2019-04-23 14:47:11,472 [INFO] directory: exit list_files
2019-04-23 14:47:11,472 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:47:11,472 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-04-23 14:47:11,473 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:47:11,473 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:47:11,473 [INFO] csvs: enter merge_csv_section
2019-04-23 14:47:11,475 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:47:11,475 [INFO] csvs: exit merge_csv_section
2019-04-23 14:47:11,475 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:47:11,475 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:47:11,476 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 14:47:11,476 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 14:47:11,477 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:47:11,478 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-04-23 14:47:11,478 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.99 seconds
2019-04-23 14:47:11,480 [INFO] time_series: enter extract_main
2019-04-23 14:47:11,481 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:11,481 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:11,482 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:11,482 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:11,482 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:11,482 [INFO] time_series: enter extract_authors
2019-04-23 14:47:11,483 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:11,483 [INFO] time_series: processing publication #: 1
2019-04-23 14:47:11,483 [INFO] time_series: enter extract_authors
2019-04-23 14:47:11,483 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:11,484 [INFO] time_series: enter extract_pc
2019-04-23 14:47:11,484 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:11,484 [INFO] time_series: enter extract_special
2019-04-23 14:47:11,485 [INFO] time_series: enter extract_columns
2019-04-23 14:47:11,486 [INFO] time_series: enter extract_columns
2019-04-23 14:47:11,486 [INFO] time_series: exit extract_main
2019-04-23 14:47:11,492 [INFO] time_series: enter extract_main
2019-04-23 14:47:11,493 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:11,493 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:11,493 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:11,494 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:11,494 [INFO] time_series: enter extract_authors
2019-04-23 14:47:11,494 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-04-23 14:47:11,494 [INFO] time_series: exit extract_main
2019-04-23 14:47:11,496 [INFO] time_series: enter extract_main
2019-04-23 14:47:11,496 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:11,497 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:11,497 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:11,497 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:11,497 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:11,498 [INFO] time_series: enter extract_authors
2019-04-23 14:47:11,498 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:11,498 [INFO] time_series: processing publication #: 1
2019-04-23 14:47:11,498 [INFO] time_series: enter extract_authors
2019-04-23 14:47:11,498 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:11,499 [INFO] time_series: enter extract_pc
2019-04-23 14:47:11,499 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:11,499 [INFO] time_series: enter extract_special
2019-04-23 14:47:11,500 [INFO] time_series: enter extract_columns
2019-04-23 14:47:11,501 [INFO] time_series: enter extract_columns
2019-04-23 14:47:11,501 [INFO] time_series: exit extract_main
2019-04-23 14:47:12,521 [INFO] time_series: enter extract_main
2019-04-23 14:47:12,521 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:12,522 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:12,522 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:12,522 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:12,522 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:12,522 [INFO] time_series: enter extract_authors
2019-04-23 14:47:12,523 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:12,523 [INFO] time_series: processing publication #: 1
2019-04-23 14:47:12,523 [INFO] time_series: enter extract_authors
2019-04-23 14:47:12,523 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:12,524 [INFO] time_series: enter extract_pc
2019-04-23 14:47:12,524 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:12,524 [INFO] time_series: enter extract_special
2019-04-23 14:47:12,525 [INFO] time_series: enter extract_columns
2019-04-23 14:47:12,527 [INFO] time_series: enter extract_columns
2019-04-23 14:47:12,527 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,391 [INFO] time_series: enter extract_main
2019-04-23 14:47:13,391 [INFO] time_series: enter _extract_funding
2019-04-23 14:47:13,391 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,392 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,392 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:13,392 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:13,392 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,393 [INFO] time_series: enter extract_pc
2019-04-23 14:47:13,393 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,393 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,394 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,394 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,395 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,396 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,396 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,397 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,397 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,409 [INFO] time_series: enter extract_main
2019-04-23 14:47:13,409 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,409 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,410 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:13,410 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:13,410 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,410 [INFO] time_series: enter extract_pc
2019-04-23 14:47:13,410 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,411 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,412 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,414 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,416 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,418 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,418 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,419 [INFO] time_series: enter extract_main
2019-04-23 14:47:13,420 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,420 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,420 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,421 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:13,421 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:13,421 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,421 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,422 [INFO] time_series: processing publication #: 1
2019-04-23 14:47:13,422 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,422 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,422 [INFO] time_series: processing publication #: 2
2019-04-23 14:47:13,422 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,423 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,423 [INFO] time_series: enter extract_pc
2019-04-23 14:47:13,424 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,424 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,425 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,426 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,426 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,428 [INFO] time_series: enter extract_main
2019-04-23 14:47:13,429 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,429 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,429 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,429 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:13,430 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:13,430 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,430 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,430 [INFO] time_series: processing publication #: 1
2019-04-23 14:47:13,430 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,431 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,431 [INFO] time_series: enter extract_pc
2019-04-23 14:47:13,431 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,431 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,432 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,433 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,433 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,434 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,435 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,435 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,436 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,437 [INFO] time_series: enter extract_main
2019-04-23 14:47:13,437 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,437 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,437 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,438 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:13,438 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:13,438 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,438 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,439 [INFO] time_series: processing publication #: 1
2019-04-23 14:47:13,439 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,439 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,439 [INFO] time_series: enter extract_pc
2019-04-23 14:47:13,440 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,440 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,441 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,441 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,442 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,444 [INFO] time_series: enter extract_main
2019-04-23 14:47:13,444 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,445 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,445 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,445 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:13,445 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:13,445 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,446 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,446 [INFO] time_series: processing publication #: 1
2019-04-23 14:47:13,446 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,446 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,446 [INFO] time_series: processing publication #: 2
2019-04-23 14:47:13,447 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,447 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,447 [INFO] time_series: enter extract_pc
2019-04-23 14:47:13,447 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,448 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,448 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,448 [INFO] time_series: enter extract_calibration
2019-04-23 14:47:13,449 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 14:47:13,449 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,449 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,450 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,450 [INFO] time_series: enter extract_calibration
2019-04-23 14:47:13,450 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 14:47:13,450 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,453 [INFO] time_series: enter extract_main
2019-04-23 14:47:13,454 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,454 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,454 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,454 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:13,454 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:13,455 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,455 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,455 [INFO] time_series: processing publication #: 1
2019-04-23 14:47:13,455 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,455 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,456 [INFO] time_series: processing publication #: 2
2019-04-23 14:47:13,456 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,456 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,456 [INFO] time_series: enter extract_pc
2019-04-23 14:47:13,456 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,457 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,458 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,459 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,459 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,461 [INFO] time_series: enter extract_main
2019-04-23 14:47:13,461 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,461 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,462 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:13,462 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:13,462 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,462 [INFO] time_series: enter extract_pc
2019-04-23 14:47:13,462 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,463 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,463 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,463 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,464 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,464 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,464 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,465 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,465 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,466 [INFO] time_series: enter extract_main
2019-04-23 14:47:13,467 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,467 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,467 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,467 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:13,467 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:13,468 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,468 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,468 [INFO] time_series: processing publication #: 1
2019-04-23 14:47:13,468 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,468 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,469 [INFO] time_series: enter extract_pc
2019-04-23 14:47:13,469 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,469 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,470 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,470 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,471 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,471 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,472 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,472 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,472 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,475 [INFO] time_series: enter extract_main
2019-04-23 14:47:13,476 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,476 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,476 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:13,476 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:13,477 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,477 [INFO] time_series: enter extract_pc
2019-04-23 14:47:13,477 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,478 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,478 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-04-23 14:47:13,479 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,479 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,480 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,481 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,481 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,482 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,482 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,483 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,483 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,484 [INFO] time_series: enter extract_main
2019-04-23 14:47:13,485 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,485 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,485 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:47:13,485 [INFO] time_series: enter _extract_pub
2019-04-23 14:47:13,486 [INFO] time_series: processing publication #: 0
2019-04-23 14:47:13,486 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,486 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,486 [INFO] time_series: processing publication #: 1
2019-04-23 14:47:13,486 [INFO] time_series: enter extract_authors
2019-04-23 14:47:13,487 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:47:13,487 [INFO] time_series: enter extract_pc
2019-04-23 14:47:13,487 [INFO] time_series: enter extract_table_root
2019-04-23 14:47:13,487 [INFO] time_series: enter extract_special
2019-04-23 14:47:13,488 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,488 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,489 [INFO] time_series: enter extract_columns
2019-04-23 14:47:13,489 [INFO] time_series: exit extract_main
2019-04-23 14:47:13,489 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 2.0 seconds
2019-04-23 14:50:36,879 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:50:36,931 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:50:36,957 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:50:36,959 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:50:36,961 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:53:58,989 [DEBUG] shapely.geos: Trying `CDLL(/anaconda3/bin/../lib/libgeos_c.dylib)`
2019-04-23 14:53:58,990 [DEBUG] shapely.geos: Library path: '/anaconda3/bin/../lib/libgeos_c.dylib'
2019-04-23 14:53:58,991 [DEBUG] shapely.geos: DLL: <CDLL '/anaconda3/bin/../lib/libgeos_c.dylib', handle 7fc7b22f9da0 at 0x1a1e18bf60>
2019-04-23 14:53:58,992 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-04-23 14:53:58,993 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-04-23 14:53:58,993 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 109f9fe50 at 0x1170cd860>
2019-04-23 14:53:59,490 [INFO] directory: enter list_files
2019-04-23 14:53:59,491 [INFO] directory: exit list_files
2019-04-23 14:53:59,494 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpb5lo1icj
2019-04-23 14:53:59,494 [INFO] zips: enter unzip
2019-04-23 14:53:59,497 [INFO] zips: exit unzip
2019-04-23 14:53:59,523 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-04-23 14:53:59,524 [INFO] jsons: exit read_json_from_file
2019-04-23 14:53:59,524 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:53:59,524 [INFO] jsons: enter import_data: paleo
2019-04-23 14:53:59,524 [INFO] jsons: exit import_data: paleo
2019-04-23 14:53:59,525 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:53:59,525 [INFO] misc: enter remove_empty_doi
2019-04-23 14:53:59,525 [INFO] misc: exit remove_empty_doi
2019-04-23 14:53:59,526 [INFO] csvs: enter read_csvs
2019-04-23 14:53:59,526 [INFO] directory: enter list_files
2019-04-23 14:53:59,526 [INFO] directory: exit list_files
2019-04-23 14:53:59,526 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:53:59,526 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-04-23 14:53:59,528 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:53:59,528 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:53:59,528 [INFO] csvs: enter merge_csv_section
2019-04-23 14:53:59,530 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:53:59,530 [INFO] csvs: exit merge_csv_section
2019-04-23 14:53:59,530 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:53:59,531 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:53:59,532 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 14:53:59,532 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 14:53:59,532 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:53:59,533 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-04-23 14:53:59,534 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpmwn4jefh
2019-04-23 14:53:59,535 [INFO] zips: enter unzip
2019-04-23 14:53:59,539 [INFO] zips: exit unzip
2019-04-23 14:53:59,970 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-04-23 14:53:59,971 [INFO] jsons: exit read_json_from_file
2019-04-23 14:53:59,975 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:53:59,975 [INFO] jsons: enter import_data: paleo
2019-04-23 14:53:59,975 [INFO] jsons: exit import_data: paleo
2019-04-23 14:53:59,976 [INFO] jsons: enter import_data: chron
2019-04-23 14:53:59,976 [INFO] jsons: exit import_data: chron
2019-04-23 14:53:59,976 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:53:59,976 [INFO] misc: enter remove_empty_doi
2019-04-23 14:53:59,977 [INFO] misc: exit remove_empty_doi
2019-04-23 14:53:59,978 [INFO] csvs: enter read_csvs
2019-04-23 14:53:59,979 [INFO] directory: enter list_files
2019-04-23 14:53:59,979 [INFO] directory: exit list_files
2019-04-23 14:53:59,979 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:53:59,979 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-04-23 14:53:59,980 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:53:59,980 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:53:59,980 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-04-23 14:53:59,981 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:53:59,982 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:53:59,982 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-04-23 14:53:59,983 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:53:59,983 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:53:59,983 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-04-23 14:53:59,984 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:53:59,984 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:53:59,984 [INFO] csvs: enter merge_csv_section
2019-04-23 14:53:59,990 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:53:59,996 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:00,002 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:00,002 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:00,003 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:00,004 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-04-23 14:54:00,005 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:00,005 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:00,005 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:00,006 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:00,012 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 14:54:00,012 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 14:54:00,012 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 14:54:00,013 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 14:54:00,013 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:00,014 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-04-23 14:54:00,015 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp5sutff4r
2019-04-23 14:54:00,015 [INFO] zips: enter unzip
2019-04-23 14:54:00,017 [INFO] zips: exit unzip
2019-04-23 14:54:00,042 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-04-23 14:54:00,043 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:00,043 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:00,043 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:00,044 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:00,044 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:00,044 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:00,044 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:00,045 [INFO] csvs: enter read_csvs
2019-04-23 14:54:00,045 [INFO] directory: enter list_files
2019-04-23 14:54:00,045 [INFO] directory: exit list_files
2019-04-23 14:54:00,045 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:00,045 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-04-23 14:54:00,047 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:00,047 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:00,047 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:00,049 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:00,049 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:00,049 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:00,049 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:00,051 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 14:54:00,051 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 14:54:00,051 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:00,052 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-04-23 14:54:00,053 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpbu4vf30k
2019-04-23 14:54:00,054 [INFO] zips: enter unzip
2019-04-23 14:54:00,101 [INFO] zips: exit unzip
2019-04-23 14:54:00,350 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-04-23 14:54:00,351 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:00,354 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:00,355 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:00,355 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:00,355 [INFO] jsons: enter import_data: chron
2019-04-23 14:54:00,355 [INFO] jsons: enter import_model
2019-04-23 14:54:00,355 [INFO] jsons: exit import_model: chron0model
2019-04-23 14:54:00,356 [INFO] jsons: exit import_data: chron
2019-04-23 14:54:00,356 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:00,356 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:00,356 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:00,357 [INFO] csvs: enter read_csvs
2019-04-23 14:54:00,358 [INFO] directory: enter list_files
2019-04-23 14:54:00,358 [INFO] directory: exit list_files
2019-04-23 14:54:00,358 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:00,358 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-04-23 14:54:01,216 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:01,217 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:01,217 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-04-23 14:54:01,221 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:01,221 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:01,221 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:01,225 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:01,225 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:01,225 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:01,225 [INFO] csvs: enter merge_csv_model
2019-04-23 14:54:01,724 [INFO] csvs: exit merge_csv_model
2019-04-23 14:54:01,725 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:01,725 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:01,725 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:02,682 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 14:54:02,683 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 14:54:02,683 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 14:54:02,684 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-04-23 14:54:02,684 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 14:54:02,684 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:02,688 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-04-23 14:54:02,708 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp48uh105e
2019-04-23 14:54:02,708 [INFO] zips: enter unzip
2019-04-23 14:54:02,850 [INFO] zips: exit unzip
2019-04-23 14:54:03,032 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-04-23 14:54:03,033 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:03,034 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:03,034 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:03,034 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:03,034 [INFO] jsons: enter import_data: chron
2019-04-23 14:54:03,035 [INFO] jsons: enter import_model
2019-04-23 14:54:03,035 [INFO] jsons: exit import_model: chron0model
2019-04-23 14:54:03,035 [INFO] jsons: exit import_data: chron
2019-04-23 14:54:03,036 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:03,036 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:03,036 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:03,037 [INFO] csvs: enter read_csvs
2019-04-23 14:54:03,037 [INFO] directory: enter list_files
2019-04-23 14:54:03,038 [INFO] directory: exit list_files
2019-04-23 14:54:03,038 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,038 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-04-23 14:54:03,039 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,040 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,040 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-04-23 14:54:03,041 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,041 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,041 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-04-23 14:54:03,126 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,127 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,127 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-04-23 14:54:03,208 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,208 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,209 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-04-23 14:54:03,293 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,294 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,294 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-04-23 14:54:03,388 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,389 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,389 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-04-23 14:54:03,481 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,482 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,483 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-04-23 14:54:03,566 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,566 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,567 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-04-23 14:54:03,649 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,649 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,650 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-04-23 14:54:03,732 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,733 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,733 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-04-23 14:54:03,813 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,814 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,814 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-04-23 14:54:03,900 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:03,901 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:03,901 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-04-23 14:54:04,040 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:04,040 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:04,041 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-04-23 14:54:04,122 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:04,123 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:04,124 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-04-23 14:54:04,124 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:04,125 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:04,125 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-04-23 14:54:04,213 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:04,214 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:04,214 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:04,217 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:04,218 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:04,218 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-04-23 14:54:04,219 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,219 [INFO] csvs: enter merge_csv_model
2019-04-23 14:54:04,220 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,319 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,350 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,381 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,412 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,444 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,476 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,507 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,539 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,571 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,603 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,635 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,666 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:04,666 [INFO] csvs: exit merge_csv_model
2019-04-23 14:54:04,666 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:04,667 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:04,667 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:05,398 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 14:54:05,400 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 14:54:05,400 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 14:54:05,401 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-04-23 14:54:05,401 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 14:54:05,401 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:05,405 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-04-23 14:54:05,416 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpbwgzslu0
2019-04-23 14:54:05,416 [INFO] zips: enter unzip
2019-04-23 14:54:05,420 [INFO] zips: exit unzip
2019-04-23 14:54:05,504 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-04-23 14:54:05,504 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:05,506 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:05,506 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:05,507 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:05,507 [INFO] jsons: enter import_data: chron
2019-04-23 14:54:05,507 [INFO] jsons: exit import_data: chron
2019-04-23 14:54:05,507 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:05,507 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:05,508 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:05,508 [INFO] csvs: enter read_csvs
2019-04-23 14:54:05,509 [INFO] directory: enter list_files
2019-04-23 14:54:05,509 [INFO] directory: exit list_files
2019-04-23 14:54:05,509 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,509 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-04-23 14:54:05,510 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,510 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,510 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-04-23 14:54:05,513 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,514 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:05,514 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:05,519 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,519 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:05,519 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:05,520 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-04-23 14:54:05,521 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-04-23 14:54:05,522 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-04-23 14:54:05,522 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,522 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:05,523 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:05,523 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:05,527 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 14:54:05,527 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 14:54:05,527 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 14:54:05,527 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 14:54:05,527 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:05,528 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-04-23 14:54:05,529 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp19lv4pkj
2019-04-23 14:54:05,529 [INFO] zips: enter unzip
2019-04-23 14:54:05,531 [INFO] zips: exit unzip
2019-04-23 14:54:05,561 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-04-23 14:54:05,561 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:05,561 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:05,562 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:05,562 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:05,562 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:05,562 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:05,563 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:05,563 [INFO] csvs: enter read_csvs
2019-04-23 14:54:05,563 [INFO] directory: enter list_files
2019-04-23 14:54:05,564 [INFO] directory: exit list_files
2019-04-23 14:54:05,564 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,564 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-04-23 14:54:05,565 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,565 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:05,565 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:05,567 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,567 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:05,567 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:05,567 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:05,568 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 14:54:05,569 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 14:54:05,569 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:05,570 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-04-23 14:54:05,571 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpwcfgjd6_
2019-04-23 14:54:05,571 [INFO] zips: enter unzip
2019-04-23 14:54:05,573 [INFO] zips: exit unzip
2019-04-23 14:54:05,608 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-04-23 14:54:05,609 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:05,609 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:05,610 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:05,610 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:05,610 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:05,610 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:05,611 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:05,611 [INFO] csvs: enter read_csvs
2019-04-23 14:54:05,611 [INFO] directory: enter list_files
2019-04-23 14:54:05,612 [INFO] directory: exit list_files
2019-04-23 14:54:05,612 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,612 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-04-23 14:54:05,614 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,614 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:05,615 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:05,617 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,618 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:05,618 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:05,618 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:05,621 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 14:54:05,621 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 14:54:05,622 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:05,623 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-04-23 14:54:05,624 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp6mp3ccc4
2019-04-23 14:54:05,624 [INFO] zips: enter unzip
2019-04-23 14:54:05,627 [INFO] zips: exit unzip
2019-04-23 14:54:05,653 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-04-23 14:54:05,654 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:05,654 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:05,654 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:05,655 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:05,655 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:05,655 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:05,655 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:05,656 [INFO] csvs: enter read_csvs
2019-04-23 14:54:05,656 [INFO] directory: enter list_files
2019-04-23 14:54:05,657 [INFO] directory: exit list_files
2019-04-23 14:54:05,657 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,657 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-04-23 14:54:05,659 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,659 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:05,659 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:05,660 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,660 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:05,661 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:05,661 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:05,662 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 14:54:05,662 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 14:54:05,663 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:05,664 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-04-23 14:54:05,664 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp689tfpo8
2019-04-23 14:54:05,665 [INFO] zips: enter unzip
2019-04-23 14:54:05,667 [INFO] zips: exit unzip
2019-04-23 14:54:05,715 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-04-23 14:54:05,715 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:05,716 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:05,716 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:05,716 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:05,717 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:05,717 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:05,717 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:05,718 [INFO] csvs: enter read_csvs
2019-04-23 14:54:05,718 [INFO] directory: enter list_files
2019-04-23 14:54:05,718 [INFO] directory: exit list_files
2019-04-23 14:54:05,719 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,719 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-04-23 14:54:05,720 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,720 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,720 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-04-23 14:54:05,722 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,722 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:05,722 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:05,725 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-04-23 14:54:05,726 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,727 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,727 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:05,728 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:05,728 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:05,730 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 14:54:05,730 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 14:54:05,730 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:05,731 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-04-23 14:54:05,732 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpf5s657uo
2019-04-23 14:54:05,732 [INFO] zips: enter unzip
2019-04-23 14:54:05,735 [INFO] zips: exit unzip
2019-04-23 14:54:05,763 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-04-23 14:54:05,764 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:05,764 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:05,765 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:05,765 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:05,765 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:05,765 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:05,765 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:05,766 [INFO] csvs: enter read_csvs
2019-04-23 14:54:05,766 [INFO] directory: enter list_files
2019-04-23 14:54:05,766 [INFO] directory: exit list_files
2019-04-23 14:54:05,766 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,767 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-04-23 14:54:05,769 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,769 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:05,770 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:05,772 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,772 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:05,772 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:05,772 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:05,775 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 14:54:05,775 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 14:54:05,776 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:05,776 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-04-23 14:54:05,777 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpjha55oi5
2019-04-23 14:54:05,777 [INFO] zips: enter unzip
2019-04-23 14:54:05,780 [INFO] zips: exit unzip
2019-04-23 14:54:05,862 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-04-23 14:54:05,863 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:05,864 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:05,865 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:05,865 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:05,865 [INFO] jsons: enter import_data: chron
2019-04-23 14:54:05,865 [INFO] jsons: exit import_data: chron
2019-04-23 14:54:05,866 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:05,866 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:05,866 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:05,867 [INFO] csvs: enter read_csvs
2019-04-23 14:54:05,867 [INFO] directory: enter list_files
2019-04-23 14:54:05,868 [INFO] directory: exit list_files
2019-04-23 14:54:05,868 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,868 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-04-23 14:54:05,869 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,869 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,869 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-04-23 14:54:05,869 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,870 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:05,870 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:05,872 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,873 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:05,873 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:05,874 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-04-23 14:54:05,875 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,875 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:05,875 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:05,875 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:05,877 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 14:54:05,877 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 14:54:05,877 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 14:54:05,878 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 14:54:05,878 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:05,879 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-04-23 14:54:05,880 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp143tt01r
2019-04-23 14:54:05,880 [INFO] zips: enter unzip
2019-04-23 14:54:05,883 [INFO] zips: exit unzip
2019-04-23 14:54:05,952 [INFO] jsons: Read JSONLD successful: Ocn-MontegoBayJamaica.Haase-Schramm.2003.jsonld
2019-04-23 14:54:05,953 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:05,954 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:05,954 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:05,955 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:05,955 [INFO] jsons: enter import_data: chron
2019-04-23 14:54:05,955 [INFO] jsons: exit import_data: chron
2019-04-23 14:54:05,955 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:05,955 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:05,956 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:05,956 [INFO] csvs: enter read_csvs
2019-04-23 14:54:05,957 [INFO] directory: enter list_files
2019-04-23 14:54:05,957 [INFO] directory: exit list_files
2019-04-23 14:54:05,957 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,957 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo1measurement1.csv
2019-04-23 14:54:05,958 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,958 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,958 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo2measurement1.csv
2019-04-23 14:54:05,959 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,959 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:05,959 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron1measurement1.csv
2019-04-23 14:54:05,960 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:05,960 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:05,960 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:05,961 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,962 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:05,962 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:05,963 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:05,963 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:05,963 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:05,964 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:05,965 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 14:54:05,965 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 14:54:05,965 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 14:54:05,966 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 14:54:05,966 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:05,967 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MontegoBayJamaica.Haase-Schramm.2003.lpd
2019-04-23 14:54:05,968 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp7ytx5nuv
2019-04-23 14:54:05,968 [INFO] zips: enter unzip
2019-04-23 14:54:05,971 [INFO] zips: exit unzip
2019-04-23 14:54:06,078 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-04-23 14:54:06,079 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:06,082 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:06,083 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:06,084 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:06,084 [INFO] jsons: enter import_data: chron
2019-04-23 14:54:06,085 [INFO] jsons: exit import_data: chron
2019-04-23 14:54:06,085 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:06,086 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:06,086 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:06,087 [INFO] csvs: enter read_csvs
2019-04-23 14:54:06,087 [INFO] directory: enter list_files
2019-04-23 14:54:06,088 [INFO] directory: exit list_files
2019-04-23 14:54:06,088 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:06,088 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-04-23 14:54:06,089 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:06,089 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:06,090 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-04-23 14:54:06,091 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:06,092 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:06,092 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:06,097 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:06,097 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:06,098 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:06,098 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-04-23 14:54:06,099 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:06,099 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:06,100 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:06,100 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:06,102 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 14:54:06,103 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 14:54:06,103 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 14:54:06,103 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 14:54:06,103 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:06,104 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-04-23 14:54:06,105 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpow_zvsfh
2019-04-23 14:54:06,106 [INFO] zips: enter unzip
2019-04-23 14:54:06,109 [INFO] zips: exit unzip
2019-04-23 14:54:06,142 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-04-23 14:54:06,142 [INFO] jsons: exit read_json_from_file
2019-04-23 14:54:06,143 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:54:06,143 [INFO] jsons: enter import_data: paleo
2019-04-23 14:54:06,144 [INFO] jsons: exit import_data: paleo
2019-04-23 14:54:06,144 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:54:06,144 [INFO] misc: enter remove_empty_doi
2019-04-23 14:54:06,144 [INFO] misc: exit remove_empty_doi
2019-04-23 14:54:06,145 [INFO] csvs: enter read_csvs
2019-04-23 14:54:06,145 [INFO] directory: enter list_files
2019-04-23 14:54:06,145 [INFO] directory: exit list_files
2019-04-23 14:54:06,145 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:54:06,145 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-04-23 14:54:06,146 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:54:06,146 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:54:06,146 [INFO] csvs: enter merge_csv_section
2019-04-23 14:54:06,147 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:54:06,148 [INFO] csvs: exit merge_csv_section
2019-04-23 14:54:06,148 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:54:06,148 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:54:06,149 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 14:54:06,149 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 14:54:06,149 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:54:06,150 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-04-23 14:54:06,151 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.65 seconds
2019-04-23 14:54:06,152 [INFO] time_series: enter extract_main
2019-04-23 14:54:06,153 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:06,154 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:06,154 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:06,154 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:06,154 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:06,154 [INFO] time_series: enter extract_authors
2019-04-23 14:54:06,155 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:06,155 [INFO] time_series: processing publication #: 1
2019-04-23 14:54:06,155 [INFO] time_series: enter extract_authors
2019-04-23 14:54:06,155 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:06,155 [INFO] time_series: enter extract_pc
2019-04-23 14:54:06,156 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:06,156 [INFO] time_series: enter extract_special
2019-04-23 14:54:06,157 [INFO] time_series: enter extract_columns
2019-04-23 14:54:06,157 [INFO] time_series: enter extract_columns
2019-04-23 14:54:06,157 [INFO] time_series: exit extract_main
2019-04-23 14:54:06,163 [INFO] time_series: enter extract_main
2019-04-23 14:54:06,163 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:06,164 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:06,164 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:06,164 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:06,164 [INFO] time_series: enter extract_authors
2019-04-23 14:54:06,164 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-04-23 14:54:06,165 [INFO] time_series: exit extract_main
2019-04-23 14:54:06,166 [INFO] time_series: enter extract_main
2019-04-23 14:54:06,167 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:06,167 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:06,167 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:06,167 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:06,167 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:06,168 [INFO] time_series: enter extract_authors
2019-04-23 14:54:06,168 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:06,168 [INFO] time_series: processing publication #: 1
2019-04-23 14:54:06,168 [INFO] time_series: enter extract_authors
2019-04-23 14:54:06,168 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:06,169 [INFO] time_series: enter extract_pc
2019-04-23 14:54:06,169 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:06,169 [INFO] time_series: enter extract_special
2019-04-23 14:54:06,170 [INFO] time_series: enter extract_columns
2019-04-23 14:54:06,171 [INFO] time_series: enter extract_columns
2019-04-23 14:54:06,171 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,112 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,113 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,114 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,114 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,114 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,114 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,115 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,115 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,115 [INFO] time_series: processing publication #: 1
2019-04-23 14:54:07,115 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,115 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,116 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,116 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,116 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,118 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,119 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,120 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,880 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,881 [INFO] time_series: enter _extract_funding
2019-04-23 14:54:07,882 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,882 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,883 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,883 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,883 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,884 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,884 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,885 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,886 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,887 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,888 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,889 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,889 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,890 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,891 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,905 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,905 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,905 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,905 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,906 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,906 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,906 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,906 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,907 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,909 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,910 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,912 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,914 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,914 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,915 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,915 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,916 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,916 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,916 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,916 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,916 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,917 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,917 [INFO] time_series: processing publication #: 1
2019-04-23 14:54:07,917 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,917 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,918 [INFO] time_series: processing publication #: 2
2019-04-23 14:54:07,918 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,918 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,918 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,919 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,919 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,919 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,920 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,920 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,923 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,924 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,924 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,924 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,924 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,924 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,925 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,925 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,925 [INFO] time_series: processing publication #: 1
2019-04-23 14:54:07,925 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,925 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,926 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,926 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,926 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,927 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,927 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,928 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,928 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,929 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,930 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,930 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,931 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,931 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,931 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,932 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,932 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,932 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,932 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,932 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,933 [INFO] time_series: processing publication #: 1
2019-04-23 14:54:07,933 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,933 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,933 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,933 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,934 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,934 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,935 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,935 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,937 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,938 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,938 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,938 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,938 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,938 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,939 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,939 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,939 [INFO] time_series: processing publication #: 1
2019-04-23 14:54:07,939 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,939 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,940 [INFO] time_series: processing publication #: 2
2019-04-23 14:54:07,940 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,940 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,940 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,941 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,941 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,942 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,942 [INFO] time_series: enter extract_calibration
2019-04-23 14:54:07,942 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 14:54:07,943 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,943 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,943 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,944 [INFO] time_series: enter extract_calibration
2019-04-23 14:54:07,944 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 14:54:07,944 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,947 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,947 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,948 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,948 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,948 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,949 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,949 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,949 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,949 [INFO] time_series: processing publication #: 1
2019-04-23 14:54:07,949 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,950 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,950 [INFO] time_series: processing publication #: 2
2019-04-23 14:54:07,950 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,950 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,951 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,951 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,951 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,953 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,954 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,955 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,956 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,957 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,958 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,958 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,958 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,958 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,959 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,959 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,959 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,960 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,960 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,960 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,961 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,961 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,961 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,962 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,963 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,963 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,964 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,964 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,964 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,964 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,964 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,965 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,965 [INFO] time_series: processing publication #: 1
2019-04-23 14:54:07,965 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,965 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,966 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,966 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,966 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,967 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,967 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,968 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,968 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,968 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,969 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,969 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,972 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,972 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,972 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,972 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,973 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,973 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,973 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,973 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,973 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,974 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-04-23 14:54:07,974 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,975 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,975 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,976 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,976 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,977 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,977 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,978 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,978 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,979 [INFO] time_series: enter extract_main
2019-04-23 14:54:07,979 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,979 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,979 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:54:07,980 [INFO] time_series: enter _extract_pub
2019-04-23 14:54:07,980 [INFO] time_series: processing publication #: 0
2019-04-23 14:54:07,980 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,980 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,980 [INFO] time_series: processing publication #: 1
2019-04-23 14:54:07,981 [INFO] time_series: enter extract_authors
2019-04-23 14:54:07,981 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:54:07,981 [INFO] time_series: enter extract_pc
2019-04-23 14:54:07,981 [INFO] time_series: enter extract_table_root
2019-04-23 14:54:07,982 [INFO] time_series: enter extract_special
2019-04-23 14:54:07,982 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,982 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,983 [INFO] time_series: enter extract_columns
2019-04-23 14:54:07,983 [INFO] time_series: exit extract_main
2019-04-23 14:54:07,983 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.83 seconds
2019-04-23 14:54:13,170 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:54:13,219 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:54:13,245 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:54:13,247 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:54:13,249 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:58:36,555 [DEBUG] shapely.geos: Trying `CDLL(/anaconda3/bin/../lib/libgeos_c.dylib)`
2019-04-23 14:58:36,556 [DEBUG] shapely.geos: Library path: '/anaconda3/bin/../lib/libgeos_c.dylib'
2019-04-23 14:58:36,556 [DEBUG] shapely.geos: DLL: <CDLL '/anaconda3/bin/../lib/libgeos_c.dylib', handle 7ffc36318fc0 at 0x1a21c83fd0>
2019-04-23 14:58:36,558 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-04-23 14:58:36,558 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-04-23 14:58:36,559 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 11790de50 at 0x119499a58>
2019-04-23 14:58:37,032 [INFO] directory: enter list_files
2019-04-23 14:58:37,033 [INFO] directory: exit list_files
2019-04-23 14:58:37,035 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpm6yi60d9
2019-04-23 14:58:37,035 [INFO] zips: enter unzip
2019-04-23 14:58:37,038 [INFO] zips: exit unzip
2019-04-23 14:58:37,062 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-04-23 14:58:37,062 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:37,063 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:37,063 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:37,063 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:37,064 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:37,064 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:37,064 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:37,064 [INFO] csvs: enter read_csvs
2019-04-23 14:58:37,065 [INFO] directory: enter list_files
2019-04-23 14:58:37,065 [INFO] directory: exit list_files
2019-04-23 14:58:37,065 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:37,065 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-04-23 14:58:37,067 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:37,067 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:37,067 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:37,069 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:37,069 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:37,069 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:37,070 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:37,071 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 14:58:37,071 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 14:58:37,071 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:37,072 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-04-23 14:58:37,073 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpb0so6sze
2019-04-23 14:58:37,074 [INFO] zips: enter unzip
2019-04-23 14:58:37,077 [INFO] zips: exit unzip
2019-04-23 14:58:37,507 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-04-23 14:58:37,508 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:37,512 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:37,512 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:37,513 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:37,513 [INFO] jsons: enter import_data: chron
2019-04-23 14:58:37,513 [INFO] jsons: exit import_data: chron
2019-04-23 14:58:37,513 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:37,514 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:37,514 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:37,515 [INFO] csvs: enter read_csvs
2019-04-23 14:58:37,516 [INFO] directory: enter list_files
2019-04-23 14:58:37,516 [INFO] directory: exit list_files
2019-04-23 14:58:37,516 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:37,516 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-04-23 14:58:37,517 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:37,517 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:37,517 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-04-23 14:58:37,518 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:37,518 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:37,518 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-04-23 14:58:37,519 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:37,520 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:37,520 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-04-23 14:58:37,520 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:37,520 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:37,521 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:37,525 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:37,532 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:37,538 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:37,539 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:37,539 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:37,539 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-04-23 14:58:37,540 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:37,541 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:37,541 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:37,541 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:37,548 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 14:58:37,548 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 14:58:37,548 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 14:58:37,548 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 14:58:37,549 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:37,550 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-04-23 14:58:37,550 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpgg5z381x
2019-04-23 14:58:37,551 [INFO] zips: enter unzip
2019-04-23 14:58:37,554 [INFO] zips: exit unzip
2019-04-23 14:58:37,580 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-04-23 14:58:37,581 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:37,581 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:37,581 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:37,581 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:37,582 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:37,582 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:37,582 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:37,582 [INFO] csvs: enter read_csvs
2019-04-23 14:58:37,582 [INFO] directory: enter list_files
2019-04-23 14:58:37,583 [INFO] directory: exit list_files
2019-04-23 14:58:37,583 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:37,583 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-04-23 14:58:37,585 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:37,585 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:37,585 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:37,588 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:37,588 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:37,588 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:37,588 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:37,590 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 14:58:37,590 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 14:58:37,590 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:37,592 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-04-23 14:58:37,592 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpqj5xv563
2019-04-23 14:58:37,593 [INFO] zips: enter unzip
2019-04-23 14:58:37,642 [INFO] zips: exit unzip
2019-04-23 14:58:37,902 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-04-23 14:58:37,903 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:37,909 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:37,910 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:37,910 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:37,911 [INFO] jsons: enter import_data: chron
2019-04-23 14:58:37,911 [INFO] jsons: enter import_model
2019-04-23 14:58:37,911 [INFO] jsons: exit import_model: chron0model
2019-04-23 14:58:37,911 [INFO] jsons: exit import_data: chron
2019-04-23 14:58:37,912 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:37,912 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:37,912 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:37,914 [INFO] csvs: enter read_csvs
2019-04-23 14:58:37,915 [INFO] directory: enter list_files
2019-04-23 14:58:37,915 [INFO] directory: exit list_files
2019-04-23 14:58:37,915 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:37,916 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-04-23 14:58:38,771 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:38,772 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:38,772 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-04-23 14:58:38,776 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:38,776 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:38,777 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:38,780 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:38,781 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:38,781 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:38,781 [INFO] csvs: enter merge_csv_model
2019-04-23 14:58:39,283 [INFO] csvs: exit merge_csv_model
2019-04-23 14:58:39,284 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:39,284 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:39,285 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:40,224 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 14:58:40,225 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 14:58:40,226 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 14:58:40,226 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-04-23 14:58:40,226 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 14:58:40,226 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:40,228 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-04-23 14:58:40,248 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpdjzp7u7a
2019-04-23 14:58:40,249 [INFO] zips: enter unzip
2019-04-23 14:58:40,399 [INFO] zips: exit unzip
2019-04-23 14:58:40,581 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-04-23 14:58:40,582 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:40,584 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:40,584 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:40,584 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:40,585 [INFO] jsons: enter import_data: chron
2019-04-23 14:58:40,585 [INFO] jsons: enter import_model
2019-04-23 14:58:40,585 [INFO] jsons: exit import_model: chron0model
2019-04-23 14:58:40,586 [INFO] jsons: exit import_data: chron
2019-04-23 14:58:40,586 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:40,586 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:40,586 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:40,587 [INFO] csvs: enter read_csvs
2019-04-23 14:58:40,588 [INFO] directory: enter list_files
2019-04-23 14:58:40,588 [INFO] directory: exit list_files
2019-04-23 14:58:40,588 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:40,589 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-04-23 14:58:40,590 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:40,590 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:40,590 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-04-23 14:58:40,592 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:40,592 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:40,592 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-04-23 14:58:40,675 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:40,676 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:40,676 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-04-23 14:58:40,756 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:40,757 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:40,757 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-04-23 14:58:40,848 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:40,848 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:40,849 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-04-23 14:58:40,938 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:40,939 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:40,939 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-04-23 14:58:41,029 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:41,030 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:41,031 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-04-23 14:58:41,115 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:41,116 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:41,116 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-04-23 14:58:41,200 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:41,201 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:41,201 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-04-23 14:58:41,289 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:41,290 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:41,291 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-04-23 14:58:41,378 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:41,378 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:41,379 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-04-23 14:58:41,463 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:41,463 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:41,463 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-04-23 14:58:41,597 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:41,598 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:41,598 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-04-23 14:58:41,685 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:41,686 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:41,687 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-04-23 14:58:41,687 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:41,688 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:41,688 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-04-23 14:58:41,787 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:41,788 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:41,788 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:41,795 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:41,795 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:41,796 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-04-23 14:58:41,797 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:41,797 [INFO] csvs: enter merge_csv_model
2019-04-23 14:58:41,799 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:41,902 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:41,943 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:41,974 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:42,005 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:42,037 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:42,068 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:42,099 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:42,130 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:42,162 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:42,193 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:42,224 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:42,256 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:42,257 [INFO] csvs: exit merge_csv_model
2019-04-23 14:58:42,257 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:42,257 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:42,257 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:42,989 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 14:58:42,990 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 14:58:42,990 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 14:58:42,990 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-04-23 14:58:42,991 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 14:58:42,991 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:42,995 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-04-23 14:58:43,004 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpav50ydae
2019-04-23 14:58:43,004 [INFO] zips: enter unzip
2019-04-23 14:58:43,006 [INFO] zips: exit unzip
2019-04-23 14:58:43,088 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-04-23 14:58:43,089 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:43,091 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:43,091 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:43,091 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:43,092 [INFO] jsons: enter import_data: chron
2019-04-23 14:58:43,092 [INFO] jsons: exit import_data: chron
2019-04-23 14:58:43,092 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:43,092 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:43,093 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:43,093 [INFO] csvs: enter read_csvs
2019-04-23 14:58:43,094 [INFO] directory: enter list_files
2019-04-23 14:58:43,094 [INFO] directory: exit list_files
2019-04-23 14:58:43,094 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,094 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-04-23 14:58:43,095 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,095 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,096 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-04-23 14:58:43,100 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,101 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:43,101 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,106 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,106 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,107 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,109 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-04-23 14:58:43,110 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-04-23 14:58:43,111 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-04-23 14:58:43,111 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,111 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,112 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:43,112 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:43,116 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 14:58:43,116 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 14:58:43,117 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 14:58:43,117 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 14:58:43,117 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:43,118 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-04-23 14:58:43,119 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpg5uo2ztu
2019-04-23 14:58:43,119 [INFO] zips: enter unzip
2019-04-23 14:58:43,121 [INFO] zips: exit unzip
2019-04-23 14:58:43,151 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-04-23 14:58:43,151 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:43,152 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:43,152 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:43,152 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:43,153 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:43,153 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:43,153 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:43,153 [INFO] csvs: enter read_csvs
2019-04-23 14:58:43,154 [INFO] directory: enter list_files
2019-04-23 14:58:43,154 [INFO] directory: exit list_files
2019-04-23 14:58:43,154 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,154 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-04-23 14:58:43,155 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,155 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:43,155 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,156 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,157 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,157 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:43,157 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:43,158 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 14:58:43,158 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 14:58:43,158 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:43,159 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-04-23 14:58:43,160 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpkv7orfay
2019-04-23 14:58:43,160 [INFO] zips: enter unzip
2019-04-23 14:58:43,162 [INFO] zips: exit unzip
2019-04-23 14:58:43,205 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-04-23 14:58:43,206 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:43,207 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:43,207 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:43,207 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:43,208 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:43,208 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:43,208 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:43,209 [INFO] csvs: enter read_csvs
2019-04-23 14:58:43,209 [INFO] directory: enter list_files
2019-04-23 14:58:43,209 [INFO] directory: exit list_files
2019-04-23 14:58:43,210 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,210 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-04-23 14:58:43,212 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,212 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:43,212 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,216 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,216 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,216 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:43,216 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:43,219 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 14:58:43,219 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 14:58:43,219 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:43,220 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-04-23 14:58:43,221 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpl6ve3ptq
2019-04-23 14:58:43,221 [INFO] zips: enter unzip
2019-04-23 14:58:43,224 [INFO] zips: exit unzip
2019-04-23 14:58:43,250 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-04-23 14:58:43,250 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:43,251 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:43,251 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:43,251 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:43,251 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:43,251 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:43,252 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:43,252 [INFO] csvs: enter read_csvs
2019-04-23 14:58:43,252 [INFO] directory: enter list_files
2019-04-23 14:58:43,252 [INFO] directory: exit list_files
2019-04-23 14:58:43,253 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,253 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-04-23 14:58:43,253 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,254 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:43,254 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,255 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,255 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,255 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:43,256 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:43,256 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 14:58:43,257 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 14:58:43,257 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:43,258 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-04-23 14:58:43,258 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpdcv0lwlb
2019-04-23 14:58:43,259 [INFO] zips: enter unzip
2019-04-23 14:58:43,261 [INFO] zips: exit unzip
2019-04-23 14:58:43,308 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-04-23 14:58:43,308 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:43,309 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:43,309 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:43,310 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:43,310 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:43,310 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:43,310 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:43,311 [INFO] csvs: enter read_csvs
2019-04-23 14:58:43,311 [INFO] directory: enter list_files
2019-04-23 14:58:43,311 [INFO] directory: exit list_files
2019-04-23 14:58:43,311 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,312 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-04-23 14:58:43,313 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,313 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,313 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-04-23 14:58:43,315 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,315 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:43,315 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,317 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-04-23 14:58:43,317 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,318 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,318 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,319 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:43,319 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:43,321 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 14:58:43,321 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 14:58:43,321 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:43,322 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-04-23 14:58:43,323 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpjhfvlpmm
2019-04-23 14:58:43,323 [INFO] zips: enter unzip
2019-04-23 14:58:43,326 [INFO] zips: exit unzip
2019-04-23 14:58:43,354 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-04-23 14:58:43,354 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:43,354 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:43,355 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:43,355 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:43,355 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:43,355 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:43,355 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:43,356 [INFO] csvs: enter read_csvs
2019-04-23 14:58:43,356 [INFO] directory: enter list_files
2019-04-23 14:58:43,356 [INFO] directory: exit list_files
2019-04-23 14:58:43,356 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,357 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-04-23 14:58:43,360 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,360 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:43,361 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,363 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,363 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,364 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:43,364 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:43,367 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 14:58:43,368 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 14:58:43,368 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:43,369 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-04-23 14:58:43,370 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp26wavynu
2019-04-23 14:58:43,370 [INFO] zips: enter unzip
2019-04-23 14:58:43,373 [INFO] zips: exit unzip
2019-04-23 14:58:43,457 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-04-23 14:58:43,458 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:43,459 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:43,459 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:43,459 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:43,460 [INFO] jsons: enter import_data: chron
2019-04-23 14:58:43,460 [INFO] jsons: exit import_data: chron
2019-04-23 14:58:43,460 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:43,460 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:43,461 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:43,461 [INFO] csvs: enter read_csvs
2019-04-23 14:58:43,462 [INFO] directory: enter list_files
2019-04-23 14:58:43,462 [INFO] directory: exit list_files
2019-04-23 14:58:43,462 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,462 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-04-23 14:58:43,463 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,463 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,463 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-04-23 14:58:43,464 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,464 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:43,464 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,466 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,466 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,466 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,467 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-04-23 14:58:43,467 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,468 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,468 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:43,468 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:43,469 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 14:58:43,469 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 14:58:43,470 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 14:58:43,470 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 14:58:43,470 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:43,471 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-04-23 14:58:43,472 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpqpk2ro3b
2019-04-23 14:58:43,472 [INFO] zips: enter unzip
2019-04-23 14:58:43,476 [INFO] zips: exit unzip
2019-04-23 14:58:43,545 [INFO] jsons: Read JSONLD successful: Ocn-MontegoBayJamaica.Haase-Schramm.2003.jsonld
2019-04-23 14:58:43,546 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:43,548 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:43,548 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:43,548 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:43,549 [INFO] jsons: enter import_data: chron
2019-04-23 14:58:43,549 [INFO] jsons: exit import_data: chron
2019-04-23 14:58:43,549 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:43,549 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:43,550 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:43,550 [INFO] csvs: enter read_csvs
2019-04-23 14:58:43,551 [INFO] directory: enter list_files
2019-04-23 14:58:43,551 [INFO] directory: exit list_files
2019-04-23 14:58:43,551 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,552 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo1measurement1.csv
2019-04-23 14:58:43,552 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,552 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,553 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo2measurement1.csv
2019-04-23 14:58:43,553 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,554 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,554 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron1measurement1.csv
2019-04-23 14:58:43,554 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,555 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:43,555 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,556 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,557 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,558 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,558 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,558 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,559 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:43,559 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:43,560 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 14:58:43,561 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 14:58:43,561 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 14:58:43,561 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 14:58:43,562 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:43,563 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MontegoBayJamaica.Haase-Schramm.2003.lpd
2019-04-23 14:58:43,564 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpgr69328n
2019-04-23 14:58:43,564 [INFO] zips: enter unzip
2019-04-23 14:58:43,567 [INFO] zips: exit unzip
2019-04-23 14:58:43,675 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-04-23 14:58:43,676 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:43,677 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:43,678 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:43,678 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:43,678 [INFO] jsons: enter import_data: chron
2019-04-23 14:58:43,679 [INFO] jsons: exit import_data: chron
2019-04-23 14:58:43,679 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:43,679 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:43,679 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:43,680 [INFO] csvs: enter read_csvs
2019-04-23 14:58:43,680 [INFO] directory: enter list_files
2019-04-23 14:58:43,680 [INFO] directory: exit list_files
2019-04-23 14:58:43,681 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,681 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-04-23 14:58:43,681 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,682 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,682 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-04-23 14:58:43,683 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,684 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:43,684 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,688 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,688 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,688 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,689 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-04-23 14:58:43,690 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,690 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,690 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:43,690 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:43,693 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 14:58:43,693 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 14:58:43,694 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 14:58:43,694 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 14:58:43,694 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:43,695 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-04-23 14:58:43,696 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmplf1ybst7
2019-04-23 14:58:43,696 [INFO] zips: enter unzip
2019-04-23 14:58:43,699 [INFO] zips: exit unzip
2019-04-23 14:58:43,730 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-04-23 14:58:43,730 [INFO] jsons: exit read_json_from_file
2019-04-23 14:58:43,730 [INFO] jsons: enter idx_num_to_name
2019-04-23 14:58:43,731 [INFO] jsons: enter import_data: paleo
2019-04-23 14:58:43,731 [INFO] jsons: exit import_data: paleo
2019-04-23 14:58:43,731 [INFO] jsons: exit idx_num_to_name
2019-04-23 14:58:43,731 [INFO] misc: enter remove_empty_doi
2019-04-23 14:58:43,731 [INFO] misc: exit remove_empty_doi
2019-04-23 14:58:43,732 [INFO] csvs: enter read_csvs
2019-04-23 14:58:43,732 [INFO] directory: enter list_files
2019-04-23 14:58:43,732 [INFO] directory: exit list_files
2019-04-23 14:58:43,732 [INFO] csvs: enter read_csv_from_file
2019-04-23 14:58:43,733 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-04-23 14:58:43,733 [INFO] csvs: exit read_csv_from_file
2019-04-23 14:58:43,733 [INFO] csvs: enter merge_csv_metadata
2019-04-23 14:58:43,734 [INFO] csvs: enter merge_csv_section
2019-04-23 14:58:43,735 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 14:58:43,735 [INFO] csvs: exit merge_csv_section
2019-04-23 14:58:43,735 [INFO] csvs: exit merge_csv_metadata
2019-04-23 14:58:43,736 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 14:58:43,736 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 14:58:43,737 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 14:58:43,737 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 14:58:43,738 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-04-23 14:58:43,738 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.69 seconds
2019-04-23 14:58:43,740 [INFO] time_series: enter extract_main
2019-04-23 14:58:43,741 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:43,742 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:43,742 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:43,742 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:43,742 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:43,743 [INFO] time_series: enter extract_authors
2019-04-23 14:58:43,743 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:43,743 [INFO] time_series: processing publication #: 1
2019-04-23 14:58:43,743 [INFO] time_series: enter extract_authors
2019-04-23 14:58:43,744 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:43,744 [INFO] time_series: enter extract_pc
2019-04-23 14:58:43,744 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:43,745 [INFO] time_series: enter extract_special
2019-04-23 14:58:43,745 [INFO] time_series: enter extract_columns
2019-04-23 14:58:43,746 [INFO] time_series: enter extract_columns
2019-04-23 14:58:43,746 [INFO] time_series: exit extract_main
2019-04-23 14:58:43,753 [INFO] time_series: enter extract_main
2019-04-23 14:58:43,753 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:43,753 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:43,753 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:43,754 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:43,754 [INFO] time_series: enter extract_authors
2019-04-23 14:58:43,754 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-04-23 14:58:43,754 [INFO] time_series: exit extract_main
2019-04-23 14:58:43,756 [INFO] time_series: enter extract_main
2019-04-23 14:58:43,756 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:43,756 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:43,757 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:43,757 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:43,757 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:43,757 [INFO] time_series: enter extract_authors
2019-04-23 14:58:43,757 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:43,757 [INFO] time_series: processing publication #: 1
2019-04-23 14:58:43,758 [INFO] time_series: enter extract_authors
2019-04-23 14:58:43,758 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:43,758 [INFO] time_series: enter extract_pc
2019-04-23 14:58:43,758 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:43,759 [INFO] time_series: enter extract_special
2019-04-23 14:58:43,759 [INFO] time_series: enter extract_columns
2019-04-23 14:58:43,760 [INFO] time_series: enter extract_columns
2019-04-23 14:58:43,760 [INFO] time_series: exit extract_main
2019-04-23 14:58:44,715 [INFO] time_series: enter extract_main
2019-04-23 14:58:44,716 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:44,716 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:44,717 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:44,717 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:44,717 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:44,717 [INFO] time_series: enter extract_authors
2019-04-23 14:58:44,717 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:44,718 [INFO] time_series: processing publication #: 1
2019-04-23 14:58:44,718 [INFO] time_series: enter extract_authors
2019-04-23 14:58:44,718 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:44,718 [INFO] time_series: enter extract_pc
2019-04-23 14:58:44,719 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:44,719 [INFO] time_series: enter extract_special
2019-04-23 14:58:44,720 [INFO] time_series: enter extract_columns
2019-04-23 14:58:44,721 [INFO] time_series: enter extract_columns
2019-04-23 14:58:44,722 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,484 [INFO] time_series: enter extract_main
2019-04-23 14:58:45,485 [INFO] time_series: enter _extract_funding
2019-04-23 14:58:45,485 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,485 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,486 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:45,486 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:45,486 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,486 [INFO] time_series: enter extract_pc
2019-04-23 14:58:45,487 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,487 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,487 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,488 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,489 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,489 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,490 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,490 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,490 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,503 [INFO] time_series: enter extract_main
2019-04-23 14:58:45,503 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,503 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,504 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:45,504 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:45,504 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,505 [INFO] time_series: enter extract_pc
2019-04-23 14:58:45,505 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,505 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,507 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,508 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,510 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,512 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,512 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,513 [INFO] time_series: enter extract_main
2019-04-23 14:58:45,514 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,514 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,514 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,514 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:45,515 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:45,515 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,515 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,515 [INFO] time_series: processing publication #: 1
2019-04-23 14:58:45,516 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,516 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,516 [INFO] time_series: processing publication #: 2
2019-04-23 14:58:45,516 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,516 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,517 [INFO] time_series: enter extract_pc
2019-04-23 14:58:45,517 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,517 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,518 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,518 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,519 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,521 [INFO] time_series: enter extract_main
2019-04-23 14:58:45,522 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,522 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,522 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,522 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:45,522 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:45,523 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,523 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,523 [INFO] time_series: processing publication #: 1
2019-04-23 14:58:45,523 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,523 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,523 [INFO] time_series: enter extract_pc
2019-04-23 14:58:45,524 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,524 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,525 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,526 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,526 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,527 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,528 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,528 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,528 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,529 [INFO] time_series: enter extract_main
2019-04-23 14:58:45,530 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,530 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,530 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,530 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:45,530 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:45,531 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,531 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,531 [INFO] time_series: processing publication #: 1
2019-04-23 14:58:45,531 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,531 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,532 [INFO] time_series: enter extract_pc
2019-04-23 14:58:45,532 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,532 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,533 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,534 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,534 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,536 [INFO] time_series: enter extract_main
2019-04-23 14:58:45,537 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,537 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,537 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,538 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:45,538 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:45,538 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,538 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,538 [INFO] time_series: processing publication #: 1
2019-04-23 14:58:45,539 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,539 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,539 [INFO] time_series: processing publication #: 2
2019-04-23 14:58:45,539 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,540 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,540 [INFO] time_series: enter extract_pc
2019-04-23 14:58:45,540 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,540 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,541 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,541 [INFO] time_series: enter extract_calibration
2019-04-23 14:58:45,541 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 14:58:45,542 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,542 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,543 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,543 [INFO] time_series: enter extract_calibration
2019-04-23 14:58:45,543 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 14:58:45,544 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,546 [INFO] time_series: enter extract_main
2019-04-23 14:58:45,547 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,547 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,547 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,547 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:45,547 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:45,548 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,548 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,548 [INFO] time_series: processing publication #: 1
2019-04-23 14:58:45,548 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,548 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,549 [INFO] time_series: processing publication #: 2
2019-04-23 14:58:45,549 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,549 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,549 [INFO] time_series: enter extract_pc
2019-04-23 14:58:45,550 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,550 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,551 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,552 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,553 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,554 [INFO] time_series: enter extract_main
2019-04-23 14:58:45,554 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,555 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,555 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:45,555 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:45,555 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,555 [INFO] time_series: enter extract_pc
2019-04-23 14:58:45,556 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,556 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,556 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,556 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,557 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,557 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,557 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,558 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,558 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,559 [INFO] time_series: enter extract_main
2019-04-23 14:58:45,559 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,560 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,560 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,560 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:45,560 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:45,560 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,561 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,561 [INFO] time_series: processing publication #: 1
2019-04-23 14:58:45,561 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,561 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,561 [INFO] time_series: enter extract_pc
2019-04-23 14:58:45,562 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,562 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,562 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,563 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,563 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,563 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,564 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,564 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,564 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,567 [INFO] time_series: enter extract_main
2019-04-23 14:58:45,567 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,568 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,568 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:45,568 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:45,568 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,568 [INFO] time_series: enter extract_pc
2019-04-23 14:58:45,569 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,569 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,569 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-04-23 14:58:45,570 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,570 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,571 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,571 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,572 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,572 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,573 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,573 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,573 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,574 [INFO] time_series: enter extract_main
2019-04-23 14:58:45,574 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,575 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,575 [INFO] time_series: enter ts_extract_geo
2019-04-23 14:58:45,575 [INFO] time_series: enter _extract_pub
2019-04-23 14:58:45,575 [INFO] time_series: processing publication #: 0
2019-04-23 14:58:45,575 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,576 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,576 [INFO] time_series: processing publication #: 1
2019-04-23 14:58:45,576 [INFO] time_series: enter extract_authors
2019-04-23 14:58:45,576 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 14:58:45,577 [INFO] time_series: enter extract_pc
2019-04-23 14:58:45,577 [INFO] time_series: enter extract_table_root
2019-04-23 14:58:45,578 [INFO] time_series: enter extract_special
2019-04-23 14:58:45,578 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,578 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,579 [INFO] time_series: enter extract_columns
2019-04-23 14:58:45,579 [INFO] time_series: exit extract_main
2019-04-23 14:58:45,579 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.84 seconds
2019-04-23 14:58:55,435 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:58:55,497 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:58:55,524 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:58:55,526 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 14:58:55,528 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 15:06:43,900 [INFO] directory: enter set_src_or_dst
2019-04-23 15:06:51,084 [INFO] directory: 3: current
2019-04-23 15:06:51,086 [INFO] directory: exit set_src_or_dst
2019-04-23 15:06:51,087 [INFO] directory: enter list_files
2019-04-23 15:06:51,087 [INFO] directory: exit list_files
2019-04-23 15:06:51,090 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpivnncql7
2019-04-23 15:06:51,090 [INFO] zips: enter unzip
2019-04-23 15:06:51,093 [INFO] zips: exit unzip
2019-04-23 15:06:51,121 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-04-23 15:06:51,122 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:51,122 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:51,122 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:51,123 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:51,123 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:51,123 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:51,123 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:51,124 [INFO] csvs: enter read_csvs
2019-04-23 15:06:51,124 [INFO] directory: enter list_files
2019-04-23 15:06:51,124 [INFO] directory: exit list_files
2019-04-23 15:06:51,124 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:51,125 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-04-23 15:06:51,126 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:51,126 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:51,126 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:51,128 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:51,128 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:51,128 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:51,128 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:51,129 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 15:06:51,130 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 15:06:51,130 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:51,131 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-04-23 15:06:51,131 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmptcns43hg
2019-04-23 15:06:51,132 [INFO] zips: enter unzip
2019-04-23 15:06:51,135 [INFO] zips: exit unzip
2019-04-23 15:06:51,530 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-04-23 15:06:51,530 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:51,534 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:51,534 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:51,535 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:51,535 [INFO] jsons: enter import_data: chron
2019-04-23 15:06:51,535 [INFO] jsons: exit import_data: chron
2019-04-23 15:06:51,535 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:51,536 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:51,536 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:51,537 [INFO] csvs: enter read_csvs
2019-04-23 15:06:51,538 [INFO] directory: enter list_files
2019-04-23 15:06:51,538 [INFO] directory: exit list_files
2019-04-23 15:06:51,538 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:51,538 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-04-23 15:06:51,539 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:51,539 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:51,539 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-04-23 15:06:51,540 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:51,540 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:51,541 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-04-23 15:06:51,542 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:51,542 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:51,542 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-04-23 15:06:51,543 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:51,543 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:51,543 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:51,548 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:51,556 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:51,562 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:51,562 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:51,562 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:51,563 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-04-23 15:06:51,564 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:51,564 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:51,564 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:51,564 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:51,571 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 15:06:51,571 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 15:06:51,572 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 15:06:51,572 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 15:06:51,572 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:51,574 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-04-23 15:06:51,574 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpku3n3lsc
2019-04-23 15:06:51,575 [INFO] zips: enter unzip
2019-04-23 15:06:51,577 [INFO] zips: exit unzip
2019-04-23 15:06:51,603 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-04-23 15:06:51,603 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:51,604 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:51,604 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:51,604 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:51,605 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:51,605 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:51,605 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:51,605 [INFO] csvs: enter read_csvs
2019-04-23 15:06:51,606 [INFO] directory: enter list_files
2019-04-23 15:06:51,606 [INFO] directory: exit list_files
2019-04-23 15:06:51,606 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:51,606 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-04-23 15:06:51,608 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:51,608 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:51,608 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:51,610 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:51,610 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:51,610 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:51,610 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:51,612 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 15:06:51,612 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 15:06:51,612 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:51,613 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-04-23 15:06:51,614 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpbo3r31ur
2019-04-23 15:06:51,615 [INFO] zips: enter unzip
2019-04-23 15:06:51,664 [INFO] zips: exit unzip
2019-04-23 15:06:51,913 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-04-23 15:06:51,914 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:51,918 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:51,918 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:51,918 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:51,918 [INFO] jsons: enter import_data: chron
2019-04-23 15:06:51,919 [INFO] jsons: enter import_model
2019-04-23 15:06:51,919 [INFO] jsons: exit import_model: chron0model
2019-04-23 15:06:51,919 [INFO] jsons: exit import_data: chron
2019-04-23 15:06:51,919 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:51,919 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:51,920 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:51,921 [INFO] csvs: enter read_csvs
2019-04-23 15:06:51,921 [INFO] directory: enter list_files
2019-04-23 15:06:51,922 [INFO] directory: exit list_files
2019-04-23 15:06:51,922 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:51,922 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-04-23 15:06:52,740 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:52,741 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:52,741 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-04-23 15:06:52,744 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:52,745 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:52,745 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:52,748 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:52,749 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:52,749 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:52,749 [INFO] csvs: enter merge_csv_model
2019-04-23 15:06:53,246 [INFO] csvs: exit merge_csv_model
2019-04-23 15:06:53,247 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:53,247 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:53,248 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:54,181 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 15:06:54,182 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 15:06:54,182 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 15:06:54,183 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-04-23 15:06:54,183 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 15:06:54,183 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:54,185 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-04-23 15:06:54,206 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpzsn_dgwc
2019-04-23 15:06:54,207 [INFO] zips: enter unzip
2019-04-23 15:06:54,351 [INFO] zips: exit unzip
2019-04-23 15:06:54,535 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-04-23 15:06:54,536 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:54,538 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:54,538 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:54,539 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:54,539 [INFO] jsons: enter import_data: chron
2019-04-23 15:06:54,539 [INFO] jsons: enter import_model
2019-04-23 15:06:54,540 [INFO] jsons: exit import_model: chron0model
2019-04-23 15:06:54,540 [INFO] jsons: exit import_data: chron
2019-04-23 15:06:54,541 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:54,541 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:54,541 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:54,543 [INFO] csvs: enter read_csvs
2019-04-23 15:06:54,543 [INFO] directory: enter list_files
2019-04-23 15:06:54,544 [INFO] directory: exit list_files
2019-04-23 15:06:54,544 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:54,544 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-04-23 15:06:54,546 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:54,546 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:54,547 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-04-23 15:06:54,548 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:54,549 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:54,549 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-04-23 15:06:54,634 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:54,635 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:54,635 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-04-23 15:06:54,718 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:54,719 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:54,720 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-04-23 15:06:54,812 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:54,812 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:54,812 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-04-23 15:06:54,895 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:54,895 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:54,896 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-04-23 15:06:54,988 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:54,989 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:54,989 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-04-23 15:06:55,075 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:55,076 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:55,076 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-04-23 15:06:55,163 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:55,163 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:55,164 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-04-23 15:06:55,247 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:55,247 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:55,248 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-04-23 15:06:55,335 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:55,335 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:55,336 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-04-23 15:06:55,419 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:55,419 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:55,419 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-04-23 15:06:55,563 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:55,563 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:55,564 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-04-23 15:06:55,645 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:55,646 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:55,647 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-04-23 15:06:55,647 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:55,647 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:55,648 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-04-23 15:06:55,730 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:55,731 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:55,732 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:55,737 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:55,737 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:55,738 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-04-23 15:06:55,739 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:55,739 [INFO] csvs: enter merge_csv_model
2019-04-23 15:06:55,741 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:55,844 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:55,885 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:55,916 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:55,947 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:55,978 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:56,010 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:56,041 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:56,072 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:56,110 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:56,141 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:56,172 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:56,204 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:56,204 [INFO] csvs: exit merge_csv_model
2019-04-23 15:06:56,204 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:56,205 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:56,205 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:56,939 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 15:06:56,940 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 15:06:56,941 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 15:06:56,941 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-04-23 15:06:56,941 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 15:06:56,942 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:56,948 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-04-23 15:06:56,959 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp37ht0of2
2019-04-23 15:06:56,959 [INFO] zips: enter unzip
2019-04-23 15:06:56,962 [INFO] zips: exit unzip
2019-04-23 15:06:57,042 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-04-23 15:06:57,043 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:57,045 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:57,046 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:57,046 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:57,047 [INFO] jsons: enter import_data: chron
2019-04-23 15:06:57,047 [INFO] jsons: exit import_data: chron
2019-04-23 15:06:57,047 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:57,048 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:57,048 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:57,049 [INFO] csvs: enter read_csvs
2019-04-23 15:06:57,050 [INFO] directory: enter list_files
2019-04-23 15:06:57,050 [INFO] directory: exit list_files
2019-04-23 15:06:57,050 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,051 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-04-23 15:06:57,051 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,052 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,052 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-04-23 15:06:57,057 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,058 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:57,058 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,064 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,064 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,064 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,066 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-04-23 15:06:57,067 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-04-23 15:06:57,068 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-04-23 15:06:57,068 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,068 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,069 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:57,069 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:57,073 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 15:06:57,073 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 15:06:57,073 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 15:06:57,073 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 15:06:57,073 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:57,074 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-04-23 15:06:57,075 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp36kw6oge
2019-04-23 15:06:57,075 [INFO] zips: enter unzip
2019-04-23 15:06:57,077 [INFO] zips: exit unzip
2019-04-23 15:06:57,106 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-04-23 15:06:57,107 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:57,107 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:57,107 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:57,108 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:57,108 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:57,108 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:57,108 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:57,109 [INFO] csvs: enter read_csvs
2019-04-23 15:06:57,109 [INFO] directory: enter list_files
2019-04-23 15:06:57,109 [INFO] directory: exit list_files
2019-04-23 15:06:57,110 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,110 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-04-23 15:06:57,111 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,111 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:57,111 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,113 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,113 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,113 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:57,113 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:57,114 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 15:06:57,115 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 15:06:57,115 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:57,116 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-04-23 15:06:57,117 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpbv992ywi
2019-04-23 15:06:57,117 [INFO] zips: enter unzip
2019-04-23 15:06:57,119 [INFO] zips: exit unzip
2019-04-23 15:06:57,154 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-04-23 15:06:57,155 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:57,155 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:57,155 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:57,156 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:57,156 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:57,156 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:57,156 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:57,157 [INFO] csvs: enter read_csvs
2019-04-23 15:06:57,157 [INFO] directory: enter list_files
2019-04-23 15:06:57,157 [INFO] directory: exit list_files
2019-04-23 15:06:57,157 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,158 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-04-23 15:06:57,160 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,160 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:57,161 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,164 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,165 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,165 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:57,165 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:57,168 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 15:06:57,168 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 15:06:57,168 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:57,169 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-04-23 15:06:57,170 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpp9d0zxyn
2019-04-23 15:06:57,170 [INFO] zips: enter unzip
2019-04-23 15:06:57,173 [INFO] zips: exit unzip
2019-04-23 15:06:57,200 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-04-23 15:06:57,200 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:57,200 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:57,201 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:57,201 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:57,201 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:57,201 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:57,201 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:57,202 [INFO] csvs: enter read_csvs
2019-04-23 15:06:57,202 [INFO] directory: enter list_files
2019-04-23 15:06:57,202 [INFO] directory: exit list_files
2019-04-23 15:06:57,203 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,203 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-04-23 15:06:57,204 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,204 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:57,204 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,205 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,205 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,206 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:57,206 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:57,207 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 15:06:57,207 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 15:06:57,207 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:57,208 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-04-23 15:06:57,208 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpi3ampq17
2019-04-23 15:06:57,209 [INFO] zips: enter unzip
2019-04-23 15:06:57,211 [INFO] zips: exit unzip
2019-04-23 15:06:57,259 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-04-23 15:06:57,260 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:57,260 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:57,261 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:57,261 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:57,261 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:57,261 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:57,262 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:57,262 [INFO] csvs: enter read_csvs
2019-04-23 15:06:57,262 [INFO] directory: enter list_files
2019-04-23 15:06:57,263 [INFO] directory: exit list_files
2019-04-23 15:06:57,263 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,263 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-04-23 15:06:57,264 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,264 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,264 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-04-23 15:06:57,266 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,266 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:57,266 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,268 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-04-23 15:06:57,268 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,269 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,270 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,270 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:57,270 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:57,272 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 15:06:57,272 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 15:06:57,273 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:57,274 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-04-23 15:06:57,274 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpb3zqjvs_
2019-04-23 15:06:57,275 [INFO] zips: enter unzip
2019-04-23 15:06:57,277 [INFO] zips: exit unzip
2019-04-23 15:06:57,305 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-04-23 15:06:57,305 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:57,305 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:57,306 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:57,306 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:57,306 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:57,306 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:57,307 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:57,307 [INFO] csvs: enter read_csvs
2019-04-23 15:06:57,307 [INFO] directory: enter list_files
2019-04-23 15:06:57,307 [INFO] directory: exit list_files
2019-04-23 15:06:57,308 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,308 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-04-23 15:06:57,311 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,311 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:57,311 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,314 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,314 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,314 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:57,315 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:57,318 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 15:06:57,318 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 15:06:57,318 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:57,319 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-04-23 15:06:57,320 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpe5u1_yq0
2019-04-23 15:06:57,320 [INFO] zips: enter unzip
2019-04-23 15:06:57,323 [INFO] zips: exit unzip
2019-04-23 15:06:57,403 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-04-23 15:06:57,404 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:57,405 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:57,405 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:57,405 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:57,406 [INFO] jsons: enter import_data: chron
2019-04-23 15:06:57,406 [INFO] jsons: exit import_data: chron
2019-04-23 15:06:57,406 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:57,406 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:57,407 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:57,407 [INFO] csvs: enter read_csvs
2019-04-23 15:06:57,407 [INFO] directory: enter list_files
2019-04-23 15:06:57,408 [INFO] directory: exit list_files
2019-04-23 15:06:57,408 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,408 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-04-23 15:06:57,409 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,409 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,410 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-04-23 15:06:57,410 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,411 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:57,411 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,413 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,413 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,414 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,414 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-04-23 15:06:57,415 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,415 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,415 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:57,415 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:57,417 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 15:06:57,417 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 15:06:57,417 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 15:06:57,418 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 15:06:57,418 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:57,419 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-04-23 15:06:57,420 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp54b_a403
2019-04-23 15:06:57,420 [INFO] zips: enter unzip
2019-04-23 15:06:57,423 [INFO] zips: exit unzip
2019-04-23 15:06:57,492 [INFO] jsons: Read JSONLD successful: Ocn-MontegoBayJamaica.Haase-Schramm.2003.jsonld
2019-04-23 15:06:57,493 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:57,494 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:57,494 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:57,495 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:57,495 [INFO] jsons: enter import_data: chron
2019-04-23 15:06:57,495 [INFO] jsons: exit import_data: chron
2019-04-23 15:06:57,495 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:57,496 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:57,496 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:57,496 [INFO] csvs: enter read_csvs
2019-04-23 15:06:57,496 [INFO] directory: enter list_files
2019-04-23 15:06:57,497 [INFO] directory: exit list_files
2019-04-23 15:06:57,497 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,497 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo1measurement1.csv
2019-04-23 15:06:57,498 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,498 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,498 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo2measurement1.csv
2019-04-23 15:06:57,499 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,499 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,499 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron1measurement1.csv
2019-04-23 15:06:57,500 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,500 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:57,500 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,501 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,503 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,503 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,503 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,504 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,504 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:57,504 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:57,505 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 15:06:57,506 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 15:06:57,506 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 15:06:57,506 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 15:06:57,507 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:57,508 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MontegoBayJamaica.Haase-Schramm.2003.lpd
2019-04-23 15:06:57,508 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpweu8jltc
2019-04-23 15:06:57,509 [INFO] zips: enter unzip
2019-04-23 15:06:57,511 [INFO] zips: exit unzip
2019-04-23 15:06:57,620 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-04-23 15:06:57,621 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:57,622 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:57,623 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:57,623 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:57,623 [INFO] jsons: enter import_data: chron
2019-04-23 15:06:57,624 [INFO] jsons: exit import_data: chron
2019-04-23 15:06:57,624 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:57,624 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:57,625 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:57,625 [INFO] csvs: enter read_csvs
2019-04-23 15:06:57,626 [INFO] directory: enter list_files
2019-04-23 15:06:57,626 [INFO] directory: exit list_files
2019-04-23 15:06:57,626 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,627 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-04-23 15:06:57,627 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,627 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,628 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-04-23 15:06:57,629 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,629 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:57,629 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,634 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,634 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,634 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,634 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-04-23 15:06:57,636 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,636 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,636 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:57,636 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:57,638 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 15:06:57,639 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 15:06:57,639 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 15:06:57,639 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 15:06:57,639 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:57,640 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-04-23 15:06:57,641 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp9zvxn48b
2019-04-23 15:06:57,641 [INFO] zips: enter unzip
2019-04-23 15:06:57,644 [INFO] zips: exit unzip
2019-04-23 15:06:57,675 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-04-23 15:06:57,675 [INFO] jsons: exit read_json_from_file
2019-04-23 15:06:57,675 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:06:57,676 [INFO] jsons: enter import_data: paleo
2019-04-23 15:06:57,676 [INFO] jsons: exit import_data: paleo
2019-04-23 15:06:57,676 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:06:57,676 [INFO] misc: enter remove_empty_doi
2019-04-23 15:06:57,677 [INFO] misc: exit remove_empty_doi
2019-04-23 15:06:57,677 [INFO] csvs: enter read_csvs
2019-04-23 15:06:57,677 [INFO] directory: enter list_files
2019-04-23 15:06:57,678 [INFO] directory: exit list_files
2019-04-23 15:06:57,678 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:06:57,678 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-04-23 15:06:57,679 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:06:57,679 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:06:57,679 [INFO] csvs: enter merge_csv_section
2019-04-23 15:06:57,680 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:06:57,680 [INFO] csvs: exit merge_csv_section
2019-04-23 15:06:57,680 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:06:57,681 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:06:57,681 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 15:06:57,682 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 15:06:57,682 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:06:57,683 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-04-23 15:06:57,683 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.6 seconds
2019-04-23 15:06:57,685 [INFO] time_series: enter extract_main
2019-04-23 15:06:57,685 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:57,686 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:57,686 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:57,686 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:57,686 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:57,687 [INFO] time_series: enter extract_authors
2019-04-23 15:06:57,687 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:57,687 [INFO] time_series: processing publication #: 1
2019-04-23 15:06:57,687 [INFO] time_series: enter extract_authors
2019-04-23 15:06:57,687 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:57,687 [INFO] time_series: enter extract_pc
2019-04-23 15:06:57,688 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:57,688 [INFO] time_series: enter extract_special
2019-04-23 15:06:57,689 [INFO] time_series: enter extract_columns
2019-04-23 15:06:57,689 [INFO] time_series: enter extract_columns
2019-04-23 15:06:57,690 [INFO] time_series: exit extract_main
2019-04-23 15:06:57,695 [INFO] time_series: enter extract_main
2019-04-23 15:06:57,695 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:57,696 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:57,696 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:57,696 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:57,697 [INFO] time_series: enter extract_authors
2019-04-23 15:06:57,697 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-04-23 15:06:57,697 [INFO] time_series: exit extract_main
2019-04-23 15:06:57,699 [INFO] time_series: enter extract_main
2019-04-23 15:06:57,699 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:57,699 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:57,700 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:57,700 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:57,700 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:57,701 [INFO] time_series: enter extract_authors
2019-04-23 15:06:57,701 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:57,701 [INFO] time_series: processing publication #: 1
2019-04-23 15:06:57,701 [INFO] time_series: enter extract_authors
2019-04-23 15:06:57,702 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:57,702 [INFO] time_series: enter extract_pc
2019-04-23 15:06:57,702 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:57,702 [INFO] time_series: enter extract_special
2019-04-23 15:06:57,703 [INFO] time_series: enter extract_columns
2019-04-23 15:06:57,704 [INFO] time_series: enter extract_columns
2019-04-23 15:06:57,704 [INFO] time_series: exit extract_main
2019-04-23 15:06:58,632 [INFO] time_series: enter extract_main
2019-04-23 15:06:58,633 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:58,633 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:58,633 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:58,634 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:58,634 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:58,634 [INFO] time_series: enter extract_authors
2019-04-23 15:06:58,634 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:58,635 [INFO] time_series: processing publication #: 1
2019-04-23 15:06:58,635 [INFO] time_series: enter extract_authors
2019-04-23 15:06:58,635 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:58,635 [INFO] time_series: enter extract_pc
2019-04-23 15:06:58,636 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:58,636 [INFO] time_series: enter extract_special
2019-04-23 15:06:58,637 [INFO] time_series: enter extract_columns
2019-04-23 15:06:58,638 [INFO] time_series: enter extract_columns
2019-04-23 15:06:58,639 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,469 [INFO] time_series: enter extract_main
2019-04-23 15:06:59,469 [INFO] time_series: enter _extract_funding
2019-04-23 15:06:59,470 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,470 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,470 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:59,470 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:59,470 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,471 [INFO] time_series: enter extract_pc
2019-04-23 15:06:59,471 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,471 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,472 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,472 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,473 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,474 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,474 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,475 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,475 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,488 [INFO] time_series: enter extract_main
2019-04-23 15:06:59,488 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,488 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,488 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:59,489 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:59,489 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,489 [INFO] time_series: enter extract_pc
2019-04-23 15:06:59,489 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,490 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,491 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,493 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,495 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,496 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,497 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,498 [INFO] time_series: enter extract_main
2019-04-23 15:06:59,498 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,499 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,499 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,499 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:59,499 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:59,500 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,500 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,500 [INFO] time_series: processing publication #: 1
2019-04-23 15:06:59,500 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,501 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,501 [INFO] time_series: processing publication #: 2
2019-04-23 15:06:59,501 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,501 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,502 [INFO] time_series: enter extract_pc
2019-04-23 15:06:59,502 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,502 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,503 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,504 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,504 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,507 [INFO] time_series: enter extract_main
2019-04-23 15:06:59,508 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,508 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,508 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,508 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:59,509 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:59,509 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,509 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,509 [INFO] time_series: processing publication #: 1
2019-04-23 15:06:59,510 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,510 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,510 [INFO] time_series: enter extract_pc
2019-04-23 15:06:59,510 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,511 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,511 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,512 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,513 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,513 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,514 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,515 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,515 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,516 [INFO] time_series: enter extract_main
2019-04-23 15:06:59,517 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,517 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,517 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,517 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:59,518 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:59,518 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,518 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,518 [INFO] time_series: processing publication #: 1
2019-04-23 15:06:59,519 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,519 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,519 [INFO] time_series: enter extract_pc
2019-04-23 15:06:59,519 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,520 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,520 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,521 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,521 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,523 [INFO] time_series: enter extract_main
2019-04-23 15:06:59,524 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,524 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,524 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,525 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:59,525 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:59,525 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,525 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,526 [INFO] time_series: processing publication #: 1
2019-04-23 15:06:59,526 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,526 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,526 [INFO] time_series: processing publication #: 2
2019-04-23 15:06:59,526 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,527 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,527 [INFO] time_series: enter extract_pc
2019-04-23 15:06:59,527 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,527 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,528 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,528 [INFO] time_series: enter extract_calibration
2019-04-23 15:06:59,528 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 15:06:59,529 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,529 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,530 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,530 [INFO] time_series: enter extract_calibration
2019-04-23 15:06:59,530 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 15:06:59,530 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,533 [INFO] time_series: enter extract_main
2019-04-23 15:06:59,533 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,533 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,534 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,534 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:59,534 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:59,534 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,534 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,535 [INFO] time_series: processing publication #: 1
2019-04-23 15:06:59,535 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,535 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,535 [INFO] time_series: processing publication #: 2
2019-04-23 15:06:59,535 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,536 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,536 [INFO] time_series: enter extract_pc
2019-04-23 15:06:59,536 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,536 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,538 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,539 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,540 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,541 [INFO] time_series: enter extract_main
2019-04-23 15:06:59,542 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,542 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,542 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:59,542 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:59,543 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,543 [INFO] time_series: enter extract_pc
2019-04-23 15:06:59,543 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,543 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,544 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,544 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,544 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,545 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,545 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,545 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,545 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,547 [INFO] time_series: enter extract_main
2019-04-23 15:06:59,547 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,547 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,547 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,547 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:59,548 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:59,548 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,548 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,548 [INFO] time_series: processing publication #: 1
2019-04-23 15:06:59,548 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,549 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,549 [INFO] time_series: enter extract_pc
2019-04-23 15:06:59,549 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,549 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,550 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,550 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,550 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,551 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,551 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,551 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,552 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,554 [INFO] time_series: enter extract_main
2019-04-23 15:06:59,555 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,555 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,555 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:59,555 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:59,556 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,556 [INFO] time_series: enter extract_pc
2019-04-23 15:06:59,556 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,556 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,557 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-04-23 15:06:59,557 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,558 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,558 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,559 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,559 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,560 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,560 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,561 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,561 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,562 [INFO] time_series: enter extract_main
2019-04-23 15:06:59,562 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,562 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,563 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:06:59,563 [INFO] time_series: enter _extract_pub
2019-04-23 15:06:59,563 [INFO] time_series: processing publication #: 0
2019-04-23 15:06:59,563 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,563 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,563 [INFO] time_series: processing publication #: 1
2019-04-23 15:06:59,564 [INFO] time_series: enter extract_authors
2019-04-23 15:06:59,564 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:06:59,564 [INFO] time_series: enter extract_pc
2019-04-23 15:06:59,564 [INFO] time_series: enter extract_table_root
2019-04-23 15:06:59,565 [INFO] time_series: enter extract_special
2019-04-23 15:06:59,565 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,565 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,566 [INFO] time_series: enter extract_columns
2019-04-23 15:06:59,566 [INFO] time_series: exit extract_main
2019-04-23 15:06:59,566 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.88 seconds
2019-04-23 15:07:07,149 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 15:07:07,209 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 15:07:07,238 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 15:07:07,240 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 15:07:07,242 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 15:08:02,218 [DEBUG] shapely.geos: Trying `CDLL(/anaconda3/bin/../lib/libgeos_c.dylib)`
2019-04-23 15:08:02,219 [DEBUG] shapely.geos: Library path: '/anaconda3/bin/../lib/libgeos_c.dylib'
2019-04-23 15:08:02,219 [DEBUG] shapely.geos: DLL: <CDLL '/anaconda3/bin/../lib/libgeos_c.dylib', handle 7ff625ba67f0 at 0x1a258c9f98>
2019-04-23 15:08:02,221 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-04-23 15:08:02,222 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-04-23 15:08:02,223 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 115753e50 at 0x11e809828>
2019-04-23 15:08:02,693 [INFO] directory: enter list_files
2019-04-23 15:08:02,694 [INFO] directory: exit list_files
2019-04-23 15:08:02,695 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp6oyvf6a2
2019-04-23 15:08:02,696 [INFO] zips: enter unzip
2019-04-23 15:08:02,698 [INFO] zips: exit unzip
2019-04-23 15:08:02,731 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-04-23 15:08:02,731 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:02,731 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:02,732 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:02,732 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:02,732 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:02,732 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:02,733 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:02,733 [INFO] csvs: enter read_csvs
2019-04-23 15:08:02,733 [INFO] directory: enter list_files
2019-04-23 15:08:02,734 [INFO] directory: exit list_files
2019-04-23 15:08:02,734 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:02,734 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-04-23 15:08:02,735 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:02,736 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:02,736 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:02,738 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:02,738 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:02,738 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:02,739 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:02,740 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 15:08:02,740 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 15:08:02,740 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:02,741 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-04-23 15:08:02,742 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpevs5v3se
2019-04-23 15:08:02,742 [INFO] zips: enter unzip
2019-04-23 15:08:02,746 [INFO] zips: exit unzip
2019-04-23 15:08:03,146 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-04-23 15:08:03,147 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:03,150 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:03,151 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:03,151 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:03,151 [INFO] jsons: enter import_data: chron
2019-04-23 15:08:03,151 [INFO] jsons: exit import_data: chron
2019-04-23 15:08:03,152 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:03,152 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:03,152 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:03,153 [INFO] csvs: enter read_csvs
2019-04-23 15:08:03,154 [INFO] directory: enter list_files
2019-04-23 15:08:03,154 [INFO] directory: exit list_files
2019-04-23 15:08:03,154 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:03,154 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-04-23 15:08:03,155 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:03,155 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:03,155 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-04-23 15:08:03,156 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:03,156 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:03,157 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-04-23 15:08:03,158 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:03,158 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:03,158 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-04-23 15:08:03,159 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:03,159 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:03,160 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:03,164 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:03,170 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:03,174 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:03,175 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:03,175 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:03,176 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-04-23 15:08:03,177 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:03,177 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:03,177 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:03,177 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:03,184 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 15:08:03,184 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 15:08:03,184 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 15:08:03,184 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 15:08:03,185 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:03,186 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-04-23 15:08:03,187 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpwxrqpcv3
2019-04-23 15:08:03,187 [INFO] zips: enter unzip
2019-04-23 15:08:03,189 [INFO] zips: exit unzip
2019-04-23 15:08:03,214 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-04-23 15:08:03,214 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:03,215 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:03,215 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:03,215 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:03,216 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:03,216 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:03,216 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:03,216 [INFO] csvs: enter read_csvs
2019-04-23 15:08:03,217 [INFO] directory: enter list_files
2019-04-23 15:08:03,217 [INFO] directory: exit list_files
2019-04-23 15:08:03,217 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:03,217 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-04-23 15:08:03,219 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:03,219 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:03,219 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:03,220 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:03,221 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:03,221 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:03,221 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:03,222 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 15:08:03,223 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 15:08:03,223 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:03,224 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-04-23 15:08:03,224 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpjjxta8__
2019-04-23 15:08:03,225 [INFO] zips: enter unzip
2019-04-23 15:08:03,273 [INFO] zips: exit unzip
2019-04-23 15:08:03,526 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-04-23 15:08:03,526 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:03,529 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:03,529 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:03,530 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:03,530 [INFO] jsons: enter import_data: chron
2019-04-23 15:08:03,530 [INFO] jsons: enter import_model
2019-04-23 15:08:03,530 [INFO] jsons: exit import_model: chron0model
2019-04-23 15:08:03,530 [INFO] jsons: exit import_data: chron
2019-04-23 15:08:03,531 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:03,531 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:03,531 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:03,532 [INFO] csvs: enter read_csvs
2019-04-23 15:08:03,533 [INFO] directory: enter list_files
2019-04-23 15:08:03,533 [INFO] directory: exit list_files
2019-04-23 15:08:03,533 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:03,533 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-04-23 15:08:04,390 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:04,391 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:04,392 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-04-23 15:08:04,397 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:04,397 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:04,398 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:04,401 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:04,401 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:04,402 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:04,402 [INFO] csvs: enter merge_csv_model
2019-04-23 15:08:04,917 [INFO] csvs: exit merge_csv_model
2019-04-23 15:08:04,919 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:04,919 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:04,920 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:05,872 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 15:08:05,873 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 15:08:05,873 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 15:08:05,873 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-04-23 15:08:05,874 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 15:08:05,874 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:05,876 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-04-23 15:08:05,894 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmptnzc26g9
2019-04-23 15:08:05,894 [INFO] zips: enter unzip
2019-04-23 15:08:06,036 [INFO] zips: exit unzip
2019-04-23 15:08:06,221 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-04-23 15:08:06,222 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:06,223 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:06,224 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:06,224 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:06,224 [INFO] jsons: enter import_data: chron
2019-04-23 15:08:06,224 [INFO] jsons: enter import_model
2019-04-23 15:08:06,225 [INFO] jsons: exit import_model: chron0model
2019-04-23 15:08:06,225 [INFO] jsons: exit import_data: chron
2019-04-23 15:08:06,225 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:06,226 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:06,226 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:06,227 [INFO] csvs: enter read_csvs
2019-04-23 15:08:06,227 [INFO] directory: enter list_files
2019-04-23 15:08:06,228 [INFO] directory: exit list_files
2019-04-23 15:08:06,228 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:06,228 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-04-23 15:08:06,230 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:06,230 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:06,230 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-04-23 15:08:06,231 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:06,232 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:06,232 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-04-23 15:08:06,319 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:06,320 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:06,321 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-04-23 15:08:06,406 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:06,407 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:06,407 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-04-23 15:08:06,496 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:06,497 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:06,497 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-04-23 15:08:06,584 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:06,585 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:06,585 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-04-23 15:08:06,684 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:06,685 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:06,685 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-04-23 15:08:06,786 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:06,786 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:06,787 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-04-23 15:08:06,874 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:06,874 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:06,875 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-04-23 15:08:06,963 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:06,964 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:06,964 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-04-23 15:08:07,054 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:07,055 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:07,055 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-04-23 15:08:07,144 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:07,145 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:07,146 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-04-23 15:08:07,289 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:07,289 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:07,290 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-04-23 15:08:07,384 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:07,385 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:07,386 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-04-23 15:08:07,387 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:07,387 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:07,387 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-04-23 15:08:07,481 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:07,482 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:07,483 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:07,487 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:07,488 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:07,488 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-04-23 15:08:07,489 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,489 [INFO] csvs: enter merge_csv_model
2019-04-23 15:08:07,491 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,595 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,628 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,661 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,693 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,726 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,758 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,791 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,824 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,857 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,889 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,922 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,954 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:07,955 [INFO] csvs: exit merge_csv_model
2019-04-23 15:08:07,955 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:07,955 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:07,956 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:08,722 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 15:08:08,723 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 15:08:08,723 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 15:08:08,724 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-04-23 15:08:08,724 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 15:08:08,724 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:08,728 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-04-23 15:08:08,737 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp6xchp9dp
2019-04-23 15:08:08,738 [INFO] zips: enter unzip
2019-04-23 15:08:08,740 [INFO] zips: exit unzip
2019-04-23 15:08:08,826 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-04-23 15:08:08,827 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:08,828 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:08,828 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:08,828 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:08,828 [INFO] jsons: enter import_data: chron
2019-04-23 15:08:08,829 [INFO] jsons: exit import_data: chron
2019-04-23 15:08:08,829 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:08,829 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:08,829 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:08,830 [INFO] csvs: enter read_csvs
2019-04-23 15:08:08,830 [INFO] directory: enter list_files
2019-04-23 15:08:08,830 [INFO] directory: exit list_files
2019-04-23 15:08:08,830 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:08,831 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-04-23 15:08:08,831 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:08,831 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:08,832 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-04-23 15:08:08,835 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:08,835 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:08,836 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:08,842 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:08,842 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:08,843 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:08,844 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-04-23 15:08:08,845 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-04-23 15:08:08,846 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-04-23 15:08:08,847 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:08,847 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:08,847 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:08,847 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:08,853 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 15:08:08,853 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 15:08:08,854 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 15:08:08,854 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 15:08:08,854 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:08,855 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-04-23 15:08:08,856 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpsd_rb504
2019-04-23 15:08:08,856 [INFO] zips: enter unzip
2019-04-23 15:08:08,859 [INFO] zips: exit unzip
2019-04-23 15:08:08,890 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-04-23 15:08:08,890 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:08,891 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:08,891 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:08,891 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:08,891 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:08,892 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:08,892 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:08,892 [INFO] csvs: enter read_csvs
2019-04-23 15:08:08,893 [INFO] directory: enter list_files
2019-04-23 15:08:08,893 [INFO] directory: exit list_files
2019-04-23 15:08:08,893 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:08,893 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-04-23 15:08:08,894 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:08,894 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:08,895 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:08,896 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:08,896 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:08,896 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:08,897 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:08,897 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 15:08:08,898 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 15:08:08,898 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:08,899 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-04-23 15:08:08,900 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpn9fh4ikv
2019-04-23 15:08:08,900 [INFO] zips: enter unzip
2019-04-23 15:08:08,902 [INFO] zips: exit unzip
2019-04-23 15:08:08,938 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-04-23 15:08:08,939 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:08,939 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:08,940 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:08,940 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:08,940 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:08,941 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:08,941 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:08,941 [INFO] csvs: enter read_csvs
2019-04-23 15:08:08,942 [INFO] directory: enter list_files
2019-04-23 15:08:08,942 [INFO] directory: exit list_files
2019-04-23 15:08:08,942 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:08,943 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-04-23 15:08:08,945 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:08,945 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:08,945 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:08,949 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:08,949 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:08,949 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:08,950 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:08,952 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 15:08:08,952 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 15:08:08,952 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:08,953 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-04-23 15:08:08,954 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp2xu_xgbd
2019-04-23 15:08:08,954 [INFO] zips: enter unzip
2019-04-23 15:08:08,957 [INFO] zips: exit unzip
2019-04-23 15:08:08,984 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-04-23 15:08:08,984 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:08,985 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:08,985 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:08,985 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:08,985 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:08,985 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:08,986 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:08,986 [INFO] csvs: enter read_csvs
2019-04-23 15:08:08,986 [INFO] directory: enter list_files
2019-04-23 15:08:08,986 [INFO] directory: exit list_files
2019-04-23 15:08:08,987 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:08,987 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-04-23 15:08:08,988 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:08,988 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:08,988 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:08,989 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:08,990 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:08,990 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:08,990 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:08,991 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 15:08:08,991 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 15:08:08,991 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:08,992 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-04-23 15:08:08,993 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp_1997vqg
2019-04-23 15:08:08,993 [INFO] zips: enter unzip
2019-04-23 15:08:08,996 [INFO] zips: exit unzip
2019-04-23 15:08:09,045 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-04-23 15:08:09,046 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:09,046 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:09,047 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:09,047 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:09,047 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:09,047 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:09,047 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:09,048 [INFO] csvs: enter read_csvs
2019-04-23 15:08:09,048 [INFO] directory: enter list_files
2019-04-23 15:08:09,049 [INFO] directory: exit list_files
2019-04-23 15:08:09,049 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:09,049 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-04-23 15:08:09,050 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:09,050 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:09,050 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-04-23 15:08:09,052 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:09,052 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:09,053 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:09,055 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-04-23 15:08:09,055 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:09,056 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:09,056 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:09,057 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:09,057 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:09,059 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 15:08:09,059 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 15:08:09,060 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:09,061 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-04-23 15:08:09,061 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpbfr273o6
2019-04-23 15:08:09,062 [INFO] zips: enter unzip
2019-04-23 15:08:09,064 [INFO] zips: exit unzip
2019-04-23 15:08:09,093 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-04-23 15:08:09,093 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:09,094 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:09,094 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:09,094 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:09,095 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:09,095 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:09,095 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:09,095 [INFO] csvs: enter read_csvs
2019-04-23 15:08:09,096 [INFO] directory: enter list_files
2019-04-23 15:08:09,096 [INFO] directory: exit list_files
2019-04-23 15:08:09,096 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:09,096 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-04-23 15:08:09,099 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:09,099 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:09,100 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:09,102 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:09,102 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:09,102 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:09,102 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:09,105 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 15:08:09,105 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 15:08:09,105 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:09,106 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-04-23 15:08:09,107 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmphchax76f
2019-04-23 15:08:09,107 [INFO] zips: enter unzip
2019-04-23 15:08:09,110 [INFO] zips: exit unzip
2019-04-23 15:08:09,195 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-04-23 15:08:09,196 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:09,197 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:09,197 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:09,198 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:09,198 [INFO] jsons: enter import_data: chron
2019-04-23 15:08:09,198 [INFO] jsons: exit import_data: chron
2019-04-23 15:08:09,198 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:09,199 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:09,199 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:09,200 [INFO] csvs: enter read_csvs
2019-04-23 15:08:09,200 [INFO] directory: enter list_files
2019-04-23 15:08:09,200 [INFO] directory: exit list_files
2019-04-23 15:08:09,200 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:09,200 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-04-23 15:08:09,201 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:09,201 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:09,201 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-04-23 15:08:09,202 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:09,202 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:09,202 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:09,204 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:09,204 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:09,205 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:09,205 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-04-23 15:08:09,205 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:09,206 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:09,206 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:09,206 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:09,208 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 15:08:09,208 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 15:08:09,209 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 15:08:09,209 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 15:08:09,209 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:09,210 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-04-23 15:08:09,211 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmphjm1pj3x
2019-04-23 15:08:09,211 [INFO] zips: enter unzip
2019-04-23 15:08:09,214 [INFO] zips: exit unzip
2019-04-23 15:08:09,285 [INFO] jsons: Read JSONLD successful: Ocn-MontegoBayJamaica.Haase-Schramm.2003.jsonld
2019-04-23 15:08:09,285 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:09,286 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:09,287 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:09,287 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:09,287 [INFO] jsons: enter import_data: chron
2019-04-23 15:08:09,287 [INFO] jsons: exit import_data: chron
2019-04-23 15:08:09,288 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:09,288 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:09,288 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:09,288 [INFO] csvs: enter read_csvs
2019-04-23 15:08:09,289 [INFO] directory: enter list_files
2019-04-23 15:08:09,289 [INFO] directory: exit list_files
2019-04-23 15:08:09,289 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:09,289 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo1measurement1.csv
2019-04-23 15:08:09,290 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:09,290 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:09,290 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo2measurement1.csv
2019-04-23 15:08:09,291 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:09,291 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:09,292 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron1measurement1.csv
2019-04-23 15:08:09,292 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:09,292 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:09,292 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:09,294 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:09,295 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:09,295 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:09,295 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:09,296 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:09,296 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:09,296 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:09,297 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 15:08:09,298 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 15:08:09,298 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 15:08:09,298 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 15:08:09,299 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:09,300 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MontegoBayJamaica.Haase-Schramm.2003.lpd
2019-04-23 15:08:09,301 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpblvsc3jn
2019-04-23 15:08:09,301 [INFO] zips: enter unzip
2019-04-23 15:08:09,303 [INFO] zips: exit unzip
2019-04-23 15:08:09,414 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-04-23 15:08:09,415 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:09,417 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:09,417 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:09,417 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:09,418 [INFO] jsons: enter import_data: chron
2019-04-23 15:08:09,418 [INFO] jsons: exit import_data: chron
2019-04-23 15:08:09,418 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:09,418 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:09,419 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:09,420 [INFO] csvs: enter read_csvs
2019-04-23 15:08:09,420 [INFO] directory: enter list_files
2019-04-23 15:08:09,420 [INFO] directory: exit list_files
2019-04-23 15:08:09,420 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:09,421 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-04-23 15:08:09,421 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:09,421 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:09,422 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-04-23 15:08:09,423 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:09,423 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:09,423 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:09,427 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:09,428 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:09,428 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:09,428 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-04-23 15:08:09,429 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:09,429 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:09,430 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:09,430 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:09,432 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 15:08:09,433 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 15:08:09,433 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 15:08:09,433 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 15:08:09,433 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:09,434 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-04-23 15:08:09,435 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpk2cdomwz
2019-04-23 15:08:09,435 [INFO] zips: enter unzip
2019-04-23 15:08:09,437 [INFO] zips: exit unzip
2019-04-23 15:08:09,470 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-04-23 15:08:09,470 [INFO] jsons: exit read_json_from_file
2019-04-23 15:08:09,471 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:08:09,471 [INFO] jsons: enter import_data: paleo
2019-04-23 15:08:09,472 [INFO] jsons: exit import_data: paleo
2019-04-23 15:08:09,472 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:08:09,472 [INFO] misc: enter remove_empty_doi
2019-04-23 15:08:09,472 [INFO] misc: exit remove_empty_doi
2019-04-23 15:08:09,473 [INFO] csvs: enter read_csvs
2019-04-23 15:08:09,473 [INFO] directory: enter list_files
2019-04-23 15:08:09,473 [INFO] directory: exit list_files
2019-04-23 15:08:09,474 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:08:09,474 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-04-23 15:08:09,474 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:08:09,474 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:08:09,475 [INFO] csvs: enter merge_csv_section
2019-04-23 15:08:09,476 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:08:09,476 [INFO] csvs: exit merge_csv_section
2019-04-23 15:08:09,476 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:08:09,476 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:08:09,477 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 15:08:09,477 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 15:08:09,478 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:08:09,479 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-04-23 15:08:09,479 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.77 seconds
2019-04-23 15:08:09,481 [INFO] time_series: enter extract_main
2019-04-23 15:08:09,482 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:09,482 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:09,482 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:09,482 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:09,483 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:09,483 [INFO] time_series: enter extract_authors
2019-04-23 15:08:09,483 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:09,483 [INFO] time_series: processing publication #: 1
2019-04-23 15:08:09,484 [INFO] time_series: enter extract_authors
2019-04-23 15:08:09,484 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:09,484 [INFO] time_series: enter extract_pc
2019-04-23 15:08:09,484 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:09,485 [INFO] time_series: enter extract_special
2019-04-23 15:08:09,486 [INFO] time_series: enter extract_columns
2019-04-23 15:08:09,486 [INFO] time_series: enter extract_columns
2019-04-23 15:08:09,487 [INFO] time_series: exit extract_main
2019-04-23 15:08:09,493 [INFO] time_series: enter extract_main
2019-04-23 15:08:09,494 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:09,494 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:09,494 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:09,494 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:09,494 [INFO] time_series: enter extract_authors
2019-04-23 15:08:09,495 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-04-23 15:08:09,495 [INFO] time_series: exit extract_main
2019-04-23 15:08:09,497 [INFO] time_series: enter extract_main
2019-04-23 15:08:09,497 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:09,497 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:09,498 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:09,498 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:09,498 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:09,498 [INFO] time_series: enter extract_authors
2019-04-23 15:08:09,499 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:09,499 [INFO] time_series: processing publication #: 1
2019-04-23 15:08:09,499 [INFO] time_series: enter extract_authors
2019-04-23 15:08:09,499 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:09,500 [INFO] time_series: enter extract_pc
2019-04-23 15:08:09,500 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:09,500 [INFO] time_series: enter extract_special
2019-04-23 15:08:09,501 [INFO] time_series: enter extract_columns
2019-04-23 15:08:09,502 [INFO] time_series: enter extract_columns
2019-04-23 15:08:09,502 [INFO] time_series: exit extract_main
2019-04-23 15:08:10,459 [INFO] time_series: enter extract_main
2019-04-23 15:08:10,459 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:10,460 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:10,460 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:10,460 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:10,460 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:10,461 [INFO] time_series: enter extract_authors
2019-04-23 15:08:10,461 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:10,461 [INFO] time_series: processing publication #: 1
2019-04-23 15:08:10,461 [INFO] time_series: enter extract_authors
2019-04-23 15:08:10,461 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:10,461 [INFO] time_series: enter extract_pc
2019-04-23 15:08:10,462 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:10,462 [INFO] time_series: enter extract_special
2019-04-23 15:08:10,464 [INFO] time_series: enter extract_columns
2019-04-23 15:08:10,465 [INFO] time_series: enter extract_columns
2019-04-23 15:08:10,465 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,234 [INFO] time_series: enter extract_main
2019-04-23 15:08:11,234 [INFO] time_series: enter _extract_funding
2019-04-23 15:08:11,235 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,235 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,235 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:11,235 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:11,236 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,236 [INFO] time_series: enter extract_pc
2019-04-23 15:08:11,236 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,236 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,237 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,238 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,238 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,239 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,239 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,240 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,240 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,253 [INFO] time_series: enter extract_main
2019-04-23 15:08:11,254 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,254 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,254 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:11,254 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:11,255 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,255 [INFO] time_series: enter extract_pc
2019-04-23 15:08:11,255 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,255 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,257 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,259 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,260 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,262 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,262 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,263 [INFO] time_series: enter extract_main
2019-04-23 15:08:11,264 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,264 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,264 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,264 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:11,265 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:11,265 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,265 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,265 [INFO] time_series: processing publication #: 1
2019-04-23 15:08:11,265 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,265 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,266 [INFO] time_series: processing publication #: 2
2019-04-23 15:08:11,266 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,266 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,266 [INFO] time_series: enter extract_pc
2019-04-23 15:08:11,267 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,267 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,268 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,268 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,268 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,271 [INFO] time_series: enter extract_main
2019-04-23 15:08:11,271 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,272 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,272 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,272 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:11,272 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:11,273 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,273 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,273 [INFO] time_series: processing publication #: 1
2019-04-23 15:08:11,273 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,274 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,274 [INFO] time_series: enter extract_pc
2019-04-23 15:08:11,274 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,274 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,275 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,276 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,276 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,277 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,278 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,278 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,278 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,279 [INFO] time_series: enter extract_main
2019-04-23 15:08:11,280 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,280 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,280 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,280 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:11,281 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:11,281 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,281 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,281 [INFO] time_series: processing publication #: 1
2019-04-23 15:08:11,281 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,282 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,282 [INFO] time_series: enter extract_pc
2019-04-23 15:08:11,282 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,282 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,283 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,283 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,283 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,285 [INFO] time_series: enter extract_main
2019-04-23 15:08:11,286 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,286 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,286 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,287 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:11,287 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:11,287 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,287 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,287 [INFO] time_series: processing publication #: 1
2019-04-23 15:08:11,288 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,288 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,288 [INFO] time_series: processing publication #: 2
2019-04-23 15:08:11,288 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,288 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,289 [INFO] time_series: enter extract_pc
2019-04-23 15:08:11,289 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,289 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,290 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,290 [INFO] time_series: enter extract_calibration
2019-04-23 15:08:11,290 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 15:08:11,291 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,291 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,292 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,292 [INFO] time_series: enter extract_calibration
2019-04-23 15:08:11,292 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 15:08:11,292 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,295 [INFO] time_series: enter extract_main
2019-04-23 15:08:11,295 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,296 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,296 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,296 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:11,296 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:11,297 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,297 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,297 [INFO] time_series: processing publication #: 1
2019-04-23 15:08:11,297 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,297 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,298 [INFO] time_series: processing publication #: 2
2019-04-23 15:08:11,298 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,298 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,298 [INFO] time_series: enter extract_pc
2019-04-23 15:08:11,298 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,299 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,300 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,301 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,302 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,303 [INFO] time_series: enter extract_main
2019-04-23 15:08:11,303 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,304 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,304 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:11,304 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:11,304 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,305 [INFO] time_series: enter extract_pc
2019-04-23 15:08:11,305 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,305 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,305 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,306 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,306 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,306 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,307 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,307 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,307 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,308 [INFO] time_series: enter extract_main
2019-04-23 15:08:11,309 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,309 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,309 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,309 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:11,310 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:11,310 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,310 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,310 [INFO] time_series: processing publication #: 1
2019-04-23 15:08:11,311 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,311 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,311 [INFO] time_series: enter extract_pc
2019-04-23 15:08:11,311 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,311 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,312 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,312 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,313 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,313 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,313 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,314 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,314 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,316 [INFO] time_series: enter extract_main
2019-04-23 15:08:11,317 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,317 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,317 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:11,317 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:11,318 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,318 [INFO] time_series: enter extract_pc
2019-04-23 15:08:11,318 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,318 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,318 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-04-23 15:08:11,319 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,319 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,320 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,320 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,321 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,321 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,322 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,322 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,322 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,323 [INFO] time_series: enter extract_main
2019-04-23 15:08:11,323 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,324 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,324 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:08:11,324 [INFO] time_series: enter _extract_pub
2019-04-23 15:08:11,324 [INFO] time_series: processing publication #: 0
2019-04-23 15:08:11,324 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,325 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,325 [INFO] time_series: processing publication #: 1
2019-04-23 15:08:11,325 [INFO] time_series: enter extract_authors
2019-04-23 15:08:11,325 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:08:11,325 [INFO] time_series: enter extract_pc
2019-04-23 15:08:11,326 [INFO] time_series: enter extract_table_root
2019-04-23 15:08:11,326 [INFO] time_series: enter extract_special
2019-04-23 15:08:11,326 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,327 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,327 [INFO] time_series: enter extract_columns
2019-04-23 15:08:11,327 [INFO] time_series: exit extract_main
2019-04-23 15:08:11,327 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.84 seconds
2019-04-23 15:08:14,077 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 15:08:14,162 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 15:08:14,165 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 15:08:14,168 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 15:12:36,471 [DEBUG] shapely.geos: Trying `CDLL(/anaconda3/bin/../lib/libgeos_c.dylib)`
2019-04-23 15:12:36,472 [DEBUG] shapely.geos: Library path: '/anaconda3/bin/../lib/libgeos_c.dylib'
2019-04-23 15:12:36,473 [DEBUG] shapely.geos: DLL: <CDLL '/anaconda3/bin/../lib/libgeos_c.dylib', handle 7fa7b2b8cbd0 at 0x1a24621e48>
2019-04-23 15:12:36,474 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-04-23 15:12:36,474 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-04-23 15:12:36,475 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 115609e50 at 0x11d5a4860>
2019-04-23 15:12:36,937 [INFO] directory: enter list_files
2019-04-23 15:12:36,938 [INFO] directory: exit list_files
2019-04-23 15:12:36,940 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp_rkdt56d
2019-04-23 15:12:36,940 [INFO] zips: enter unzip
2019-04-23 15:12:36,943 [INFO] zips: exit unzip
2019-04-23 15:12:36,968 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-04-23 15:12:36,968 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:36,969 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:36,969 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:36,969 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:36,969 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:36,970 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:36,970 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:36,970 [INFO] csvs: enter read_csvs
2019-04-23 15:12:36,970 [INFO] directory: enter list_files
2019-04-23 15:12:36,971 [INFO] directory: exit list_files
2019-04-23 15:12:36,971 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:36,971 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-04-23 15:12:36,972 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:36,972 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:36,973 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:36,974 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:36,975 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:36,975 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:36,975 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:36,976 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 15:12:36,977 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 15:12:36,977 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:36,978 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-04-23 15:12:36,978 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpxwnfcept
2019-04-23 15:12:36,979 [INFO] zips: enter unzip
2019-04-23 15:12:36,982 [INFO] zips: exit unzip
2019-04-23 15:12:37,374 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-04-23 15:12:37,375 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:37,381 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:37,381 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:37,382 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:37,382 [INFO] jsons: enter import_data: chron
2019-04-23 15:12:37,382 [INFO] jsons: exit import_data: chron
2019-04-23 15:12:37,383 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:37,383 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:37,383 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:37,386 [INFO] csvs: enter read_csvs
2019-04-23 15:12:37,386 [INFO] directory: enter list_files
2019-04-23 15:12:37,387 [INFO] directory: exit list_files
2019-04-23 15:12:37,387 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:37,387 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-04-23 15:12:37,388 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:37,388 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:37,388 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-04-23 15:12:37,389 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:37,390 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:37,390 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-04-23 15:12:37,391 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:37,391 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:37,391 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-04-23 15:12:37,392 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:37,392 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:37,393 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:37,398 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:37,404 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:37,408 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:37,409 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:37,409 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:37,410 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-04-23 15:12:37,411 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:37,411 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:37,411 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:37,411 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:37,417 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 15:12:37,417 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 15:12:37,417 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 15:12:37,417 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 15:12:37,418 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:37,419 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-04-23 15:12:37,420 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpzx3vuv2b
2019-04-23 15:12:37,420 [INFO] zips: enter unzip
2019-04-23 15:12:37,422 [INFO] zips: exit unzip
2019-04-23 15:12:37,450 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-04-23 15:12:37,450 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:37,451 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:37,451 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:37,451 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:37,451 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:37,452 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:37,452 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:37,452 [INFO] csvs: enter read_csvs
2019-04-23 15:12:37,453 [INFO] directory: enter list_files
2019-04-23 15:12:37,453 [INFO] directory: exit list_files
2019-04-23 15:12:37,453 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:37,453 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-04-23 15:12:37,455 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:37,455 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:37,456 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:37,457 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:37,457 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:37,458 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:37,458 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:37,459 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 15:12:37,460 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 15:12:37,460 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:37,461 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-04-23 15:12:37,462 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpkpe3akxi
2019-04-23 15:12:37,462 [INFO] zips: enter unzip
2019-04-23 15:12:37,526 [INFO] zips: exit unzip
2019-04-23 15:12:37,779 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-04-23 15:12:37,780 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:37,784 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:37,785 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:37,785 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:37,785 [INFO] jsons: enter import_data: chron
2019-04-23 15:12:37,786 [INFO] jsons: enter import_model
2019-04-23 15:12:37,786 [INFO] jsons: exit import_model: chron0model
2019-04-23 15:12:37,786 [INFO] jsons: exit import_data: chron
2019-04-23 15:12:37,787 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:37,787 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:37,787 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:37,790 [INFO] csvs: enter read_csvs
2019-04-23 15:12:37,790 [INFO] directory: enter list_files
2019-04-23 15:12:37,790 [INFO] directory: exit list_files
2019-04-23 15:12:37,791 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:37,791 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-04-23 15:12:38,644 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:38,645 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:38,645 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-04-23 15:12:38,649 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:38,649 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:38,649 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:38,652 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:38,652 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:38,652 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:38,653 [INFO] csvs: enter merge_csv_model
2019-04-23 15:12:39,155 [INFO] csvs: exit merge_csv_model
2019-04-23 15:12:39,156 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:39,156 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:39,157 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:40,145 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 15:12:40,146 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 15:12:40,146 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 15:12:40,147 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-04-23 15:12:40,147 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 15:12:40,148 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:40,151 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-04-23 15:12:40,171 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmphw9scft5
2019-04-23 15:12:40,171 [INFO] zips: enter unzip
2019-04-23 15:12:40,322 [INFO] zips: exit unzip
2019-04-23 15:12:40,508 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-04-23 15:12:40,508 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:40,510 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:40,510 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:40,510 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:40,510 [INFO] jsons: enter import_data: chron
2019-04-23 15:12:40,510 [INFO] jsons: enter import_model
2019-04-23 15:12:40,511 [INFO] jsons: exit import_model: chron0model
2019-04-23 15:12:40,511 [INFO] jsons: exit import_data: chron
2019-04-23 15:12:40,511 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:40,511 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:40,512 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:40,513 [INFO] csvs: enter read_csvs
2019-04-23 15:12:40,513 [INFO] directory: enter list_files
2019-04-23 15:12:40,514 [INFO] directory: exit list_files
2019-04-23 15:12:40,514 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:40,514 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-04-23 15:12:40,515 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:40,516 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:40,516 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-04-23 15:12:40,517 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:40,517 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:40,518 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-04-23 15:12:40,604 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:40,604 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:40,605 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-04-23 15:12:40,695 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:40,696 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:40,697 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-04-23 15:12:40,781 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:40,782 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:40,782 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-04-23 15:12:40,871 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:40,872 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:40,872 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-04-23 15:12:40,960 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:40,961 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:40,961 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-04-23 15:12:41,049 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:41,050 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:41,050 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-04-23 15:12:41,134 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:41,135 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:41,135 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-04-23 15:12:41,220 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:41,221 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:41,221 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-04-23 15:12:41,300 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:41,300 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:41,301 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-04-23 15:12:41,391 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:41,392 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:41,393 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-04-23 15:12:41,533 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:41,534 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:41,534 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-04-23 15:12:41,626 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:41,627 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:41,627 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-04-23 15:12:41,628 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:41,628 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:41,628 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-04-23 15:12:41,709 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:41,710 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:41,711 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:41,717 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:41,718 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:41,718 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-04-23 15:12:41,719 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:41,719 [INFO] csvs: enter merge_csv_model
2019-04-23 15:12:41,722 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:41,825 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:41,859 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:41,893 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:41,925 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:41,957 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:41,989 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:42,021 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:42,053 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:42,085 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:42,117 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:42,150 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:42,182 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:42,182 [INFO] csvs: exit merge_csv_model
2019-04-23 15:12:42,182 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:42,182 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:42,183 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:42,922 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 15:12:42,923 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 15:12:42,923 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 15:12:42,924 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-04-23 15:12:42,924 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 15:12:42,925 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:42,931 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-04-23 15:12:42,942 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpzwzou5u8
2019-04-23 15:12:42,942 [INFO] zips: enter unzip
2019-04-23 15:12:42,945 [INFO] zips: exit unzip
2019-04-23 15:12:43,027 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-04-23 15:12:43,028 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:43,030 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:43,031 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:43,031 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:43,031 [INFO] jsons: enter import_data: chron
2019-04-23 15:12:43,032 [INFO] jsons: exit import_data: chron
2019-04-23 15:12:43,032 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:43,033 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:43,033 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:43,034 [INFO] csvs: enter read_csvs
2019-04-23 15:12:43,034 [INFO] directory: enter list_files
2019-04-23 15:12:43,035 [INFO] directory: exit list_files
2019-04-23 15:12:43,035 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,035 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-04-23 15:12:43,036 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,037 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,037 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-04-23 15:12:43,042 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,042 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:43,043 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,049 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,049 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,049 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,051 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-04-23 15:12:43,052 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-04-23 15:12:43,053 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-04-23 15:12:43,053 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,054 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,054 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:43,054 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:43,058 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 15:12:43,059 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 15:12:43,059 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 15:12:43,059 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 15:12:43,059 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:43,060 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-04-23 15:12:43,061 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpovzhmm7m
2019-04-23 15:12:43,061 [INFO] zips: enter unzip
2019-04-23 15:12:43,063 [INFO] zips: exit unzip
2019-04-23 15:12:43,092 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-04-23 15:12:43,093 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:43,093 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:43,094 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:43,094 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:43,094 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:43,095 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:43,095 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:43,095 [INFO] csvs: enter read_csvs
2019-04-23 15:12:43,096 [INFO] directory: enter list_files
2019-04-23 15:12:43,096 [INFO] directory: exit list_files
2019-04-23 15:12:43,096 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,097 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-04-23 15:12:43,098 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,098 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:43,098 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,099 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,100 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,100 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:43,100 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:43,102 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 15:12:43,102 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 15:12:43,102 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:43,104 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-04-23 15:12:43,104 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp2jvgacgv
2019-04-23 15:12:43,105 [INFO] zips: enter unzip
2019-04-23 15:12:43,108 [INFO] zips: exit unzip
2019-04-23 15:12:43,144 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-04-23 15:12:43,145 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:43,145 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:43,145 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:43,146 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:43,146 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:43,146 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:43,147 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:43,147 [INFO] csvs: enter read_csvs
2019-04-23 15:12:43,148 [INFO] directory: enter list_files
2019-04-23 15:12:43,148 [INFO] directory: exit list_files
2019-04-23 15:12:43,148 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,148 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-04-23 15:12:43,150 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,151 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:43,151 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,154 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,155 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,155 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:43,155 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:43,157 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 15:12:43,158 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 15:12:43,158 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:43,159 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-04-23 15:12:43,159 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpwbe509fu
2019-04-23 15:12:43,160 [INFO] zips: enter unzip
2019-04-23 15:12:43,162 [INFO] zips: exit unzip
2019-04-23 15:12:43,188 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-04-23 15:12:43,188 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:43,189 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:43,189 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:43,189 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:43,189 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:43,190 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:43,190 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:43,190 [INFO] csvs: enter read_csvs
2019-04-23 15:12:43,190 [INFO] directory: enter list_files
2019-04-23 15:12:43,191 [INFO] directory: exit list_files
2019-04-23 15:12:43,191 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,191 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-04-23 15:12:43,192 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,192 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:43,192 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,194 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,194 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,194 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:43,194 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:43,195 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 15:12:43,195 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 15:12:43,196 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:43,197 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-04-23 15:12:43,198 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp99a42xjb
2019-04-23 15:12:43,199 [INFO] zips: enter unzip
2019-04-23 15:12:43,202 [INFO] zips: exit unzip
2019-04-23 15:12:43,251 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-04-23 15:12:43,251 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:43,252 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:43,252 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:43,252 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:43,252 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:43,253 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:43,253 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:43,253 [INFO] csvs: enter read_csvs
2019-04-23 15:12:43,253 [INFO] directory: enter list_files
2019-04-23 15:12:43,254 [INFO] directory: exit list_files
2019-04-23 15:12:43,254 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,254 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-04-23 15:12:43,255 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,255 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,255 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-04-23 15:12:43,257 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,257 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:43,257 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,259 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-04-23 15:12:43,259 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,260 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,261 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,261 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:43,261 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:43,265 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 15:12:43,266 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 15:12:43,266 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:43,268 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-04-23 15:12:43,269 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpkrkhwwxk
2019-04-23 15:12:43,269 [INFO] zips: enter unzip
2019-04-23 15:12:43,272 [INFO] zips: exit unzip
2019-04-23 15:12:43,304 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-04-23 15:12:43,304 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:43,305 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:43,305 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:43,305 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:43,305 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:43,305 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:43,306 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:43,306 [INFO] csvs: enter read_csvs
2019-04-23 15:12:43,306 [INFO] directory: enter list_files
2019-04-23 15:12:43,306 [INFO] directory: exit list_files
2019-04-23 15:12:43,307 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,307 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-04-23 15:12:43,310 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,310 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:43,310 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,312 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,312 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,313 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:43,313 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:43,316 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 15:12:43,316 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 15:12:43,316 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:43,317 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-04-23 15:12:43,317 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp2u7edqyh
2019-04-23 15:12:43,318 [INFO] zips: enter unzip
2019-04-23 15:12:43,320 [INFO] zips: exit unzip
2019-04-23 15:12:43,402 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-04-23 15:12:43,403 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:43,404 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:43,404 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:43,404 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:43,405 [INFO] jsons: enter import_data: chron
2019-04-23 15:12:43,405 [INFO] jsons: exit import_data: chron
2019-04-23 15:12:43,405 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:43,405 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:43,406 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:43,406 [INFO] csvs: enter read_csvs
2019-04-23 15:12:43,407 [INFO] directory: enter list_files
2019-04-23 15:12:43,407 [INFO] directory: exit list_files
2019-04-23 15:12:43,407 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,407 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-04-23 15:12:43,408 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,408 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,409 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-04-23 15:12:43,409 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,410 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:43,410 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,413 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,413 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,413 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,414 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-04-23 15:12:43,415 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,415 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,415 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:43,415 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:43,416 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 15:12:43,416 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 15:12:43,417 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 15:12:43,417 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 15:12:43,417 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:43,418 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-04-23 15:12:43,419 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp9_ukaf5h
2019-04-23 15:12:43,419 [INFO] zips: enter unzip
2019-04-23 15:12:43,422 [INFO] zips: exit unzip
2019-04-23 15:12:43,490 [INFO] jsons: Read JSONLD successful: Ocn-MontegoBayJamaica.Haase-Schramm.2003.jsonld
2019-04-23 15:12:43,491 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:43,493 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:43,493 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:43,494 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:43,494 [INFO] jsons: enter import_data: chron
2019-04-23 15:12:43,494 [INFO] jsons: exit import_data: chron
2019-04-23 15:12:43,494 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:43,495 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:43,495 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:43,496 [INFO] csvs: enter read_csvs
2019-04-23 15:12:43,497 [INFO] directory: enter list_files
2019-04-23 15:12:43,497 [INFO] directory: exit list_files
2019-04-23 15:12:43,497 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,498 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo1measurement1.csv
2019-04-23 15:12:43,498 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,499 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,499 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo2measurement1.csv
2019-04-23 15:12:43,500 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,500 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,501 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron1measurement1.csv
2019-04-23 15:12:43,501 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,502 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:43,502 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,504 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,505 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,505 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,505 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,506 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,506 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:43,506 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:43,508 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 15:12:43,508 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 15:12:43,509 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 15:12:43,509 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 15:12:43,510 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:43,511 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MontegoBayJamaica.Haase-Schramm.2003.lpd
2019-04-23 15:12:43,512 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpbom5vagz
2019-04-23 15:12:43,512 [INFO] zips: enter unzip
2019-04-23 15:12:43,515 [INFO] zips: exit unzip
2019-04-23 15:12:43,624 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-04-23 15:12:43,625 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:43,626 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:43,627 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:43,627 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:43,627 [INFO] jsons: enter import_data: chron
2019-04-23 15:12:43,628 [INFO] jsons: exit import_data: chron
2019-04-23 15:12:43,628 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:43,628 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:43,628 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:43,629 [INFO] csvs: enter read_csvs
2019-04-23 15:12:43,629 [INFO] directory: enter list_files
2019-04-23 15:12:43,629 [INFO] directory: exit list_files
2019-04-23 15:12:43,630 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,630 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-04-23 15:12:43,630 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,631 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,631 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-04-23 15:12:43,632 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,633 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:43,633 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,637 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,637 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,637 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,638 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-04-23 15:12:43,639 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,639 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,639 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:43,640 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:43,642 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 15:12:43,642 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 15:12:43,642 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 15:12:43,642 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 15:12:43,643 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:43,644 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-04-23 15:12:43,646 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp5dzu2m65
2019-04-23 15:12:43,646 [INFO] zips: enter unzip
2019-04-23 15:12:43,648 [INFO] zips: exit unzip
2019-04-23 15:12:43,680 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-04-23 15:12:43,680 [INFO] jsons: exit read_json_from_file
2019-04-23 15:12:43,681 [INFO] jsons: enter idx_num_to_name
2019-04-23 15:12:43,681 [INFO] jsons: enter import_data: paleo
2019-04-23 15:12:43,681 [INFO] jsons: exit import_data: paleo
2019-04-23 15:12:43,681 [INFO] jsons: exit idx_num_to_name
2019-04-23 15:12:43,682 [INFO] misc: enter remove_empty_doi
2019-04-23 15:12:43,682 [INFO] misc: exit remove_empty_doi
2019-04-23 15:12:43,682 [INFO] csvs: enter read_csvs
2019-04-23 15:12:43,682 [INFO] directory: enter list_files
2019-04-23 15:12:43,683 [INFO] directory: exit list_files
2019-04-23 15:12:43,683 [INFO] csvs: enter read_csv_from_file
2019-04-23 15:12:43,683 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-04-23 15:12:43,683 [INFO] csvs: exit read_csv_from_file
2019-04-23 15:12:43,684 [INFO] csvs: enter merge_csv_metadata
2019-04-23 15:12:43,684 [INFO] csvs: enter merge_csv_section
2019-04-23 15:12:43,685 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 15:12:43,685 [INFO] csvs: exit merge_csv_section
2019-04-23 15:12:43,686 [INFO] csvs: exit merge_csv_metadata
2019-04-23 15:12:43,686 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 15:12:43,687 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 15:12:43,687 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 15:12:43,687 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 15:12:43,688 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-04-23 15:12:43,689 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.73 seconds
2019-04-23 15:12:43,691 [INFO] time_series: enter extract_main
2019-04-23 15:12:43,692 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:43,692 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:43,693 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:43,693 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:43,693 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:43,693 [INFO] time_series: enter extract_authors
2019-04-23 15:12:43,694 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:43,694 [INFO] time_series: processing publication #: 1
2019-04-23 15:12:43,694 [INFO] time_series: enter extract_authors
2019-04-23 15:12:43,695 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:43,695 [INFO] time_series: enter extract_pc
2019-04-23 15:12:43,695 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:43,695 [INFO] time_series: enter extract_special
2019-04-23 15:12:43,696 [INFO] time_series: enter extract_columns
2019-04-23 15:12:43,697 [INFO] time_series: enter extract_columns
2019-04-23 15:12:43,698 [INFO] time_series: exit extract_main
2019-04-23 15:12:43,705 [INFO] time_series: enter extract_main
2019-04-23 15:12:43,705 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:43,705 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:43,706 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:43,706 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:43,706 [INFO] time_series: enter extract_authors
2019-04-23 15:12:43,706 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-04-23 15:12:43,707 [INFO] time_series: exit extract_main
2019-04-23 15:12:43,708 [INFO] time_series: enter extract_main
2019-04-23 15:12:43,709 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:43,709 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:43,709 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:43,709 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:43,710 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:43,710 [INFO] time_series: enter extract_authors
2019-04-23 15:12:43,710 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:43,710 [INFO] time_series: processing publication #: 1
2019-04-23 15:12:43,711 [INFO] time_series: enter extract_authors
2019-04-23 15:12:43,711 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:43,711 [INFO] time_series: enter extract_pc
2019-04-23 15:12:43,711 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:43,712 [INFO] time_series: enter extract_special
2019-04-23 15:12:43,712 [INFO] time_series: enter extract_columns
2019-04-23 15:12:43,713 [INFO] time_series: enter extract_columns
2019-04-23 15:12:43,714 [INFO] time_series: exit extract_main
2019-04-23 15:12:44,659 [INFO] time_series: enter extract_main
2019-04-23 15:12:44,660 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:44,661 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:44,661 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:44,661 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:44,661 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:44,662 [INFO] time_series: enter extract_authors
2019-04-23 15:12:44,662 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:44,662 [INFO] time_series: processing publication #: 1
2019-04-23 15:12:44,662 [INFO] time_series: enter extract_authors
2019-04-23 15:12:44,662 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:44,663 [INFO] time_series: enter extract_pc
2019-04-23 15:12:44,663 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:44,663 [INFO] time_series: enter extract_special
2019-04-23 15:12:44,665 [INFO] time_series: enter extract_columns
2019-04-23 15:12:44,667 [INFO] time_series: enter extract_columns
2019-04-23 15:12:44,667 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,448 [INFO] time_series: enter extract_main
2019-04-23 15:12:45,448 [INFO] time_series: enter _extract_funding
2019-04-23 15:12:45,449 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,449 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,449 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:45,449 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:45,450 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,450 [INFO] time_series: enter extract_pc
2019-04-23 15:12:45,450 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,450 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,451 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,451 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,452 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,452 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,453 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,453 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,454 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,467 [INFO] time_series: enter extract_main
2019-04-23 15:12:45,467 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,467 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,467 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:45,468 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:45,468 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,468 [INFO] time_series: enter extract_pc
2019-04-23 15:12:45,468 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,468 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,470 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,472 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,473 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,475 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,475 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,477 [INFO] time_series: enter extract_main
2019-04-23 15:12:45,477 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,477 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,478 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,478 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:45,478 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:45,478 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,478 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,479 [INFO] time_series: processing publication #: 1
2019-04-23 15:12:45,479 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,479 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,479 [INFO] time_series: processing publication #: 2
2019-04-23 15:12:45,479 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,480 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,480 [INFO] time_series: enter extract_pc
2019-04-23 15:12:45,480 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,481 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,481 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,482 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,482 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,484 [INFO] time_series: enter extract_main
2019-04-23 15:12:45,485 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,485 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,485 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,485 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:45,485 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:45,486 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,486 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,486 [INFO] time_series: processing publication #: 1
2019-04-23 15:12:45,486 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,486 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,487 [INFO] time_series: enter extract_pc
2019-04-23 15:12:45,487 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,487 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,488 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,489 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,489 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,490 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,490 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,491 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,491 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,492 [INFO] time_series: enter extract_main
2019-04-23 15:12:45,493 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,493 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,493 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,494 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:45,494 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:45,494 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,494 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,494 [INFO] time_series: processing publication #: 1
2019-04-23 15:12:45,495 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,495 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,495 [INFO] time_series: enter extract_pc
2019-04-23 15:12:45,495 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,496 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,496 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,497 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,497 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,499 [INFO] time_series: enter extract_main
2019-04-23 15:12:45,500 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,500 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,500 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,500 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:45,501 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:45,501 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,501 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,501 [INFO] time_series: processing publication #: 1
2019-04-23 15:12:45,501 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,502 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,502 [INFO] time_series: processing publication #: 2
2019-04-23 15:12:45,502 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,502 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,502 [INFO] time_series: enter extract_pc
2019-04-23 15:12:45,503 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,503 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,504 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,504 [INFO] time_series: enter extract_calibration
2019-04-23 15:12:45,504 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 15:12:45,505 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,505 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,505 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,506 [INFO] time_series: enter extract_calibration
2019-04-23 15:12:45,506 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 15:12:45,506 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,509 [INFO] time_series: enter extract_main
2019-04-23 15:12:45,509 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,510 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,510 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,510 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:45,511 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:45,511 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,511 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,511 [INFO] time_series: processing publication #: 1
2019-04-23 15:12:45,512 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,512 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,512 [INFO] time_series: processing publication #: 2
2019-04-23 15:12:45,512 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,513 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,513 [INFO] time_series: enter extract_pc
2019-04-23 15:12:45,513 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,513 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,515 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,516 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,516 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,517 [INFO] time_series: enter extract_main
2019-04-23 15:12:45,518 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,518 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,518 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:45,518 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:45,519 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,519 [INFO] time_series: enter extract_pc
2019-04-23 15:12:45,519 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,519 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,520 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,520 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,520 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,521 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,521 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,521 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,521 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,523 [INFO] time_series: enter extract_main
2019-04-23 15:12:45,523 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,523 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,523 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,524 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:45,524 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:45,524 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,524 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,524 [INFO] time_series: processing publication #: 1
2019-04-23 15:12:45,525 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,525 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,525 [INFO] time_series: enter extract_pc
2019-04-23 15:12:45,525 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,525 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,526 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,526 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,526 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,527 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,527 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,528 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,528 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,530 [INFO] time_series: enter extract_main
2019-04-23 15:12:45,531 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,531 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,531 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:45,531 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:45,531 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,532 [INFO] time_series: enter extract_pc
2019-04-23 15:12:45,532 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,532 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,532 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-04-23 15:12:45,533 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,534 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,534 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,535 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,535 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,536 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,536 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,537 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,537 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,538 [INFO] time_series: enter extract_main
2019-04-23 15:12:45,538 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,539 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,539 [INFO] time_series: enter ts_extract_geo
2019-04-23 15:12:45,539 [INFO] time_series: enter _extract_pub
2019-04-23 15:12:45,539 [INFO] time_series: processing publication #: 0
2019-04-23 15:12:45,539 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,540 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,540 [INFO] time_series: processing publication #: 1
2019-04-23 15:12:45,540 [INFO] time_series: enter extract_authors
2019-04-23 15:12:45,540 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 15:12:45,540 [INFO] time_series: enter extract_pc
2019-04-23 15:12:45,541 [INFO] time_series: enter extract_table_root
2019-04-23 15:12:45,541 [INFO] time_series: enter extract_special
2019-04-23 15:12:45,541 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,542 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,542 [INFO] time_series: enter extract_columns
2019-04-23 15:12:45,542 [INFO] time_series: exit extract_main
2019-04-23 15:12:45,543 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.85 seconds
2019-04-23 17:09:07,890 [DEBUG] shapely.geos: Trying `CDLL(/anaconda3/bin/../lib/libgeos_c.dylib)`
2019-04-23 17:09:07,891 [DEBUG] shapely.geos: Library path: '/anaconda3/bin/../lib/libgeos_c.dylib'
2019-04-23 17:09:07,891 [DEBUG] shapely.geos: DLL: <CDLL '/anaconda3/bin/../lib/libgeos_c.dylib', handle 7fa594e8fb00 at 0x1a1dd9be80>
2019-04-23 17:09:07,892 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-04-23 17:09:07,892 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-04-23 17:09:07,893 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 110d63e50 at 0x116d1b828>
2019-04-23 17:09:09,052 [INFO] directory: enter list_files
2019-04-23 17:09:09,053 [INFO] directory: exit list_files
2019-04-23 17:09:09,055 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp0egmxnyb
2019-04-23 17:09:09,055 [INFO] zips: enter unzip
2019-04-23 17:09:09,061 [INFO] zips: exit unzip
2019-04-23 17:09:09,087 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-04-23 17:09:09,087 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:09,088 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:09,088 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:09,088 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:09,088 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:09,088 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:09,089 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:09,089 [INFO] csvs: enter read_csvs
2019-04-23 17:09:09,089 [INFO] directory: enter list_files
2019-04-23 17:09:09,090 [INFO] directory: exit list_files
2019-04-23 17:09:09,090 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:09,090 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-04-23 17:09:09,091 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:09,091 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:09,092 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:09,093 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:09,094 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:09,094 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:09,094 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:09,095 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 17:09:09,096 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-04-23 17:09:09,096 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:09,097 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-04-23 17:09:09,098 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpgvo33kw8
2019-04-23 17:09:09,098 [INFO] zips: enter unzip
2019-04-23 17:09:09,103 [INFO] zips: exit unzip
2019-04-23 17:09:09,495 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-04-23 17:09:09,496 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:09,501 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:09,501 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:09,501 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:09,501 [INFO] jsons: enter import_data: chron
2019-04-23 17:09:09,502 [INFO] jsons: exit import_data: chron
2019-04-23 17:09:09,502 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:09,502 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:09,502 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:09,504 [INFO] csvs: enter read_csvs
2019-04-23 17:09:09,505 [INFO] directory: enter list_files
2019-04-23 17:09:09,505 [INFO] directory: exit list_files
2019-04-23 17:09:09,505 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:09,505 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-04-23 17:09:09,506 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:09,506 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:09,506 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-04-23 17:09:09,507 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:09,507 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:09,508 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-04-23 17:09:09,508 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:09,509 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:09,509 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-04-23 17:09:09,510 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:09,510 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:09,510 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:09,515 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:09,520 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:09,525 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:09,525 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:09,526 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:09,526 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-04-23 17:09:09,527 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:09,527 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:09,527 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:09,528 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:09,534 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 17:09:09,534 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-04-23 17:09:09,534 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 17:09:09,535 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-04-23 17:09:09,535 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:09,536 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-04-23 17:09:09,537 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpj07i7dex
2019-04-23 17:09:09,537 [INFO] zips: enter unzip
2019-04-23 17:09:09,540 [INFO] zips: exit unzip
2019-04-23 17:09:09,567 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-04-23 17:09:09,567 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:09,567 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:09,568 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:09,568 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:09,568 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:09,568 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:09,568 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:09,569 [INFO] csvs: enter read_csvs
2019-04-23 17:09:09,569 [INFO] directory: enter list_files
2019-04-23 17:09:09,569 [INFO] directory: exit list_files
2019-04-23 17:09:09,569 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:09,570 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-04-23 17:09:09,571 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:09,571 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:09,571 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:09,573 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:09,573 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:09,573 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:09,573 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:09,575 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 17:09:09,575 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-04-23 17:09:09,575 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:09,577 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-04-23 17:09:09,577 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpos7k5v63
2019-04-23 17:09:09,578 [INFO] zips: enter unzip
2019-04-23 17:09:09,633 [INFO] zips: exit unzip
2019-04-23 17:09:09,889 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-04-23 17:09:09,890 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:09,893 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:09,893 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:09,893 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:09,894 [INFO] jsons: enter import_data: chron
2019-04-23 17:09:09,894 [INFO] jsons: enter import_model
2019-04-23 17:09:09,894 [INFO] jsons: exit import_model: chron0model
2019-04-23 17:09:09,894 [INFO] jsons: exit import_data: chron
2019-04-23 17:09:09,894 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:09,895 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:09,895 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:09,896 [INFO] csvs: enter read_csvs
2019-04-23 17:09:09,896 [INFO] directory: enter list_files
2019-04-23 17:09:09,897 [INFO] directory: exit list_files
2019-04-23 17:09:09,897 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:09,897 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-04-23 17:09:10,799 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:10,800 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:10,800 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-04-23 17:09:10,803 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:10,803 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:10,803 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:10,805 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:10,805 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:10,806 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:10,806 [INFO] csvs: enter merge_csv_model
2019-04-23 17:09:11,291 [INFO] csvs: exit merge_csv_model
2019-04-23 17:09:11,291 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:11,292 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:11,292 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:12,311 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 17:09:12,311 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-04-23 17:09:12,312 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 17:09:12,312 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-04-23 17:09:12,312 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-04-23 17:09:12,313 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:12,315 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-04-23 17:09:12,332 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpxwbb4i79
2019-04-23 17:09:12,332 [INFO] zips: enter unzip
2019-04-23 17:09:12,498 [INFO] zips: exit unzip
2019-04-23 17:09:12,726 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-04-23 17:09:12,726 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:12,727 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:12,727 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:12,727 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:12,728 [INFO] jsons: enter import_data: chron
2019-04-23 17:09:12,728 [INFO] jsons: enter import_model
2019-04-23 17:09:12,728 [INFO] jsons: exit import_model: chron0model
2019-04-23 17:09:12,728 [INFO] jsons: exit import_data: chron
2019-04-23 17:09:12,729 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:12,729 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:12,729 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:12,730 [INFO] csvs: enter read_csvs
2019-04-23 17:09:12,730 [INFO] directory: enter list_files
2019-04-23 17:09:12,731 [INFO] directory: exit list_files
2019-04-23 17:09:12,731 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:12,731 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-04-23 17:09:12,732 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:12,732 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:12,733 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-04-23 17:09:12,734 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:12,734 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:12,734 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-04-23 17:09:12,825 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:12,826 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:12,826 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-04-23 17:09:12,914 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:12,915 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:12,915 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-04-23 17:09:13,002 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,003 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:13,003 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-04-23 17:09:13,092 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,093 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:13,093 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-04-23 17:09:13,192 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,193 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:13,194 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-04-23 17:09:13,285 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,285 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:13,286 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-04-23 17:09:13,379 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,380 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:13,380 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-04-23 17:09:13,472 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,473 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:13,473 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-04-23 17:09:13,560 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,561 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:13,562 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-04-23 17:09:13,652 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,653 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:13,653 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-04-23 17:09:13,814 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,815 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:13,816 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-04-23 17:09:13,909 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,909 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:13,910 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-04-23 17:09:13,910 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,910 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:13,910 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-04-23 17:09:13,999 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:13,999 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:13,999 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:14,003 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:14,003 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:14,004 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-04-23 17:09:14,005 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,005 [INFO] csvs: enter merge_csv_model
2019-04-23 17:09:14,007 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,113 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,148 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,182 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,214 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,248 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,282 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,315 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,349 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,383 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,417 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,451 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,484 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:14,485 [INFO] csvs: exit merge_csv_model
2019-04-23 17:09:14,485 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:14,485 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:14,485 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:15,317 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 17:09:15,318 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-04-23 17:09:15,318 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 17:09:15,319 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-04-23 17:09:15,319 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-04-23 17:09:15,319 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:15,324 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-04-23 17:09:15,335 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpg9nvskx7
2019-04-23 17:09:15,335 [INFO] zips: enter unzip
2019-04-23 17:09:15,338 [INFO] zips: exit unzip
2019-04-23 17:09:15,427 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-04-23 17:09:15,427 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:15,429 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:15,429 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:15,429 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:15,429 [INFO] jsons: enter import_data: chron
2019-04-23 17:09:15,430 [INFO] jsons: exit import_data: chron
2019-04-23 17:09:15,430 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:15,430 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:15,430 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:15,431 [INFO] csvs: enter read_csvs
2019-04-23 17:09:15,432 [INFO] directory: enter list_files
2019-04-23 17:09:15,432 [INFO] directory: exit list_files
2019-04-23 17:09:15,432 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,432 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-04-23 17:09:15,433 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,433 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,434 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-04-23 17:09:15,438 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,439 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:15,439 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:15,444 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,445 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:15,445 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:15,446 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-04-23 17:09:15,448 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-04-23 17:09:15,449 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-04-23 17:09:15,449 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,449 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:15,450 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:15,450 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:15,454 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 17:09:15,454 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-04-23 17:09:15,455 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 17:09:15,455 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-04-23 17:09:15,455 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:15,456 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-04-23 17:09:15,457 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmphjwn8z_y
2019-04-23 17:09:15,457 [INFO] zips: enter unzip
2019-04-23 17:09:15,462 [INFO] zips: exit unzip
2019-04-23 17:09:15,493 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-04-23 17:09:15,493 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:15,494 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:15,494 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:15,494 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:15,494 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:15,495 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:15,495 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:15,495 [INFO] csvs: enter read_csvs
2019-04-23 17:09:15,495 [INFO] directory: enter list_files
2019-04-23 17:09:15,496 [INFO] directory: exit list_files
2019-04-23 17:09:15,496 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,496 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-04-23 17:09:15,497 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,497 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:15,497 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:15,499 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,499 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:15,499 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:15,499 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:15,500 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 17:09:15,500 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-04-23 17:09:15,501 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:15,501 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-04-23 17:09:15,502 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpbb93ret2
2019-04-23 17:09:15,502 [INFO] zips: enter unzip
2019-04-23 17:09:15,505 [INFO] zips: exit unzip
2019-04-23 17:09:15,543 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-04-23 17:09:15,544 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:15,545 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:15,545 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:15,545 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:15,546 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:15,546 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:15,546 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:15,547 [INFO] csvs: enter read_csvs
2019-04-23 17:09:15,547 [INFO] directory: enter list_files
2019-04-23 17:09:15,547 [INFO] directory: exit list_files
2019-04-23 17:09:15,547 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,548 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-04-23 17:09:15,550 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,550 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:15,550 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:15,554 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,554 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:15,554 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:15,555 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:15,557 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 17:09:15,558 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-04-23 17:09:15,558 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:15,559 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-04-23 17:09:15,560 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpi21qn534
2019-04-23 17:09:15,560 [INFO] zips: enter unzip
2019-04-23 17:09:15,563 [INFO] zips: exit unzip
2019-04-23 17:09:15,591 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-04-23 17:09:15,592 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:15,592 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:15,593 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:15,593 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:15,593 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:15,593 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:15,593 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:15,594 [INFO] csvs: enter read_csvs
2019-04-23 17:09:15,594 [INFO] directory: enter list_files
2019-04-23 17:09:15,594 [INFO] directory: exit list_files
2019-04-23 17:09:15,594 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,595 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-04-23 17:09:15,595 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,596 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:15,596 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:15,597 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,597 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:15,597 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:15,597 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:15,598 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 17:09:15,598 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-04-23 17:09:15,598 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:15,600 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-04-23 17:09:15,600 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp734s7_7f
2019-04-23 17:09:15,600 [INFO] zips: enter unzip
2019-04-23 17:09:15,603 [INFO] zips: exit unzip
2019-04-23 17:09:15,653 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-04-23 17:09:15,654 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:15,655 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:15,655 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:15,655 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:15,655 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:15,656 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:15,656 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:15,656 [INFO] csvs: enter read_csvs
2019-04-23 17:09:15,656 [INFO] directory: enter list_files
2019-04-23 17:09:15,657 [INFO] directory: exit list_files
2019-04-23 17:09:15,657 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,657 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-04-23 17:09:15,658 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,658 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,659 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-04-23 17:09:15,660 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,661 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:15,661 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:15,663 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-04-23 17:09:15,663 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,664 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,665 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:15,665 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:15,665 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:15,667 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 17:09:15,668 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-04-23 17:09:15,668 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:15,669 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-04-23 17:09:15,669 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpij3_t36p
2019-04-23 17:09:15,670 [INFO] zips: enter unzip
2019-04-23 17:09:15,673 [INFO] zips: exit unzip
2019-04-23 17:09:15,705 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-04-23 17:09:15,705 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:15,706 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:15,706 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:15,706 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:15,706 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:15,707 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:15,707 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:15,707 [INFO] csvs: enter read_csvs
2019-04-23 17:09:15,707 [INFO] directory: enter list_files
2019-04-23 17:09:15,708 [INFO] directory: exit list_files
2019-04-23 17:09:15,708 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,708 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-04-23 17:09:15,711 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,712 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:15,712 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:15,714 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,715 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:15,715 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:15,715 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:15,718 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 17:09:15,718 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-04-23 17:09:15,719 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:15,720 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-04-23 17:09:15,721 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpb86v6pp4
2019-04-23 17:09:15,721 [INFO] zips: enter unzip
2019-04-23 17:09:15,724 [INFO] zips: exit unzip
2019-04-23 17:09:15,814 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-04-23 17:09:15,815 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:15,817 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:15,817 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:15,817 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:15,817 [INFO] jsons: enter import_data: chron
2019-04-23 17:09:15,818 [INFO] jsons: exit import_data: chron
2019-04-23 17:09:15,818 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:15,818 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:15,818 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:15,819 [INFO] csvs: enter read_csvs
2019-04-23 17:09:15,819 [INFO] directory: enter list_files
2019-04-23 17:09:15,820 [INFO] directory: exit list_files
2019-04-23 17:09:15,820 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,820 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-04-23 17:09:15,820 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,820 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,821 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-04-23 17:09:15,821 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,821 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:15,821 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:15,824 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,824 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:15,824 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:15,825 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-04-23 17:09:15,826 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,826 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:15,827 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:15,827 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:15,828 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 17:09:15,828 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-04-23 17:09:15,829 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 17:09:15,829 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-04-23 17:09:15,829 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:15,830 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-04-23 17:09:15,831 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpla50fn6z
2019-04-23 17:09:15,831 [INFO] zips: enter unzip
2019-04-23 17:09:15,834 [INFO] zips: exit unzip
2019-04-23 17:09:15,907 [INFO] jsons: Read JSONLD successful: Ocn-MontegoBayJamaica.Haase-Schramm.2003.jsonld
2019-04-23 17:09:15,908 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:15,909 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:15,909 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:15,909 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:15,910 [INFO] jsons: enter import_data: chron
2019-04-23 17:09:15,910 [INFO] jsons: exit import_data: chron
2019-04-23 17:09:15,910 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:15,910 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:15,910 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:15,911 [INFO] csvs: enter read_csvs
2019-04-23 17:09:15,911 [INFO] directory: enter list_files
2019-04-23 17:09:15,912 [INFO] directory: exit list_files
2019-04-23 17:09:15,912 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,912 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo1measurement1.csv
2019-04-23 17:09:15,912 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,913 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,913 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo2measurement1.csv
2019-04-23 17:09:15,913 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,913 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:15,914 [INFO] csvs: open file: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron1measurement1.csv
2019-04-23 17:09:15,914 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:15,914 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:15,914 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:15,915 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,916 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:15,917 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:15,917 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:15,917 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:15,917 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:15,918 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:15,919 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 17:09:15,919 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.paleo
2019-04-23 17:09:15,920 [INFO] csvs: enter get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 17:09:15,920 [INFO] csvs: exit get_csv_from_section: Ocn-MontegoBayJamaica.Haase-Schramm.2003.chron
2019-04-23 17:09:15,920 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:15,922 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MontegoBayJamaica.Haase-Schramm.2003.lpd
2019-04-23 17:09:15,922 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp9hd8lltq
2019-04-23 17:09:15,922 [INFO] zips: enter unzip
2019-04-23 17:09:15,926 [INFO] zips: exit unzip
2019-04-23 17:09:16,041 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-04-23 17:09:16,042 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:16,043 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:16,044 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:16,044 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:16,044 [INFO] jsons: enter import_data: chron
2019-04-23 17:09:16,045 [INFO] jsons: exit import_data: chron
2019-04-23 17:09:16,045 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:16,045 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:16,045 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:16,046 [INFO] csvs: enter read_csvs
2019-04-23 17:09:16,047 [INFO] directory: enter list_files
2019-04-23 17:09:16,047 [INFO] directory: exit list_files
2019-04-23 17:09:16,047 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:16,047 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-04-23 17:09:16,048 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:16,048 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:16,048 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-04-23 17:09:16,050 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:16,050 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:16,050 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:16,054 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:16,055 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:16,055 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:16,055 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-04-23 17:09:16,056 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:16,057 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:16,057 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:16,057 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:16,060 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 17:09:16,060 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-04-23 17:09:16,060 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 17:09:16,061 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-04-23 17:09:16,061 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:16,062 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-04-23 17:09:16,063 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp2bdf38uc
2019-04-23 17:09:16,063 [INFO] zips: enter unzip
2019-04-23 17:09:16,066 [INFO] zips: exit unzip
2019-04-23 17:09:16,098 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-04-23 17:09:16,099 [INFO] jsons: exit read_json_from_file
2019-04-23 17:09:16,099 [INFO] jsons: enter idx_num_to_name
2019-04-23 17:09:16,099 [INFO] jsons: enter import_data: paleo
2019-04-23 17:09:16,100 [INFO] jsons: exit import_data: paleo
2019-04-23 17:09:16,100 [INFO] jsons: exit idx_num_to_name
2019-04-23 17:09:16,100 [INFO] misc: enter remove_empty_doi
2019-04-23 17:09:16,100 [INFO] misc: exit remove_empty_doi
2019-04-23 17:09:16,101 [INFO] csvs: enter read_csvs
2019-04-23 17:09:16,101 [INFO] directory: enter list_files
2019-04-23 17:09:16,101 [INFO] directory: exit list_files
2019-04-23 17:09:16,101 [INFO] csvs: enter read_csv_from_file
2019-04-23 17:09:16,101 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-04-23 17:09:16,102 [INFO] csvs: exit read_csv_from_file
2019-04-23 17:09:16,102 [INFO] csvs: enter merge_csv_metadata
2019-04-23 17:09:16,103 [INFO] csvs: enter merge_csv_section
2019-04-23 17:09:16,104 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-04-23 17:09:16,104 [INFO] csvs: exit merge_csv_section
2019-04-23 17:09:16,104 [INFO] csvs: exit merge_csv_metadata
2019-04-23 17:09:16,104 [INFO] csvs: enter get_csv_from_metadata
2019-04-23 17:09:16,105 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 17:09:16,105 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-04-23 17:09:16,105 [INFO] csvs: exit get_csv_from_metadata
2019-04-23 17:09:16,107 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-04-23 17:09:16,107 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 7.01 seconds
2019-04-23 17:09:16,109 [INFO] time_series: enter extract_main
2019-04-23 17:09:16,110 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:16,110 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:16,111 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:16,111 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:16,111 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:16,111 [INFO] time_series: enter extract_authors
2019-04-23 17:09:16,112 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:16,112 [INFO] time_series: processing publication #: 1
2019-04-23 17:09:16,112 [INFO] time_series: enter extract_authors
2019-04-23 17:09:16,112 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:16,113 [INFO] time_series: enter extract_pc
2019-04-23 17:09:16,113 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:16,113 [INFO] time_series: enter extract_special
2019-04-23 17:09:16,114 [INFO] time_series: enter extract_columns
2019-04-23 17:09:16,115 [INFO] time_series: enter extract_columns
2019-04-23 17:09:16,115 [INFO] time_series: exit extract_main
2019-04-23 17:09:16,123 [INFO] time_series: enter extract_main
2019-04-23 17:09:16,124 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:16,125 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:16,125 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:16,125 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:16,126 [INFO] time_series: enter extract_authors
2019-04-23 17:09:16,126 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-04-23 17:09:16,126 [INFO] time_series: exit extract_main
2019-04-23 17:09:16,128 [INFO] time_series: enter extract_main
2019-04-23 17:09:16,129 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:16,129 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:16,129 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:16,129 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:16,130 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:16,130 [INFO] time_series: enter extract_authors
2019-04-23 17:09:16,130 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:16,130 [INFO] time_series: processing publication #: 1
2019-04-23 17:09:16,131 [INFO] time_series: enter extract_authors
2019-04-23 17:09:16,131 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:16,131 [INFO] time_series: enter extract_pc
2019-04-23 17:09:16,131 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:16,132 [INFO] time_series: enter extract_special
2019-04-23 17:09:16,132 [INFO] time_series: enter extract_columns
2019-04-23 17:09:16,133 [INFO] time_series: enter extract_columns
2019-04-23 17:09:16,134 [INFO] time_series: exit extract_main
2019-04-23 17:09:17,170 [INFO] time_series: enter extract_main
2019-04-23 17:09:17,170 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:17,170 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:17,171 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:17,171 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:17,171 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:17,172 [INFO] time_series: enter extract_authors
2019-04-23 17:09:17,172 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:17,172 [INFO] time_series: processing publication #: 1
2019-04-23 17:09:17,173 [INFO] time_series: enter extract_authors
2019-04-23 17:09:17,173 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:17,173 [INFO] time_series: enter extract_pc
2019-04-23 17:09:17,173 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:17,174 [INFO] time_series: enter extract_special
2019-04-23 17:09:17,175 [INFO] time_series: enter extract_columns
2019-04-23 17:09:17,176 [INFO] time_series: enter extract_columns
2019-04-23 17:09:17,177 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,003 [INFO] time_series: enter extract_main
2019-04-23 17:09:18,004 [INFO] time_series: enter _extract_funding
2019-04-23 17:09:18,004 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,005 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,005 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:18,005 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:18,005 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,006 [INFO] time_series: enter extract_pc
2019-04-23 17:09:18,006 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,006 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,007 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,007 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,008 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,009 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,009 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,010 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,010 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,024 [INFO] time_series: enter extract_main
2019-04-23 17:09:18,024 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,025 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,025 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:18,025 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:18,025 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,025 [INFO] time_series: enter extract_pc
2019-04-23 17:09:18,026 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,026 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,027 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,029 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,031 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,032 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,033 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,033 [INFO] time_series: enter extract_main
2019-04-23 17:09:18,034 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,034 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,034 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,035 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:18,035 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:18,035 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,036 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,036 [INFO] time_series: processing publication #: 1
2019-04-23 17:09:18,036 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,036 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,036 [INFO] time_series: processing publication #: 2
2019-04-23 17:09:18,037 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,037 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,037 [INFO] time_series: enter extract_pc
2019-04-23 17:09:18,037 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,038 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,038 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,039 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,039 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,041 [INFO] time_series: enter extract_main
2019-04-23 17:09:18,042 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,042 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,042 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,042 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:18,043 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:18,043 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,043 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,043 [INFO] time_series: processing publication #: 1
2019-04-23 17:09:18,043 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,044 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,044 [INFO] time_series: enter extract_pc
2019-04-23 17:09:18,044 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,044 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,045 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,046 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,046 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,047 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,048 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,048 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,048 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,049 [INFO] time_series: enter extract_main
2019-04-23 17:09:18,050 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,050 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,050 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,050 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:18,051 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:18,051 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,051 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,051 [INFO] time_series: processing publication #: 1
2019-04-23 17:09:18,051 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,052 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,052 [INFO] time_series: enter extract_pc
2019-04-23 17:09:18,052 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,053 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,053 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,054 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,054 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,056 [INFO] time_series: enter extract_main
2019-04-23 17:09:18,057 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,057 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,057 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,058 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:18,058 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:18,058 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,058 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,058 [INFO] time_series: processing publication #: 1
2019-04-23 17:09:18,059 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,059 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,059 [INFO] time_series: processing publication #: 2
2019-04-23 17:09:18,059 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,060 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,060 [INFO] time_series: enter extract_pc
2019-04-23 17:09:18,060 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,060 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,061 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,061 [INFO] time_series: enter extract_calibration
2019-04-23 17:09:18,061 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 17:09:18,062 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,062 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,062 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,063 [INFO] time_series: enter extract_calibration
2019-04-23 17:09:18,063 [ERROR] time_series: extract_table: 'list' object has no attribute 'items'
2019-04-23 17:09:18,063 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,066 [INFO] time_series: enter extract_main
2019-04-23 17:09:18,066 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,066 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,067 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,067 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:18,067 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:18,067 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,067 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,068 [INFO] time_series: processing publication #: 1
2019-04-23 17:09:18,068 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,068 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,068 [INFO] time_series: processing publication #: 2
2019-04-23 17:09:18,069 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,069 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,069 [INFO] time_series: enter extract_pc
2019-04-23 17:09:18,069 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,069 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,071 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,072 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,072 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,073 [INFO] time_series: enter extract_main
2019-04-23 17:09:18,074 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,074 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,074 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:18,074 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:18,074 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,075 [INFO] time_series: enter extract_pc
2019-04-23 17:09:18,075 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,075 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,075 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,076 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,076 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,076 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,077 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,077 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,077 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,078 [INFO] time_series: enter extract_main
2019-04-23 17:09:18,079 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,079 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,079 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,079 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:18,080 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:18,080 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,080 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,080 [INFO] time_series: processing publication #: 1
2019-04-23 17:09:18,080 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,081 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,081 [INFO] time_series: enter extract_pc
2019-04-23 17:09:18,081 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,081 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,082 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,082 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,082 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,083 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,083 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,084 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,084 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,086 [INFO] time_series: enter extract_main
2019-04-23 17:09:18,087 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,087 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,087 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:18,088 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:18,088 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,088 [INFO] time_series: enter extract_pc
2019-04-23 17:09:18,088 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,088 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,089 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-04-23 17:09:18,089 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,090 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,091 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,091 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,092 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,092 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,093 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,093 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,093 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,094 [INFO] time_series: enter extract_main
2019-04-23 17:09:18,094 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,095 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,095 [INFO] time_series: enter ts_extract_geo
2019-04-23 17:09:18,095 [INFO] time_series: enter _extract_pub
2019-04-23 17:09:18,095 [INFO] time_series: processing publication #: 0
2019-04-23 17:09:18,095 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,095 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,096 [INFO] time_series: processing publication #: 1
2019-04-23 17:09:18,096 [INFO] time_series: enter extract_authors
2019-04-23 17:09:18,096 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-04-23 17:09:18,096 [INFO] time_series: enter extract_pc
2019-04-23 17:09:18,097 [INFO] time_series: enter extract_table_root
2019-04-23 17:09:18,097 [INFO] time_series: enter extract_special
2019-04-23 17:09:18,097 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,098 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,098 [INFO] time_series: enter extract_columns
2019-04-23 17:09:18,098 [INFO] time_series: exit extract_main
2019-04-23 17:09:18,099 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.98 seconds
2019-04-23 17:09:49,809 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:49,818 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2019-04-23 17:09:49,831 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2019-04-23 17:09:49,853 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Sans ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2019-04-23 17:09:49,860 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:49,890 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:49,960 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:49,963 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:49,964 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:49,970 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:49,970 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,003 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXGeneral ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf') with score of 0.050000.
2019-04-23 17:09:50,007 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXGeneral ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf') with score of 0.050000.
2019-04-23 17:09:50,009 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=10.0 to STIXGeneral ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf') with score of 0.000000.
2019-04-23 17:09:50,011 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXNonUnicode ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf') with score of 0.050000.
2019-04-23 17:09:50,014 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXNonUnicode ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf') with score of 0.050000.
2019-04-23 17:09:50,014 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=10.0 to STIXNonUnicode ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf') with score of 0.000000.
2019-04-23 17:09:50,016 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXSizeOneSym ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf') with score of 0.050000.
2019-04-23 17:09:50,020 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXSizeTwoSym ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf') with score of 0.050000.
2019-04-23 17:09:50,022 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXSizeThreeSym ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf') with score of 0.050000.
2019-04-23 17:09:50,024 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXSizeFourSym ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf') with score of 0.050000.
2019-04-23 17:09:50,026 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXSizeFiveSym ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf') with score of 0.050000.
2019-04-23 17:09:50,028 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmsy10 ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf') with score of 0.050000.
2019-04-23 17:09:50,030 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmr10 ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf') with score of 0.050000.
2019-04-23 17:09:50,033 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmtt10 ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf') with score of 0.050000.
2019-04-23 17:09:50,035 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmmi10 ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf') with score of 0.050000.
2019-04-23 17:09:50,037 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmb10 ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf') with score of 0.050000.
2019-04-23 17:09:50,040 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmss10 ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf') with score of 0.050000.
2019-04-23 17:09:50,042 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmex10 ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf') with score of 0.050000.
2019-04-23 17:09:50,044 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2019-04-23 17:09:50,046 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf') with score of 0.150000.
2019-04-23 17:09:50,046 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=10.0 to DejaVu Sans ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf') with score of 0.000000.
2019-04-23 17:09:50,048 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans Mono ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf') with score of 0.050000.
2019-04-23 17:09:50,051 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans Display ('/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf') with score of 0.050000.
2019-04-23 17:09:50,156 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,156 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,157 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,158 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,163 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,163 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,168 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,169 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,222 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,223 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,225 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,226 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,281 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,303 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,315 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,317 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,317 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,318 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,319 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,321 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,321 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,322 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,323 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,328 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,330 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,330 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,331 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,332 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,334 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,335 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,336 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,336 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,346 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,346 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,347 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,347 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,350 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,350 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,351 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,351 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,357 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,358 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,359 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,359 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,362 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,362 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,363 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,363 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,393 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,393 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,394 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,394 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,397 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,397 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,399 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,399 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,405 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,405 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,406 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,407 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,410 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,410 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,411 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,411 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,422 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,435 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,447 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,449 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,449 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,451 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,451 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,454 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,454 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,455 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,456 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,462 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,463 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,464 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,465 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,466 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,468 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,469 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,470 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,470 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,478 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,478 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,479 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,480 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,482 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,482 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,483 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,484 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,490 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,490 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,491 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,491 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,494 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,494 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,495 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,495 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,506 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,530 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,548 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,555 [DEBUG] matplotlib.axes._base: update_title_pos
2019-04-23 17:09:50,556 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,556 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,557 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,558 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,578 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,579 [DEBUG] matplotlib.ticker: ticklocs array([1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-04-23 17:09:50,580 [DEBUG] matplotlib.ticker: vmin 121.60417906586578 vmax 1.644680318853778
2019-04-23 17:09:50,580 [DEBUG] matplotlib.ticker: ticklocs [0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0]
2019-04-23 17:09:50,586 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,586 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,587 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,587 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-04-23 17:09:50,610 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,610 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-04-23 17:09:50,612 [DEBUG] matplotlib.ticker: vmin 0.07591813456873671 vmax 37.903957253638815
2019-04-23 17:09:50,612 [DEBUG] matplotlib.ticker: ticklocs [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0]
2019-08-14 14:04:19,049 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpqw028n1e
2019-08-14 14:04:19,049 [INFO] zips: enter unzip
2019-08-14 14:04:19,198 [INFO] zips: exit unzip
2019-08-14 14:04:19,388 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-08-14 14:04:19,389 [INFO] jsons: exit read_json_from_file
2019-08-14 14:04:19,391 [INFO] jsons: enter idx_num_to_name
2019-08-14 14:04:19,391 [INFO] jsons: enter import_data: paleo
2019-08-14 14:04:19,392 [INFO] jsons: exit import_data: paleo
2019-08-14 14:04:19,392 [INFO] jsons: enter import_data: chron
2019-08-14 14:04:19,392 [INFO] jsons: enter import_model
2019-08-14 14:04:19,392 [INFO] jsons: exit import_model: chron0model
2019-08-14 14:04:19,392 [INFO] jsons: exit import_data: chron
2019-08-14 14:04:19,393 [INFO] jsons: exit idx_num_to_name
2019-08-14 14:04:19,393 [INFO] misc: enter remove_empty_doi
2019-08-14 14:04:19,393 [INFO] misc: exit remove_empty_doi
2019-08-14 14:04:19,394 [INFO] csvs: enter read_csvs
2019-08-14 14:04:19,395 [INFO] directory: enter list_files
2019-08-14 14:04:19,395 [INFO] directory: exit list_files
2019-08-14 14:04:19,395 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:19,395 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-08-14 14:04:19,397 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:19,397 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:19,397 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-08-14 14:04:19,399 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:19,399 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:19,399 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-08-14 14:04:19,490 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:19,491 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:19,491 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-08-14 14:04:19,580 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:19,580 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:19,581 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-08-14 14:04:19,674 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:19,674 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:19,675 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-08-14 14:04:19,767 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:19,767 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:19,768 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-08-14 14:04:19,859 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:19,860 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:19,860 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-08-14 14:04:19,950 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:19,950 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:19,951 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-08-14 14:04:20,038 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:20,039 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:20,039 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-08-14 14:04:20,125 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:20,125 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:20,126 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-08-14 14:04:20,209 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:20,210 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:20,210 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-08-14 14:04:20,295 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:20,296 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:20,296 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-08-14 14:04:20,432 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:20,432 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:20,433 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-08-14 14:04:20,526 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:20,527 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:20,528 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-08-14 14:04:20,528 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:20,529 [INFO] csvs: enter read_csv_from_file
2019-08-14 14:04:20,529 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-08-14 14:04:20,622 [INFO] csvs: exit read_csv_from_file
2019-08-14 14:04:20,623 [INFO] csvs: enter merge_csv_metadata
2019-08-14 14:04:20,623 [INFO] csvs: enter merge_csv_section
2019-08-14 14:04:20,627 [INFO] csvs: exit merge_csv_section
2019-08-14 14:04:20,627 [INFO] csvs: enter merge_csv_section
2019-08-14 14:04:20,628 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-08-14 14:04:20,628 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:20,629 [INFO] csvs: enter merge_csv_model
2019-08-14 14:04:20,630 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:20,734 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:20,768 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:20,798 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:20,828 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:20,860 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:20,891 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:20,922 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:20,952 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:20,982 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:21,013 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:21,043 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:21,075 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-14 14:04:21,076 [INFO] csvs: exit merge_csv_model
2019-08-14 14:04:21,076 [INFO] csvs: exit merge_csv_section
2019-08-14 14:04:21,076 [INFO] csvs: exit merge_csv_metadata
2019-08-14 14:04:21,076 [INFO] csvs: enter get_csv_from_metadata
2019-08-14 14:04:21,828 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-14 14:04:21,829 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-14 14:04:21,829 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-08-14 14:04:21,829 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-08-14 14:04:21,830 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-08-14 14:04:21,830 [INFO] csvs: exit get_csv_from_metadata
2019-08-14 14:04:21,833 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-08-14 14:04:21,840 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 2.78 seconds
2019-08-14 14:12:58,308 [INFO] time_series: enter extract_main
2019-08-14 14:12:58,309 [INFO] time_series: enter _extract_funding
2019-08-14 14:12:58,309 [INFO] time_series: enter ts_extract_geo
2019-08-14 14:12:58,310 [INFO] time_series: enter ts_extract_geo
2019-08-14 14:12:58,310 [INFO] time_series: enter _extract_pub
2019-08-14 14:12:58,310 [INFO] time_series: processing publication #: 0
2019-08-14 14:12:58,311 [INFO] time_series: enter extract_authors
2019-08-14 14:12:58,311 [INFO] time_series: enter extract_pc
2019-08-14 14:12:58,311 [INFO] time_series: enter extract_table_root
2019-08-14 14:12:58,312 [INFO] time_series: enter extract_special
2019-08-14 14:12:58,312 [INFO] time_series: enter extract_columns
2019-08-14 14:12:58,313 [INFO] time_series: enter extract_columns
2019-08-14 14:12:58,313 [INFO] time_series: enter extract_columns
2019-08-14 14:12:58,314 [INFO] time_series: enter extract_columns
2019-08-14 14:12:58,314 [INFO] time_series: enter extract_columns
2019-08-14 14:12:58,315 [INFO] time_series: enter extract_columns
2019-08-14 14:12:58,315 [INFO] time_series: exit extract_main
2019-08-14 14:12:58,315 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 0.76 seconds
2019-08-20 13:44:33,453 [DEBUG] shapely.geos: Trying `CDLL(//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib)`
2019-08-20 13:44:33,457 [DEBUG] shapely.geos: Library path: '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib'
2019-08-20 13:44:33,457 [DEBUG] shapely.geos: DLL: <CDLL '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib', handle 7fc8130660a0 at 0x1a1b7a2d68>
2019-08-20 13:44:33,458 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-08-20 13:44:33,458 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-08-20 13:44:33,458 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 105e01050 at 0x102cc0be0>
2019-08-20 13:44:33,928 [INFO] directory: enter list_files
2019-08-20 13:44:33,928 [INFO] directory: exit list_files
2019-08-20 13:44:33,930 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpd463aqfp
2019-08-20 13:44:33,930 [INFO] zips: enter unzip
2019-08-20 13:44:33,932 [INFO] zips: exit unzip
2019-08-20 13:44:33,960 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-08-20 13:44:33,960 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:33,961 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:33,961 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:33,961 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:33,962 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:33,962 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:33,962 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:33,963 [INFO] csvs: enter read_csvs
2019-08-20 13:44:33,963 [INFO] directory: enter list_files
2019-08-20 13:44:33,963 [INFO] directory: exit list_files
2019-08-20 13:44:33,964 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:33,964 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-08-20 13:44:33,965 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:33,965 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:33,966 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:33,967 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:33,967 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:33,968 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:33,968 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:33,969 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 13:44:33,969 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 13:44:33,969 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:33,971 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-08-20 13:44:33,971 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpf9shga1w
2019-08-20 13:44:33,971 [INFO] zips: enter unzip
2019-08-20 13:44:33,974 [INFO] zips: exit unzip
2019-08-20 13:44:34,383 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-08-20 13:44:34,384 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:34,388 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:34,388 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:34,388 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:34,389 [INFO] jsons: enter import_data: chron
2019-08-20 13:44:34,389 [INFO] jsons: exit import_data: chron
2019-08-20 13:44:34,389 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:34,389 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:34,389 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:34,391 [INFO] csvs: enter read_csvs
2019-08-20 13:44:34,391 [INFO] directory: enter list_files
2019-08-20 13:44:34,392 [INFO] directory: exit list_files
2019-08-20 13:44:34,392 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:34,392 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-08-20 13:44:34,393 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:34,393 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:34,393 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-08-20 13:44:34,394 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:34,394 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:34,394 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-08-20 13:44:34,395 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:34,396 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:34,396 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-08-20 13:44:34,396 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:34,397 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:34,397 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:34,402 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:34,407 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:34,412 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:34,413 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:34,413 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:34,414 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-08-20 13:44:34,415 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:34,415 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:34,415 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:34,415 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:34,421 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 13:44:34,422 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 13:44:34,422 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 13:44:34,422 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 13:44:34,422 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:34,423 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-08-20 13:44:34,424 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpihr_488o
2019-08-20 13:44:34,424 [INFO] zips: enter unzip
2019-08-20 13:44:34,426 [INFO] zips: exit unzip
2019-08-20 13:44:34,452 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-08-20 13:44:34,452 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:34,452 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:34,453 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:34,453 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:34,453 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:34,454 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:34,454 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:34,455 [INFO] csvs: enter read_csvs
2019-08-20 13:44:34,455 [INFO] directory: enter list_files
2019-08-20 13:44:34,455 [INFO] directory: exit list_files
2019-08-20 13:44:34,456 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:34,456 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-08-20 13:44:34,459 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:34,459 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:34,459 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:34,462 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:34,462 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:34,462 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:34,462 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:34,464 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 13:44:34,465 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 13:44:34,465 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:34,466 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-08-20 13:44:34,467 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp3_dr_mx_
2019-08-20 13:44:34,468 [INFO] zips: enter unzip
2019-08-20 13:44:34,519 [INFO] zips: exit unzip
2019-08-20 13:44:34,782 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-08-20 13:44:34,782 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:34,788 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:34,789 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:34,789 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:34,789 [INFO] jsons: enter import_data: chron
2019-08-20 13:44:34,790 [INFO] jsons: enter import_model
2019-08-20 13:44:34,790 [INFO] jsons: exit import_model: chron0model
2019-08-20 13:44:34,790 [INFO] jsons: exit import_data: chron
2019-08-20 13:44:34,790 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:34,791 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:34,791 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:34,793 [INFO] csvs: enter read_csvs
2019-08-20 13:44:34,793 [INFO] directory: enter list_files
2019-08-20 13:44:34,794 [INFO] directory: exit list_files
2019-08-20 13:44:34,794 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:34,794 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-08-20 13:44:35,650 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:35,651 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:35,651 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-08-20 13:44:35,654 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:35,655 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:35,655 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:35,658 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:35,659 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:35,659 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:35,659 [INFO] csvs: enter merge_csv_model
2019-08-20 13:44:36,173 [INFO] csvs: exit merge_csv_model
2019-08-20 13:44:36,174 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:36,174 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:36,175 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:37,142 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 13:44:37,143 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 13:44:37,143 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 13:44:37,143 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-08-20 13:44:37,144 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 13:44:37,144 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:37,147 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-08-20 13:44:37,168 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpietcs36_
2019-08-20 13:44:37,168 [INFO] zips: enter unzip
2019-08-20 13:44:37,312 [INFO] zips: exit unzip
2019-08-20 13:44:37,506 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-08-20 13:44:37,509 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:37,511 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:37,511 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:37,511 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:37,512 [INFO] jsons: enter import_data: chron
2019-08-20 13:44:37,512 [INFO] jsons: enter import_model
2019-08-20 13:44:37,512 [INFO] jsons: exit import_model: chron0model
2019-08-20 13:44:37,513 [INFO] jsons: exit import_data: chron
2019-08-20 13:44:37,513 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:37,514 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:37,514 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:37,516 [INFO] csvs: enter read_csvs
2019-08-20 13:44:37,516 [INFO] directory: enter list_files
2019-08-20 13:44:37,516 [INFO] directory: exit list_files
2019-08-20 13:44:37,517 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:37,517 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-08-20 13:44:37,519 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:37,519 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:37,519 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-08-20 13:44:37,521 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:37,521 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:37,521 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-08-20 13:44:37,608 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:37,609 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:37,609 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-08-20 13:44:37,693 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:37,694 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:37,694 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-08-20 13:44:37,786 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:37,787 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:37,787 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-08-20 13:44:37,879 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:37,880 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:37,880 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-08-20 13:44:37,969 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:37,969 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:37,969 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-08-20 13:44:38,056 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:38,056 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:38,057 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-08-20 13:44:38,142 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:38,143 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:38,143 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-08-20 13:44:38,229 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:38,230 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:38,231 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-08-20 13:44:38,319 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:38,320 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:38,320 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-08-20 13:44:38,405 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:38,406 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:38,406 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-08-20 13:44:38,536 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:38,537 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:38,537 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-08-20 13:44:38,629 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:38,629 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:38,630 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-08-20 13:44:38,630 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:38,630 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:38,630 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-08-20 13:44:38,711 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:38,711 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:38,712 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:38,716 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:38,716 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:38,717 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-08-20 13:44:38,717 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:38,718 [INFO] csvs: enter merge_csv_model
2019-08-20 13:44:38,719 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:38,825 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:38,859 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:38,890 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:38,922 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:38,955 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:38,987 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:39,019 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:39,050 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:39,082 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:39,116 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:39,148 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:39,181 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:39,181 [INFO] csvs: exit merge_csv_model
2019-08-20 13:44:39,181 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:39,182 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:39,182 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:39,924 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 13:44:39,925 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 13:44:39,926 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 13:44:39,926 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-08-20 13:44:39,926 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 13:44:39,927 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:39,931 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-08-20 13:44:39,938 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp_wsqjkge
2019-08-20 13:44:39,938 [INFO] zips: enter unzip
2019-08-20 13:44:39,941 [INFO] zips: exit unzip
2019-08-20 13:44:40,026 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-08-20 13:44:40,027 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:40,030 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:40,030 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:40,030 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:40,031 [INFO] jsons: enter import_data: chron
2019-08-20 13:44:40,031 [INFO] jsons: exit import_data: chron
2019-08-20 13:44:40,031 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:40,032 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:40,032 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:40,033 [INFO] csvs: enter read_csvs
2019-08-20 13:44:40,033 [INFO] directory: enter list_files
2019-08-20 13:44:40,034 [INFO] directory: exit list_files
2019-08-20 13:44:40,034 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,034 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-08-20 13:44:40,035 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,035 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,036 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-08-20 13:44:40,041 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,041 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:40,042 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,048 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,048 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,048 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,050 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-08-20 13:44:40,051 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-08-20 13:44:40,052 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-08-20 13:44:40,052 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,052 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,053 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:40,053 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:40,058 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 13:44:40,058 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 13:44:40,058 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 13:44:40,059 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 13:44:40,059 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:40,060 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-08-20 13:44:40,060 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpgnwefzdb
2019-08-20 13:44:40,061 [INFO] zips: enter unzip
2019-08-20 13:44:40,063 [INFO] zips: exit unzip
2019-08-20 13:44:40,093 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-08-20 13:44:40,093 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:40,093 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:40,094 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:40,094 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:40,094 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:40,094 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:40,095 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:40,095 [INFO] csvs: enter read_csvs
2019-08-20 13:44:40,095 [INFO] directory: enter list_files
2019-08-20 13:44:40,095 [INFO] directory: exit list_files
2019-08-20 13:44:40,096 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,096 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-08-20 13:44:40,097 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,097 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:40,097 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,098 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,098 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,099 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:40,099 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:40,100 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 13:44:40,100 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 13:44:40,100 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:40,101 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-08-20 13:44:40,101 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpn3xprzju
2019-08-20 13:44:40,102 [INFO] zips: enter unzip
2019-08-20 13:44:40,104 [INFO] zips: exit unzip
2019-08-20 13:44:40,140 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-08-20 13:44:40,141 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:40,141 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:40,141 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:40,142 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:40,142 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:40,142 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:40,142 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:40,143 [INFO] csvs: enter read_csvs
2019-08-20 13:44:40,143 [INFO] directory: enter list_files
2019-08-20 13:44:40,144 [INFO] directory: exit list_files
2019-08-20 13:44:40,144 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,144 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-08-20 13:44:40,146 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,146 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:40,146 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,150 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,151 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,151 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:40,151 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:40,154 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 13:44:40,154 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 13:44:40,154 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:40,155 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-08-20 13:44:40,155 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpy4trxv62
2019-08-20 13:44:40,156 [INFO] zips: enter unzip
2019-08-20 13:44:40,158 [INFO] zips: exit unzip
2019-08-20 13:44:40,184 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-08-20 13:44:40,184 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:40,185 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:40,185 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:40,185 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:40,185 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:40,186 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:40,186 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:40,186 [INFO] csvs: enter read_csvs
2019-08-20 13:44:40,186 [INFO] directory: enter list_files
2019-08-20 13:44:40,187 [INFO] directory: exit list_files
2019-08-20 13:44:40,187 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,187 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-08-20 13:44:40,188 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,188 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:40,188 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,190 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,190 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,190 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:40,190 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:40,191 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 13:44:40,191 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 13:44:40,192 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:40,193 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-08-20 13:44:40,193 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpy1343fqq
2019-08-20 13:44:40,193 [INFO] zips: enter unzip
2019-08-20 13:44:40,196 [INFO] zips: exit unzip
2019-08-20 13:44:40,290 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-08-20 13:44:40,291 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:40,292 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:40,293 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:40,293 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:40,294 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:40,294 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:40,294 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:40,295 [INFO] csvs: enter read_csvs
2019-08-20 13:44:40,296 [INFO] directory: enter list_files
2019-08-20 13:44:40,296 [INFO] directory: exit list_files
2019-08-20 13:44:40,296 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,297 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-08-20 13:44:40,298 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,299 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,299 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-08-20 13:44:40,302 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,302 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:40,302 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,305 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-08-20 13:44:40,305 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,307 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,307 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,307 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:40,308 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:40,310 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 13:44:40,310 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 13:44:40,311 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:40,312 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-08-20 13:44:40,313 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpti0jblrd
2019-08-20 13:44:40,313 [INFO] zips: enter unzip
2019-08-20 13:44:40,315 [INFO] zips: exit unzip
2019-08-20 13:44:40,345 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-08-20 13:44:40,345 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:40,346 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:40,346 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:40,346 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:40,346 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:40,347 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:40,347 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:40,347 [INFO] csvs: enter read_csvs
2019-08-20 13:44:40,347 [INFO] directory: enter list_files
2019-08-20 13:44:40,347 [INFO] directory: exit list_files
2019-08-20 13:44:40,348 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,348 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-08-20 13:44:40,351 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,351 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:40,351 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,353 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,353 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,354 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:40,354 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:40,356 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 13:44:40,357 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 13:44:40,357 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:40,358 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-08-20 13:44:40,359 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpowu_52p7
2019-08-20 13:44:40,359 [INFO] zips: enter unzip
2019-08-20 13:44:40,361 [INFO] zips: exit unzip
2019-08-20 13:44:40,446 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-08-20 13:44:40,447 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:40,448 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:40,448 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:40,448 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:40,448 [INFO] jsons: enter import_data: chron
2019-08-20 13:44:40,449 [INFO] jsons: exit import_data: chron
2019-08-20 13:44:40,449 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:40,449 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:40,449 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:40,450 [INFO] csvs: enter read_csvs
2019-08-20 13:44:40,450 [INFO] directory: enter list_files
2019-08-20 13:44:40,451 [INFO] directory: exit list_files
2019-08-20 13:44:40,451 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,451 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-08-20 13:44:40,452 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,452 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,452 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-08-20 13:44:40,453 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,453 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:40,453 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,456 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,456 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,456 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,457 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-08-20 13:44:40,457 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,458 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,458 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:40,458 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:40,459 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 13:44:40,460 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 13:44:40,460 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 13:44:40,460 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 13:44:40,460 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:40,461 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-08-20 13:44:40,462 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpib47vp1m
2019-08-20 13:44:40,462 [INFO] zips: enter unzip
2019-08-20 13:44:40,464 [INFO] zips: exit unzip
2019-08-20 13:44:40,575 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-08-20 13:44:40,575 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:40,577 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:40,577 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:40,577 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:40,578 [INFO] jsons: enter import_data: chron
2019-08-20 13:44:40,578 [INFO] jsons: exit import_data: chron
2019-08-20 13:44:40,578 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:40,578 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:40,579 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:40,579 [INFO] csvs: enter read_csvs
2019-08-20 13:44:40,579 [INFO] directory: enter list_files
2019-08-20 13:44:40,580 [INFO] directory: exit list_files
2019-08-20 13:44:40,580 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,580 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-08-20 13:44:40,581 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,581 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,581 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-08-20 13:44:40,583 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,583 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:40,583 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,587 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,587 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,588 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,588 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-08-20 13:44:40,589 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,589 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,590 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:40,590 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:40,592 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 13:44:40,593 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 13:44:40,593 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 13:44:40,593 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 13:44:40,593 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:40,594 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-08-20 13:44:40,595 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp1bknv62x
2019-08-20 13:44:40,595 [INFO] zips: enter unzip
2019-08-20 13:44:40,597 [INFO] zips: exit unzip
2019-08-20 13:44:40,629 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-08-20 13:44:40,629 [INFO] jsons: exit read_json_from_file
2019-08-20 13:44:40,630 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:44:40,630 [INFO] jsons: enter import_data: paleo
2019-08-20 13:44:40,630 [INFO] jsons: exit import_data: paleo
2019-08-20 13:44:40,631 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:44:40,631 [INFO] misc: enter remove_empty_doi
2019-08-20 13:44:40,631 [INFO] misc: exit remove_empty_doi
2019-08-20 13:44:40,632 [INFO] csvs: enter read_csvs
2019-08-20 13:44:40,632 [INFO] directory: enter list_files
2019-08-20 13:44:40,632 [INFO] directory: exit list_files
2019-08-20 13:44:40,632 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:44:40,633 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-08-20 13:44:40,633 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:44:40,633 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:44:40,634 [INFO] csvs: enter merge_csv_section
2019-08-20 13:44:40,635 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:44:40,635 [INFO] csvs: exit merge_csv_section
2019-08-20 13:44:40,635 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:44:40,635 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:44:40,636 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 13:44:40,636 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 13:44:40,636 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:44:40,637 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-08-20 13:44:40,638 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.7 seconds
2019-08-20 13:44:40,640 [INFO] time_series: enter extract_main
2019-08-20 13:44:40,640 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:40,641 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:40,641 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:40,641 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:40,641 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:40,641 [INFO] time_series: enter extract_authors
2019-08-20 13:44:40,642 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:40,642 [INFO] time_series: processing publication #: 1
2019-08-20 13:44:40,642 [INFO] time_series: enter extract_authors
2019-08-20 13:44:40,642 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:40,642 [INFO] time_series: enter extract_pc
2019-08-20 13:44:40,643 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:40,643 [INFO] time_series: enter extract_special
2019-08-20 13:44:40,644 [INFO] time_series: enter extract_columns
2019-08-20 13:44:40,645 [INFO] time_series: enter extract_columns
2019-08-20 13:44:40,645 [INFO] time_series: exit extract_main
2019-08-20 13:44:40,652 [INFO] time_series: enter extract_main
2019-08-20 13:44:40,653 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:40,653 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:40,653 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:40,653 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:40,653 [INFO] time_series: enter extract_authors
2019-08-20 13:44:40,654 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-08-20 13:44:40,654 [INFO] time_series: exit extract_main
2019-08-20 13:44:40,655 [INFO] time_series: enter extract_main
2019-08-20 13:44:40,656 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:40,656 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:40,656 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:40,656 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:40,657 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:40,657 [INFO] time_series: enter extract_authors
2019-08-20 13:44:40,657 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:40,657 [INFO] time_series: processing publication #: 1
2019-08-20 13:44:40,658 [INFO] time_series: enter extract_authors
2019-08-20 13:44:40,658 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:40,658 [INFO] time_series: enter extract_pc
2019-08-20 13:44:40,658 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:40,658 [INFO] time_series: enter extract_special
2019-08-20 13:44:40,659 [INFO] time_series: enter extract_columns
2019-08-20 13:44:40,660 [INFO] time_series: enter extract_columns
2019-08-20 13:44:40,660 [INFO] time_series: exit extract_main
2019-08-20 13:44:41,665 [INFO] time_series: enter extract_main
2019-08-20 13:44:41,666 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:41,666 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:41,666 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:41,666 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:41,667 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:41,667 [INFO] time_series: enter extract_authors
2019-08-20 13:44:41,667 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:41,667 [INFO] time_series: processing publication #: 1
2019-08-20 13:44:41,668 [INFO] time_series: enter extract_authors
2019-08-20 13:44:41,668 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:41,668 [INFO] time_series: enter extract_pc
2019-08-20 13:44:41,669 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:41,669 [INFO] time_series: enter extract_special
2019-08-20 13:44:41,670 [INFO] time_series: enter extract_columns
2019-08-20 13:44:41,671 [INFO] time_series: enter extract_columns
2019-08-20 13:44:41,672 [INFO] time_series: exit extract_main
2019-08-20 13:44:42,484 [INFO] time_series: enter extract_main
2019-08-20 13:44:42,484 [INFO] time_series: enter _extract_funding
2019-08-20 13:44:42,484 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,485 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,485 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:42,485 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:42,485 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,485 [INFO] time_series: enter extract_pc
2019-08-20 13:44:42,486 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:42,486 [INFO] time_series: enter extract_special
2019-08-20 13:44:42,486 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,487 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,487 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,488 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,488 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,489 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,489 [INFO] time_series: exit extract_main
2019-08-20 13:44:42,500 [INFO] time_series: enter extract_main
2019-08-20 13:44:42,500 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,500 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,500 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:42,501 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:42,501 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,501 [INFO] time_series: enter extract_pc
2019-08-20 13:44:42,501 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:42,502 [INFO] time_series: enter extract_special
2019-08-20 13:44:42,503 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,505 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,506 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,508 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,508 [INFO] time_series: exit extract_main
2019-08-20 13:44:42,509 [INFO] time_series: enter extract_main
2019-08-20 13:44:42,509 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,510 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,510 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,510 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:42,510 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:42,511 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,511 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,511 [INFO] time_series: processing publication #: 1
2019-08-20 13:44:42,511 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,511 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,512 [INFO] time_series: processing publication #: 2
2019-08-20 13:44:42,512 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,512 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,512 [INFO] time_series: enter extract_pc
2019-08-20 13:44:42,512 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:42,513 [INFO] time_series: enter extract_special
2019-08-20 13:44:42,513 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,514 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,514 [INFO] time_series: exit extract_main
2019-08-20 13:44:42,517 [INFO] time_series: enter extract_main
2019-08-20 13:44:42,517 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,517 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,518 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,518 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:42,518 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:42,518 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,518 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,519 [INFO] time_series: processing publication #: 1
2019-08-20 13:44:42,519 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,519 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,519 [INFO] time_series: enter extract_pc
2019-08-20 13:44:42,519 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:42,520 [INFO] time_series: enter extract_special
2019-08-20 13:44:42,520 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,521 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,521 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,522 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,523 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,523 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,524 [INFO] time_series: exit extract_main
2019-08-20 13:44:42,525 [INFO] time_series: enter extract_main
2019-08-20 13:44:42,525 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,525 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,525 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,525 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:42,526 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:42,526 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,526 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,526 [INFO] time_series: processing publication #: 1
2019-08-20 13:44:42,526 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,527 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,527 [INFO] time_series: enter extract_pc
2019-08-20 13:44:42,527 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:42,527 [INFO] time_series: enter extract_special
2019-08-20 13:44:42,528 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,529 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,529 [INFO] time_series: exit extract_main
2019-08-20 13:44:42,531 [INFO] time_series: enter extract_main
2019-08-20 13:44:42,531 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,531 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,532 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,532 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:42,532 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:42,533 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,533 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,533 [INFO] time_series: processing publication #: 1
2019-08-20 13:44:42,533 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,534 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,534 [INFO] time_series: processing publication #: 2
2019-08-20 13:44:42,534 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,534 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,535 [INFO] time_series: enter extract_pc
2019-08-20 13:44:42,535 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:42,535 [INFO] time_series: enter extract_special
2019-08-20 13:44:42,536 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,536 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,537 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,537 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:42,538 [INFO] time_series: enter extract_special
2019-08-20 13:44:42,538 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,539 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,539 [INFO] time_series: exit extract_main
2019-08-20 13:44:42,542 [INFO] time_series: enter extract_main
2019-08-20 13:44:42,542 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,542 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,542 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,543 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:42,543 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:42,543 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,543 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,543 [INFO] time_series: processing publication #: 1
2019-08-20 13:44:42,543 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,544 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,544 [INFO] time_series: processing publication #: 2
2019-08-20 13:44:42,544 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,544 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,544 [INFO] time_series: enter extract_pc
2019-08-20 13:44:42,545 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:42,545 [INFO] time_series: enter extract_special
2019-08-20 13:44:42,546 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,548 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,548 [INFO] time_series: exit extract_main
2019-08-20 13:44:42,549 [INFO] time_series: enter extract_main
2019-08-20 13:44:42,550 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,550 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,550 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:42,550 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:42,550 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,551 [INFO] time_series: enter extract_pc
2019-08-20 13:44:42,551 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:42,551 [INFO] time_series: enter extract_special
2019-08-20 13:44:42,551 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,552 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,552 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,552 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,553 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,553 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,553 [INFO] time_series: exit extract_main
2019-08-20 13:44:42,556 [INFO] time_series: enter extract_main
2019-08-20 13:44:42,556 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,556 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,556 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:42,557 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:42,557 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,557 [INFO] time_series: enter extract_pc
2019-08-20 13:44:42,557 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:42,557 [INFO] time_series: enter extract_special
2019-08-20 13:44:42,558 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-08-20 13:44:42,558 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,559 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,559 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,560 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,561 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,562 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,562 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,563 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,563 [INFO] time_series: exit extract_main
2019-08-20 13:44:42,564 [INFO] time_series: enter extract_main
2019-08-20 13:44:42,564 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,565 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,565 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:44:42,565 [INFO] time_series: enter _extract_pub
2019-08-20 13:44:42,565 [INFO] time_series: processing publication #: 0
2019-08-20 13:44:42,566 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,566 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,566 [INFO] time_series: processing publication #: 1
2019-08-20 13:44:42,566 [INFO] time_series: enter extract_authors
2019-08-20 13:44:42,566 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:44:42,567 [INFO] time_series: enter extract_pc
2019-08-20 13:44:42,567 [INFO] time_series: enter extract_table_root
2019-08-20 13:44:42,567 [INFO] time_series: enter extract_special
2019-08-20 13:44:42,568 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,568 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,569 [INFO] time_series: enter extract_columns
2019-08-20 13:44:42,569 [INFO] time_series: exit extract_main
2019-08-20 13:44:42,569 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.92 seconds
2019-08-20 13:56:58,572 [DEBUG] shapely.geos: Trying `CDLL(//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib)`
2019-08-20 13:56:58,577 [DEBUG] shapely.geos: Library path: '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib'
2019-08-20 13:56:58,577 [DEBUG] shapely.geos: DLL: <CDLL '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib', handle 7fbd2ec23450 at 0x1a1c01dcc0>
2019-08-20 13:56:58,578 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-08-20 13:56:58,578 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-08-20 13:56:58,578 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 107813050 at 0x1036cabe0>
2019-08-20 13:56:59,530 [INFO] directory: enter list_files
2019-08-20 13:56:59,531 [INFO] directory: exit list_files
2019-08-20 13:56:59,533 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp0_kbfrhf
2019-08-20 13:56:59,533 [INFO] zips: enter unzip
2019-08-20 13:56:59,537 [INFO] zips: exit unzip
2019-08-20 13:56:59,564 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-08-20 13:56:59,564 [INFO] jsons: exit read_json_from_file
2019-08-20 13:56:59,565 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:56:59,565 [INFO] jsons: enter import_data: paleo
2019-08-20 13:56:59,565 [INFO] jsons: exit import_data: paleo
2019-08-20 13:56:59,566 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:56:59,566 [INFO] misc: enter remove_empty_doi
2019-08-20 13:56:59,566 [INFO] misc: exit remove_empty_doi
2019-08-20 13:56:59,567 [INFO] csvs: enter read_csvs
2019-08-20 13:56:59,567 [INFO] directory: enter list_files
2019-08-20 13:56:59,567 [INFO] directory: exit list_files
2019-08-20 13:56:59,567 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:56:59,568 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-08-20 13:56:59,569 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:56:59,569 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:56:59,569 [INFO] csvs: enter merge_csv_section
2019-08-20 13:56:59,571 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:56:59,571 [INFO] csvs: exit merge_csv_section
2019-08-20 13:56:59,571 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:56:59,571 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:56:59,573 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 13:56:59,573 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 13:56:59,573 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:56:59,574 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-08-20 13:56:59,575 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpmgvmtl9j
2019-08-20 13:56:59,575 [INFO] zips: enter unzip
2019-08-20 13:56:59,580 [INFO] zips: exit unzip
2019-08-20 13:57:00,002 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-08-20 13:57:00,003 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:00,007 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:00,007 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:00,008 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:00,008 [INFO] jsons: enter import_data: chron
2019-08-20 13:57:00,008 [INFO] jsons: exit import_data: chron
2019-08-20 13:57:00,008 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:00,008 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:00,009 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:00,011 [INFO] csvs: enter read_csvs
2019-08-20 13:57:00,011 [INFO] directory: enter list_files
2019-08-20 13:57:00,011 [INFO] directory: exit list_files
2019-08-20 13:57:00,012 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:00,012 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-08-20 13:57:00,013 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:00,013 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:00,013 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-08-20 13:57:00,014 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:00,015 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:00,015 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-08-20 13:57:00,016 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:00,016 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:00,016 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-08-20 13:57:00,017 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:00,017 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:00,017 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:00,022 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:00,028 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:00,032 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:00,033 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:00,033 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:00,033 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-08-20 13:57:00,034 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:00,035 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:00,035 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:00,035 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:00,041 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 13:57:00,041 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 13:57:00,041 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 13:57:00,042 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 13:57:00,042 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:00,043 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-08-20 13:57:00,044 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmprvcb880o
2019-08-20 13:57:00,044 [INFO] zips: enter unzip
2019-08-20 13:57:00,046 [INFO] zips: exit unzip
2019-08-20 13:57:00,072 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-08-20 13:57:00,073 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:00,073 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:00,074 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:00,074 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:00,074 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:00,075 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:00,075 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:00,075 [INFO] csvs: enter read_csvs
2019-08-20 13:57:00,076 [INFO] directory: enter list_files
2019-08-20 13:57:00,076 [INFO] directory: exit list_files
2019-08-20 13:57:00,076 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:00,077 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-08-20 13:57:00,079 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:00,079 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:00,079 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:00,081 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:00,082 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:00,082 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:00,082 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:00,084 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 13:57:00,085 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 13:57:00,085 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:00,086 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-08-20 13:57:00,087 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpu9ibv6wc
2019-08-20 13:57:00,087 [INFO] zips: enter unzip
2019-08-20 13:57:00,139 [INFO] zips: exit unzip
2019-08-20 13:57:00,399 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-08-20 13:57:00,399 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:00,403 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:00,403 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:00,403 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:00,404 [INFO] jsons: enter import_data: chron
2019-08-20 13:57:00,404 [INFO] jsons: enter import_model
2019-08-20 13:57:00,404 [INFO] jsons: exit import_model: chron0model
2019-08-20 13:57:00,404 [INFO] jsons: exit import_data: chron
2019-08-20 13:57:00,405 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:00,405 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:00,405 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:00,406 [INFO] csvs: enter read_csvs
2019-08-20 13:57:00,407 [INFO] directory: enter list_files
2019-08-20 13:57:00,407 [INFO] directory: exit list_files
2019-08-20 13:57:00,407 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:00,407 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-08-20 13:57:01,298 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:01,298 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:01,299 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-08-20 13:57:01,301 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:01,302 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:01,302 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:01,304 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:01,304 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:01,304 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:01,305 [INFO] csvs: enter merge_csv_model
2019-08-20 13:57:01,882 [INFO] csvs: exit merge_csv_model
2019-08-20 13:57:01,883 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:01,883 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:01,883 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:02,948 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 13:57:02,949 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 13:57:02,949 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 13:57:02,949 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-08-20 13:57:02,949 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 13:57:02,949 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:02,951 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-08-20 13:57:02,968 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpoii9q201
2019-08-20 13:57:02,968 [INFO] zips: enter unzip
2019-08-20 13:57:03,121 [INFO] zips: exit unzip
2019-08-20 13:57:03,325 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-08-20 13:57:03,325 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:03,326 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:03,327 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:03,327 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:03,327 [INFO] jsons: enter import_data: chron
2019-08-20 13:57:03,327 [INFO] jsons: enter import_model
2019-08-20 13:57:03,328 [INFO] jsons: exit import_model: chron0model
2019-08-20 13:57:03,328 [INFO] jsons: exit import_data: chron
2019-08-20 13:57:03,328 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:03,328 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:03,329 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:03,330 [INFO] csvs: enter read_csvs
2019-08-20 13:57:03,330 [INFO] directory: enter list_files
2019-08-20 13:57:03,330 [INFO] directory: exit list_files
2019-08-20 13:57:03,330 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:03,331 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-08-20 13:57:03,332 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:03,332 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:03,332 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-08-20 13:57:03,333 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:03,333 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:03,333 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-08-20 13:57:03,429 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:03,429 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:03,429 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-08-20 13:57:03,519 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:03,520 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:03,520 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-08-20 13:57:03,609 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:03,609 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:03,610 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-08-20 13:57:03,697 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:03,698 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:03,698 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-08-20 13:57:03,788 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:03,788 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:03,789 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-08-20 13:57:03,879 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:03,879 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:03,879 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-08-20 13:57:03,972 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:03,973 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:03,973 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-08-20 13:57:04,061 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:04,061 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:04,062 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-08-20 13:57:04,146 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:04,146 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:04,147 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-08-20 13:57:04,234 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:04,234 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:04,235 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-08-20 13:57:04,375 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:04,375 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:04,375 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-08-20 13:57:04,466 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:04,467 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:04,467 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-08-20 13:57:04,468 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:04,468 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:04,468 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-08-20 13:57:04,557 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:04,557 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:04,558 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:04,563 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:04,563 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:04,564 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-08-20 13:57:04,565 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:04,565 [INFO] csvs: enter merge_csv_model
2019-08-20 13:57:04,567 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:04,679 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:04,713 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:04,746 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:04,779 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:04,812 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:04,845 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:04,878 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:04,910 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:04,942 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:04,976 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:05,009 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:05,043 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:05,043 [INFO] csvs: exit merge_csv_model
2019-08-20 13:57:05,043 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:05,043 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:05,044 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:05,853 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 13:57:05,854 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 13:57:05,854 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 13:57:05,855 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-08-20 13:57:05,855 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 13:57:05,855 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:05,859 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-08-20 13:57:05,867 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp27l21bfl
2019-08-20 13:57:05,867 [INFO] zips: enter unzip
2019-08-20 13:57:05,871 [INFO] zips: exit unzip
2019-08-20 13:57:05,959 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-08-20 13:57:05,959 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:05,961 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:05,961 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:05,962 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:05,962 [INFO] jsons: enter import_data: chron
2019-08-20 13:57:05,962 [INFO] jsons: exit import_data: chron
2019-08-20 13:57:05,963 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:05,963 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:05,963 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:05,964 [INFO] csvs: enter read_csvs
2019-08-20 13:57:05,964 [INFO] directory: enter list_files
2019-08-20 13:57:05,965 [INFO] directory: exit list_files
2019-08-20 13:57:05,965 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:05,965 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-08-20 13:57:05,966 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:05,966 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:05,966 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-08-20 13:57:05,971 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:05,972 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:05,972 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:05,977 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:05,978 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:05,978 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:05,979 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-08-20 13:57:05,981 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-08-20 13:57:05,981 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-08-20 13:57:05,981 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:05,982 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:05,982 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:05,982 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:05,987 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 13:57:05,987 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 13:57:05,987 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 13:57:05,987 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 13:57:05,988 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:05,989 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-08-20 13:57:05,989 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp5_0esv3l
2019-08-20 13:57:05,990 [INFO] zips: enter unzip
2019-08-20 13:57:05,993 [INFO] zips: exit unzip
2019-08-20 13:57:06,025 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-08-20 13:57:06,026 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:06,026 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:06,026 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:06,027 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:06,027 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:06,027 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:06,027 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:06,028 [INFO] csvs: enter read_csvs
2019-08-20 13:57:06,028 [INFO] directory: enter list_files
2019-08-20 13:57:06,028 [INFO] directory: exit list_files
2019-08-20 13:57:06,029 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:06,029 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-08-20 13:57:06,030 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:06,030 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:06,030 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:06,031 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:06,031 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:06,032 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:06,032 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:06,033 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 13:57:06,033 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 13:57:06,033 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:06,034 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-08-20 13:57:06,035 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpsauik2e9
2019-08-20 13:57:06,035 [INFO] zips: enter unzip
2019-08-20 13:57:06,039 [INFO] zips: exit unzip
2019-08-20 13:57:06,086 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-08-20 13:57:06,086 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:06,087 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:06,087 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:06,087 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:06,087 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:06,088 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:06,088 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:06,088 [INFO] csvs: enter read_csvs
2019-08-20 13:57:06,088 [INFO] directory: enter list_files
2019-08-20 13:57:06,089 [INFO] directory: exit list_files
2019-08-20 13:57:06,089 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:06,089 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-08-20 13:57:06,091 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:06,092 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:06,092 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:06,095 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:06,095 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:06,096 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:06,096 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:06,098 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 13:57:06,098 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 13:57:06,099 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:06,100 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-08-20 13:57:06,101 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpq0ke9uvj
2019-08-20 13:57:06,101 [INFO] zips: enter unzip
2019-08-20 13:57:06,103 [INFO] zips: exit unzip
2019-08-20 13:57:06,132 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-08-20 13:57:06,132 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:06,132 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:06,133 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:06,133 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:06,133 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:06,133 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:06,133 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:06,134 [INFO] csvs: enter read_csvs
2019-08-20 13:57:06,134 [INFO] directory: enter list_files
2019-08-20 13:57:06,134 [INFO] directory: exit list_files
2019-08-20 13:57:06,135 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:06,135 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-08-20 13:57:06,136 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:06,136 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:06,136 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:06,137 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:06,137 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:06,137 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:06,138 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:06,138 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 13:57:06,139 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 13:57:06,139 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:06,140 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-08-20 13:57:06,140 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpqizq_yxl
2019-08-20 13:57:06,140 [INFO] zips: enter unzip
2019-08-20 13:57:06,143 [INFO] zips: exit unzip
2019-08-20 13:57:06,239 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-08-20 13:57:06,240 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:06,241 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:06,241 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:06,242 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:06,242 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:06,242 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:06,242 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:06,243 [INFO] csvs: enter read_csvs
2019-08-20 13:57:06,243 [INFO] directory: enter list_files
2019-08-20 13:57:06,243 [INFO] directory: exit list_files
2019-08-20 13:57:06,244 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:06,244 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-08-20 13:57:06,245 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:06,245 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:06,245 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-08-20 13:57:06,247 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:06,247 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:06,247 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:06,249 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-08-20 13:57:06,249 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:06,251 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:06,251 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:06,251 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:06,251 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:06,253 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 13:57:06,254 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 13:57:06,254 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:06,255 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-08-20 13:57:06,255 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpidxe4de_
2019-08-20 13:57:06,255 [INFO] zips: enter unzip
2019-08-20 13:57:06,258 [INFO] zips: exit unzip
2019-08-20 13:57:06,289 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-08-20 13:57:06,289 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:06,290 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:06,290 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:06,290 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:06,291 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:06,291 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:06,291 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:06,292 [INFO] csvs: enter read_csvs
2019-08-20 13:57:06,292 [INFO] directory: enter list_files
2019-08-20 13:57:06,292 [INFO] directory: exit list_files
2019-08-20 13:57:06,293 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:06,293 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-08-20 13:57:06,295 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:06,296 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:06,296 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:06,298 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:06,298 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:06,299 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:06,299 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:06,302 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 13:57:06,303 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 13:57:06,303 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:06,304 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-08-20 13:57:06,305 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpg6fesul4
2019-08-20 13:57:06,305 [INFO] zips: enter unzip
2019-08-20 13:57:06,308 [INFO] zips: exit unzip
2019-08-20 13:57:06,394 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-08-20 13:57:06,395 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:06,397 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:06,397 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:06,397 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:06,397 [INFO] jsons: enter import_data: chron
2019-08-20 13:57:06,398 [INFO] jsons: exit import_data: chron
2019-08-20 13:57:06,398 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:06,398 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:06,398 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:06,399 [INFO] csvs: enter read_csvs
2019-08-20 13:57:06,399 [INFO] directory: enter list_files
2019-08-20 13:57:06,399 [INFO] directory: exit list_files
2019-08-20 13:57:06,400 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:06,400 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-08-20 13:57:06,400 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:06,400 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:06,400 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-08-20 13:57:06,401 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:06,401 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:06,401 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:06,403 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:06,403 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:06,404 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:06,404 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-08-20 13:57:06,405 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:06,405 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:06,405 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:06,406 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:06,407 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 13:57:06,407 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 13:57:06,407 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 13:57:06,407 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 13:57:06,408 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:06,408 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-08-20 13:57:06,409 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpr5xib3c_
2019-08-20 13:57:06,410 [INFO] zips: enter unzip
2019-08-20 13:57:06,413 [INFO] zips: exit unzip
2019-08-20 13:57:06,534 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-08-20 13:57:06,534 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:06,536 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:06,536 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:06,536 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:06,536 [INFO] jsons: enter import_data: chron
2019-08-20 13:57:06,536 [INFO] jsons: exit import_data: chron
2019-08-20 13:57:06,537 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:06,537 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:06,537 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:06,538 [INFO] csvs: enter read_csvs
2019-08-20 13:57:06,538 [INFO] directory: enter list_files
2019-08-20 13:57:06,538 [INFO] directory: exit list_files
2019-08-20 13:57:06,539 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:06,539 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-08-20 13:57:06,539 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:06,539 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:06,540 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-08-20 13:57:06,541 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:06,541 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:06,541 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:06,545 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:06,545 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:06,546 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:06,546 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-08-20 13:57:06,547 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:06,547 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:06,547 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:06,547 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:06,550 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 13:57:06,550 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 13:57:06,551 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 13:57:06,551 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 13:57:06,551 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:06,552 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-08-20 13:57:06,553 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp7ak0u_0c
2019-08-20 13:57:06,553 [INFO] zips: enter unzip
2019-08-20 13:57:06,555 [INFO] zips: exit unzip
2019-08-20 13:57:06,587 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-08-20 13:57:06,587 [INFO] jsons: exit read_json_from_file
2019-08-20 13:57:06,588 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:57:06,588 [INFO] jsons: enter import_data: paleo
2019-08-20 13:57:06,588 [INFO] jsons: exit import_data: paleo
2019-08-20 13:57:06,588 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:57:06,589 [INFO] misc: enter remove_empty_doi
2019-08-20 13:57:06,589 [INFO] misc: exit remove_empty_doi
2019-08-20 13:57:06,589 [INFO] csvs: enter read_csvs
2019-08-20 13:57:06,590 [INFO] directory: enter list_files
2019-08-20 13:57:06,590 [INFO] directory: exit list_files
2019-08-20 13:57:06,590 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:57:06,590 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-08-20 13:57:06,591 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:57:06,591 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:57:06,591 [INFO] csvs: enter merge_csv_section
2019-08-20 13:57:06,592 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:57:06,593 [INFO] csvs: exit merge_csv_section
2019-08-20 13:57:06,593 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:57:06,593 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:57:06,594 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 13:57:06,594 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 13:57:06,594 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:57:06,595 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-08-20 13:57:06,596 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 7.03 seconds
2019-08-20 13:57:06,598 [INFO] time_series: enter extract_main
2019-08-20 13:57:06,599 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:06,599 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:06,599 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:06,599 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:06,599 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:06,600 [INFO] time_series: enter extract_authors
2019-08-20 13:57:06,600 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:06,600 [INFO] time_series: processing publication #: 1
2019-08-20 13:57:06,600 [INFO] time_series: enter extract_authors
2019-08-20 13:57:06,600 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:06,600 [INFO] time_series: enter extract_pc
2019-08-20 13:57:06,601 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:06,601 [INFO] time_series: enter extract_special
2019-08-20 13:57:06,602 [INFO] time_series: enter extract_columns
2019-08-20 13:57:06,603 [INFO] time_series: enter extract_columns
2019-08-20 13:57:06,603 [INFO] time_series: exit extract_main
2019-08-20 13:57:06,609 [INFO] time_series: enter extract_main
2019-08-20 13:57:06,609 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:06,609 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:06,610 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:06,610 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:06,610 [INFO] time_series: enter extract_authors
2019-08-20 13:57:06,610 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-08-20 13:57:06,611 [INFO] time_series: exit extract_main
2019-08-20 13:57:06,612 [INFO] time_series: enter extract_main
2019-08-20 13:57:06,612 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:06,613 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:06,613 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:06,613 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:06,613 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:06,613 [INFO] time_series: enter extract_authors
2019-08-20 13:57:06,614 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:06,614 [INFO] time_series: processing publication #: 1
2019-08-20 13:57:06,614 [INFO] time_series: enter extract_authors
2019-08-20 13:57:06,614 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:06,614 [INFO] time_series: enter extract_pc
2019-08-20 13:57:06,614 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:06,615 [INFO] time_series: enter extract_special
2019-08-20 13:57:06,615 [INFO] time_series: enter extract_columns
2019-08-20 13:57:06,616 [INFO] time_series: enter extract_columns
2019-08-20 13:57:06,616 [INFO] time_series: exit extract_main
2019-08-20 13:57:07,666 [INFO] time_series: enter extract_main
2019-08-20 13:57:07,667 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:07,667 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:07,667 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:07,667 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:07,668 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:07,668 [INFO] time_series: enter extract_authors
2019-08-20 13:57:07,668 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:07,668 [INFO] time_series: processing publication #: 1
2019-08-20 13:57:07,668 [INFO] time_series: enter extract_authors
2019-08-20 13:57:07,669 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:07,669 [INFO] time_series: enter extract_pc
2019-08-20 13:57:07,669 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:07,669 [INFO] time_series: enter extract_special
2019-08-20 13:57:07,671 [INFO] time_series: enter extract_columns
2019-08-20 13:57:07,672 [INFO] time_series: enter extract_columns
2019-08-20 13:57:07,672 [INFO] time_series: exit extract_main
2019-08-20 13:57:08,476 [INFO] time_series: enter extract_main
2019-08-20 13:57:08,477 [INFO] time_series: enter _extract_funding
2019-08-20 13:57:08,477 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,477 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,477 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:08,477 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:08,478 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,478 [INFO] time_series: enter extract_pc
2019-08-20 13:57:08,478 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:08,479 [INFO] time_series: enter extract_special
2019-08-20 13:57:08,479 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,480 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,480 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,481 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,481 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,482 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,482 [INFO] time_series: exit extract_main
2019-08-20 13:57:08,492 [INFO] time_series: enter extract_main
2019-08-20 13:57:08,493 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,493 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,493 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:08,493 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:08,494 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,494 [INFO] time_series: enter extract_pc
2019-08-20 13:57:08,494 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:08,494 [INFO] time_series: enter extract_special
2019-08-20 13:57:08,496 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,498 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,500 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,502 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,502 [INFO] time_series: exit extract_main
2019-08-20 13:57:08,503 [INFO] time_series: enter extract_main
2019-08-20 13:57:08,503 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,503 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,504 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,504 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:08,504 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:08,504 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,505 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,505 [INFO] time_series: processing publication #: 1
2019-08-20 13:57:08,505 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,505 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,506 [INFO] time_series: processing publication #: 2
2019-08-20 13:57:08,506 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,506 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,506 [INFO] time_series: enter extract_pc
2019-08-20 13:57:08,507 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:08,507 [INFO] time_series: enter extract_special
2019-08-20 13:57:08,508 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,508 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,508 [INFO] time_series: exit extract_main
2019-08-20 13:57:08,511 [INFO] time_series: enter extract_main
2019-08-20 13:57:08,512 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,512 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,512 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,512 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:08,512 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:08,513 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,513 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,513 [INFO] time_series: processing publication #: 1
2019-08-20 13:57:08,513 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,513 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,514 [INFO] time_series: enter extract_pc
2019-08-20 13:57:08,514 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:08,514 [INFO] time_series: enter extract_special
2019-08-20 13:57:08,515 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,515 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,516 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,517 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,517 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,518 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,519 [INFO] time_series: exit extract_main
2019-08-20 13:57:08,520 [INFO] time_series: enter extract_main
2019-08-20 13:57:08,520 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,520 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,520 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,521 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:08,521 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:08,521 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,521 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,521 [INFO] time_series: processing publication #: 1
2019-08-20 13:57:08,522 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,522 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,522 [INFO] time_series: enter extract_pc
2019-08-20 13:57:08,522 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:08,522 [INFO] time_series: enter extract_special
2019-08-20 13:57:08,523 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,524 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,524 [INFO] time_series: exit extract_main
2019-08-20 13:57:08,526 [INFO] time_series: enter extract_main
2019-08-20 13:57:08,527 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,527 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,527 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,527 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:08,527 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:08,528 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,528 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,528 [INFO] time_series: processing publication #: 1
2019-08-20 13:57:08,528 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,528 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,529 [INFO] time_series: processing publication #: 2
2019-08-20 13:57:08,529 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,529 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,529 [INFO] time_series: enter extract_pc
2019-08-20 13:57:08,529 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:08,530 [INFO] time_series: enter extract_special
2019-08-20 13:57:08,530 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,531 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,532 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,532 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:08,532 [INFO] time_series: enter extract_special
2019-08-20 13:57:08,533 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,533 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,534 [INFO] time_series: exit extract_main
2019-08-20 13:57:08,536 [INFO] time_series: enter extract_main
2019-08-20 13:57:08,537 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,537 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,537 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,537 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:08,538 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:08,538 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,538 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,538 [INFO] time_series: processing publication #: 1
2019-08-20 13:57:08,538 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,539 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,539 [INFO] time_series: processing publication #: 2
2019-08-20 13:57:08,539 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,539 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,539 [INFO] time_series: enter extract_pc
2019-08-20 13:57:08,540 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:08,540 [INFO] time_series: enter extract_special
2019-08-20 13:57:08,541 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,543 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,544 [INFO] time_series: exit extract_main
2019-08-20 13:57:08,545 [INFO] time_series: enter extract_main
2019-08-20 13:57:08,545 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,545 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,545 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:08,546 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:08,546 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,546 [INFO] time_series: enter extract_pc
2019-08-20 13:57:08,546 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:08,546 [INFO] time_series: enter extract_special
2019-08-20 13:57:08,547 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,547 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,548 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,548 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,548 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,548 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,549 [INFO] time_series: exit extract_main
2019-08-20 13:57:08,551 [INFO] time_series: enter extract_main
2019-08-20 13:57:08,551 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,552 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,552 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:08,552 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:08,552 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,552 [INFO] time_series: enter extract_pc
2019-08-20 13:57:08,553 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:08,553 [INFO] time_series: enter extract_special
2019-08-20 13:57:08,553 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-08-20 13:57:08,553 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,554 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,554 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,555 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,555 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,556 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,556 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,557 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,557 [INFO] time_series: exit extract_main
2019-08-20 13:57:08,558 [INFO] time_series: enter extract_main
2019-08-20 13:57:08,558 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,559 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,559 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:57:08,559 [INFO] time_series: enter _extract_pub
2019-08-20 13:57:08,559 [INFO] time_series: processing publication #: 0
2019-08-20 13:57:08,559 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,559 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,560 [INFO] time_series: processing publication #: 1
2019-08-20 13:57:08,560 [INFO] time_series: enter extract_authors
2019-08-20 13:57:08,560 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:57:08,560 [INFO] time_series: enter extract_pc
2019-08-20 13:57:08,560 [INFO] time_series: enter extract_table_root
2019-08-20 13:57:08,561 [INFO] time_series: enter extract_special
2019-08-20 13:57:08,561 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,561 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,562 [INFO] time_series: enter extract_columns
2019-08-20 13:57:08,562 [INFO] time_series: exit extract_main
2019-08-20 13:57:08,562 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.95 seconds
2019-08-20 13:59:03,790 [DEBUG] shapely.geos: Trying `CDLL(//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib)`
2019-08-20 13:59:03,793 [DEBUG] shapely.geos: Library path: '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib'
2019-08-20 13:59:03,794 [DEBUG] shapely.geos: DLL: <CDLL '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib', handle 7f963d886ae0 at 0x1a29a41e10>
2019-08-20 13:59:03,795 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-08-20 13:59:03,796 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-08-20 13:59:03,796 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 112b87050 at 0x11066d7b8>
2019-08-20 13:59:04,256 [INFO] directory: enter list_files
2019-08-20 13:59:04,257 [INFO] directory: exit list_files
2019-08-20 13:59:04,259 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp2wn08z05
2019-08-20 13:59:04,259 [INFO] zips: enter unzip
2019-08-20 13:59:04,262 [INFO] zips: exit unzip
2019-08-20 13:59:04,287 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-08-20 13:59:04,287 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:04,288 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:04,288 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:04,288 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:04,288 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:04,289 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:04,289 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:04,289 [INFO] csvs: enter read_csvs
2019-08-20 13:59:04,289 [INFO] directory: enter list_files
2019-08-20 13:59:04,290 [INFO] directory: exit list_files
2019-08-20 13:59:04,290 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:04,290 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-08-20 13:59:04,291 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:04,291 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:04,292 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:04,293 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:04,294 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:04,294 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:04,294 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:04,295 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 13:59:04,295 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 13:59:04,296 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:04,297 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-08-20 13:59:04,297 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp3dscuitg
2019-08-20 13:59:04,298 [INFO] zips: enter unzip
2019-08-20 13:59:04,301 [INFO] zips: exit unzip
2019-08-20 13:59:04,704 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-08-20 13:59:04,705 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:04,709 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:04,709 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:04,709 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:04,710 [INFO] jsons: enter import_data: chron
2019-08-20 13:59:04,710 [INFO] jsons: exit import_data: chron
2019-08-20 13:59:04,710 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:04,711 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:04,711 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:04,712 [INFO] csvs: enter read_csvs
2019-08-20 13:59:04,713 [INFO] directory: enter list_files
2019-08-20 13:59:04,713 [INFO] directory: exit list_files
2019-08-20 13:59:04,713 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:04,713 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-08-20 13:59:04,714 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:04,714 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:04,714 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-08-20 13:59:04,715 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:04,716 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:04,716 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-08-20 13:59:04,717 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:04,717 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:04,718 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-08-20 13:59:04,718 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:04,719 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:04,719 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:04,725 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:04,731 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:04,736 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:04,736 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:04,736 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:04,737 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-08-20 13:59:04,738 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:04,738 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:04,738 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:04,738 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:04,744 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 13:59:04,744 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 13:59:04,745 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 13:59:04,745 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 13:59:04,745 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:04,747 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-08-20 13:59:04,747 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpnspbfi3j
2019-08-20 13:59:04,748 [INFO] zips: enter unzip
2019-08-20 13:59:04,750 [INFO] zips: exit unzip
2019-08-20 13:59:04,776 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-08-20 13:59:04,776 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:04,777 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:04,777 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:04,777 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:04,778 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:04,778 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:04,778 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:04,778 [INFO] csvs: enter read_csvs
2019-08-20 13:59:04,779 [INFO] directory: enter list_files
2019-08-20 13:59:04,779 [INFO] directory: exit list_files
2019-08-20 13:59:04,779 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:04,779 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-08-20 13:59:04,781 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:04,781 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:04,781 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:04,783 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:04,783 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:04,783 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:04,783 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:04,784 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 13:59:04,785 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 13:59:04,785 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:04,786 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-08-20 13:59:04,787 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp6jwd927v
2019-08-20 13:59:04,787 [INFO] zips: enter unzip
2019-08-20 13:59:04,833 [INFO] zips: exit unzip
2019-08-20 13:59:05,090 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-08-20 13:59:05,091 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:05,094 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:05,095 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:05,095 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:05,095 [INFO] jsons: enter import_data: chron
2019-08-20 13:59:05,095 [INFO] jsons: enter import_model
2019-08-20 13:59:05,095 [INFO] jsons: exit import_model: chron0model
2019-08-20 13:59:05,096 [INFO] jsons: exit import_data: chron
2019-08-20 13:59:05,096 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:05,096 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:05,096 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:05,098 [INFO] csvs: enter read_csvs
2019-08-20 13:59:05,098 [INFO] directory: enter list_files
2019-08-20 13:59:05,098 [INFO] directory: exit list_files
2019-08-20 13:59:05,099 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:05,099 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-08-20 13:59:05,960 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:05,961 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:05,961 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-08-20 13:59:05,964 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:05,964 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:05,964 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:05,966 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:05,966 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:05,967 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:05,967 [INFO] csvs: enter merge_csv_model
2019-08-20 13:59:06,478 [INFO] csvs: exit merge_csv_model
2019-08-20 13:59:06,479 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:06,479 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:06,479 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:07,476 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 13:59:07,477 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 13:59:07,477 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 13:59:07,477 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-08-20 13:59:07,477 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 13:59:07,478 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:07,480 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-08-20 13:59:07,498 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpz00fl0bw
2019-08-20 13:59:07,498 [INFO] zips: enter unzip
2019-08-20 13:59:07,641 [INFO] zips: exit unzip
2019-08-20 13:59:07,833 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-08-20 13:59:07,834 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:07,835 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:07,835 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:07,835 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:07,835 [INFO] jsons: enter import_data: chron
2019-08-20 13:59:07,836 [INFO] jsons: enter import_model
2019-08-20 13:59:07,836 [INFO] jsons: exit import_model: chron0model
2019-08-20 13:59:07,836 [INFO] jsons: exit import_data: chron
2019-08-20 13:59:07,836 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:07,837 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:07,837 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:07,838 [INFO] csvs: enter read_csvs
2019-08-20 13:59:07,838 [INFO] directory: enter list_files
2019-08-20 13:59:07,838 [INFO] directory: exit list_files
2019-08-20 13:59:07,838 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:07,839 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-08-20 13:59:07,840 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:07,840 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:07,840 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-08-20 13:59:07,842 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:07,842 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:07,842 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-08-20 13:59:07,977 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:07,977 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:07,977 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-08-20 13:59:08,076 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:08,077 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:08,077 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-08-20 13:59:08,172 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:08,173 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:08,174 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-08-20 13:59:08,261 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:08,262 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:08,262 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-08-20 13:59:08,353 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:08,353 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:08,354 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-08-20 13:59:08,442 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:08,443 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:08,443 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-08-20 13:59:08,532 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:08,533 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:08,533 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-08-20 13:59:08,618 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:08,619 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:08,619 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-08-20 13:59:08,708 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:08,709 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:08,709 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-08-20 13:59:08,803 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:08,804 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:08,804 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-08-20 13:59:08,947 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:08,947 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:08,948 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-08-20 13:59:09,034 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:09,034 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:09,035 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-08-20 13:59:09,035 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:09,035 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:09,036 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-08-20 13:59:09,128 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:09,129 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:09,129 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:09,132 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:09,133 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:09,133 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-08-20 13:59:09,134 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,134 [INFO] csvs: enter merge_csv_model
2019-08-20 13:59:09,136 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,245 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,278 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,310 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,344 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,376 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,409 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,444 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,478 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,511 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,544 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,577 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,610 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:09,611 [INFO] csvs: exit merge_csv_model
2019-08-20 13:59:09,611 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:09,611 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:09,611 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:10,400 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 13:59:10,401 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 13:59:10,401 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 13:59:10,402 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-08-20 13:59:10,402 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 13:59:10,402 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:10,406 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-08-20 13:59:10,414 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpal9_225s
2019-08-20 13:59:10,414 [INFO] zips: enter unzip
2019-08-20 13:59:10,416 [INFO] zips: exit unzip
2019-08-20 13:59:10,562 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-08-20 13:59:10,562 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:10,564 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:10,564 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:10,564 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:10,564 [INFO] jsons: enter import_data: chron
2019-08-20 13:59:10,565 [INFO] jsons: exit import_data: chron
2019-08-20 13:59:10,565 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:10,565 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:10,565 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:10,566 [INFO] csvs: enter read_csvs
2019-08-20 13:59:10,567 [INFO] directory: enter list_files
2019-08-20 13:59:10,567 [INFO] directory: exit list_files
2019-08-20 13:59:10,567 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:10,569 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-08-20 13:59:10,571 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:10,572 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:10,572 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-08-20 13:59:10,576 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:10,577 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:10,577 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:10,583 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:10,584 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:10,584 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:10,586 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-08-20 13:59:10,588 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-08-20 13:59:10,589 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-08-20 13:59:10,589 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:10,589 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:10,589 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:10,590 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:10,594 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 13:59:10,594 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 13:59:10,595 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 13:59:10,595 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 13:59:10,595 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:10,596 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-08-20 13:59:10,597 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpwrew_a9n
2019-08-20 13:59:10,597 [INFO] zips: enter unzip
2019-08-20 13:59:10,601 [INFO] zips: exit unzip
2019-08-20 13:59:10,636 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-08-20 13:59:10,637 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:10,637 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:10,638 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:10,638 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:10,638 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:10,639 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:10,639 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:10,640 [INFO] csvs: enter read_csvs
2019-08-20 13:59:10,640 [INFO] directory: enter list_files
2019-08-20 13:59:10,641 [INFO] directory: exit list_files
2019-08-20 13:59:10,641 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:10,641 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-08-20 13:59:10,642 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:10,643 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:10,643 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:10,644 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:10,644 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:10,645 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:10,645 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:10,646 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 13:59:10,646 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 13:59:10,646 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:10,648 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-08-20 13:59:10,649 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpt_i4p98r
2019-08-20 13:59:10,649 [INFO] zips: enter unzip
2019-08-20 13:59:10,652 [INFO] zips: exit unzip
2019-08-20 13:59:10,690 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-08-20 13:59:10,690 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:10,691 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:10,691 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:10,692 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:10,692 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:10,692 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:10,692 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:10,693 [INFO] csvs: enter read_csvs
2019-08-20 13:59:10,693 [INFO] directory: enter list_files
2019-08-20 13:59:10,693 [INFO] directory: exit list_files
2019-08-20 13:59:10,693 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:10,693 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-08-20 13:59:10,695 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:10,696 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:10,696 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:10,699 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:10,700 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:10,700 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:10,700 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:10,702 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 13:59:10,703 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 13:59:10,703 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:10,704 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-08-20 13:59:10,705 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp5zrbxuk2
2019-08-20 13:59:10,705 [INFO] zips: enter unzip
2019-08-20 13:59:10,707 [INFO] zips: exit unzip
2019-08-20 13:59:10,734 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-08-20 13:59:10,734 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:10,735 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:10,735 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:10,735 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:10,735 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:10,736 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:10,736 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:10,736 [INFO] csvs: enter read_csvs
2019-08-20 13:59:10,736 [INFO] directory: enter list_files
2019-08-20 13:59:10,737 [INFO] directory: exit list_files
2019-08-20 13:59:10,737 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:10,737 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-08-20 13:59:10,738 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:10,738 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:10,738 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:10,740 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:10,740 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:10,740 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:10,740 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:10,742 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 13:59:10,742 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 13:59:10,742 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:10,743 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-08-20 13:59:10,744 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpzqypdv8g
2019-08-20 13:59:10,745 [INFO] zips: enter unzip
2019-08-20 13:59:10,748 [INFO] zips: exit unzip
2019-08-20 13:59:10,849 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-08-20 13:59:10,850 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:10,851 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:10,851 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:10,851 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:10,851 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:10,852 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:10,852 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:10,852 [INFO] csvs: enter read_csvs
2019-08-20 13:59:10,853 [INFO] directory: enter list_files
2019-08-20 13:59:10,853 [INFO] directory: exit list_files
2019-08-20 13:59:10,853 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:10,854 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-08-20 13:59:10,855 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:10,855 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:10,855 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-08-20 13:59:10,857 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:10,857 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:10,858 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:10,860 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-08-20 13:59:10,860 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:10,861 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:10,862 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:10,862 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:10,862 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:10,865 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 13:59:10,865 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 13:59:10,865 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:10,866 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-08-20 13:59:10,867 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpr6em8yhk
2019-08-20 13:59:10,867 [INFO] zips: enter unzip
2019-08-20 13:59:10,869 [INFO] zips: exit unzip
2019-08-20 13:59:10,900 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-08-20 13:59:10,900 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:10,901 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:10,901 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:10,901 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:10,901 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:10,902 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:10,902 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:10,902 [INFO] csvs: enter read_csvs
2019-08-20 13:59:10,902 [INFO] directory: enter list_files
2019-08-20 13:59:10,903 [INFO] directory: exit list_files
2019-08-20 13:59:10,903 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:10,903 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-08-20 13:59:10,906 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:10,906 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:10,906 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:10,908 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:10,909 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:10,909 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:10,909 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:10,912 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 13:59:10,913 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 13:59:10,913 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:10,914 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-08-20 13:59:10,914 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpeqsuc10g
2019-08-20 13:59:10,915 [INFO] zips: enter unzip
2019-08-20 13:59:10,917 [INFO] zips: exit unzip
2019-08-20 13:59:11,000 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-08-20 13:59:11,000 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:11,001 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:11,002 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:11,002 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:11,002 [INFO] jsons: enter import_data: chron
2019-08-20 13:59:11,002 [INFO] jsons: exit import_data: chron
2019-08-20 13:59:11,002 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:11,003 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:11,003 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:11,003 [INFO] csvs: enter read_csvs
2019-08-20 13:59:11,004 [INFO] directory: enter list_files
2019-08-20 13:59:11,004 [INFO] directory: exit list_files
2019-08-20 13:59:11,004 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:11,004 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-08-20 13:59:11,005 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:11,005 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:11,005 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-08-20 13:59:11,006 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:11,006 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:11,006 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:11,008 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:11,008 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:11,008 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:11,009 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-08-20 13:59:11,009 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:11,010 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:11,010 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:11,010 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:11,011 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 13:59:11,011 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 13:59:11,012 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 13:59:11,012 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 13:59:11,012 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:11,013 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-08-20 13:59:11,014 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpk356zn2z
2019-08-20 13:59:11,014 [INFO] zips: enter unzip
2019-08-20 13:59:11,016 [INFO] zips: exit unzip
2019-08-20 13:59:11,128 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-08-20 13:59:11,129 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:11,130 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:11,131 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:11,131 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:11,131 [INFO] jsons: enter import_data: chron
2019-08-20 13:59:11,132 [INFO] jsons: exit import_data: chron
2019-08-20 13:59:11,132 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:11,132 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:11,132 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:11,133 [INFO] csvs: enter read_csvs
2019-08-20 13:59:11,133 [INFO] directory: enter list_files
2019-08-20 13:59:11,133 [INFO] directory: exit list_files
2019-08-20 13:59:11,134 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:11,134 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-08-20 13:59:11,134 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:11,134 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:11,134 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-08-20 13:59:11,136 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:11,136 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:11,136 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:11,140 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:11,140 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:11,140 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:11,141 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-08-20 13:59:11,142 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:11,142 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:11,142 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:11,142 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:11,145 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 13:59:11,145 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 13:59:11,145 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 13:59:11,145 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 13:59:11,145 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:11,146 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-08-20 13:59:11,147 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpyrksq4as
2019-08-20 13:59:11,147 [INFO] zips: enter unzip
2019-08-20 13:59:11,149 [INFO] zips: exit unzip
2019-08-20 13:59:11,180 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-08-20 13:59:11,180 [INFO] jsons: exit read_json_from_file
2019-08-20 13:59:11,181 [INFO] jsons: enter idx_num_to_name
2019-08-20 13:59:11,181 [INFO] jsons: enter import_data: paleo
2019-08-20 13:59:11,181 [INFO] jsons: exit import_data: paleo
2019-08-20 13:59:11,182 [INFO] jsons: exit idx_num_to_name
2019-08-20 13:59:11,182 [INFO] misc: enter remove_empty_doi
2019-08-20 13:59:11,182 [INFO] misc: exit remove_empty_doi
2019-08-20 13:59:11,182 [INFO] csvs: enter read_csvs
2019-08-20 13:59:11,183 [INFO] directory: enter list_files
2019-08-20 13:59:11,183 [INFO] directory: exit list_files
2019-08-20 13:59:11,183 [INFO] csvs: enter read_csv_from_file
2019-08-20 13:59:11,184 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-08-20 13:59:11,184 [INFO] csvs: exit read_csv_from_file
2019-08-20 13:59:11,184 [INFO] csvs: enter merge_csv_metadata
2019-08-20 13:59:11,185 [INFO] csvs: enter merge_csv_section
2019-08-20 13:59:11,186 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 13:59:11,186 [INFO] csvs: exit merge_csv_section
2019-08-20 13:59:11,186 [INFO] csvs: exit merge_csv_metadata
2019-08-20 13:59:11,187 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 13:59:11,187 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 13:59:11,188 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 13:59:11,188 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 13:59:11,189 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-08-20 13:59:11,189 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.89 seconds
2019-08-20 13:59:11,191 [INFO] time_series: enter extract_main
2019-08-20 13:59:11,191 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:11,192 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:11,192 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:11,192 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:11,192 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:11,192 [INFO] time_series: enter extract_authors
2019-08-20 13:59:11,193 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:11,193 [INFO] time_series: processing publication #: 1
2019-08-20 13:59:11,193 [INFO] time_series: enter extract_authors
2019-08-20 13:59:11,193 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:11,194 [INFO] time_series: enter extract_pc
2019-08-20 13:59:11,194 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:11,194 [INFO] time_series: enter extract_special
2019-08-20 13:59:11,195 [INFO] time_series: enter extract_columns
2019-08-20 13:59:11,196 [INFO] time_series: enter extract_columns
2019-08-20 13:59:11,196 [INFO] time_series: exit extract_main
2019-08-20 13:59:11,202 [INFO] time_series: enter extract_main
2019-08-20 13:59:11,203 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:11,203 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:11,203 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:11,203 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:11,203 [INFO] time_series: enter extract_authors
2019-08-20 13:59:11,203 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-08-20 13:59:11,204 [INFO] time_series: exit extract_main
2019-08-20 13:59:11,206 [INFO] time_series: enter extract_main
2019-08-20 13:59:11,206 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:11,207 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:11,207 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:11,207 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:11,207 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:11,207 [INFO] time_series: enter extract_authors
2019-08-20 13:59:11,208 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:11,208 [INFO] time_series: processing publication #: 1
2019-08-20 13:59:11,208 [INFO] time_series: enter extract_authors
2019-08-20 13:59:11,208 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:11,208 [INFO] time_series: enter extract_pc
2019-08-20 13:59:11,209 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:11,209 [INFO] time_series: enter extract_special
2019-08-20 13:59:11,210 [INFO] time_series: enter extract_columns
2019-08-20 13:59:11,210 [INFO] time_series: enter extract_columns
2019-08-20 13:59:11,211 [INFO] time_series: exit extract_main
2019-08-20 13:59:12,197 [INFO] time_series: enter extract_main
2019-08-20 13:59:12,197 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:12,198 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:12,198 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:12,198 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:12,198 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:12,198 [INFO] time_series: enter extract_authors
2019-08-20 13:59:12,199 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:12,199 [INFO] time_series: processing publication #: 1
2019-08-20 13:59:12,199 [INFO] time_series: enter extract_authors
2019-08-20 13:59:12,200 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:12,200 [INFO] time_series: enter extract_pc
2019-08-20 13:59:12,200 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:12,200 [INFO] time_series: enter extract_special
2019-08-20 13:59:12,202 [INFO] time_series: enter extract_columns
2019-08-20 13:59:12,203 [INFO] time_series: enter extract_columns
2019-08-20 13:59:12,203 [INFO] time_series: exit extract_main
2019-08-20 13:59:12,973 [INFO] time_series: enter extract_main
2019-08-20 13:59:12,974 [INFO] time_series: enter _extract_funding
2019-08-20 13:59:12,974 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:12,975 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:12,975 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:12,975 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:12,975 [INFO] time_series: enter extract_authors
2019-08-20 13:59:12,976 [INFO] time_series: enter extract_pc
2019-08-20 13:59:12,976 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:12,976 [INFO] time_series: enter extract_special
2019-08-20 13:59:12,977 [INFO] time_series: enter extract_columns
2019-08-20 13:59:12,978 [INFO] time_series: enter extract_columns
2019-08-20 13:59:12,978 [INFO] time_series: enter extract_columns
2019-08-20 13:59:12,979 [INFO] time_series: enter extract_columns
2019-08-20 13:59:12,980 [INFO] time_series: enter extract_columns
2019-08-20 13:59:12,980 [INFO] time_series: enter extract_columns
2019-08-20 13:59:12,981 [INFO] time_series: exit extract_main
2019-08-20 13:59:12,993 [INFO] time_series: enter extract_main
2019-08-20 13:59:12,993 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:12,993 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:12,994 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:12,994 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:12,994 [INFO] time_series: enter extract_authors
2019-08-20 13:59:12,994 [INFO] time_series: enter extract_pc
2019-08-20 13:59:12,994 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:12,995 [INFO] time_series: enter extract_special
2019-08-20 13:59:12,996 [INFO] time_series: enter extract_columns
2019-08-20 13:59:12,998 [INFO] time_series: enter extract_columns
2019-08-20 13:59:12,999 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,001 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,001 [INFO] time_series: exit extract_main
2019-08-20 13:59:13,002 [INFO] time_series: enter extract_main
2019-08-20 13:59:13,002 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,002 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,003 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,003 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:13,003 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:13,004 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,004 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,004 [INFO] time_series: processing publication #: 1
2019-08-20 13:59:13,004 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,004 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,005 [INFO] time_series: processing publication #: 2
2019-08-20 13:59:13,005 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,005 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,005 [INFO] time_series: enter extract_pc
2019-08-20 13:59:13,005 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:13,006 [INFO] time_series: enter extract_special
2019-08-20 13:59:13,006 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,007 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,007 [INFO] time_series: exit extract_main
2019-08-20 13:59:13,009 [INFO] time_series: enter extract_main
2019-08-20 13:59:13,010 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,010 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,010 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,010 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:13,010 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:13,011 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,011 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,011 [INFO] time_series: processing publication #: 1
2019-08-20 13:59:13,012 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,012 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,012 [INFO] time_series: enter extract_pc
2019-08-20 13:59:13,012 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:13,013 [INFO] time_series: enter extract_special
2019-08-20 13:59:13,013 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,014 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,015 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,015 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,016 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,017 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,017 [INFO] time_series: exit extract_main
2019-08-20 13:59:13,018 [INFO] time_series: enter extract_main
2019-08-20 13:59:13,018 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,018 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,019 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,019 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:13,019 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:13,019 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,019 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,019 [INFO] time_series: processing publication #: 1
2019-08-20 13:59:13,020 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,020 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,020 [INFO] time_series: enter extract_pc
2019-08-20 13:59:13,020 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:13,020 [INFO] time_series: enter extract_special
2019-08-20 13:59:13,021 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,021 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,022 [INFO] time_series: exit extract_main
2019-08-20 13:59:13,024 [INFO] time_series: enter extract_main
2019-08-20 13:59:13,024 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,024 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,024 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,025 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:13,025 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:13,025 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,025 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,025 [INFO] time_series: processing publication #: 1
2019-08-20 13:59:13,026 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,026 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,026 [INFO] time_series: processing publication #: 2
2019-08-20 13:59:13,026 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,026 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,027 [INFO] time_series: enter extract_pc
2019-08-20 13:59:13,027 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:13,027 [INFO] time_series: enter extract_special
2019-08-20 13:59:13,028 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,028 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,029 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,029 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:13,029 [INFO] time_series: enter extract_special
2019-08-20 13:59:13,030 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,030 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,031 [INFO] time_series: exit extract_main
2019-08-20 13:59:13,033 [INFO] time_series: enter extract_main
2019-08-20 13:59:13,034 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,034 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,034 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,034 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:13,034 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:13,035 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,035 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,035 [INFO] time_series: processing publication #: 1
2019-08-20 13:59:13,035 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,036 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,036 [INFO] time_series: processing publication #: 2
2019-08-20 13:59:13,036 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,036 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,036 [INFO] time_series: enter extract_pc
2019-08-20 13:59:13,036 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:13,037 [INFO] time_series: enter extract_special
2019-08-20 13:59:13,038 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,039 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,040 [INFO] time_series: exit extract_main
2019-08-20 13:59:13,041 [INFO] time_series: enter extract_main
2019-08-20 13:59:13,041 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,041 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,041 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:13,042 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:13,042 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,042 [INFO] time_series: enter extract_pc
2019-08-20 13:59:13,042 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:13,042 [INFO] time_series: enter extract_special
2019-08-20 13:59:13,043 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,043 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,043 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,043 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,044 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,044 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,045 [INFO] time_series: exit extract_main
2019-08-20 13:59:13,047 [INFO] time_series: enter extract_main
2019-08-20 13:59:13,047 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,048 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,048 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:13,048 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:13,048 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,048 [INFO] time_series: enter extract_pc
2019-08-20 13:59:13,049 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:13,049 [INFO] time_series: enter extract_special
2019-08-20 13:59:13,049 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-08-20 13:59:13,049 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,050 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,050 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,051 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,051 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,052 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,052 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,053 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,053 [INFO] time_series: exit extract_main
2019-08-20 13:59:13,054 [INFO] time_series: enter extract_main
2019-08-20 13:59:13,054 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,054 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,054 [INFO] time_series: enter ts_extract_geo
2019-08-20 13:59:13,054 [INFO] time_series: enter _extract_pub
2019-08-20 13:59:13,054 [INFO] time_series: processing publication #: 0
2019-08-20 13:59:13,055 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,055 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,055 [INFO] time_series: processing publication #: 1
2019-08-20 13:59:13,055 [INFO] time_series: enter extract_authors
2019-08-20 13:59:13,056 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 13:59:13,056 [INFO] time_series: enter extract_pc
2019-08-20 13:59:13,056 [INFO] time_series: enter extract_table_root
2019-08-20 13:59:13,056 [INFO] time_series: enter extract_special
2019-08-20 13:59:13,056 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,057 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,057 [INFO] time_series: enter extract_columns
2019-08-20 13:59:13,057 [INFO] time_series: exit extract_main
2019-08-20 13:59:13,058 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.86 seconds
2019-08-20 13:59:19,176 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2019-08-20 13:59:19,177 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,177 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,178 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 13:59:19,178 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,178 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,178 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,179 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,179 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2019-08-20 13:59:19,179 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,179 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,180 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,180 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,180 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,180 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,181 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,181 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2019-08-20 13:59:19,181 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 13:59:19,181 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,181 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 13:59:19,182 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,182 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,182 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,182 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,183 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,183 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,183 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,183 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,183 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,184 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,184 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2019-08-20 13:59:19,184 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 13:59:19,184 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 13:59:19,185 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,185 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,185 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,185 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 13:59:19,185 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,186 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,186 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,186 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,186 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,186 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,187 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,187 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 13:59:19,187 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 13:59:19,187 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,188 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,188 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,188 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,189 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,189 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,189 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 13:59:19,189 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,190 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 13:59:19,190 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,190 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,191 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 13:59:19,191 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,191 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 13:59:19,191 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 13:59:19,192 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,192 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 13:59:19,192 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,193 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 13:59:19,193 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 13:59:19,193 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,193 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 13:59:19,194 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,194 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 13:59:19,194 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,194 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,195 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 13:59:19,195 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,195 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,195 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 13:59:19,195 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2019-08-20 13:59:19,196 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,196 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,196 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,197 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,197 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,197 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,197 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,198 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,198 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,198 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,199 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,199 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 13:59:19,199 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 13:59:19,199 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,199 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,200 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,200 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 13:59:19,200 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,200 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,201 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,201 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 4.971363636363637
2019-08-20 13:59:19,201 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,202 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 13:59:19,202 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,202 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,202 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,203 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,203 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,203 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 13:59:19,203 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 13:59:19,203 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 13:59:19,204 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 13:59:19,204 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,204 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,204 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 13:59:19,205 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 13:59:19,205 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,205 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,205 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,206 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,206 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,206 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,206 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,207 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,207 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,207 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,207 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,207 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 13:59:19,208 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 13:59:19,208 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,208 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,209 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,209 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 13:59:19,209 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 13:59:19,209 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,210 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,210 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,210 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,210 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,211 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,211 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,211 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 13:59:19,211 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,212 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,212 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,212 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,212 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,213 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 13:59:19,213 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,213 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 13:59:19,213 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,213 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,214 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,214 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,214 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,214 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,215 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,215 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,215 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,215 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,216 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,216 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,216 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 13:59:19,216 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,217 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,217 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 13:59:19,217 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,217 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 13:59:19,218 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,218 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 13:59:19,218 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,218 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,218 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,219 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,219 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,219 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 13:59:19,219 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2019-08-20 13:59:19,220 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,220 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 13:59:19,220 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,220 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,220 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 13:59:19,221 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,221 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,221 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 13:59:19,221 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 13:59:19,221 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,222 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,222 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 13:59:19,222 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,222 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,223 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 13:59:19,223 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,223 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,223 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 13:59:19,223 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,224 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 13:59:19,224 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,224 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,224 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 13:59:19,225 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,225 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,225 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,225 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 13:59:19,225 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,226 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,226 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 13:59:19,226 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,226 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2019-08-20 13:59:19,227 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,227 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 13:59:19,227 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,227 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,227 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,228 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 13:59:19,228 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 13:59:19,228 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,228 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,228 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,229 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,229 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,229 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 13:59:19,229 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,230 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 13:59:19,230 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2019-08-20 13:59:19,230 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,230 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 13:59:19,230 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,231 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,231 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,231 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,231 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 13:59:19,231 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,232 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,232 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,232 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,232 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,233 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,233 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,233 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 13:59:19,233 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,233 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,234 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 13:59:19,234 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,234 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,234 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,234 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 13:59:19,235 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,235 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 7.698636363636363
2019-08-20 13:59:19,235 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,235 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,235 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,236 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 13:59:19,236 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,236 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 2.777272727272727
2019-08-20 13:59:19,236 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,237 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,237 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,237 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,237 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,237 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,238 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,238 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,238 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 13:59:19,238 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 13:59:19,239 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 13:59:19,239 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,239 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,239 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,239 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,240 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,240 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,240 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,240 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,241 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 13:59:19,241 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,241 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 13:59:19,241 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,242 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,242 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,242 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,243 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 3.9713636363636367
2019-08-20 13:59:19,243 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 13:59:19,243 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,243 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 13:59:19,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 13:59:19,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 13:59:19,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 13:59:19,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 13:59:19,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 13:59:19,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 13:59:19,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,248 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,248 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 13:59:19,248 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,248 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 13:59:19,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 13:59:19,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 13:59:19,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2019-08-20 13:59:19,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 13:59:19,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 13:59:19,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 13:59:19,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 13:59:19,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 13:59:19,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 13:59:19,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 13:59:19,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 13:59:19,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 13:59:19,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 13:59:19,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 13:59:19,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 13:59:19,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 13:59:19,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 13:59:19,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 13:59:19,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 13:59:19,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 6.698636363636363
2019-08-20 13:59:19,256 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2019-08-20 14:00:58,420 [DEBUG] shapely.geos: Trying `CDLL(//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib)`
2019-08-20 14:00:58,425 [DEBUG] shapely.geos: Library path: '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib'
2019-08-20 14:00:58,425 [DEBUG] shapely.geos: DLL: <CDLL '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib', handle 7f9a2dca2900 at 0x1a1acfdcc0>
2019-08-20 14:00:58,426 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-08-20 14:00:58,427 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-08-20 14:00:58,427 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 109d9f050 at 0x102215be0>
2019-08-20 14:00:59,014 [INFO] directory: enter list_files
2019-08-20 14:00:59,014 [INFO] directory: exit list_files
2019-08-20 14:00:59,016 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmph240rrm5
2019-08-20 14:00:59,016 [INFO] zips: enter unzip
2019-08-20 14:00:59,019 [INFO] zips: exit unzip
2019-08-20 14:00:59,044 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-08-20 14:00:59,045 [INFO] jsons: exit read_json_from_file
2019-08-20 14:00:59,045 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:00:59,045 [INFO] jsons: enter import_data: paleo
2019-08-20 14:00:59,045 [INFO] jsons: exit import_data: paleo
2019-08-20 14:00:59,046 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:00:59,046 [INFO] misc: enter remove_empty_doi
2019-08-20 14:00:59,046 [INFO] misc: exit remove_empty_doi
2019-08-20 14:00:59,047 [INFO] csvs: enter read_csvs
2019-08-20 14:00:59,047 [INFO] directory: enter list_files
2019-08-20 14:00:59,047 [INFO] directory: exit list_files
2019-08-20 14:00:59,047 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:00:59,047 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-08-20 14:00:59,049 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:00:59,049 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:00:59,049 [INFO] csvs: enter merge_csv_section
2019-08-20 14:00:59,051 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:00:59,051 [INFO] csvs: exit merge_csv_section
2019-08-20 14:00:59,051 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:00:59,052 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:00:59,053 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 14:00:59,053 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 14:00:59,054 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:00:59,055 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-08-20 14:00:59,055 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpx6tpxec0
2019-08-20 14:00:59,056 [INFO] zips: enter unzip
2019-08-20 14:00:59,059 [INFO] zips: exit unzip
2019-08-20 14:00:59,460 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-08-20 14:00:59,460 [INFO] jsons: exit read_json_from_file
2019-08-20 14:00:59,464 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:00:59,464 [INFO] jsons: enter import_data: paleo
2019-08-20 14:00:59,465 [INFO] jsons: exit import_data: paleo
2019-08-20 14:00:59,465 [INFO] jsons: enter import_data: chron
2019-08-20 14:00:59,465 [INFO] jsons: exit import_data: chron
2019-08-20 14:00:59,465 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:00:59,466 [INFO] misc: enter remove_empty_doi
2019-08-20 14:00:59,466 [INFO] misc: exit remove_empty_doi
2019-08-20 14:00:59,468 [INFO] csvs: enter read_csvs
2019-08-20 14:00:59,468 [INFO] directory: enter list_files
2019-08-20 14:00:59,468 [INFO] directory: exit list_files
2019-08-20 14:00:59,468 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:00:59,468 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-08-20 14:00:59,469 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:00:59,469 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:00:59,469 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-08-20 14:00:59,470 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:00:59,470 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:00:59,471 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-08-20 14:00:59,472 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:00:59,472 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:00:59,472 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-08-20 14:00:59,473 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:00:59,473 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:00:59,473 [INFO] csvs: enter merge_csv_section
2019-08-20 14:00:59,478 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:00:59,483 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:00:59,487 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:00:59,488 [INFO] csvs: exit merge_csv_section
2019-08-20 14:00:59,488 [INFO] csvs: enter merge_csv_section
2019-08-20 14:00:59,488 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-08-20 14:00:59,489 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:00:59,489 [INFO] csvs: exit merge_csv_section
2019-08-20 14:00:59,490 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:00:59,490 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:00:59,496 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 14:00:59,496 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 14:00:59,496 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 14:00:59,496 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 14:00:59,497 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:00:59,498 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-08-20 14:00:59,499 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp3fqtvd3k
2019-08-20 14:00:59,499 [INFO] zips: enter unzip
2019-08-20 14:00:59,501 [INFO] zips: exit unzip
2019-08-20 14:00:59,527 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-08-20 14:00:59,527 [INFO] jsons: exit read_json_from_file
2019-08-20 14:00:59,527 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:00:59,528 [INFO] jsons: enter import_data: paleo
2019-08-20 14:00:59,528 [INFO] jsons: exit import_data: paleo
2019-08-20 14:00:59,528 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:00:59,528 [INFO] misc: enter remove_empty_doi
2019-08-20 14:00:59,528 [INFO] misc: exit remove_empty_doi
2019-08-20 14:00:59,529 [INFO] csvs: enter read_csvs
2019-08-20 14:00:59,529 [INFO] directory: enter list_files
2019-08-20 14:00:59,529 [INFO] directory: exit list_files
2019-08-20 14:00:59,530 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:00:59,530 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-08-20 14:00:59,531 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:00:59,531 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:00:59,531 [INFO] csvs: enter merge_csv_section
2019-08-20 14:00:59,533 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:00:59,533 [INFO] csvs: exit merge_csv_section
2019-08-20 14:00:59,533 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:00:59,534 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:00:59,535 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 14:00:59,535 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 14:00:59,535 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:00:59,536 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-08-20 14:00:59,537 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp19dgsz1_
2019-08-20 14:00:59,537 [INFO] zips: enter unzip
2019-08-20 14:00:59,591 [INFO] zips: exit unzip
2019-08-20 14:00:59,849 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-08-20 14:00:59,850 [INFO] jsons: exit read_json_from_file
2019-08-20 14:00:59,853 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:00:59,853 [INFO] jsons: enter import_data: paleo
2019-08-20 14:00:59,853 [INFO] jsons: exit import_data: paleo
2019-08-20 14:00:59,854 [INFO] jsons: enter import_data: chron
2019-08-20 14:00:59,854 [INFO] jsons: enter import_model
2019-08-20 14:00:59,854 [INFO] jsons: exit import_model: chron0model
2019-08-20 14:00:59,854 [INFO] jsons: exit import_data: chron
2019-08-20 14:00:59,854 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:00:59,855 [INFO] misc: enter remove_empty_doi
2019-08-20 14:00:59,855 [INFO] misc: exit remove_empty_doi
2019-08-20 14:00:59,856 [INFO] csvs: enter read_csvs
2019-08-20 14:00:59,856 [INFO] directory: enter list_files
2019-08-20 14:00:59,857 [INFO] directory: exit list_files
2019-08-20 14:00:59,857 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:00:59,857 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-08-20 14:01:00,739 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:00,740 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:00,740 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-08-20 14:01:00,743 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:00,743 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:01:00,743 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:00,746 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:00,746 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:00,746 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:00,747 [INFO] csvs: enter merge_csv_model
2019-08-20 14:01:01,263 [INFO] csvs: exit merge_csv_model
2019-08-20 14:01:01,264 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:01,264 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:01:01,264 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:01:02,237 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 14:01:02,238 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 14:01:02,238 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 14:01:02,238 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-08-20 14:01:02,239 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 14:01:02,239 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:01:02,241 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-08-20 14:01:02,257 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpq385ab3w
2019-08-20 14:01:02,257 [INFO] zips: enter unzip
2019-08-20 14:01:02,396 [INFO] zips: exit unzip
2019-08-20 14:01:02,585 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-08-20 14:01:02,586 [INFO] jsons: exit read_json_from_file
2019-08-20 14:01:02,587 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:01:02,587 [INFO] jsons: enter import_data: paleo
2019-08-20 14:01:02,588 [INFO] jsons: exit import_data: paleo
2019-08-20 14:01:02,588 [INFO] jsons: enter import_data: chron
2019-08-20 14:01:02,588 [INFO] jsons: enter import_model
2019-08-20 14:01:02,588 [INFO] jsons: exit import_model: chron0model
2019-08-20 14:01:02,588 [INFO] jsons: exit import_data: chron
2019-08-20 14:01:02,589 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:01:02,589 [INFO] misc: enter remove_empty_doi
2019-08-20 14:01:02,589 [INFO] misc: exit remove_empty_doi
2019-08-20 14:01:02,590 [INFO] csvs: enter read_csvs
2019-08-20 14:01:02,590 [INFO] directory: enter list_files
2019-08-20 14:01:02,591 [INFO] directory: exit list_files
2019-08-20 14:01:02,591 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:02,591 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-08-20 14:01:02,592 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:02,592 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:02,593 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-08-20 14:01:02,594 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:02,594 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:02,594 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-08-20 14:01:02,681 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:02,682 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:02,682 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-08-20 14:01:02,766 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:02,767 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:02,767 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-08-20 14:01:02,862 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:02,862 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:02,863 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-08-20 14:01:02,951 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:02,952 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:02,952 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-08-20 14:01:03,040 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:03,041 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:03,042 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-08-20 14:01:03,132 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:03,132 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:03,133 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-08-20 14:01:03,222 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:03,223 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:03,223 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-08-20 14:01:03,318 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:03,318 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:03,319 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-08-20 14:01:03,408 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:03,408 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:03,409 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-08-20 14:01:03,500 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:03,501 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:03,501 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-08-20 14:01:03,636 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:03,637 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:03,637 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-08-20 14:01:03,723 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:03,723 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:03,724 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-08-20 14:01:03,724 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:03,724 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:03,725 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-08-20 14:01:03,815 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:03,816 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:01:03,816 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:03,819 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:03,819 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:03,820 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-08-20 14:01:03,820 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:03,820 [INFO] csvs: enter merge_csv_model
2019-08-20 14:01:03,822 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:03,926 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:03,957 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:03,988 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:04,019 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:04,049 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:04,080 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:04,111 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:04,143 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:04,174 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:04,205 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:04,237 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:04,270 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:04,270 [INFO] csvs: exit merge_csv_model
2019-08-20 14:01:04,271 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:04,271 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:01:04,271 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:01:05,021 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 14:01:05,021 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 14:01:05,022 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 14:01:05,022 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-08-20 14:01:05,022 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 14:01:05,022 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:01:05,026 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-08-20 14:01:05,033 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp932e98n6
2019-08-20 14:01:05,033 [INFO] zips: enter unzip
2019-08-20 14:01:05,036 [INFO] zips: exit unzip
2019-08-20 14:01:05,123 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-08-20 14:01:05,124 [INFO] jsons: exit read_json_from_file
2019-08-20 14:01:05,126 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:01:05,126 [INFO] jsons: enter import_data: paleo
2019-08-20 14:01:05,126 [INFO] jsons: exit import_data: paleo
2019-08-20 14:01:05,126 [INFO] jsons: enter import_data: chron
2019-08-20 14:01:05,127 [INFO] jsons: exit import_data: chron
2019-08-20 14:01:05,127 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:01:05,127 [INFO] misc: enter remove_empty_doi
2019-08-20 14:01:05,128 [INFO] misc: exit remove_empty_doi
2019-08-20 14:01:05,128 [INFO] csvs: enter read_csvs
2019-08-20 14:01:05,129 [INFO] directory: enter list_files
2019-08-20 14:01:05,129 [INFO] directory: exit list_files
2019-08-20 14:01:05,129 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,130 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-08-20 14:01:05,130 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,131 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,131 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-08-20 14:01:05,136 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,137 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:01:05,137 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,143 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,143 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,143 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,145 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-08-20 14:01:05,146 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-08-20 14:01:05,146 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-08-20 14:01:05,147 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,147 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,147 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:01:05,147 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:01:05,152 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 14:01:05,152 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 14:01:05,152 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 14:01:05,152 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 14:01:05,153 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:01:05,154 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-08-20 14:01:05,154 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp3uhxd8a2
2019-08-20 14:01:05,154 [INFO] zips: enter unzip
2019-08-20 14:01:05,156 [INFO] zips: exit unzip
2019-08-20 14:01:05,186 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-08-20 14:01:05,186 [INFO] jsons: exit read_json_from_file
2019-08-20 14:01:05,187 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:01:05,187 [INFO] jsons: enter import_data: paleo
2019-08-20 14:01:05,187 [INFO] jsons: exit import_data: paleo
2019-08-20 14:01:05,188 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:01:05,188 [INFO] misc: enter remove_empty_doi
2019-08-20 14:01:05,188 [INFO] misc: exit remove_empty_doi
2019-08-20 14:01:05,189 [INFO] csvs: enter read_csvs
2019-08-20 14:01:05,189 [INFO] directory: enter list_files
2019-08-20 14:01:05,190 [INFO] directory: exit list_files
2019-08-20 14:01:05,190 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,190 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-08-20 14:01:05,191 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,191 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:01:05,192 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,193 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,193 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,194 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:01:05,194 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:01:05,195 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 14:01:05,195 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 14:01:05,196 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:01:05,197 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-08-20 14:01:05,198 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpudrw51wa
2019-08-20 14:01:05,199 [INFO] zips: enter unzip
2019-08-20 14:01:05,201 [INFO] zips: exit unzip
2019-08-20 14:01:05,240 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-08-20 14:01:05,240 [INFO] jsons: exit read_json_from_file
2019-08-20 14:01:05,241 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:01:05,241 [INFO] jsons: enter import_data: paleo
2019-08-20 14:01:05,241 [INFO] jsons: exit import_data: paleo
2019-08-20 14:01:05,242 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:01:05,242 [INFO] misc: enter remove_empty_doi
2019-08-20 14:01:05,242 [INFO] misc: exit remove_empty_doi
2019-08-20 14:01:05,242 [INFO] csvs: enter read_csvs
2019-08-20 14:01:05,243 [INFO] directory: enter list_files
2019-08-20 14:01:05,243 [INFO] directory: exit list_files
2019-08-20 14:01:05,243 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,243 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-08-20 14:01:05,245 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,246 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:01:05,246 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,250 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,250 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,250 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:01:05,251 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:01:05,253 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 14:01:05,253 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 14:01:05,253 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:01:05,254 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-08-20 14:01:05,255 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpth86egq5
2019-08-20 14:01:05,255 [INFO] zips: enter unzip
2019-08-20 14:01:05,257 [INFO] zips: exit unzip
2019-08-20 14:01:05,283 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-08-20 14:01:05,283 [INFO] jsons: exit read_json_from_file
2019-08-20 14:01:05,284 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:01:05,284 [INFO] jsons: enter import_data: paleo
2019-08-20 14:01:05,284 [INFO] jsons: exit import_data: paleo
2019-08-20 14:01:05,284 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:01:05,285 [INFO] misc: enter remove_empty_doi
2019-08-20 14:01:05,285 [INFO] misc: exit remove_empty_doi
2019-08-20 14:01:05,285 [INFO] csvs: enter read_csvs
2019-08-20 14:01:05,285 [INFO] directory: enter list_files
2019-08-20 14:01:05,286 [INFO] directory: exit list_files
2019-08-20 14:01:05,286 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,286 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-08-20 14:01:05,287 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,287 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:01:05,287 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,288 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,288 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,289 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:01:05,289 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:01:05,290 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 14:01:05,290 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 14:01:05,290 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:01:05,291 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-08-20 14:01:05,292 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpk4kwqiz2
2019-08-20 14:01:05,292 [INFO] zips: enter unzip
2019-08-20 14:01:05,295 [INFO] zips: exit unzip
2019-08-20 14:01:05,391 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-08-20 14:01:05,392 [INFO] jsons: exit read_json_from_file
2019-08-20 14:01:05,393 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:01:05,393 [INFO] jsons: enter import_data: paleo
2019-08-20 14:01:05,393 [INFO] jsons: exit import_data: paleo
2019-08-20 14:01:05,394 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:01:05,394 [INFO] misc: enter remove_empty_doi
2019-08-20 14:01:05,394 [INFO] misc: exit remove_empty_doi
2019-08-20 14:01:05,394 [INFO] csvs: enter read_csvs
2019-08-20 14:01:05,395 [INFO] directory: enter list_files
2019-08-20 14:01:05,395 [INFO] directory: exit list_files
2019-08-20 14:01:05,395 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,395 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-08-20 14:01:05,396 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,397 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,397 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-08-20 14:01:05,398 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,399 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:01:05,399 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,401 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-08-20 14:01:05,401 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,402 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,402 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,403 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:01:05,403 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:01:05,405 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 14:01:05,405 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 14:01:05,405 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:01:05,406 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-08-20 14:01:05,407 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmphsn60a02
2019-08-20 14:01:05,407 [INFO] zips: enter unzip
2019-08-20 14:01:05,409 [INFO] zips: exit unzip
2019-08-20 14:01:05,440 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-08-20 14:01:05,440 [INFO] jsons: exit read_json_from_file
2019-08-20 14:01:05,440 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:01:05,441 [INFO] jsons: enter import_data: paleo
2019-08-20 14:01:05,441 [INFO] jsons: exit import_data: paleo
2019-08-20 14:01:05,441 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:01:05,441 [INFO] misc: enter remove_empty_doi
2019-08-20 14:01:05,442 [INFO] misc: exit remove_empty_doi
2019-08-20 14:01:05,442 [INFO] csvs: enter read_csvs
2019-08-20 14:01:05,442 [INFO] directory: enter list_files
2019-08-20 14:01:05,442 [INFO] directory: exit list_files
2019-08-20 14:01:05,443 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,443 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-08-20 14:01:05,446 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,446 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:01:05,446 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,448 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,448 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,449 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:01:05,449 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:01:05,451 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 14:01:05,452 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 14:01:05,452 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:01:05,453 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-08-20 14:01:05,453 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp43rkwhy4
2019-08-20 14:01:05,454 [INFO] zips: enter unzip
2019-08-20 14:01:05,457 [INFO] zips: exit unzip
2019-08-20 14:01:05,539 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-08-20 14:01:05,540 [INFO] jsons: exit read_json_from_file
2019-08-20 14:01:05,541 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:01:05,541 [INFO] jsons: enter import_data: paleo
2019-08-20 14:01:05,541 [INFO] jsons: exit import_data: paleo
2019-08-20 14:01:05,542 [INFO] jsons: enter import_data: chron
2019-08-20 14:01:05,542 [INFO] jsons: exit import_data: chron
2019-08-20 14:01:05,542 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:01:05,542 [INFO] misc: enter remove_empty_doi
2019-08-20 14:01:05,542 [INFO] misc: exit remove_empty_doi
2019-08-20 14:01:05,543 [INFO] csvs: enter read_csvs
2019-08-20 14:01:05,543 [INFO] directory: enter list_files
2019-08-20 14:01:05,543 [INFO] directory: exit list_files
2019-08-20 14:01:05,544 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,544 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-08-20 14:01:05,544 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,544 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,545 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-08-20 14:01:05,545 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,545 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:01:05,546 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,547 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,548 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,548 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,548 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-08-20 14:01:05,549 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,549 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,549 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:01:05,550 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:01:05,551 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 14:01:05,551 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 14:01:05,551 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 14:01:05,551 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 14:01:05,552 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:01:05,553 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-08-20 14:01:05,553 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpkh_0dgl2
2019-08-20 14:01:05,553 [INFO] zips: enter unzip
2019-08-20 14:01:05,556 [INFO] zips: exit unzip
2019-08-20 14:01:05,666 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-08-20 14:01:05,667 [INFO] jsons: exit read_json_from_file
2019-08-20 14:01:05,669 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:01:05,669 [INFO] jsons: enter import_data: paleo
2019-08-20 14:01:05,669 [INFO] jsons: exit import_data: paleo
2019-08-20 14:01:05,669 [INFO] jsons: enter import_data: chron
2019-08-20 14:01:05,670 [INFO] jsons: exit import_data: chron
2019-08-20 14:01:05,670 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:01:05,670 [INFO] misc: enter remove_empty_doi
2019-08-20 14:01:05,670 [INFO] misc: exit remove_empty_doi
2019-08-20 14:01:05,671 [INFO] csvs: enter read_csvs
2019-08-20 14:01:05,672 [INFO] directory: enter list_files
2019-08-20 14:01:05,672 [INFO] directory: exit list_files
2019-08-20 14:01:05,672 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,672 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-08-20 14:01:05,673 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,673 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,673 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-08-20 14:01:05,675 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,675 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:01:05,675 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,680 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,680 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,680 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,681 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-08-20 14:01:05,682 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,682 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,682 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:01:05,682 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:01:05,685 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 14:01:05,685 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 14:01:05,685 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 14:01:05,686 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 14:01:05,686 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:01:05,687 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-08-20 14:01:05,687 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmph_0l3uwv
2019-08-20 14:01:05,688 [INFO] zips: enter unzip
2019-08-20 14:01:05,690 [INFO] zips: exit unzip
2019-08-20 14:01:05,720 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-08-20 14:01:05,720 [INFO] jsons: exit read_json_from_file
2019-08-20 14:01:05,721 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:01:05,721 [INFO] jsons: enter import_data: paleo
2019-08-20 14:01:05,721 [INFO] jsons: exit import_data: paleo
2019-08-20 14:01:05,721 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:01:05,722 [INFO] misc: enter remove_empty_doi
2019-08-20 14:01:05,722 [INFO] misc: exit remove_empty_doi
2019-08-20 14:01:05,722 [INFO] csvs: enter read_csvs
2019-08-20 14:01:05,722 [INFO] directory: enter list_files
2019-08-20 14:01:05,723 [INFO] directory: exit list_files
2019-08-20 14:01:05,723 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:01:05,723 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-08-20 14:01:05,724 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:01:05,724 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:01:05,724 [INFO] csvs: enter merge_csv_section
2019-08-20 14:01:05,725 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:01:05,725 [INFO] csvs: exit merge_csv_section
2019-08-20 14:01:05,726 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:01:05,726 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:01:05,727 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 14:01:05,727 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 14:01:05,727 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:01:05,728 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-08-20 14:01:05,728 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.71 seconds
2019-08-20 14:01:05,730 [INFO] time_series: enter extract_main
2019-08-20 14:01:05,730 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:05,731 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:05,731 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:05,731 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:05,731 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:05,732 [INFO] time_series: enter extract_authors
2019-08-20 14:01:05,732 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:05,732 [INFO] time_series: processing publication #: 1
2019-08-20 14:01:05,732 [INFO] time_series: enter extract_authors
2019-08-20 14:01:05,732 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:05,733 [INFO] time_series: enter extract_pc
2019-08-20 14:01:05,733 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:05,733 [INFO] time_series: enter extract_special
2019-08-20 14:01:05,734 [INFO] time_series: enter extract_columns
2019-08-20 14:01:05,735 [INFO] time_series: enter extract_columns
2019-08-20 14:01:05,735 [INFO] time_series: exit extract_main
2019-08-20 14:01:05,740 [INFO] time_series: enter extract_main
2019-08-20 14:01:05,741 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:05,741 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:05,741 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:05,741 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:05,742 [INFO] time_series: enter extract_authors
2019-08-20 14:01:05,742 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-08-20 14:01:05,742 [INFO] time_series: exit extract_main
2019-08-20 14:01:05,744 [INFO] time_series: enter extract_main
2019-08-20 14:01:05,744 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:05,744 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:05,745 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:05,745 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:05,745 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:05,745 [INFO] time_series: enter extract_authors
2019-08-20 14:01:05,745 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:05,746 [INFO] time_series: processing publication #: 1
2019-08-20 14:01:05,746 [INFO] time_series: enter extract_authors
2019-08-20 14:01:05,746 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:05,746 [INFO] time_series: enter extract_pc
2019-08-20 14:01:05,747 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:05,747 [INFO] time_series: enter extract_special
2019-08-20 14:01:05,748 [INFO] time_series: enter extract_columns
2019-08-20 14:01:05,748 [INFO] time_series: enter extract_columns
2019-08-20 14:01:05,749 [INFO] time_series: exit extract_main
2019-08-20 14:01:06,726 [INFO] time_series: enter extract_main
2019-08-20 14:01:06,726 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:06,727 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:06,727 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:06,727 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:06,727 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:06,728 [INFO] time_series: enter extract_authors
2019-08-20 14:01:06,728 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:06,728 [INFO] time_series: processing publication #: 1
2019-08-20 14:01:06,728 [INFO] time_series: enter extract_authors
2019-08-20 14:01:06,728 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:06,729 [INFO] time_series: enter extract_pc
2019-08-20 14:01:06,729 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:06,729 [INFO] time_series: enter extract_special
2019-08-20 14:01:06,730 [INFO] time_series: enter extract_columns
2019-08-20 14:01:06,732 [INFO] time_series: enter extract_columns
2019-08-20 14:01:06,732 [INFO] time_series: exit extract_main
2019-08-20 14:01:07,512 [INFO] time_series: enter extract_main
2019-08-20 14:01:07,513 [INFO] time_series: enter _extract_funding
2019-08-20 14:01:07,513 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,514 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,514 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:07,514 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:07,514 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,515 [INFO] time_series: enter extract_pc
2019-08-20 14:01:07,515 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:07,515 [INFO] time_series: enter extract_special
2019-08-20 14:01:07,515 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,516 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,517 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,517 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,518 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,518 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,519 [INFO] time_series: exit extract_main
2019-08-20 14:01:07,531 [INFO] time_series: enter extract_main
2019-08-20 14:01:07,531 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,532 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,532 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:07,532 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:07,532 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,533 [INFO] time_series: enter extract_pc
2019-08-20 14:01:07,533 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:07,533 [INFO] time_series: enter extract_special
2019-08-20 14:01:07,535 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,537 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,539 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,541 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,541 [INFO] time_series: exit extract_main
2019-08-20 14:01:07,542 [INFO] time_series: enter extract_main
2019-08-20 14:01:07,542 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,542 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,543 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,543 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:07,543 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:07,543 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,543 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,544 [INFO] time_series: processing publication #: 1
2019-08-20 14:01:07,544 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,544 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,544 [INFO] time_series: processing publication #: 2
2019-08-20 14:01:07,544 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,545 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,545 [INFO] time_series: enter extract_pc
2019-08-20 14:01:07,545 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:07,545 [INFO] time_series: enter extract_special
2019-08-20 14:01:07,546 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,547 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,547 [INFO] time_series: exit extract_main
2019-08-20 14:01:07,549 [INFO] time_series: enter extract_main
2019-08-20 14:01:07,550 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,550 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,550 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,550 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:07,551 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:07,551 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,551 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,551 [INFO] time_series: processing publication #: 1
2019-08-20 14:01:07,551 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,551 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,552 [INFO] time_series: enter extract_pc
2019-08-20 14:01:07,552 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:07,552 [INFO] time_series: enter extract_special
2019-08-20 14:01:07,553 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,554 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,554 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,555 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,556 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,556 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,556 [INFO] time_series: exit extract_main
2019-08-20 14:01:07,557 [INFO] time_series: enter extract_main
2019-08-20 14:01:07,558 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,558 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,558 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,558 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:07,559 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:07,559 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,559 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,559 [INFO] time_series: processing publication #: 1
2019-08-20 14:01:07,559 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,560 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,560 [INFO] time_series: enter extract_pc
2019-08-20 14:01:07,560 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:07,560 [INFO] time_series: enter extract_special
2019-08-20 14:01:07,561 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,561 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,561 [INFO] time_series: exit extract_main
2019-08-20 14:01:07,563 [INFO] time_series: enter extract_main
2019-08-20 14:01:07,564 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,564 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,564 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,565 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:07,565 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:07,566 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,566 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,566 [INFO] time_series: processing publication #: 1
2019-08-20 14:01:07,566 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,566 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,567 [INFO] time_series: processing publication #: 2
2019-08-20 14:01:07,567 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,567 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,567 [INFO] time_series: enter extract_pc
2019-08-20 14:01:07,568 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:07,568 [INFO] time_series: enter extract_special
2019-08-20 14:01:07,568 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,569 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,570 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,570 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:07,570 [INFO] time_series: enter extract_special
2019-08-20 14:01:07,571 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,571 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,571 [INFO] time_series: exit extract_main
2019-08-20 14:01:07,574 [INFO] time_series: enter extract_main
2019-08-20 14:01:07,574 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,574 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,575 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,575 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:07,575 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:07,575 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,575 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,575 [INFO] time_series: processing publication #: 1
2019-08-20 14:01:07,576 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,576 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,576 [INFO] time_series: processing publication #: 2
2019-08-20 14:01:07,576 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,576 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,576 [INFO] time_series: enter extract_pc
2019-08-20 14:01:07,577 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:07,577 [INFO] time_series: enter extract_special
2019-08-20 14:01:07,578 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,580 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,580 [INFO] time_series: exit extract_main
2019-08-20 14:01:07,581 [INFO] time_series: enter extract_main
2019-08-20 14:01:07,582 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,582 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,582 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:07,582 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:07,582 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,582 [INFO] time_series: enter extract_pc
2019-08-20 14:01:07,583 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:07,583 [INFO] time_series: enter extract_special
2019-08-20 14:01:07,583 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,583 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,584 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,584 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,584 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,585 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,585 [INFO] time_series: exit extract_main
2019-08-20 14:01:07,587 [INFO] time_series: enter extract_main
2019-08-20 14:01:07,587 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,588 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,588 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:07,588 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:07,588 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,588 [INFO] time_series: enter extract_pc
2019-08-20 14:01:07,588 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:07,589 [INFO] time_series: enter extract_special
2019-08-20 14:01:07,589 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-08-20 14:01:07,589 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,590 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,590 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,591 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,591 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,592 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,592 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,593 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,593 [INFO] time_series: exit extract_main
2019-08-20 14:01:07,593 [INFO] time_series: enter extract_main
2019-08-20 14:01:07,594 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,594 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,594 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:01:07,594 [INFO] time_series: enter _extract_pub
2019-08-20 14:01:07,594 [INFO] time_series: processing publication #: 0
2019-08-20 14:01:07,595 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,595 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,595 [INFO] time_series: processing publication #: 1
2019-08-20 14:01:07,595 [INFO] time_series: enter extract_authors
2019-08-20 14:01:07,595 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:01:07,595 [INFO] time_series: enter extract_pc
2019-08-20 14:01:07,596 [INFO] time_series: enter extract_table_root
2019-08-20 14:01:07,596 [INFO] time_series: enter extract_special
2019-08-20 14:01:07,596 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,597 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,597 [INFO] time_series: enter extract_columns
2019-08-20 14:01:07,597 [INFO] time_series: exit extract_main
2019-08-20 14:01:07,598 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.86 seconds
2019-08-20 14:02:03,874 [DEBUG] shapely.geos: Trying `CDLL(//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib)`
2019-08-20 14:02:03,879 [DEBUG] shapely.geos: Library path: '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib'
2019-08-20 14:02:03,879 [DEBUG] shapely.geos: DLL: <CDLL '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib', handle 7fc6794b39a0 at 0x1a1f079c88>
2019-08-20 14:02:03,880 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-08-20 14:02:03,880 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-08-20 14:02:03,880 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 10b36f050 at 0x106593be0>
2019-08-20 14:02:04,846 [INFO] directory: enter list_files
2019-08-20 14:02:04,847 [INFO] directory: exit list_files
2019-08-20 14:02:04,848 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpgx3ix1xv
2019-08-20 14:02:04,848 [INFO] zips: enter unzip
2019-08-20 14:02:04,853 [INFO] zips: exit unzip
2019-08-20 14:02:04,878 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-08-20 14:02:04,878 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:04,879 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:04,879 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:04,880 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:04,880 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:04,880 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:04,880 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:04,880 [INFO] csvs: enter read_csvs
2019-08-20 14:02:04,881 [INFO] directory: enter list_files
2019-08-20 14:02:04,881 [INFO] directory: exit list_files
2019-08-20 14:02:04,881 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:04,882 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-08-20 14:02:04,883 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:04,883 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:04,883 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:04,885 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:04,886 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:04,886 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:04,886 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:04,887 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 14:02:04,888 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 14:02:04,888 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:04,889 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-08-20 14:02:04,890 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpqiwqnimh
2019-08-20 14:02:04,890 [INFO] zips: enter unzip
2019-08-20 14:02:04,894 [INFO] zips: exit unzip
2019-08-20 14:02:05,323 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-08-20 14:02:05,324 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:05,328 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:05,328 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:05,328 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:05,328 [INFO] jsons: enter import_data: chron
2019-08-20 14:02:05,328 [INFO] jsons: exit import_data: chron
2019-08-20 14:02:05,329 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:05,329 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:05,329 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:05,331 [INFO] csvs: enter read_csvs
2019-08-20 14:02:05,331 [INFO] directory: enter list_files
2019-08-20 14:02:05,331 [INFO] directory: exit list_files
2019-08-20 14:02:05,332 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:05,332 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-08-20 14:02:05,332 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:05,332 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:05,333 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-08-20 14:02:05,333 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:05,334 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:05,334 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-08-20 14:02:05,335 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:05,335 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:05,335 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-08-20 14:02:05,336 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:05,336 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:05,336 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:05,341 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:05,346 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:05,351 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:05,351 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:05,352 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:05,353 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-08-20 14:02:05,355 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:05,355 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:05,356 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:05,356 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:05,365 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 14:02:05,366 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 14:02:05,366 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 14:02:05,366 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 14:02:05,367 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:05,368 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-08-20 14:02:05,369 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmph24tc0za
2019-08-20 14:02:05,369 [INFO] zips: enter unzip
2019-08-20 14:02:05,372 [INFO] zips: exit unzip
2019-08-20 14:02:05,400 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-08-20 14:02:05,400 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:05,400 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:05,401 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:05,401 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:05,401 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:05,401 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:05,402 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:05,402 [INFO] csvs: enter read_csvs
2019-08-20 14:02:05,402 [INFO] directory: enter list_files
2019-08-20 14:02:05,402 [INFO] directory: exit list_files
2019-08-20 14:02:05,403 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:05,403 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-08-20 14:02:05,404 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:05,405 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:05,405 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:05,406 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:05,407 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:05,407 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:05,407 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:05,408 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 14:02:05,409 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 14:02:05,409 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:05,410 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-08-20 14:02:05,411 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpii4n5hmv
2019-08-20 14:02:05,411 [INFO] zips: enter unzip
2019-08-20 14:02:05,461 [INFO] zips: exit unzip
2019-08-20 14:02:05,736 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-08-20 14:02:05,737 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:05,740 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:05,740 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:05,741 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:05,741 [INFO] jsons: enter import_data: chron
2019-08-20 14:02:05,741 [INFO] jsons: enter import_model
2019-08-20 14:02:05,741 [INFO] jsons: exit import_model: chron0model
2019-08-20 14:02:05,741 [INFO] jsons: exit import_data: chron
2019-08-20 14:02:05,742 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:05,742 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:05,742 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:05,743 [INFO] csvs: enter read_csvs
2019-08-20 14:02:05,744 [INFO] directory: enter list_files
2019-08-20 14:02:05,744 [INFO] directory: exit list_files
2019-08-20 14:02:05,744 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:05,744 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-08-20 14:02:06,616 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:06,617 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:06,617 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-08-20 14:02:06,620 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:06,620 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:06,620 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:06,622 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:06,622 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:06,623 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:06,623 [INFO] csvs: enter merge_csv_model
2019-08-20 14:02:07,137 [INFO] csvs: exit merge_csv_model
2019-08-20 14:02:07,137 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:07,138 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:07,138 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:08,170 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 14:02:08,171 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 14:02:08,171 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 14:02:08,172 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-08-20 14:02:08,172 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 14:02:08,172 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:08,174 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-08-20 14:02:08,190 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpp9v_60og
2019-08-20 14:02:08,191 [INFO] zips: enter unzip
2019-08-20 14:02:08,341 [INFO] zips: exit unzip
2019-08-20 14:02:08,540 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-08-20 14:02:08,540 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:08,541 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:08,542 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:08,542 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:08,542 [INFO] jsons: enter import_data: chron
2019-08-20 14:02:08,542 [INFO] jsons: enter import_model
2019-08-20 14:02:08,543 [INFO] jsons: exit import_model: chron0model
2019-08-20 14:02:08,543 [INFO] jsons: exit import_data: chron
2019-08-20 14:02:08,543 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:08,543 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:08,543 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:08,544 [INFO] csvs: enter read_csvs
2019-08-20 14:02:08,544 [INFO] directory: enter list_files
2019-08-20 14:02:08,545 [INFO] directory: exit list_files
2019-08-20 14:02:08,545 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:08,545 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-08-20 14:02:08,546 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:08,547 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:08,547 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-08-20 14:02:08,548 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:08,548 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:08,548 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-08-20 14:02:08,638 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:08,638 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:08,638 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-08-20 14:02:08,729 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:08,730 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:08,730 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-08-20 14:02:08,830 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:08,831 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:08,831 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-08-20 14:02:08,928 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:08,929 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:08,929 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-08-20 14:02:09,020 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:09,021 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:09,021 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-08-20 14:02:09,113 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:09,114 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:09,114 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-08-20 14:02:09,207 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:09,208 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:09,208 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-08-20 14:02:09,301 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:09,301 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:09,301 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-08-20 14:02:09,388 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:09,389 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:09,389 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-08-20 14:02:09,479 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:09,480 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:09,480 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-08-20 14:02:09,623 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:09,624 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:09,624 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-08-20 14:02:09,717 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:09,718 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:09,718 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-08-20 14:02:09,718 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:09,718 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:09,719 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-08-20 14:02:09,808 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:09,809 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:09,809 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:09,813 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:09,813 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:09,814 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-08-20 14:02:09,814 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:09,815 [INFO] csvs: enter merge_csv_model
2019-08-20 14:02:09,816 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:09,930 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:09,964 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:09,999 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:10,033 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:10,066 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:10,099 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:10,133 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:10,168 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:10,202 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:10,236 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:10,270 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:10,304 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:10,305 [INFO] csvs: exit merge_csv_model
2019-08-20 14:02:10,305 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:10,305 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:10,305 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:11,113 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 14:02:11,114 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 14:02:11,114 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 14:02:11,114 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-08-20 14:02:11,114 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 14:02:11,114 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:11,118 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-08-20 14:02:11,125 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpoaowr80b
2019-08-20 14:02:11,125 [INFO] zips: enter unzip
2019-08-20 14:02:11,128 [INFO] zips: exit unzip
2019-08-20 14:02:11,221 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-08-20 14:02:11,222 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:11,224 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:11,225 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:11,225 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:11,225 [INFO] jsons: enter import_data: chron
2019-08-20 14:02:11,226 [INFO] jsons: exit import_data: chron
2019-08-20 14:02:11,226 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:11,226 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:11,227 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:11,227 [INFO] csvs: enter read_csvs
2019-08-20 14:02:11,227 [INFO] directory: enter list_files
2019-08-20 14:02:11,228 [INFO] directory: exit list_files
2019-08-20 14:02:11,228 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,228 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-08-20 14:02:11,229 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,229 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,229 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-08-20 14:02:11,233 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,233 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:11,233 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,239 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,239 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,239 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,241 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-08-20 14:02:11,243 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-08-20 14:02:11,243 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-08-20 14:02:11,244 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,244 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,244 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:11,245 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:11,249 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 14:02:11,249 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 14:02:11,250 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 14:02:11,250 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 14:02:11,250 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:11,252 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-08-20 14:02:11,252 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp28f8v0ju
2019-08-20 14:02:11,253 [INFO] zips: enter unzip
2019-08-20 14:02:11,257 [INFO] zips: exit unzip
2019-08-20 14:02:11,291 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-08-20 14:02:11,291 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:11,292 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:11,292 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:11,293 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:11,293 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:11,293 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:11,293 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:11,294 [INFO] csvs: enter read_csvs
2019-08-20 14:02:11,294 [INFO] directory: enter list_files
2019-08-20 14:02:11,294 [INFO] directory: exit list_files
2019-08-20 14:02:11,294 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,295 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-08-20 14:02:11,296 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,296 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:11,296 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,298 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,298 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,298 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:11,298 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:11,299 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 14:02:11,300 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 14:02:11,300 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:11,301 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-08-20 14:02:11,301 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpzdylm6g6
2019-08-20 14:02:11,301 [INFO] zips: enter unzip
2019-08-20 14:02:11,304 [INFO] zips: exit unzip
2019-08-20 14:02:11,344 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-08-20 14:02:11,344 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:11,345 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:11,345 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:11,345 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:11,346 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:11,346 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:11,346 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:11,346 [INFO] csvs: enter read_csvs
2019-08-20 14:02:11,347 [INFO] directory: enter list_files
2019-08-20 14:02:11,347 [INFO] directory: exit list_files
2019-08-20 14:02:11,347 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,347 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-08-20 14:02:11,349 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,349 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:11,349 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,353 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,353 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,353 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:11,353 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:11,356 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 14:02:11,356 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 14:02:11,356 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:11,357 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-08-20 14:02:11,357 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmplr_aw2dn
2019-08-20 14:02:11,358 [INFO] zips: enter unzip
2019-08-20 14:02:11,360 [INFO] zips: exit unzip
2019-08-20 14:02:11,389 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-08-20 14:02:11,389 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:11,389 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:11,390 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:11,390 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:11,390 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:11,390 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:11,391 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:11,391 [INFO] csvs: enter read_csvs
2019-08-20 14:02:11,391 [INFO] directory: enter list_files
2019-08-20 14:02:11,392 [INFO] directory: exit list_files
2019-08-20 14:02:11,392 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,392 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-08-20 14:02:11,393 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,393 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:11,394 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,395 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,395 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,395 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:11,395 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:11,396 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 14:02:11,397 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 14:02:11,397 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:11,398 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-08-20 14:02:11,398 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpj1uy3y5c
2019-08-20 14:02:11,399 [INFO] zips: enter unzip
2019-08-20 14:02:11,401 [INFO] zips: exit unzip
2019-08-20 14:02:11,502 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-08-20 14:02:11,503 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:11,505 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:11,505 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:11,505 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:11,505 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:11,506 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:11,506 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:11,507 [INFO] csvs: enter read_csvs
2019-08-20 14:02:11,507 [INFO] directory: enter list_files
2019-08-20 14:02:11,507 [INFO] directory: exit list_files
2019-08-20 14:02:11,508 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,508 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-08-20 14:02:11,509 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,510 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,510 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-08-20 14:02:11,512 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,512 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:11,512 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,515 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-08-20 14:02:11,515 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,517 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,517 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,517 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:11,517 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:11,520 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 14:02:11,520 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 14:02:11,520 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:11,521 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-08-20 14:02:11,521 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmptjbpkfrj
2019-08-20 14:02:11,522 [INFO] zips: enter unzip
2019-08-20 14:02:11,524 [INFO] zips: exit unzip
2019-08-20 14:02:11,556 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-08-20 14:02:11,557 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:11,557 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:11,557 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:11,558 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:11,559 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:11,559 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:11,560 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:11,560 [INFO] csvs: enter read_csvs
2019-08-20 14:02:11,561 [INFO] directory: enter list_files
2019-08-20 14:02:11,561 [INFO] directory: exit list_files
2019-08-20 14:02:11,561 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,561 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-08-20 14:02:11,564 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,565 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:11,565 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,567 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,568 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,568 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:11,568 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:11,571 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 14:02:11,571 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 14:02:11,571 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:11,572 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-08-20 14:02:11,573 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp61f8ou45
2019-08-20 14:02:11,573 [INFO] zips: enter unzip
2019-08-20 14:02:11,576 [INFO] zips: exit unzip
2019-08-20 14:02:11,669 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-08-20 14:02:11,669 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:11,671 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:11,671 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:11,671 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:11,672 [INFO] jsons: enter import_data: chron
2019-08-20 14:02:11,672 [INFO] jsons: exit import_data: chron
2019-08-20 14:02:11,672 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:11,672 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:11,673 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:11,673 [INFO] csvs: enter read_csvs
2019-08-20 14:02:11,674 [INFO] directory: enter list_files
2019-08-20 14:02:11,674 [INFO] directory: exit list_files
2019-08-20 14:02:11,674 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,674 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-08-20 14:02:11,675 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,675 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,675 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-08-20 14:02:11,676 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,676 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:11,676 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,678 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,679 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,679 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,680 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-08-20 14:02:11,680 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,681 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,681 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:11,681 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:11,682 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 14:02:11,683 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 14:02:11,683 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 14:02:11,683 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 14:02:11,683 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:11,685 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-08-20 14:02:11,686 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpn1cykjwh
2019-08-20 14:02:11,686 [INFO] zips: enter unzip
2019-08-20 14:02:11,690 [INFO] zips: exit unzip
2019-08-20 14:02:11,815 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-08-20 14:02:11,816 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:11,818 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:11,818 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:11,818 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:11,818 [INFO] jsons: enter import_data: chron
2019-08-20 14:02:11,818 [INFO] jsons: exit import_data: chron
2019-08-20 14:02:11,819 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:11,819 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:11,819 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:11,820 [INFO] csvs: enter read_csvs
2019-08-20 14:02:11,820 [INFO] directory: enter list_files
2019-08-20 14:02:11,820 [INFO] directory: exit list_files
2019-08-20 14:02:11,820 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,821 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-08-20 14:02:11,821 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,821 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,821 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-08-20 14:02:11,823 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,823 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:11,823 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,827 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,827 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,828 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,828 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-08-20 14:02:11,829 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,829 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,830 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:11,830 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:11,833 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 14:02:11,833 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 14:02:11,833 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 14:02:11,833 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 14:02:11,834 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:11,835 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-08-20 14:02:11,835 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmph3hr3azv
2019-08-20 14:02:11,835 [INFO] zips: enter unzip
2019-08-20 14:02:11,838 [INFO] zips: exit unzip
2019-08-20 14:02:11,869 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-08-20 14:02:11,870 [INFO] jsons: exit read_json_from_file
2019-08-20 14:02:11,870 [INFO] jsons: enter idx_num_to_name
2019-08-20 14:02:11,870 [INFO] jsons: enter import_data: paleo
2019-08-20 14:02:11,871 [INFO] jsons: exit import_data: paleo
2019-08-20 14:02:11,871 [INFO] jsons: exit idx_num_to_name
2019-08-20 14:02:11,871 [INFO] misc: enter remove_empty_doi
2019-08-20 14:02:11,871 [INFO] misc: exit remove_empty_doi
2019-08-20 14:02:11,872 [INFO] csvs: enter read_csvs
2019-08-20 14:02:11,872 [INFO] directory: enter list_files
2019-08-20 14:02:11,872 [INFO] directory: exit list_files
2019-08-20 14:02:11,872 [INFO] csvs: enter read_csv_from_file
2019-08-20 14:02:11,873 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-08-20 14:02:11,873 [INFO] csvs: exit read_csv_from_file
2019-08-20 14:02:11,873 [INFO] csvs: enter merge_csv_metadata
2019-08-20 14:02:11,874 [INFO] csvs: enter merge_csv_section
2019-08-20 14:02:11,875 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 14:02:11,875 [INFO] csvs: exit merge_csv_section
2019-08-20 14:02:11,876 [INFO] csvs: exit merge_csv_metadata
2019-08-20 14:02:11,876 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 14:02:11,877 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 14:02:11,877 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 14:02:11,877 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 14:02:11,878 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-08-20 14:02:11,878 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.99 seconds
2019-08-20 14:02:11,880 [INFO] time_series: enter extract_main
2019-08-20 14:02:11,881 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:11,881 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:11,881 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:11,882 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:11,882 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:11,882 [INFO] time_series: enter extract_authors
2019-08-20 14:02:11,882 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:11,882 [INFO] time_series: processing publication #: 1
2019-08-20 14:02:11,883 [INFO] time_series: enter extract_authors
2019-08-20 14:02:11,883 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:11,883 [INFO] time_series: enter extract_pc
2019-08-20 14:02:11,883 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:11,884 [INFO] time_series: enter extract_special
2019-08-20 14:02:11,884 [INFO] time_series: enter extract_columns
2019-08-20 14:02:11,885 [INFO] time_series: enter extract_columns
2019-08-20 14:02:11,885 [INFO] time_series: exit extract_main
2019-08-20 14:02:11,892 [INFO] time_series: enter extract_main
2019-08-20 14:02:11,893 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:11,893 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:11,893 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:11,893 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:11,894 [INFO] time_series: enter extract_authors
2019-08-20 14:02:11,894 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-08-20 14:02:11,894 [INFO] time_series: exit extract_main
2019-08-20 14:02:11,896 [INFO] time_series: enter extract_main
2019-08-20 14:02:11,896 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:11,896 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:11,896 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:11,897 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:11,897 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:11,897 [INFO] time_series: enter extract_authors
2019-08-20 14:02:11,897 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:11,897 [INFO] time_series: processing publication #: 1
2019-08-20 14:02:11,897 [INFO] time_series: enter extract_authors
2019-08-20 14:02:11,898 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:11,898 [INFO] time_series: enter extract_pc
2019-08-20 14:02:11,898 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:11,898 [INFO] time_series: enter extract_special
2019-08-20 14:02:11,899 [INFO] time_series: enter extract_columns
2019-08-20 14:02:11,900 [INFO] time_series: enter extract_columns
2019-08-20 14:02:11,900 [INFO] time_series: exit extract_main
2019-08-20 14:02:12,968 [INFO] time_series: enter extract_main
2019-08-20 14:02:12,969 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:12,969 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:12,970 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:12,970 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:12,970 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:12,970 [INFO] time_series: enter extract_authors
2019-08-20 14:02:12,971 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:12,971 [INFO] time_series: processing publication #: 1
2019-08-20 14:02:12,971 [INFO] time_series: enter extract_authors
2019-08-20 14:02:12,971 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:12,971 [INFO] time_series: enter extract_pc
2019-08-20 14:02:12,972 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:12,972 [INFO] time_series: enter extract_special
2019-08-20 14:02:12,973 [INFO] time_series: enter extract_columns
2019-08-20 14:02:12,975 [INFO] time_series: enter extract_columns
2019-08-20 14:02:12,975 [INFO] time_series: exit extract_main
2019-08-20 14:02:13,833 [INFO] time_series: enter extract_main
2019-08-20 14:02:13,834 [INFO] time_series: enter _extract_funding
2019-08-20 14:02:13,834 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,835 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,835 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:13,835 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:13,836 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,836 [INFO] time_series: enter extract_pc
2019-08-20 14:02:13,836 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:13,836 [INFO] time_series: enter extract_special
2019-08-20 14:02:13,837 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,837 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,838 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,839 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,839 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,840 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,840 [INFO] time_series: exit extract_main
2019-08-20 14:02:13,852 [INFO] time_series: enter extract_main
2019-08-20 14:02:13,853 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,853 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,853 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:13,854 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:13,854 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,854 [INFO] time_series: enter extract_pc
2019-08-20 14:02:13,854 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:13,855 [INFO] time_series: enter extract_special
2019-08-20 14:02:13,856 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,858 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,860 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,862 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,862 [INFO] time_series: exit extract_main
2019-08-20 14:02:13,863 [INFO] time_series: enter extract_main
2019-08-20 14:02:13,864 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,864 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,864 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,865 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:13,865 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:13,865 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,865 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,865 [INFO] time_series: processing publication #: 1
2019-08-20 14:02:13,866 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,866 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,866 [INFO] time_series: processing publication #: 2
2019-08-20 14:02:13,866 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,866 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,867 [INFO] time_series: enter extract_pc
2019-08-20 14:02:13,867 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:13,867 [INFO] time_series: enter extract_special
2019-08-20 14:02:13,868 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,869 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,869 [INFO] time_series: exit extract_main
2019-08-20 14:02:13,872 [INFO] time_series: enter extract_main
2019-08-20 14:02:13,872 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,872 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,873 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,873 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:13,873 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:13,873 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,874 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,874 [INFO] time_series: processing publication #: 1
2019-08-20 14:02:13,874 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,875 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,875 [INFO] time_series: enter extract_pc
2019-08-20 14:02:13,876 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:13,876 [INFO] time_series: enter extract_special
2019-08-20 14:02:13,876 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,877 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,878 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,879 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,880 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,881 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,881 [INFO] time_series: exit extract_main
2019-08-20 14:02:13,882 [INFO] time_series: enter extract_main
2019-08-20 14:02:13,882 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,882 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,883 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,883 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:13,883 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:13,883 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,884 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,884 [INFO] time_series: processing publication #: 1
2019-08-20 14:02:13,884 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,884 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,884 [INFO] time_series: enter extract_pc
2019-08-20 14:02:13,885 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:13,885 [INFO] time_series: enter extract_special
2019-08-20 14:02:13,885 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,886 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,886 [INFO] time_series: exit extract_main
2019-08-20 14:02:13,888 [INFO] time_series: enter extract_main
2019-08-20 14:02:13,889 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,889 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,889 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,889 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:13,889 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:13,890 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,890 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,890 [INFO] time_series: processing publication #: 1
2019-08-20 14:02:13,890 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,890 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,891 [INFO] time_series: processing publication #: 2
2019-08-20 14:02:13,891 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,891 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,891 [INFO] time_series: enter extract_pc
2019-08-20 14:02:13,892 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:13,892 [INFO] time_series: enter extract_special
2019-08-20 14:02:13,893 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,893 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,894 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,894 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:13,894 [INFO] time_series: enter extract_special
2019-08-20 14:02:13,895 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,896 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,896 [INFO] time_series: exit extract_main
2019-08-20 14:02:13,898 [INFO] time_series: enter extract_main
2019-08-20 14:02:13,899 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,899 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,899 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,899 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:13,900 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:13,900 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,900 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,900 [INFO] time_series: processing publication #: 1
2019-08-20 14:02:13,900 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,900 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,901 [INFO] time_series: processing publication #: 2
2019-08-20 14:02:13,901 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,901 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,901 [INFO] time_series: enter extract_pc
2019-08-20 14:02:13,901 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:13,902 [INFO] time_series: enter extract_special
2019-08-20 14:02:13,903 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,904 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,905 [INFO] time_series: exit extract_main
2019-08-20 14:02:13,906 [INFO] time_series: enter extract_main
2019-08-20 14:02:13,906 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,907 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,907 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:13,907 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:13,907 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,907 [INFO] time_series: enter extract_pc
2019-08-20 14:02:13,908 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:13,908 [INFO] time_series: enter extract_special
2019-08-20 14:02:13,908 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,908 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,909 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,909 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,909 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,910 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,910 [INFO] time_series: exit extract_main
2019-08-20 14:02:13,913 [INFO] time_series: enter extract_main
2019-08-20 14:02:13,913 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,913 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,913 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:13,914 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:13,914 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,914 [INFO] time_series: enter extract_pc
2019-08-20 14:02:13,914 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:13,915 [INFO] time_series: enter extract_special
2019-08-20 14:02:13,915 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-08-20 14:02:13,915 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,916 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,916 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,917 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,918 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,918 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,919 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,919 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,919 [INFO] time_series: exit extract_main
2019-08-20 14:02:13,920 [INFO] time_series: enter extract_main
2019-08-20 14:02:13,921 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,921 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,921 [INFO] time_series: enter ts_extract_geo
2019-08-20 14:02:13,921 [INFO] time_series: enter _extract_pub
2019-08-20 14:02:13,921 [INFO] time_series: processing publication #: 0
2019-08-20 14:02:13,922 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,922 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,922 [INFO] time_series: processing publication #: 1
2019-08-20 14:02:13,922 [INFO] time_series: enter extract_authors
2019-08-20 14:02:13,922 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 14:02:13,922 [INFO] time_series: enter extract_pc
2019-08-20 14:02:13,923 [INFO] time_series: enter extract_table_root
2019-08-20 14:02:13,923 [INFO] time_series: enter extract_special
2019-08-20 14:02:13,924 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,924 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,925 [INFO] time_series: enter extract_columns
2019-08-20 14:02:13,925 [INFO] time_series: exit extract_main
2019-08-20 14:02:13,925 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 2.03 seconds
2019-08-20 14:02:19,842 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=bold:stretch=normal:size=10.0.
2019-08-20 14:02:19,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 14:02:19,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2019-08-20 14:02:19,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2019-08-20 14:02:19,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 14:02:19,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.335
2019-08-20 14:02:19,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 14:02:19,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 14:02:19,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.33499999999999996
2019-08-20 14:02:19,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.335
2019-08-20 14:02:19,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
2019-08-20 14:02:19,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 14:02:19,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 14:02:19,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2019-08-20 14:02:19,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 14:02:19,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 14:02:19,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.335
2019-08-20 14:02:19,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.0
2019-08-20 14:02:19,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 14:02:19,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.0
2019-08-20 14:02:19,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.335
2019-08-20 14:02:19,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.335
2019-08-20 14:02:19,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 14:02:19,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.335
2019-08-20 14:02:19,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2019-08-20 14:02:19,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 14:02:19,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
2019-08-20 14:02:19,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 14:02:19,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.335
2019-08-20 14:02:19,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
2019-08-20 14:02:19,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.0
2019-08-20 14:02:19,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.0
2019-08-20 14:02:19,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.0
2019-08-20 14:02:19,849 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=bold:stretch=normal:size=10.0 to DejaVu Sans ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf') with score of 0.000000.
2019-08-20 20:04:27,113 [DEBUG] shapely.geos: Trying `CDLL(//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib)`
2019-08-20 20:04:27,116 [DEBUG] shapely.geos: Library path: '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib'
2019-08-20 20:04:27,117 [DEBUG] shapely.geos: DLL: <CDLL '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib', handle 7fcbd0bcd560 at 0x1a25227cc0>
2019-08-20 20:04:27,117 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-08-20 20:04:27,118 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-08-20 20:04:27,118 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 119558050 at 0x10c8d1be0>
2019-08-20 20:04:27,620 [INFO] directory: enter list_files
2019-08-20 20:04:27,621 [INFO] directory: exit list_files
2019-08-20 20:04:27,623 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpt12t4it6
2019-08-20 20:04:27,623 [INFO] zips: enter unzip
2019-08-20 20:04:27,625 [INFO] zips: exit unzip
2019-08-20 20:04:27,653 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-08-20 20:04:27,653 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:27,654 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:27,654 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:27,654 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:27,654 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:27,654 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:27,655 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:27,655 [INFO] csvs: enter read_csvs
2019-08-20 20:04:27,655 [INFO] directory: enter list_files
2019-08-20 20:04:27,655 [INFO] directory: exit list_files
2019-08-20 20:04:27,656 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:27,656 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-08-20 20:04:27,657 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:27,657 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:27,657 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:27,659 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:27,660 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:27,660 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:27,660 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:27,661 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 20:04:27,662 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-20 20:04:27,662 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:27,663 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-08-20 20:04:27,663 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpb_rt8i_s
2019-08-20 20:04:27,664 [INFO] zips: enter unzip
2019-08-20 20:04:27,667 [INFO] zips: exit unzip
2019-08-20 20:04:28,083 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-08-20 20:04:28,084 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:28,088 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:28,088 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:28,088 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:28,089 [INFO] jsons: enter import_data: chron
2019-08-20 20:04:28,089 [INFO] jsons: exit import_data: chron
2019-08-20 20:04:28,089 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:28,089 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:28,089 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:28,091 [INFO] csvs: enter read_csvs
2019-08-20 20:04:28,091 [INFO] directory: enter list_files
2019-08-20 20:04:28,092 [INFO] directory: exit list_files
2019-08-20 20:04:28,092 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:28,092 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-08-20 20:04:28,093 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:28,093 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:28,093 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-08-20 20:04:28,094 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:28,094 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:28,094 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-08-20 20:04:28,095 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:28,096 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:28,096 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-08-20 20:04:28,097 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:28,097 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:28,097 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:28,102 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:28,108 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:28,113 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:28,113 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:28,114 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:28,114 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-08-20 20:04:28,115 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:28,115 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:28,115 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:28,116 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:28,121 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 20:04:28,122 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-20 20:04:28,122 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 20:04:28,123 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-20 20:04:28,123 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:28,124 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-08-20 20:04:28,125 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpcib_wqkc
2019-08-20 20:04:28,125 [INFO] zips: enter unzip
2019-08-20 20:04:28,127 [INFO] zips: exit unzip
2019-08-20 20:04:28,153 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-08-20 20:04:28,153 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:28,153 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:28,154 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:28,154 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:28,154 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:28,154 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:28,155 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:28,155 [INFO] csvs: enter read_csvs
2019-08-20 20:04:28,155 [INFO] directory: enter list_files
2019-08-20 20:04:28,155 [INFO] directory: exit list_files
2019-08-20 20:04:28,156 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:28,156 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-08-20 20:04:28,157 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:28,157 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:28,158 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:28,159 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:28,159 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:28,159 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:28,160 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:28,161 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 20:04:28,161 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-20 20:04:28,162 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:28,163 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-08-20 20:04:28,163 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpui4iwxui
2019-08-20 20:04:28,163 [INFO] zips: enter unzip
2019-08-20 20:04:28,212 [INFO] zips: exit unzip
2019-08-20 20:04:28,474 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-08-20 20:04:28,474 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:28,478 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:28,478 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:28,478 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:28,478 [INFO] jsons: enter import_data: chron
2019-08-20 20:04:28,479 [INFO] jsons: enter import_model
2019-08-20 20:04:28,479 [INFO] jsons: exit import_model: chron0model
2019-08-20 20:04:28,479 [INFO] jsons: exit import_data: chron
2019-08-20 20:04:28,479 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:28,479 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:28,480 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:28,481 [INFO] csvs: enter read_csvs
2019-08-20 20:04:28,481 [INFO] directory: enter list_files
2019-08-20 20:04:28,481 [INFO] directory: exit list_files
2019-08-20 20:04:28,482 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:28,482 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-08-20 20:04:29,373 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:29,373 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:29,374 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-08-20 20:04:29,376 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:29,376 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:29,376 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:29,378 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:29,379 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:29,379 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:29,379 [INFO] csvs: enter merge_csv_model
2019-08-20 20:04:29,922 [INFO] csvs: exit merge_csv_model
2019-08-20 20:04:29,923 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:29,923 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:29,923 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:30,944 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 20:04:30,945 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-20 20:04:30,946 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 20:04:30,946 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-08-20 20:04:30,946 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-20 20:04:30,946 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:30,949 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-08-20 20:04:30,965 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpy4y0gg43
2019-08-20 20:04:30,965 [INFO] zips: enter unzip
2019-08-20 20:04:31,103 [INFO] zips: exit unzip
2019-08-20 20:04:31,291 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-08-20 20:04:31,292 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:31,292 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:31,293 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:31,293 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:31,293 [INFO] jsons: enter import_data: chron
2019-08-20 20:04:31,293 [INFO] jsons: enter import_model
2019-08-20 20:04:31,294 [INFO] jsons: exit import_model: chron0model
2019-08-20 20:04:31,294 [INFO] jsons: exit import_data: chron
2019-08-20 20:04:31,294 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:31,294 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:31,294 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:31,295 [INFO] csvs: enter read_csvs
2019-08-20 20:04:31,296 [INFO] directory: enter list_files
2019-08-20 20:04:31,296 [INFO] directory: exit list_files
2019-08-20 20:04:31,296 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:31,296 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-08-20 20:04:31,297 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:31,298 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:31,298 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-08-20 20:04:31,299 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:31,299 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:31,299 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-08-20 20:04:31,382 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:31,383 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:31,383 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-08-20 20:04:31,468 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:31,469 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:31,469 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-08-20 20:04:31,558 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:31,558 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:31,559 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-08-20 20:04:31,645 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:31,645 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:31,646 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-08-20 20:04:31,730 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:31,731 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:31,731 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-08-20 20:04:31,816 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:31,817 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:31,818 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-08-20 20:04:31,910 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:31,910 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:31,910 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-08-20 20:04:31,996 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:31,997 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:31,997 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-08-20 20:04:32,079 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:32,079 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:32,079 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-08-20 20:04:32,164 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:32,165 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:32,165 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-08-20 20:04:32,292 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:32,293 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:32,293 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-08-20 20:04:32,377 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:32,378 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:32,379 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-08-20 20:04:32,379 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:32,379 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:32,380 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-08-20 20:04:32,469 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:32,469 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:32,470 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:32,473 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:32,474 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:32,474 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-08-20 20:04:32,475 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,475 [INFO] csvs: enter merge_csv_model
2019-08-20 20:04:32,477 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,583 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,617 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,650 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,682 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,715 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,747 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,778 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,811 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,845 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,877 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,910 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,941 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:32,942 [INFO] csvs: exit merge_csv_model
2019-08-20 20:04:32,942 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:32,942 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:32,942 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:33,708 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 20:04:33,709 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-20 20:04:33,709 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 20:04:33,710 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-08-20 20:04:33,710 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-08-20 20:04:33,710 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:33,715 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-08-20 20:04:33,723 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp7empu_jw
2019-08-20 20:04:33,724 [INFO] zips: enter unzip
2019-08-20 20:04:33,726 [INFO] zips: exit unzip
2019-08-20 20:04:33,811 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-08-20 20:04:33,811 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:33,813 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:33,813 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:33,813 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:33,813 [INFO] jsons: enter import_data: chron
2019-08-20 20:04:33,814 [INFO] jsons: exit import_data: chron
2019-08-20 20:04:33,814 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:33,814 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:33,814 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:33,815 [INFO] csvs: enter read_csvs
2019-08-20 20:04:33,815 [INFO] directory: enter list_files
2019-08-20 20:04:33,816 [INFO] directory: exit list_files
2019-08-20 20:04:33,816 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:33,816 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-08-20 20:04:33,817 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:33,817 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:33,817 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-08-20 20:04:33,822 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:33,822 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:33,822 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:33,828 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:33,828 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:33,828 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:33,830 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-08-20 20:04:33,831 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-08-20 20:04:33,831 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-08-20 20:04:33,831 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:33,832 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:33,832 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:33,832 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:33,837 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 20:04:33,838 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-20 20:04:33,838 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 20:04:33,838 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-20 20:04:33,839 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:33,840 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-08-20 20:04:33,841 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp4rdpvxva
2019-08-20 20:04:33,841 [INFO] zips: enter unzip
2019-08-20 20:04:33,844 [INFO] zips: exit unzip
2019-08-20 20:04:33,877 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-08-20 20:04:33,877 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:33,878 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:33,878 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:33,878 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:33,878 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:33,879 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:33,879 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:33,879 [INFO] csvs: enter read_csvs
2019-08-20 20:04:33,879 [INFO] directory: enter list_files
2019-08-20 20:04:33,880 [INFO] directory: exit list_files
2019-08-20 20:04:33,880 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:33,880 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-08-20 20:04:33,881 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:33,881 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:33,881 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:33,883 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:33,883 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:33,883 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:33,883 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:33,884 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 20:04:33,885 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-20 20:04:33,885 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:33,886 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-08-20 20:04:33,886 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp739ujo8q
2019-08-20 20:04:33,887 [INFO] zips: enter unzip
2019-08-20 20:04:33,889 [INFO] zips: exit unzip
2019-08-20 20:04:33,927 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-08-20 20:04:33,928 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:33,929 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:33,929 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:33,929 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:33,929 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:33,930 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:33,930 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:33,930 [INFO] csvs: enter read_csvs
2019-08-20 20:04:33,931 [INFO] directory: enter list_files
2019-08-20 20:04:33,931 [INFO] directory: exit list_files
2019-08-20 20:04:33,931 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:33,931 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-08-20 20:04:33,933 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:33,934 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:33,934 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:33,937 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:33,937 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:33,938 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:33,938 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:33,940 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 20:04:33,941 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-20 20:04:33,941 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:33,942 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-08-20 20:04:33,943 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp5bdlr7py
2019-08-20 20:04:33,943 [INFO] zips: enter unzip
2019-08-20 20:04:33,945 [INFO] zips: exit unzip
2019-08-20 20:04:33,972 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-08-20 20:04:33,972 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:33,973 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:33,973 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:33,973 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:33,973 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:33,974 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:33,974 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:33,974 [INFO] csvs: enter read_csvs
2019-08-20 20:04:33,974 [INFO] directory: enter list_files
2019-08-20 20:04:33,975 [INFO] directory: exit list_files
2019-08-20 20:04:33,975 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:33,975 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-08-20 20:04:33,976 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:33,976 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:33,977 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:33,978 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:33,978 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:33,979 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:33,979 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:33,980 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 20:04:33,980 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-20 20:04:33,980 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:33,981 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-08-20 20:04:33,982 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmprsqmxzof
2019-08-20 20:04:33,982 [INFO] zips: enter unzip
2019-08-20 20:04:33,984 [INFO] zips: exit unzip
2019-08-20 20:04:34,078 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-08-20 20:04:34,078 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:34,079 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:34,080 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:34,080 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:34,080 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:34,081 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:34,081 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:34,081 [INFO] csvs: enter read_csvs
2019-08-20 20:04:34,081 [INFO] directory: enter list_files
2019-08-20 20:04:34,082 [INFO] directory: exit list_files
2019-08-20 20:04:34,082 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:34,082 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-08-20 20:04:34,083 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:34,083 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:34,083 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-08-20 20:04:34,085 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:34,085 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:34,085 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:34,087 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-08-20 20:04:34,088 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:34,089 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:34,089 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:34,089 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:34,090 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:34,092 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 20:04:34,092 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-20 20:04:34,092 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:34,093 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-08-20 20:04:34,093 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp8nbf6x1f
2019-08-20 20:04:34,094 [INFO] zips: enter unzip
2019-08-20 20:04:34,096 [INFO] zips: exit unzip
2019-08-20 20:04:34,126 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-08-20 20:04:34,126 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:34,126 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:34,127 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:34,127 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:34,127 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:34,128 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:34,128 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:34,129 [INFO] csvs: enter read_csvs
2019-08-20 20:04:34,129 [INFO] directory: enter list_files
2019-08-20 20:04:34,129 [INFO] directory: exit list_files
2019-08-20 20:04:34,129 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:34,130 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-08-20 20:04:34,134 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:34,134 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:34,134 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:34,137 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:34,137 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:34,138 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:34,138 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:34,142 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 20:04:34,142 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-20 20:04:34,142 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:34,143 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-08-20 20:04:34,144 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpvt7mzp3w
2019-08-20 20:04:34,145 [INFO] zips: enter unzip
2019-08-20 20:04:34,147 [INFO] zips: exit unzip
2019-08-20 20:04:34,231 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-08-20 20:04:34,232 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:34,233 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:34,233 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:34,233 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:34,234 [INFO] jsons: enter import_data: chron
2019-08-20 20:04:34,234 [INFO] jsons: exit import_data: chron
2019-08-20 20:04:34,234 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:34,234 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:34,234 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:34,235 [INFO] csvs: enter read_csvs
2019-08-20 20:04:34,235 [INFO] directory: enter list_files
2019-08-20 20:04:34,236 [INFO] directory: exit list_files
2019-08-20 20:04:34,236 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:34,236 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-08-20 20:04:34,236 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:34,237 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:34,237 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-08-20 20:04:34,237 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:34,237 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:34,237 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:34,239 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:34,240 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:34,240 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:34,240 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-08-20 20:04:34,241 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:34,241 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:34,242 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:34,242 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:34,243 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 20:04:34,243 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-20 20:04:34,244 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 20:04:34,244 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-20 20:04:34,244 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:34,245 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-08-20 20:04:34,246 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmplsue9wvn
2019-08-20 20:04:34,246 [INFO] zips: enter unzip
2019-08-20 20:04:34,249 [INFO] zips: exit unzip
2019-08-20 20:04:34,359 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-08-20 20:04:34,360 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:34,361 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:34,362 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:34,362 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:34,362 [INFO] jsons: enter import_data: chron
2019-08-20 20:04:34,362 [INFO] jsons: exit import_data: chron
2019-08-20 20:04:34,363 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:34,363 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:34,363 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:34,364 [INFO] csvs: enter read_csvs
2019-08-20 20:04:34,364 [INFO] directory: enter list_files
2019-08-20 20:04:34,364 [INFO] directory: exit list_files
2019-08-20 20:04:34,364 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:34,365 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-08-20 20:04:34,365 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:34,365 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:34,365 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-08-20 20:04:34,367 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:34,367 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:34,367 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:34,371 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:34,371 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:34,371 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:34,371 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-08-20 20:04:34,373 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:34,373 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:34,373 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:34,373 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:34,375 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 20:04:34,376 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-20 20:04:34,376 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 20:04:34,376 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-20 20:04:34,376 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:34,377 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-08-20 20:04:34,378 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpbeobt6v4
2019-08-20 20:04:34,378 [INFO] zips: enter unzip
2019-08-20 20:04:34,380 [INFO] zips: exit unzip
2019-08-20 20:04:34,411 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-08-20 20:04:34,411 [INFO] jsons: exit read_json_from_file
2019-08-20 20:04:34,412 [INFO] jsons: enter idx_num_to_name
2019-08-20 20:04:34,413 [INFO] jsons: enter import_data: paleo
2019-08-20 20:04:34,413 [INFO] jsons: exit import_data: paleo
2019-08-20 20:04:34,413 [INFO] jsons: exit idx_num_to_name
2019-08-20 20:04:34,413 [INFO] misc: enter remove_empty_doi
2019-08-20 20:04:34,414 [INFO] misc: exit remove_empty_doi
2019-08-20 20:04:34,415 [INFO] csvs: enter read_csvs
2019-08-20 20:04:34,415 [INFO] directory: enter list_files
2019-08-20 20:04:34,415 [INFO] directory: exit list_files
2019-08-20 20:04:34,416 [INFO] csvs: enter read_csv_from_file
2019-08-20 20:04:34,416 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-08-20 20:04:34,417 [INFO] csvs: exit read_csv_from_file
2019-08-20 20:04:34,417 [INFO] csvs: enter merge_csv_metadata
2019-08-20 20:04:34,417 [INFO] csvs: enter merge_csv_section
2019-08-20 20:04:34,419 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-20 20:04:34,420 [INFO] csvs: exit merge_csv_section
2019-08-20 20:04:34,420 [INFO] csvs: exit merge_csv_metadata
2019-08-20 20:04:34,420 [INFO] csvs: enter get_csv_from_metadata
2019-08-20 20:04:34,421 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 20:04:34,421 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-20 20:04:34,422 [INFO] csvs: exit get_csv_from_metadata
2019-08-20 20:04:34,423 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-08-20 20:04:34,423 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.78 seconds
2019-08-20 20:04:34,426 [INFO] time_series: enter extract_main
2019-08-20 20:04:34,426 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:34,427 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:34,427 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:34,427 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:34,427 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:34,428 [INFO] time_series: enter extract_authors
2019-08-20 20:04:34,428 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:34,428 [INFO] time_series: processing publication #: 1
2019-08-20 20:04:34,428 [INFO] time_series: enter extract_authors
2019-08-20 20:04:34,429 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:34,429 [INFO] time_series: enter extract_pc
2019-08-20 20:04:34,429 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:34,429 [INFO] time_series: enter extract_special
2019-08-20 20:04:34,430 [INFO] time_series: enter extract_columns
2019-08-20 20:04:34,431 [INFO] time_series: enter extract_columns
2019-08-20 20:04:34,432 [INFO] time_series: exit extract_main
2019-08-20 20:04:34,438 [INFO] time_series: enter extract_main
2019-08-20 20:04:34,439 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:34,439 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:34,439 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:34,439 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:34,439 [INFO] time_series: enter extract_authors
2019-08-20 20:04:34,440 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-08-20 20:04:34,440 [INFO] time_series: exit extract_main
2019-08-20 20:04:34,442 [INFO] time_series: enter extract_main
2019-08-20 20:04:34,442 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:34,442 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:34,443 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:34,443 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:34,443 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:34,443 [INFO] time_series: enter extract_authors
2019-08-20 20:04:34,443 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:34,443 [INFO] time_series: processing publication #: 1
2019-08-20 20:04:34,444 [INFO] time_series: enter extract_authors
2019-08-20 20:04:34,444 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:34,444 [INFO] time_series: enter extract_pc
2019-08-20 20:04:34,444 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:34,444 [INFO] time_series: enter extract_special
2019-08-20 20:04:34,445 [INFO] time_series: enter extract_columns
2019-08-20 20:04:34,446 [INFO] time_series: enter extract_columns
2019-08-20 20:04:34,446 [INFO] time_series: exit extract_main
2019-08-20 20:04:35,425 [INFO] time_series: enter extract_main
2019-08-20 20:04:35,426 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:35,426 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:35,427 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:35,427 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:35,427 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:35,427 [INFO] time_series: enter extract_authors
2019-08-20 20:04:35,428 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:35,428 [INFO] time_series: processing publication #: 1
2019-08-20 20:04:35,428 [INFO] time_series: enter extract_authors
2019-08-20 20:04:35,428 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:35,428 [INFO] time_series: enter extract_pc
2019-08-20 20:04:35,429 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:35,429 [INFO] time_series: enter extract_special
2019-08-20 20:04:35,430 [INFO] time_series: enter extract_columns
2019-08-20 20:04:35,432 [INFO] time_series: enter extract_columns
2019-08-20 20:04:35,432 [INFO] time_series: exit extract_main
2019-08-20 20:04:36,208 [INFO] time_series: enter extract_main
2019-08-20 20:04:36,209 [INFO] time_series: enter _extract_funding
2019-08-20 20:04:36,209 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,209 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,209 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:36,210 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:36,210 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,210 [INFO] time_series: enter extract_pc
2019-08-20 20:04:36,210 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:36,211 [INFO] time_series: enter extract_special
2019-08-20 20:04:36,211 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,212 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,212 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,213 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,213 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,214 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,215 [INFO] time_series: exit extract_main
2019-08-20 20:04:36,225 [INFO] time_series: enter extract_main
2019-08-20 20:04:36,226 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,226 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,227 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:36,227 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:36,227 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,228 [INFO] time_series: enter extract_pc
2019-08-20 20:04:36,228 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:36,228 [INFO] time_series: enter extract_special
2019-08-20 20:04:36,230 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,231 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,233 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,234 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,235 [INFO] time_series: exit extract_main
2019-08-20 20:04:36,236 [INFO] time_series: enter extract_main
2019-08-20 20:04:36,236 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,236 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,237 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,237 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:36,237 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:36,237 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,237 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,238 [INFO] time_series: processing publication #: 1
2019-08-20 20:04:36,238 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,238 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,238 [INFO] time_series: processing publication #: 2
2019-08-20 20:04:36,239 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,239 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,239 [INFO] time_series: enter extract_pc
2019-08-20 20:04:36,239 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:36,240 [INFO] time_series: enter extract_special
2019-08-20 20:04:36,240 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,241 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,241 [INFO] time_series: exit extract_main
2019-08-20 20:04:36,244 [INFO] time_series: enter extract_main
2019-08-20 20:04:36,245 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,245 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,245 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,245 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:36,245 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:36,246 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,246 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,246 [INFO] time_series: processing publication #: 1
2019-08-20 20:04:36,246 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,247 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,247 [INFO] time_series: enter extract_pc
2019-08-20 20:04:36,247 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:36,248 [INFO] time_series: enter extract_special
2019-08-20 20:04:36,248 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,249 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,249 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,250 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,251 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,251 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,251 [INFO] time_series: exit extract_main
2019-08-20 20:04:36,252 [INFO] time_series: enter extract_main
2019-08-20 20:04:36,253 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,253 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,253 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,253 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:36,254 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:36,254 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,254 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,254 [INFO] time_series: processing publication #: 1
2019-08-20 20:04:36,254 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,255 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,255 [INFO] time_series: enter extract_pc
2019-08-20 20:04:36,255 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:36,255 [INFO] time_series: enter extract_special
2019-08-20 20:04:36,256 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,257 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,257 [INFO] time_series: exit extract_main
2019-08-20 20:04:36,259 [INFO] time_series: enter extract_main
2019-08-20 20:04:36,259 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,259 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,260 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,260 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:36,260 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:36,261 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,261 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,261 [INFO] time_series: processing publication #: 1
2019-08-20 20:04:36,261 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,261 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,262 [INFO] time_series: processing publication #: 2
2019-08-20 20:04:36,262 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,262 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,262 [INFO] time_series: enter extract_pc
2019-08-20 20:04:36,262 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:36,263 [INFO] time_series: enter extract_special
2019-08-20 20:04:36,263 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,264 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,264 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,265 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:36,265 [INFO] time_series: enter extract_special
2019-08-20 20:04:36,265 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,266 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,266 [INFO] time_series: exit extract_main
2019-08-20 20:04:36,269 [INFO] time_series: enter extract_main
2019-08-20 20:04:36,269 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,270 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,270 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,270 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:36,270 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:36,270 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,271 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,271 [INFO] time_series: processing publication #: 1
2019-08-20 20:04:36,271 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,271 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,271 [INFO] time_series: processing publication #: 2
2019-08-20 20:04:36,271 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,272 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,272 [INFO] time_series: enter extract_pc
2019-08-20 20:04:36,272 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:36,272 [INFO] time_series: enter extract_special
2019-08-20 20:04:36,273 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,275 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,275 [INFO] time_series: exit extract_main
2019-08-20 20:04:36,276 [INFO] time_series: enter extract_main
2019-08-20 20:04:36,277 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,277 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,277 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:36,277 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:36,278 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,278 [INFO] time_series: enter extract_pc
2019-08-20 20:04:36,278 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:36,278 [INFO] time_series: enter extract_special
2019-08-20 20:04:36,279 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,279 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,279 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,280 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,280 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,280 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,280 [INFO] time_series: exit extract_main
2019-08-20 20:04:36,283 [INFO] time_series: enter extract_main
2019-08-20 20:04:36,283 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,283 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,283 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:36,284 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:36,284 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,284 [INFO] time_series: enter extract_pc
2019-08-20 20:04:36,284 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:36,284 [INFO] time_series: enter extract_special
2019-08-20 20:04:36,285 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-08-20 20:04:36,285 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,285 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,286 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,286 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,287 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,287 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,288 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,288 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,289 [INFO] time_series: exit extract_main
2019-08-20 20:04:36,289 [INFO] time_series: enter extract_main
2019-08-20 20:04:36,290 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,290 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,290 [INFO] time_series: enter ts_extract_geo
2019-08-20 20:04:36,290 [INFO] time_series: enter _extract_pub
2019-08-20 20:04:36,290 [INFO] time_series: processing publication #: 0
2019-08-20 20:04:36,291 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,291 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,291 [INFO] time_series: processing publication #: 1
2019-08-20 20:04:36,291 [INFO] time_series: enter extract_authors
2019-08-20 20:04:36,291 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-20 20:04:36,292 [INFO] time_series: enter extract_pc
2019-08-20 20:04:36,292 [INFO] time_series: enter extract_table_root
2019-08-20 20:04:36,292 [INFO] time_series: enter extract_special
2019-08-20 20:04:36,293 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,293 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,293 [INFO] time_series: enter extract_columns
2019-08-20 20:04:36,293 [INFO] time_series: exit extract_main
2019-08-20 20:04:36,294 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.86 seconds
2019-08-20 20:04:40,164 [DEBUG] matplotlib.colorbar: locator: <matplotlib.ticker.FixedLocator object at 0x1c2e7706d8>
2019-08-20 20:04:40,165 [DEBUG] matplotlib.colorbar: Using fixed locator on colorbar
2019-08-20 20:04:40,172 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2019-08-20 20:04:40,336 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2019-08-20 20:04:40,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:40,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2019-08-20 20:04:40,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2019-08-20 20:04:40,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 3.335
2019-08-20 20:04:40,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:40,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 2.335
2019-08-20 20:04:40,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:40,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:40,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:40,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:40,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:40,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:40,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:40,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:40,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:40,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:40,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:40,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 1.05
2019-08-20 20:04:40,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:40,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:40,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 1.335
2019-08-20 20:04:40,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:40,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:40,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:40,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:40,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:40,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:40,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:40,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:40,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:40,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:40,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:40,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:40,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:40,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,411 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to Arial ('/Library/Fonts/Arial.ttf') with score of 0.050000.
2019-08-20 20:04:40,421 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:40,421 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:40,425 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:40,426 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:40,428 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:40,429 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:40,475 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:40,475 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:40,477 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:40,477 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:40,478 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:40,479 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:40,488 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=22.0.
2019-08-20 20:04:40,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:40,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2019-08-20 20:04:40,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2019-08-20 20:04:40,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 3.335
2019-08-20 20:04:40,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:40,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 2.335
2019-08-20 20:04:40,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:40,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:40,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:40,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:40,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:40,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:40,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:40,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:40,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:40,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:40,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:40,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 1.05
2019-08-20 20:04:40,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:40,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:40,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 1.335
2019-08-20 20:04:40,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:40,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:40,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:40,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:40,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:40,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:40,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:40,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:40,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:40,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:40,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:40,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:40,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:40,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,558 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=22.0 to Arial ('/Library/Fonts/Arial.ttf') with score of 0.050000.
2019-08-20 20:04:40,569 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:40,569 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:40,573 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:40,573 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:40,574 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:40,574 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:40,607 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:40,607 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:40,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 0.05
2019-08-20 20:04:40,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:40,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 1.335
2019-08-20 20:04:40,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 1.05
2019-08-20 20:04:40,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:40,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:40,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:40,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:40,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:40,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 0.05
2019-08-20 20:04:40,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 1.335
2019-08-20 20:04:40,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 1.05
2019-08-20 20:04:40,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:40,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:40,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:40,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:40,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:40,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:40,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:40,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:40,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:40,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:40,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:40,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:40,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:40,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:40,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:40,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:40,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:40,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:40,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:40,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:40,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:40,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:40,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,674 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to STIXGeneral ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf') with score of 0.050000.
2019-08-20 20:04:40,675 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:40,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-08-20 20:04:40,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 1.05
2019-08-20 20:04:40,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-08-20 20:04:40,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 0.05
2019-08-20 20:04:40,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 1.335
2019-08-20 20:04:40,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-08-20 20:04:40,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-08-20 20:04:40,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 11.629999999999999
2019-08-20 20:04:40,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 11.535
2019-08-20 20:04:40,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 11.525
2019-08-20 20:04:40,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:40,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:40,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 10.24
2019-08-20 20:04:40,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 11.629999999999999
2019-08-20 20:04:40,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 10.535
2019-08-20 20:04:40,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 11.145
2019-08-20 20:04:40,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 11.335
2019-08-20 20:04:40,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:40,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 11.145
2019-08-20 20:04:40,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 11.25
2019-08-20 20:04:40,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:40,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 11.44
2019-08-20 20:04:40,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:40,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 1.05
2019-08-20 20:04:40,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:40,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:40,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 11.25
2019-08-20 20:04:40,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:40,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 0.05
2019-08-20 20:04:40,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 11.335
2019-08-20 20:04:40,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:40,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:40,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 10.145
2019-08-20 20:04:40,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 11.335
2019-08-20 20:04:40,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 11.05
2019-08-20 20:04:40,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 10.145
2019-08-20 20:04:40,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 11.24
2019-08-20 20:04:40,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:40,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 11.344999999999999
2019-08-20 20:04:40,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 10.24
2019-08-20 20:04:40,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 10.43
2019-08-20 20:04:40,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:40,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:40,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:40,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:40,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:40,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 10.145
2019-08-20 20:04:40,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:40,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 11.525
2019-08-20 20:04:40,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 11.25
2019-08-20 20:04:40,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 10.335
2019-08-20 20:04:40,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:40,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 11.24
2019-08-20 20:04:40,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 11.44
2019-08-20 20:04:40,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 11.44
2019-08-20 20:04:40,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 10.25
2019-08-20 20:04:40,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:40,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:40,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 11.525
2019-08-20 20:04:40,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:40,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:40,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 10.525
2019-08-20 20:04:40,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 11.725
2019-08-20 20:04:40,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 11.25
2019-08-20 20:04:40,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:40,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 11.525
2019-08-20 20:04:40,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 11.344999999999999
2019-08-20 20:04:40,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 11.535
2019-08-20 20:04:40,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 10.43
2019-08-20 20:04:40,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 10.24
2019-08-20 20:04:40,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 10.145
2019-08-20 20:04:40,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 11.145
2019-08-20 20:04:40,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 11.44
2019-08-20 20:04:40,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:40,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 11.525
2019-08-20 20:04:40,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 11.145
2019-08-20 20:04:40,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:40,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 11.24
2019-08-20 20:04:40,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 1.335
2019-08-20 20:04:40,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 11.145
2019-08-20 20:04:40,756 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 11.25
2019-08-20 20:04:40,756 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,756 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 11.525
2019-08-20 20:04:40,756 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,756 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,757 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,757 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 10.24
2019-08-20 20:04:40,757 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,757 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=24.0 to STIXGeneral ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf') with score of 0.050000.
2019-08-20 20:04:40,758 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=24.0.
2019-08-20 20:04:40,759 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:40,759 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,759 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2019-08-20 20:04:40,759 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:40,759 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.335
2019-08-20 20:04:40,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:40,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 0.33499999999999996
2019-08-20 20:04:40,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
2019-08-20 20:04:40,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:40,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.335
2019-08-20 20:04:40,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.0
2019-08-20 20:04:40,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 1.0
2019-08-20 20:04:40,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.335
2019-08-20 20:04:40,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.335
2019-08-20 20:04:40,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:40,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.335
2019-08-20 20:04:40,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 1.335
2019-08-20 20:04:40,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 0.0
2019-08-20 20:04:40,764 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=24.0 to STIXGeneral ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf') with score of 0.000000.
2019-08-20 20:04:40,764 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:40,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:40,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 0.05
2019-08-20 20:04:40,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 1.05
2019-08-20 20:04:40,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:40,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 1.335
2019-08-20 20:04:40,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:40,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:40,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:40,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 1.335
2019-08-20 20:04:40,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:40,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:40,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:40,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:40,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:40,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:40,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 0.05
2019-08-20 20:04:40,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:40,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:40,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:40,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:40,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:40,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:40,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:40,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:40,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:40,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:40,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,821 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,821 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,821 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,821 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:40,821 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:40,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:40,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:40,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:40,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:40,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:40,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 1.05
2019-08-20 20:04:40,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:40,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,829 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to STIXNonUnicode ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf') with score of 0.050000.
2019-08-20 20:04:40,830 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:40,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-08-20 20:04:40,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 1.05
2019-08-20 20:04:40,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 0.05
2019-08-20 20:04:40,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 1.335
2019-08-20 20:04:40,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-08-20 20:04:40,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-08-20 20:04:40,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-08-20 20:04:40,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 11.629999999999999
2019-08-20 20:04:40,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 11.535
2019-08-20 20:04:40,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 11.525
2019-08-20 20:04:40,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:40,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:40,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 10.24
2019-08-20 20:04:40,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 11.629999999999999
2019-08-20 20:04:40,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 10.535
2019-08-20 20:04:40,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 1.335
2019-08-20 20:04:40,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 11.145
2019-08-20 20:04:40,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 11.335
2019-08-20 20:04:40,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:40,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 11.145
2019-08-20 20:04:40,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 11.25
2019-08-20 20:04:40,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:40,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 11.44
2019-08-20 20:04:40,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:40,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:40,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:40,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 11.25
2019-08-20 20:04:40,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:40,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 11.335
2019-08-20 20:04:40,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:40,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:40,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 10.145
2019-08-20 20:04:40,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 11.335
2019-08-20 20:04:40,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 11.05
2019-08-20 20:04:40,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 10.145
2019-08-20 20:04:40,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 11.24
2019-08-20 20:04:40,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:40,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 11.344999999999999
2019-08-20 20:04:40,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 1.05
2019-08-20 20:04:40,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 10.24
2019-08-20 20:04:40,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 10.43
2019-08-20 20:04:40,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:40,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:40,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:40,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:40,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:40,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 10.145
2019-08-20 20:04:40,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:40,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 11.525
2019-08-20 20:04:40,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 11.25
2019-08-20 20:04:40,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 10.335
2019-08-20 20:04:40,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:40,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 11.24
2019-08-20 20:04:40,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 11.44
2019-08-20 20:04:40,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 11.44
2019-08-20 20:04:40,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 10.25
2019-08-20 20:04:40,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:40,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:40,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 11.525
2019-08-20 20:04:40,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:40,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:40,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 10.525
2019-08-20 20:04:40,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 11.725
2019-08-20 20:04:40,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 11.25
2019-08-20 20:04:40,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:40,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 11.525
2019-08-20 20:04:40,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 11.344999999999999
2019-08-20 20:04:40,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 11.535
2019-08-20 20:04:40,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 10.43
2019-08-20 20:04:40,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 10.24
2019-08-20 20:04:40,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 10.145
2019-08-20 20:04:40,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 11.145
2019-08-20 20:04:40,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 11.44
2019-08-20 20:04:40,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:40,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 11.525
2019-08-20 20:04:40,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 11.145
2019-08-20 20:04:40,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 0.05
2019-08-20 20:04:40,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:40,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:40,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:40,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 11.24
2019-08-20 20:04:40,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:40,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 11.145
2019-08-20 20:04:40,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 11.25
2019-08-20 20:04:40,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 11.145
2019-08-20 20:04:40,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 11.525
2019-08-20 20:04:40,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:40,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 10.24
2019-08-20 20:04:40,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:40,896 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=24.0 to STIXNonUnicode ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf') with score of 0.050000.
2019-08-20 20:04:40,896 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=24.0.
2019-08-20 20:04:40,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:40,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2019-08-20 20:04:40,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:40,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 0.33499999999999996
2019-08-20 20:04:40,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:40,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:40,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.335
2019-08-20 20:04:40,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 1.335
2019-08-20 20:04:40,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 0.0
2019-08-20 20:04:40,899 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=24.0 to STIXNonUnicode ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf') with score of 0.000000.
2019-08-20 20:04:40,899 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:40,899 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,899 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:40,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:40,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 0.05
2019-08-20 20:04:40,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:40,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:40,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:40,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:40,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:40,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:40,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:40,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:40,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:40,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:40,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:40,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:40,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 0.05
2019-08-20 20:04:40,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:40,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:40,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:40,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,950 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,950 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:40,950 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:40,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:40,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,958 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,958 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:40,958 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,958 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,958 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,960 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,960 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:40,960 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:40,960 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,960 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,961 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:40,961 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,961 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,961 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:40,961 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,962 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,962 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:40,962 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,962 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,962 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,962 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:40,963 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,963 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:40,963 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,963 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,963 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,964 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,964 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,964 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,964 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:40,964 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,965 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,965 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,965 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,965 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:40,965 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,966 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,966 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,966 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,966 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,966 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:40,967 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,967 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,967 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,967 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,967 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,967 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:40,968 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,968 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to STIXSizeOneSym ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf') with score of 0.050000.
2019-08-20 20:04:40,968 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:40,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:40,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:40,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:40,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 0.05
2019-08-20 20:04:40,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:40,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:40,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:40,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:40,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:40,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:40,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:40,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,983 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,983 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,983 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,983 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,983 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,983 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,984 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,984 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,984 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,984 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,986 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,986 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,986 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,986 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,987 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,987 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,987 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:40,987 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,987 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,988 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,988 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,988 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,988 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,989 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,989 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,989 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,989 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,989 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:40,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:40,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:40,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:40,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,992 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,992 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,992 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,992 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,992 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,993 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,993 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,993 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,993 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,993 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:40,994 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,994 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,994 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,994 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:40,994 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:40,995 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,995 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,995 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,995 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,995 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,996 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,996 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,996 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:40,996 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,996 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,996 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:40,997 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,997 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,997 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,997 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,997 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:40,998 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,998 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,998 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,998 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,998 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,999 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:40,999 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,999 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,999 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:40,999 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:40,999 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,000 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,000 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,000 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,000 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,000 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,001 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,001 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,001 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,001 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,001 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,003 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,003 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,003 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,003 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,003 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,004 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 0.05
2019-08-20 20:04:41,004 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,004 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,004 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,004 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,006 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,006 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,006 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,006 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,007 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,007 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,007 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,007 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,007 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,008 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,008 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,008 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,008 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,008 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,009 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,009 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,009 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,009 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,010 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,010 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,010 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,010 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,010 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,011 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,011 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,011 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,011 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,011 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,012 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,012 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,012 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,012 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,012 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,013 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,013 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,013 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,013 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,013 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,013 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,014 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,014 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,014 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,014 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,014 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,015 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,015 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,015 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,015 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,015 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,015 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,016 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,016 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,016 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,016 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,021 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,021 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,021 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,027 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,027 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,027 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,027 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,027 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,028 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,028 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:41,028 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,028 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,028 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,029 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,029 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,029 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,029 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,029 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,030 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,030 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,030 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,030 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,030 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,030 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,031 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,031 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,031 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,031 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,031 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,032 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,032 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,032 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,032 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,032 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,033 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,033 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,033 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,033 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,033 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,034 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,034 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,034 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,034 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,034 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,035 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,035 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,035 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to STIXSizeTwoSym ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf') with score of 0.050000.
2019-08-20 20:04:41,035 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,036 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,036 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,036 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,036 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,036 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,037 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,037 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,037 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,037 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,040 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,040 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,040 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:41,040 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 0.05
2019-08-20 20:04:41,040 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,044 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,044 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,044 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,044 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,044 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,045 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,045 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,045 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,045 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,045 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,045 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,046 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,046 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,046 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,046 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,046 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,047 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,047 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,047 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,047 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,047 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,048 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,048 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,048 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,048 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,048 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,049 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,049 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,049 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,049 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,049 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,051 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,051 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,051 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,051 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,051 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,054 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,054 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,054 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,054 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,054 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,054 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 0.05
2019-08-20 20:04:41,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:41,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,094 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,094 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,094 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,094 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,094 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,095 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,095 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,095 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,095 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,095 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,095 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,097 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,097 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,097 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,097 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,100 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,100 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to STIXSizeThreeSym ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf') with score of 0.050000.
2019-08-20 20:04:41,100 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:41,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,102 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,102 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,102 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,102 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,104 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,104 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,104 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,104 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,105 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,105 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,105 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,105 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,106 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,106 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,106 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,106 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,106 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,108 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,108 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 0.05
2019-08-20 20:04:41,108 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,108 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,108 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,109 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,109 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,109 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,109 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,109 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,110 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,110 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,110 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,110 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,110 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,112 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,112 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,112 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,112 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,113 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,113 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,113 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,113 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,113 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,116 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,116 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,116 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,116 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,116 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,117 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,117 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,117 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,117 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,117 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,119 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,119 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,119 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,119 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,119 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:41,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,122 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,122 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,122 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,122 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,122 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,123 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,123 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,123 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,123 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,123 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,127 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,127 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,127 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,127 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,127 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,128 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,128 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,128 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,128 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,128 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,128 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,129 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,129 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,129 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,129 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,129 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,130 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,130 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,130 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,130 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,130 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,130 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,131 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,131 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,131 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,131 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,131 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,132 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,132 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,132 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,132 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,132 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,133 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,133 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,133 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,133 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,133 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,134 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,134 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,134 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,134 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,134 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,135 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,135 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,135 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,135 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,135 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,136 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,136 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,136 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,136 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,136 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,137 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,137 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,137 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,137 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,137 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,137 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,138 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,138 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,138 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,138 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,138 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,139 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,139 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,139 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,139 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,139 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,139 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,140 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,140 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,140 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,140 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,141 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,141 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,141 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,141 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 0.05
2019-08-20 20:04:41,141 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,141 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,142 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,142 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,142 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,142 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,142 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,142 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,143 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,143 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,143 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,143 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,143 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,144 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,144 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,144 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,144 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,145 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,145 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,145 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,145 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,145 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,145 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,146 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,146 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,146 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,146 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,146 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,147 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,147 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,147 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,147 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,147 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,147 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,148 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,148 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,148 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,148 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,148 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,149 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,149 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,149 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,149 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,149 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,150 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,150 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,150 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,150 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,150 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,151 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,151 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,151 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,151 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,151 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,151 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,152 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,152 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,152 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,152 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,152 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,153 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,153 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,153 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,153 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,153 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,153 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,154 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,154 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,154 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,154 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,155 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,155 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,155 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,155 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,155 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,155 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,156 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,156 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,156 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,156 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,156 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,157 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,157 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,157 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,157 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,157 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,158 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,158 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,158 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,158 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,158 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,159 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,159 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,159 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,159 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,159 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,159 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,160 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,160 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,160 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,160 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,160 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,161 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,161 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,161 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,161 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,161 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,161 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,162 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,162 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,162 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,162 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,162 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,163 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,163 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,163 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,163 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,163 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,164 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,164 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,164 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,164 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,164 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,164 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,165 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,165 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,165 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,165 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,165 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to STIXSizeFourSym ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf') with score of 0.050000.
2019-08-20 20:04:41,166 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,166 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,166 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,167 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,167 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,167 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,167 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,167 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,168 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,168 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,168 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,168 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,168 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,169 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,169 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,169 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,169 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,169 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,169 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,170 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,170 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,170 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,170 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,170 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,171 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,171 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,171 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,171 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,171 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 0.05
2019-08-20 20:04:41,171 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,172 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,172 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,172 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,172 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,172 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,173 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,173 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,173 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,173 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,173 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,174 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,174 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,174 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,174 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,174 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,174 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,175 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,175 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,175 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,175 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,175 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,176 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,176 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,176 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,176 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,176 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,177 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,177 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,177 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,177 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,177 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,178 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,178 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,178 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,178 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,178 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,178 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,179 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,179 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,179 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,179 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,179 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,180 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,180 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,180 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,180 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,180 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,181 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,181 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,181 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,181 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,181 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 0.05
2019-08-20 20:04:41,181 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,182 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,182 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,182 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,182 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,182 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,183 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,183 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,183 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,183 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,183 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,183 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,184 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,184 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,184 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,184 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,185 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,185 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,185 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,186 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,186 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,186 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,186 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,186 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,187 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,187 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,187 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,187 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,188 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,188 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,188 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,188 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,188 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,189 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,189 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,189 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,189 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,190 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,190 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,190 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,190 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,190 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,190 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,191 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,191 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,191 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,191 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,192 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,192 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,192 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,192 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,193 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,193 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,193 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,193 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,194 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,194 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,194 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,194 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,194 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,195 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,195 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,195 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,195 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,195 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,195 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,196 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,196 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,196 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,196 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,196 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,197 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,197 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,197 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,197 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,197 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,198 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,198 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,198 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,198 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,198 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,199 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,199 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,199 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,199 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,199 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,199 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,200 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,200 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,200 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,200 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,200 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,201 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,201 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,201 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,201 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,201 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,201 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,202 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,202 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,202 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,202 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,202 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,203 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,203 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,203 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,203 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,203 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,203 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,204 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,204 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,204 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,204 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,204 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,205 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,205 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,205 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,205 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,205 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,205 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,206 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,206 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,206 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,206 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,206 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,207 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,207 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,207 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,207 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,207 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,208 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,208 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,208 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,208 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,208 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,209 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,209 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,209 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,209 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,209 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,210 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,210 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,210 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,210 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,210 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,211 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,211 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,211 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,211 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,211 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,211 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,212 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,212 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,212 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,212 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,212 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,213 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,213 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,213 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,213 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,213 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,214 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,214 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,214 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,214 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,214 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,214 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,215 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,215 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,215 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,215 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,215 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,216 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,216 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,216 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,216 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,216 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,216 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,217 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,217 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,217 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,217 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,217 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,217 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,218 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,218 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,218 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,218 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,218 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,219 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,219 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,219 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,219 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,220 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,220 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,220 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,220 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,220 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,221 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,221 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,221 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,221 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,221 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,222 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,222 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,222 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,222 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,222 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,222 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,223 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,223 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,223 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,223 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,223 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,224 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,224 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,224 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,224 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,224 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,225 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,225 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,225 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,225 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,225 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,225 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,226 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,226 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,226 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,226 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,226 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,227 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,227 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,227 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,227 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,227 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,227 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,228 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,228 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,228 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,228 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,228 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,229 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,229 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,229 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,229 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,229 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,230 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,230 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,230 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,230 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,230 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,231 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,231 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,231 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,231 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,231 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,231 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,232 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to STIXSizeFiveSym ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf') with score of 0.050000.
2019-08-20 20:04:41,232 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,232 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,233 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,233 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,233 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,233 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,233 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:41,234 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,234 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,234 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,234 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,235 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,235 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,235 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,235 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,235 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,236 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,236 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,236 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,236 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,236 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,237 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,237 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,237 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,237 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,237 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,238 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,238 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,238 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,238 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,238 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,238 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,239 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,239 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,239 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,239 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,239 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,240 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,240 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,240 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,240 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,240 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,241 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,241 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,241 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,241 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,242 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,242 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,242 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,242 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,242 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,243 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,243 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,243 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,243 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,243 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,248 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,248 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,248 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,248 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,248 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,257 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,257 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,257 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,257 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,257 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,258 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,258 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,258 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,258 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,258 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,258 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,259 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,259 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,259 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,259 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,259 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,260 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,260 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,260 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,260 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,260 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,261 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,261 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,261 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,261 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,261 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,261 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,262 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,262 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,262 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,262 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,262 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,263 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,263 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,263 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,263 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,263 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,264 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,264 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,264 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,264 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,264 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,264 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,265 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,265 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,265 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,265 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,265 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,266 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,266 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,266 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,266 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,266 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,267 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,267 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,267 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,267 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,267 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,267 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,268 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,268 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,268 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,268 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,268 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,269 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,269 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,269 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,269 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,269 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,269 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,270 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,270 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,270 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,270 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,270 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,271 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,271 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,271 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,271 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,271 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,272 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,272 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,272 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,272 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,272 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,273 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,273 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,273 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,273 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,273 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,274 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,274 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,274 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,274 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,274 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,274 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,275 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,275 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,275 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,275 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,276 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,276 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,276 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,276 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,276 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,276 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,277 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,277 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,277 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,277 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,277 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,278 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,278 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,278 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,278 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,278 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,279 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,279 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,279 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,279 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,279 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,279 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,280 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,280 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,280 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,280 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,280 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,281 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,281 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,281 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,281 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,281 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,281 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,282 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,282 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,282 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,282 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,283 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,283 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,283 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,283 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,283 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,283 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,284 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,284 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,284 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,284 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,284 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,285 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,285 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,285 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,285 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,285 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,285 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,286 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,286 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,286 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,286 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,286 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,287 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,287 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,287 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,287 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,287 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,287 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,288 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,288 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,288 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,288 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,288 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,289 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,289 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,289 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,289 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,289 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,290 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,290 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,290 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,290 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,290 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,290 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,291 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,291 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,291 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,291 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,291 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,292 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,292 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,292 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,292 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,292 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,292 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,293 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,293 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,293 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,293 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,293 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,294 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,294 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,294 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,294 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,295 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,295 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,295 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,295 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,295 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,296 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,296 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,296 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,296 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,296 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,296 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,297 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,297 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,297 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,297 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,297 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,297 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to cmsy10 ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf') with score of 0.050000.
2019-08-20 20:04:41,298 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,298 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,298 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,299 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,299 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,299 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,299 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,299 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,299 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,300 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,300 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,300 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,300 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,300 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,301 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,301 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,301 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,301 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,301 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,302 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,302 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,302 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,302 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,302 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,302 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,303 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:41,303 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,303 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,303 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,303 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,304 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,304 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,304 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,304 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,304 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,305 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,305 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,305 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,305 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,305 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,305 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,306 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,306 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,306 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,306 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,306 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,307 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,307 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,307 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,307 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,307 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,307 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,308 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,308 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,308 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,308 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,308 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,309 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,309 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,309 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,309 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,309 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,309 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,310 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,310 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,310 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,310 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,310 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,311 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,311 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,311 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,311 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,311 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,311 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,312 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,312 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,312 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,312 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,312 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,313 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,313 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,313 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,313 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,313 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,314 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,314 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,314 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,314 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,314 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,314 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,315 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,315 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,315 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,315 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,315 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,316 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,316 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,316 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,316 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,316 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,316 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,317 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,317 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,317 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,317 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,317 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,318 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,318 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,318 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,318 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,318 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,318 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,319 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,319 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,319 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,319 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,319 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,320 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,320 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,320 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,320 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,320 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,320 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,321 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,321 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,321 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,321 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,321 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,322 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,322 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,322 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,322 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,322 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,323 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,323 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,323 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,323 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,323 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,323 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,324 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,324 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,324 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,324 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,324 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,325 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,325 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,325 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,325 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,326 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,326 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,326 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,326 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,326 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,327 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,327 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,327 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,327 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,327 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,328 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,328 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,328 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,328 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,328 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,329 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,329 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,329 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,329 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,329 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,329 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,330 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,330 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,330 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,330 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,330 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,331 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,331 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,331 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,331 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,331 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,332 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,332 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,332 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,332 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,332 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,333 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,333 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,333 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,333 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,333 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,336 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,336 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,336 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,336 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,362 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to cmr10 ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf') with score of 0.050000.
2019-08-20 20:04:41,362 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:41,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,427 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to cmtt10 ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf') with score of 0.050000.
2019-08-20 20:04:41,427 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:41,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,491 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to cmmi10 ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf') with score of 0.050000.
2019-08-20 20:04:41,492 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:41,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,557 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to cmb10 ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf') with score of 0.050000.
2019-08-20 20:04:41,557 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:41,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,561 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,561 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,561 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,561 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,561 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,562 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,562 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,562 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,562 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,568 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,568 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,568 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,568 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,568 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,574 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,574 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,574 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,574 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,574 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,575 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,575 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,575 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,575 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,575 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,576 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,576 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,576 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,576 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,576 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,607 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,607 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,607 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,607 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,607 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,607 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,623 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to cmss10 ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf') with score of 0.050000.
2019-08-20 20:04:41,623 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:41,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,688 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to cmex10 ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf') with score of 0.050000.
2019-08-20 20:04:41,689 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:41,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2019-08-20 20:04:41,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2019-08-20 20:04:41,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:41,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,756 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,756 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to DejaVu Sans ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2019-08-20 20:04:41,757 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,757 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,757 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,757 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-08-20 20:04:41,757 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,758 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,758 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,758 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,758 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 1.05
2019-08-20 20:04:41,758 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,759 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,759 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,759 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,759 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 0.15000000000000002
2019-08-20 20:04:41,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 0.43499999999999994
2019-08-20 20:04:41,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-08-20 20:04:41,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 1.335
2019-08-20 20:04:41,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 11.629999999999999
2019-08-20 20:04:41,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 11.535
2019-08-20 20:04:41,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 11.525
2019-08-20 20:04:41,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:41,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:41,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 11.145
2019-08-20 20:04:41,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 10.24
2019-08-20 20:04:41,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 11.629999999999999
2019-08-20 20:04:41,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 10.535
2019-08-20 20:04:41,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 11.145
2019-08-20 20:04:41,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 11.335
2019-08-20 20:04:41,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:41,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:41,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 11.145
2019-08-20 20:04:41,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 11.25
2019-08-20 20:04:41,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:41,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:41,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 11.44
2019-08-20 20:04:41,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:41,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:41,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:41,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 11.25
2019-08-20 20:04:41,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:41,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 11.145
2019-08-20 20:04:41,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 11.335
2019-08-20 20:04:41,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:41,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:41,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 10.145
2019-08-20 20:04:41,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 11.335
2019-08-20 20:04:41,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 11.05
2019-08-20 20:04:41,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 10.145
2019-08-20 20:04:41,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 11.24
2019-08-20 20:04:41,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 11.43
2019-08-20 20:04:41,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 11.344999999999999
2019-08-20 20:04:41,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 10.24
2019-08-20 20:04:41,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 10.43
2019-08-20 20:04:41,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:41,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:41,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:41,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:41,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:41,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:41,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 10.145
2019-08-20 20:04:41,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:41,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 11.145
2019-08-20 20:04:41,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 11.525
2019-08-20 20:04:41,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 11.25
2019-08-20 20:04:41,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 10.335
2019-08-20 20:04:41,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 11.05
2019-08-20 20:04:41,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 11.24
2019-08-20 20:04:41,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 11.44
2019-08-20 20:04:41,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 11.44
2019-08-20 20:04:41,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 10.25
2019-08-20 20:04:41,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 11.24
2019-08-20 20:04:41,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:41,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 11.525
2019-08-20 20:04:41,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 11.535
2019-08-20 20:04:41,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:41,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 10.525
2019-08-20 20:04:41,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 11.725
2019-08-20 20:04:41,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 11.25
2019-08-20 20:04:41,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 11.335
2019-08-20 20:04:41,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 11.525
2019-08-20 20:04:41,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 11.344999999999999
2019-08-20 20:04:41,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 11.535
2019-08-20 20:04:41,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 10.43
2019-08-20 20:04:41,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 10.24
2019-08-20 20:04:41,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 10.145
2019-08-20 20:04:41,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 11.145
2019-08-20 20:04:41,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 11.44
2019-08-20 20:04:41,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:41,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 11.525
2019-08-20 20:04:41,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 11.145
2019-08-20 20:04:41,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 11.24
2019-08-20 20:04:41,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 10.05
2019-08-20 20:04:41,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 10.335
2019-08-20 20:04:41,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 11.24
2019-08-20 20:04:41,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 11.05
2019-08-20 20:04:41,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 11.145
2019-08-20 20:04:41,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 11.25
2019-08-20 20:04:41,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 11.145
2019-08-20 20:04:41,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 11.525
2019-08-20 20:04:41,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 11.05
2019-08-20 20:04:41,821 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 10.24
2019-08-20 20:04:41,821 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 11.335
2019-08-20 20:04:41,821 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=24.0 to DejaVu Sans ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf') with score of 0.150000.
2019-08-20 20:04:41,822 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=24.0.
2019-08-20 20:04:41,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:41,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:41,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2019-08-20 20:04:41,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:41,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.335
2019-08-20 20:04:41,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:41,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:41,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.33499999999999996
2019-08-20 20:04:41,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.335
2019-08-20 20:04:41,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
2019-08-20 20:04:41,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:41,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:41,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:41,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:41,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:41,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.335
2019-08-20 20:04:41,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.0
2019-08-20 20:04:41,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:41,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.0
2019-08-20 20:04:41,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.335
2019-08-20 20:04:41,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.335
2019-08-20 20:04:41,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:41,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.335
2019-08-20 20:04:41,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:41,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:41,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
2019-08-20 20:04:41,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.0
2019-08-20 20:04:41,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.335
2019-08-20 20:04:41,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
2019-08-20 20:04:41,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.0
2019-08-20 20:04:41,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.0
2019-08-20 20:04:41,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.0
2019-08-20 20:04:41,828 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=24.0 to DejaVu Sans ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf') with score of 0.000000.
2019-08-20 20:04:41,828 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:41,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 1.05
2019-08-20 20:04:41,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2019-08-20 20:04:41,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:41,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,892 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to DejaVu Sans Mono ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf') with score of 0.050000.
2019-08-20 20:04:41,893 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:41,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:41,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:41,899 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,899 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:41,899 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,899 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,899 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:41,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:41,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:41,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:41,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:41,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:41,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:41,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:41,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:41,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:41,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:41,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:41,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:41,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:41,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:41,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:41,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:41,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:41,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,950 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:41,950 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,950 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,950 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:41,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:41,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:41,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:41,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:41,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:41,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:41,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:41,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:41,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:41,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:41,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:41,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:41,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:41,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:41,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:41,957 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to DejaVu Sans Display ('//anaconda3/envs/py36P/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf') with score of 0.050000.
2019-08-20 20:04:42,045 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,046 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,047 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,047 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,048 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,049 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,054 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2019-08-20 20:04:42,054 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-08-20 20:04:42,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2019-08-20 20:04:42,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2019-08-20 20:04:42,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:42,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:42,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 3.335
2019-08-20 20:04:42,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-08-20 20:04:42,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 2.335
2019-08-20 20:04:42,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:42,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marion' (Marion.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:42,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal bold condensed>) = 10.535
2019-08-20 20:04:42,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Skia' (Skia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:42,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:42,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:42,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:42,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:42,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:42,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:42,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal heavy condensed>) = 10.629999999999999
2019-08-20 20:04:42,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:42,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal bold condensed>) = 11.535
2019-08-20 20:04:42,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:42,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:42,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG3.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:42,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:42,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Charter' (Charter.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:42,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:42,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:42,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:42,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:42,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:42,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:42,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:42,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:42,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSTextItalic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG1.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:42,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal regular condensed>) = 10.25
2019-08-20 20:04:42,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG4.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.LastResort' (LastResort.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:42,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal medium normal>) = 10.145
2019-08-20 20:04:42,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:42,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:42,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:42,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:42,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Ultralight.otf) normal normal ultralight normal>) = 10.335
2019-08-20 20:04:42,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal book normal>) = 10.05
2019-08-20 20:04:42,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal roman normal>) = 11.145
2019-08-20 20:04:42,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:42,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,094 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,094 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Heavy.otf) normal normal heavy normal>) = 10.43
2019-08-20 20:04:42,094 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,094 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,094 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:42,095 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,095 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,095 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:42,095 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:42,095 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:42,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSText.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:42,097 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,097 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,097 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:42,097 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:42,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:42,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:42,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,100 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:42,100 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,100 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,100 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,100 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BoldItalic.otf) italic normal bold normal>) = 11.335
2019-08-20 20:04:42,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Optima' (Optima.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:42,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Medium.otf) normal normal medium normal>) = 10.145
2019-08-20 20:04:42,102 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,102 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,102 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,102 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,102 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Farah' (Farah.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:42,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:42,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 1.05
2019-08-20 20:04:42,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,104 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-UltralightItalic.otf) italic normal ultralight normal>) = 11.335
2019-08-20 20:04:42,104 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,104 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,104 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,105 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,105 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:42,105 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,105 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,105 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,106 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,106 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,106 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,106 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,106 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal book normal>) = 10.05
2019-08-20 20:04:42,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:42,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-ThinG2.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,108 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,108 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:42,108 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,108 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal bold normal>) = 1.335
2019-08-20 20:04:42,109 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,109 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,109 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,109 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal semibold condensed>) = 10.44
2019-08-20 20:04:42,109 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,110 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,110 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,110 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-RegularItalic.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,110 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,110 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Muna' (Muna.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,112 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2019-08-20 20:04:42,112 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Semibold.otf) normal normal semibold normal>) = 10.24
2019-08-20 20:04:42,112 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:42,112 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,112 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,113 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,113 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Regular.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,113 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,113 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,113 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal black normal>) = 10.525
2019-08-20 20:04:42,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal bold condensed>) = 10.535
2019-08-20 20:04:42,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:42,116 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,116 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'System Font' (SFNSDisplay-BlackItalic.otf) italic normal black normal>) = 11.525
2019-08-20 20:04:42,116 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Thin.otf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,116 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,116 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,117 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sana' (Sana.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,117 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal black condensed>) = 10.725
2019-08-20 20:04:42,117 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,117 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:42,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2019-08-20 20:04:42,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,119 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,119 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:42,119 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,119 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal medium condensed>) = 10.344999999999999
2019-08-20 20:04:42,119 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal ultralight condensed>) = 10.535
2019-08-20 20:04:42,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-HeavyItalic.otf) italic normal heavy normal>) = 11.43
2019-08-20 20:04:42,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-SemiboldItalic.otf) italic normal semibold normal>) = 11.24
2019-08-20 20:04:42,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-MediumItalic.otf) italic normal medium normal>) = 11.145
2019-08-20 20:04:42,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,122 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times' (Times.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:42,122 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 0.05
2019-08-20 20:04:42,122 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal light condensed>) = 10.44
2019-08-20 20:04:42,122 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:42,122 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal black normal>) = 10.525
2019-08-20 20:04:42,123 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Display' (SFCompactDisplay-Bold.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,123 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal roman normal>) = 10.145
2019-08-20 20:04:42,123 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,123 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded-Light.otf) normal normal light normal>) = 10.24
2019-08-20 20:04:42,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2019-08-20 20:04:42,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal bold normal>) = 11.335
2019-08-20 20:04:42,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal light normal>) = 10.24
2019-08-20 20:04:42,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal regular normal>) = 10.05
2019-08-20 20:04:42,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal bold normal>) = 10.335
2019-08-20 20:04:42,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal roman normal>) = 10.145
2019-08-20 20:04:42,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2019-08-20 20:04:42,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Futura' (Futura.ttc) normal normal medium normal>) = 10.145
2019-08-20 20:04:42,127 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF NS Symbols' (SFNSSymbols-Black.otf) normal normal black normal>) = 10.525
2019-08-20 20:04:42,127 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,127 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,127 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2019-08-20 20:04:42,127 [DEBUG] matplotlib.font_manager: findfont: score(<Font '.SF Compact Text' (SFCompactText-LightItalic.otf) italic normal light normal>) = 11.24
2019-08-20 20:04:42,128 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2019-08-20 20:04:42,128 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to Arial ('/Library/Fonts/Arial.ttf') with score of 0.050000.
2019-08-20 20:04:42,130 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,130 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,134 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,134 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,135 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,136 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,179 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,180 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,181 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,182 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,183 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,183 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,241 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,242 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,244 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,244 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,245 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,246 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,251 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,251 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,252 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,253 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,254 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,254 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,271 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,272 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,273 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,273 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,274 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,274 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,279 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,279 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,281 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,281 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,282 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,283 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,297 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,298 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,299 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,299 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,300 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,301 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,305 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,306 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,307 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,307 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,308 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,309 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,316 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,316 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,318 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,319 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,320 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,321 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,327 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,327 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,329 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,329 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,330 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,330 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,341 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,341 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,343 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,343 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,344 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,344 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,349 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,349 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,351 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,351 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,352 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,352 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,360 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,360 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,362 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,362 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,364 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,365 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,371 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,371 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,373 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,373 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,375 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,375 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,394 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,394 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,395 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,396 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,397 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,397 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,402 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,403 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,404 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,404 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,405 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,406 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,418 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,418 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,419 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,420 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,421 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,421 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,426 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,426 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,428 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,428 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,429 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,430 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,438 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,438 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,439 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,439 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,441 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,441 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,446 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,446 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,448 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,448 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,449 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,449 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,463 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,463 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,464 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,465 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,466 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,466 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,471 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,471 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,472 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,473 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,474 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,474 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,491 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,492 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,493 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,493 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,494 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,495 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,499 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,500 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,501 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,501 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,502 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,503 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,516 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,516 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,517 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,518 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,519 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,519 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,524 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,524 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,525 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,525 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,526 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,527 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,536 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,537 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,538 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,538 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,540 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,540 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,545 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,545 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,546 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,547 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,548 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,548 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,558 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,559 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,560 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,561 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,562 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,562 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,567 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,567 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,569 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,569 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,570 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,570 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,579 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,579 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,580 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,581 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,582 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,582 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,587 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,588 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,589 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,589 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,590 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,591 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,617 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,618 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,619 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,619 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,620 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,621 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,632 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,632 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,633 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,633 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,635 [DEBUG] matplotlib.ticker: vmin 89.12509381337455 vmax 9978.71185399898
2019-08-20 20:04:42,635 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,651 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,652 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,653 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,653 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,654 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,655 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,675 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,676 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,677 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,677 [DEBUG] matplotlib.ticker: ticklocs array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])
2019-08-20 20:04:42,679 [DEBUG] matplotlib.ticker: vmin 528.0709438340847 vmax 14250.341337402417
2019-08-20 20:04:42,679 [DEBUG] matplotlib.ticker: ticklocs array([2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05,
       2.e+06, 3.e+06, 4.e+06, 5.e+06, 6.e+06, 7.e+06, 8.e+06, 9.e+06])
2019-08-20 20:04:42,686 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,686 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,688 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,688 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,689 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,690 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-20 20:04:42,706 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,706 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,707 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,707 [DEBUG] matplotlib.ticker: ticklocs array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
2019-08-20 20:04:42,709 [DEBUG] matplotlib.ticker: vmin 85.89241193454171 vmax 4817.741478454953
2019-08-20 20:04:42,709 [DEBUG] matplotlib.ticker: ticklocs array([2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-08-21 13:30:35,688 [DEBUG] shapely.geos: Trying `CDLL(//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib)`
2019-08-21 13:30:35,692 [DEBUG] shapely.geos: Library path: '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib'
2019-08-21 13:30:35,693 [DEBUG] shapely.geos: DLL: <CDLL '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib', handle 7f9cbcb59350 at 0x119626c18>
2019-08-21 13:30:35,694 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-08-21 13:30:35,694 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-08-21 13:30:35,694 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 10da6e050 at 0x119626ba8>
2019-08-21 13:30:36,170 [INFO] directory: enter list_files
2019-08-21 13:30:36,170 [INFO] directory: exit list_files
2019-08-21 13:30:36,172 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpsu68h1ws
2019-08-21 13:30:36,172 [INFO] zips: enter unzip
2019-08-21 13:30:36,174 [INFO] zips: exit unzip
2019-08-21 13:30:36,200 [INFO] jsons: Read JSONLD successful: Arc-Yukon.DArrigo.2006.jsonld
2019-08-21 13:30:36,201 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:36,201 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:36,201 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:36,201 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:36,202 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:36,202 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:36,202 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:36,202 [INFO] csvs: enter read_csvs
2019-08-21 13:30:36,203 [INFO] directory: enter list_files
2019-08-21 13:30:36,203 [INFO] directory: exit list_files
2019-08-21 13:30:36,203 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:36,203 [INFO] csvs: open file: Arc-Yukon.DArrigo.2006.paleo1measurement1.csv
2019-08-21 13:30:36,205 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:36,205 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:36,205 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:36,207 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:36,207 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:36,207 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:36,207 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:36,209 [INFO] csvs: enter get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-21 13:30:36,209 [INFO] csvs: exit get_csv_from_section: Arc-Yukon.D'Arrigo.2006.paleo
2019-08-21 13:30:36,209 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:36,210 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-Yukon.D'Arrigo.2006.lpd
2019-08-21 13:30:36,210 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpgpj5hpdd
2019-08-21 13:30:36,211 [INFO] zips: enter unzip
2019-08-21 13:30:36,214 [INFO] zips: exit unzip
2019-08-21 13:30:36,618 [INFO] jsons: Read JSONLD successful: MD97-2121.Marr.2013.jsonld
2019-08-21 13:30:36,618 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:36,622 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:36,622 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:36,622 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:36,622 [INFO] jsons: enter import_data: chron
2019-08-21 13:30:36,623 [INFO] jsons: exit import_data: chron
2019-08-21 13:30:36,623 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:36,623 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:36,623 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:36,625 [INFO] csvs: enter read_csvs
2019-08-21 13:30:36,625 [INFO] directory: enter list_files
2019-08-21 13:30:36,625 [INFO] directory: exit list_files
2019-08-21 13:30:36,625 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:36,626 [INFO] csvs: open file: MD97-2121.Marr.2013.chron1measurement1.csv
2019-08-21 13:30:36,626 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:36,626 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:36,627 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement3.csv
2019-08-21 13:30:36,628 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:36,628 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:36,628 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement2.csv
2019-08-21 13:30:36,629 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:36,629 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:36,629 [INFO] csvs: open file: MD97-2121.Marr.2013.paleo1measurement1.csv
2019-08-21 13:30:36,630 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:36,630 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:36,630 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:36,635 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:36,640 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:36,645 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:36,645 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:36,645 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:36,646 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: tephra/ams
2019-08-21 13:30:36,647 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:36,647 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:36,647 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:36,647 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:36,653 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-21 13:30:36,653 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.paleo
2019-08-21 13:30:36,654 [INFO] csvs: enter get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-21 13:30:36,654 [INFO] csvs: exit get_csv_from_section: MD97-2121.Marr.2013.chron
2019-08-21 13:30:36,654 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:36,655 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD97-2121.Marr.2013.lpd
2019-08-21 13:30:36,656 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpcriz38kd
2019-08-21 13:30:36,656 [INFO] zips: enter unzip
2019-08-21 13:30:36,658 [INFO] zips: exit unzip
2019-08-21 13:30:36,682 [INFO] jsons: Read JSONLD successful: Eur-NorthernSpain.Mart├¡n-Chivelet.2011.jsonld
2019-08-21 13:30:36,682 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:36,683 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:36,683 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:36,683 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:36,684 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:36,684 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:36,684 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:36,684 [INFO] csvs: enter read_csvs
2019-08-21 13:30:36,684 [INFO] directory: enter list_files
2019-08-21 13:30:36,685 [INFO] directory: exit list_files
2019-08-21 13:30:36,685 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:36,685 [INFO] csvs: open file: Eur-NorthernSpain.Martn-Chivelet.2011.paleo1measurement1.csv
2019-08-21 13:30:36,686 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:36,687 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:36,687 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:36,688 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:36,689 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:36,689 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:36,689 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:36,690 [INFO] csvs: enter get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-21 13:30:36,691 [INFO] csvs: exit get_csv_from_section: Eur-NorthernSpain.Martín-Chivelet.2011.paleo
2019-08-21 13:30:36,691 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:36,692 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Eur-NorthernSpain.Martín-Chivelet.2011.lpd
2019-08-21 13:30:36,692 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpkpnp8rar
2019-08-21 13:30:36,693 [INFO] zips: enter unzip
2019-08-21 13:30:36,740 [INFO] zips: exit unzip
2019-08-21 13:30:36,996 [INFO] jsons: Read JSONLD successful: Arc-LakeNatauj├ñrvi.Ojala.2005.jsonld
2019-08-21 13:30:36,997 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:37,003 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:37,004 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:37,004 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:37,004 [INFO] jsons: enter import_data: chron
2019-08-21 13:30:37,005 [INFO] jsons: enter import_model
2019-08-21 13:30:37,005 [INFO] jsons: exit import_model: chron0model
2019-08-21 13:30:37,005 [INFO] jsons: exit import_data: chron
2019-08-21 13:30:37,005 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:37,006 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:37,006 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:37,008 [INFO] csvs: enter read_csvs
2019-08-21 13:30:37,008 [INFO] directory: enter list_files
2019-08-21 13:30:37,008 [INFO] directory: exit list_files
2019-08-21 13:30:37,009 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:37,009 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.chron1model1ensemble.csv
2019-08-21 13:30:37,863 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:37,864 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:37,864 [INFO] csvs: open file: Arc-LakeNataujrvi.Ojala.2005.paleo1measurement1.csv
2019-08-21 13:30:37,866 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:37,867 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:37,867 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:37,869 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:37,869 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:37,869 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:37,869 [INFO] csvs: enter merge_csv_model
2019-08-21 13:30:38,391 [INFO] csvs: exit merge_csv_model
2019-08-21 13:30:38,392 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:38,393 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:38,393 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:39,395 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-21 13:30:39,396 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.paleo
2019-08-21 13:30:39,396 [INFO] csvs: enter get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-21 13:30:39,396 [INFO] csvs: enter get_csv_from_model: Arc-LakeNataujärvi.Ojala.2005.chron0model
2019-08-21 13:30:39,396 [INFO] csvs: exit get_csv_from_section: Arc-LakeNataujärvi.Ojala.2005.chron
2019-08-21 13:30:39,397 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:39,398 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Arc-LakeNataujärvi.Ojala.2005.lpd
2019-08-21 13:30:39,414 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpgvpvhbc2
2019-08-21 13:30:39,415 [INFO] zips: enter unzip
2019-08-21 13:30:39,561 [INFO] zips: exit unzip
2019-08-21 13:30:39,753 [INFO] jsons: Read JSONLD successful: metadata.jsonld
2019-08-21 13:30:39,754 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:39,755 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:39,756 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:39,756 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:39,756 [INFO] jsons: enter import_data: chron
2019-08-21 13:30:39,756 [INFO] jsons: enter import_model
2019-08-21 13:30:39,757 [INFO] jsons: exit import_model: chron0model
2019-08-21 13:30:39,757 [INFO] jsons: exit import_data: chron
2019-08-21 13:30:39,757 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:39,757 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:39,757 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:39,758 [INFO] csvs: enter read_csvs
2019-08-21 13:30:39,759 [INFO] directory: enter list_files
2019-08-21 13:30:39,759 [INFO] directory: exit list_files
2019-08-21 13:30:39,759 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:39,759 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0summary0.csv
2019-08-21 13:30:39,760 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:39,761 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:39,761 [INFO] csvs: open file: MD982176.Stott.2004.paleo0measurement0.csv
2019-08-21 13:30:39,762 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:39,762 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:39,762 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution8.csv
2019-08-21 13:30:39,852 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:39,853 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:39,853 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution9.csv
2019-08-21 13:30:39,941 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:39,942 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:39,942 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution1.csv
2019-08-21 13:30:40,037 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,037 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:40,038 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution0.csv
2019-08-21 13:30:40,133 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,134 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:40,134 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution2.csv
2019-08-21 13:30:40,226 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,227 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:40,227 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution3.csv
2019-08-21 13:30:40,320 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,321 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:40,321 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution7.csv
2019-08-21 13:30:40,411 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,411 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:40,411 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution6.csv
2019-08-21 13:30:40,501 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,502 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:40,503 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution11.csv
2019-08-21 13:30:40,587 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,587 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:40,587 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution4.csv
2019-08-21 13:30:40,677 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,677 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:40,678 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0ensemble0.csv
2019-08-21 13:30:40,813 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,813 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:40,814 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution5.csv
2019-08-21 13:30:40,905 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,905 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:40,906 [INFO] csvs: open file: MD982176.Stott.2004.chron0measurement0.csv
2019-08-21 13:30:40,907 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,907 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:40,907 [INFO] csvs: open file: MD982176.Stott.2004.chron0model0distribution10.csv
2019-08-21 13:30:40,994 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:40,995 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:40,995 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:40,999 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:40,999 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:41,000 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: ams number
2019-08-21 13:30:41,000 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,000 [INFO] csvs: enter merge_csv_model
2019-08-21 13:30:41,002 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,110 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,142 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,175 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,208 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,241 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,276 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,310 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,343 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,376 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,408 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,443 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,487 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:41,487 [INFO] csvs: exit merge_csv_model
2019-08-21 13:30:41,487 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:41,488 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:41,488 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:42,293 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-21 13:30:42,294 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.paleo
2019-08-21 13:30:42,294 [INFO] csvs: enter get_csv_from_section: MD982176.Stott.2004.chron
2019-08-21 13:30:42,294 [INFO] csvs: enter get_csv_from_model: MD982176.Stott.2004.chron0model
2019-08-21 13:30:42,295 [INFO] csvs: exit get_csv_from_section: MD982176.Stott.2004.chron
2019-08-21 13:30:42,295 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:42,299 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD982176.Stott.2004.lpd
2019-08-21 13:30:42,306 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpgie1emmb
2019-08-21 13:30:42,306 [INFO] zips: enter unzip
2019-08-21 13:30:42,308 [INFO] zips: exit unzip
2019-08-21 13:30:42,395 [INFO] jsons: Read JSONLD successful: Juxtlahuaca.Lachniet.2012.jsonld
2019-08-21 13:30:42,396 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:42,397 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:42,398 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:42,398 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:42,398 [INFO] jsons: enter import_data: chron
2019-08-21 13:30:42,398 [INFO] jsons: exit import_data: chron
2019-08-21 13:30:42,399 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:42,399 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:42,399 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:42,400 [INFO] csvs: enter read_csvs
2019-08-21 13:30:42,400 [INFO] directory: enter list_files
2019-08-21 13:30:42,400 [INFO] directory: exit list_files
2019-08-21 13:30:42,400 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,401 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Chron1.measurementTable1.csv
2019-08-21 13:30:42,401 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,401 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,401 [INFO] csvs: open file: Juxtlahuaca.Lachniet.2012.Paleo1.measurementTable1.csv
2019-08-21 13:30:42,405 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,405 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:42,406 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:42,410 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,411 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:42,411 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:42,413 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: is_date_used_original_model
2019-08-21 13:30:42,415 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: decay_constants_used
2019-08-21 13:30:42,416 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: modern_reference
2019-08-21 13:30:42,416 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,416 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:42,416 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:42,417 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:42,422 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-21 13:30:42,422 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.paleo
2019-08-21 13:30:42,422 [INFO] csvs: enter get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-21 13:30:42,423 [INFO] csvs: exit get_csv_from_section: Juxtlahuaca.Lachniet.2012.chron
2019-08-21 13:30:42,423 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:42,424 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Juxtlahuaca.Lachniet.2012.lpd
2019-08-21 13:30:42,425 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpp0zx_3n7
2019-08-21 13:30:42,425 [INFO] zips: enter unzip
2019-08-21 13:30:42,427 [INFO] zips: exit unzip
2019-08-21 13:30:42,458 [INFO] jsons: Read JSONLD successful: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.jsonld
2019-08-21 13:30:42,458 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:42,459 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:42,459 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:42,459 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:42,459 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:42,459 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:42,460 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:42,460 [INFO] csvs: enter read_csvs
2019-08-21 13:30:42,460 [INFO] directory: enter list_files
2019-08-21 13:30:42,460 [INFO] directory: exit list_files
2019-08-21 13:30:42,461 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,461 [INFO] csvs: open file: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo1measurement1.csv
2019-08-21 13:30:42,462 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,462 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:42,462 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:42,463 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,463 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:42,463 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:42,463 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:42,464 [INFO] csvs: enter get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-21 13:30:42,465 [INFO] csvs: exit get_csv_from_section: Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.paleo
2019-08-21 13:30:42,465 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:42,466 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-MadangLagoonPapuaNewGuinea.Kuhnert.2001.lpd
2019-08-21 13:30:42,466 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpoo3kqn_1
2019-08-21 13:30:42,466 [INFO] zips: enter unzip
2019-08-21 13:30:42,469 [INFO] zips: exit unzip
2019-08-21 13:30:42,505 [INFO] jsons: Read JSONLD successful: Asi-Dasuopu.Thompson.2000.jsonld
2019-08-21 13:30:42,506 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:42,506 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:42,506 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:42,507 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:42,508 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:42,508 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:42,508 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:42,508 [INFO] csvs: enter read_csvs
2019-08-21 13:30:42,509 [INFO] directory: enter list_files
2019-08-21 13:30:42,509 [INFO] directory: exit list_files
2019-08-21 13:30:42,509 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,509 [INFO] csvs: open file: Asi-Dasuopu.Thompson.2000.paleo1measurement1.csv
2019-08-21 13:30:42,511 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,512 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:42,512 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:42,516 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,516 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:42,516 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:42,516 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:42,519 [INFO] csvs: enter get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-21 13:30:42,519 [INFO] csvs: exit get_csv_from_section: Asi-Dasuopu.Thompson.2000.paleo
2019-08-21 13:30:42,519 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:42,520 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-Dasuopu.Thompson.2000.lpd
2019-08-21 13:30:42,520 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp7og8eu24
2019-08-21 13:30:42,520 [INFO] zips: enter unzip
2019-08-21 13:30:42,522 [INFO] zips: exit unzip
2019-08-21 13:30:42,549 [INFO] jsons: Read JSONLD successful: Asi-TH001.Buckley.2010.jsonld
2019-08-21 13:30:42,549 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:42,549 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:42,549 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:42,550 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:42,550 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:42,550 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:42,550 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:42,550 [INFO] csvs: enter read_csvs
2019-08-21 13:30:42,551 [INFO] directory: enter list_files
2019-08-21 13:30:42,551 [INFO] directory: exit list_files
2019-08-21 13:30:42,551 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,551 [INFO] csvs: open file: Asi-TH001.Buckley.2010.paleo1measurement1.csv
2019-08-21 13:30:42,552 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,552 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:42,552 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:42,553 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,554 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:42,554 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:42,554 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:42,555 [INFO] csvs: enter get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-21 13:30:42,555 [INFO] csvs: exit get_csv_from_section: Asi-TH001.Buckley.2010.paleo
2019-08-21 13:30:42,555 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:42,556 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Asi-TH001.Buckley.2010.lpd
2019-08-21 13:30:42,557 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpqnmztmii
2019-08-21 13:30:42,557 [INFO] zips: enter unzip
2019-08-21 13:30:42,559 [INFO] zips: exit unzip
2019-08-21 13:30:42,658 [INFO] jsons: Read JSONLD successful: Ocn-SantaBarbaraBasin.Zhao.2000.jsonld
2019-08-21 13:30:42,659 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:42,660 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:42,660 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:42,660 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:42,660 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:42,660 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:42,661 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:42,661 [INFO] csvs: enter read_csvs
2019-08-21 13:30:42,661 [INFO] directory: enter list_files
2019-08-21 13:30:42,661 [INFO] directory: exit list_files
2019-08-21 13:30:42,662 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,662 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo2measurement1.csv
2019-08-21 13:30:42,663 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,663 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,663 [INFO] csvs: open file: Ocn-SantaBarbaraBasin.Zhao.2000.paleo1measurement1.csv
2019-08-21 13:30:42,665 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,665 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:42,665 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:42,667 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: core
2019-08-21 13:30:42,668 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,669 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,669 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:42,669 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:42,669 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:42,672 [INFO] csvs: enter get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-21 13:30:42,672 [INFO] csvs: exit get_csv_from_section: Ocn-SantaBarbaraBasin.Zhao.2000.paleo
2019-08-21 13:30:42,673 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:42,674 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-SantaBarbaraBasin.Zhao.2000.lpd
2019-08-21 13:30:42,674 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpgrrvcvth
2019-08-21 13:30:42,674 [INFO] zips: enter unzip
2019-08-21 13:30:42,676 [INFO] zips: exit unzip
2019-08-21 13:30:42,708 [INFO] jsons: Read JSONLD successful: Ant-JamesRossIsland.Mulvaney.2013.jsonld
2019-08-21 13:30:42,708 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:42,709 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:42,709 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:42,709 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:42,709 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:42,709 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:42,710 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:42,710 [INFO] csvs: enter read_csvs
2019-08-21 13:30:42,710 [INFO] directory: enter list_files
2019-08-21 13:30:42,710 [INFO] directory: exit list_files
2019-08-21 13:30:42,711 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,711 [INFO] csvs: open file: Ant-JamesRossIsland.Mulvaney.2013.paleo1measurement1.csv
2019-08-21 13:30:42,714 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,714 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:42,715 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:42,717 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,718 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:42,718 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:42,718 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:42,721 [INFO] csvs: enter get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-21 13:30:42,721 [INFO] csvs: exit get_csv_from_section: Ant-JamesRossIsland.Mulvaney.2013.paleo
2019-08-21 13:30:42,722 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:42,723 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ant-JamesRossIsland.Mulvaney.2013.lpd
2019-08-21 13:30:42,723 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmp2kf_zore
2019-08-21 13:30:42,724 [INFO] zips: enter unzip
2019-08-21 13:30:42,726 [INFO] zips: exit unzip
2019-08-21 13:30:42,817 [INFO] jsons: Read JSONLD successful: MD98-2170.Stott.2004.jsonld
2019-08-21 13:30:42,818 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:42,819 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:42,819 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:42,819 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:42,820 [INFO] jsons: enter import_data: chron
2019-08-21 13:30:42,820 [INFO] jsons: exit import_data: chron
2019-08-21 13:30:42,820 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:42,820 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:42,820 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:42,821 [INFO] csvs: enter read_csvs
2019-08-21 13:30:42,821 [INFO] directory: enter list_files
2019-08-21 13:30:42,821 [INFO] directory: exit list_files
2019-08-21 13:30:42,821 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,822 [INFO] csvs: open file: MD98-2170.Stott.2004.Paleo1.measurementTable1.csv
2019-08-21 13:30:42,822 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,822 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,823 [INFO] csvs: open file: MD98-2170.Stott.2004.Chron1.measurementTable1.csv
2019-08-21 13:30:42,823 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,823 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:42,823 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:42,825 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,826 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:42,826 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:42,826 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: labcode
2019-08-21 13:30:42,827 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,827 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:42,827 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:42,827 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:42,828 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-21 13:30:42,829 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.paleo
2019-08-21 13:30:42,829 [INFO] csvs: enter get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-21 13:30:42,829 [INFO] csvs: exit get_csv_from_section: MD98-2170.Stott.2004.chron
2019-08-21 13:30:42,829 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:42,830 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD98-2170.Stott.2004.lpd
2019-08-21 13:30:42,831 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpqij59gwy
2019-08-21 13:30:42,831 [INFO] zips: enter unzip
2019-08-21 13:30:42,833 [INFO] zips: exit unzip
2019-08-21 13:30:42,952 [INFO] jsons: Read JSONLD successful: MD01-2378.Xu.2008.jsonld
2019-08-21 13:30:42,952 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:42,954 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:42,954 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:42,954 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:42,954 [INFO] jsons: enter import_data: chron
2019-08-21 13:30:42,955 [INFO] jsons: exit import_data: chron
2019-08-21 13:30:42,955 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:42,955 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:42,955 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:42,956 [INFO] csvs: enter read_csvs
2019-08-21 13:30:42,956 [INFO] directory: enter list_files
2019-08-21 13:30:42,957 [INFO] directory: exit list_files
2019-08-21 13:30:42,957 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,957 [INFO] csvs: open file: MD012378.Xu.2008.chron1measurement1.csv
2019-08-21 13:30:42,957 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,958 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:42,958 [INFO] csvs: open file: MD012378.Xu.2008.paleo1measurement1.csv
2019-08-21 13:30:42,959 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:42,959 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:42,959 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:42,963 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,964 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:42,964 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:42,964 [INFO] inferred_data: get_inferred_data_table: Not calculating inferred data for variableName: lab label
2019-08-21 13:30:42,965 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:42,966 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:42,966 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:42,966 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:42,969 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-21 13:30:42,969 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.paleo
2019-08-21 13:30:42,969 [INFO] csvs: enter get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-21 13:30:42,969 [INFO] csvs: exit get_csv_from_section: MD01-2378.Xu.2008.chron
2019-08-21 13:30:42,969 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:42,970 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/MD01-2378.Xu.2008.lpd
2019-08-21 13:30:42,971 [INFO] directory: temp directory: /var/folders/xj/p7h9764x7cx0by8547l04rrr0000gn/T/tmpgoggj5tt
2019-08-21 13:30:42,971 [INFO] zips: enter unzip
2019-08-21 13:30:42,974 [INFO] zips: exit unzip
2019-08-21 13:30:43,005 [INFO] jsons: Read JSONLD successful: Ocn-TongueoftheOcean.Rosenheim.2005.jsonld
2019-08-21 13:30:43,005 [INFO] jsons: exit read_json_from_file
2019-08-21 13:30:43,005 [INFO] jsons: enter idx_num_to_name
2019-08-21 13:30:43,006 [INFO] jsons: enter import_data: paleo
2019-08-21 13:30:43,006 [INFO] jsons: exit import_data: paleo
2019-08-21 13:30:43,006 [INFO] jsons: exit idx_num_to_name
2019-08-21 13:30:43,006 [INFO] misc: enter remove_empty_doi
2019-08-21 13:30:43,006 [INFO] misc: exit remove_empty_doi
2019-08-21 13:30:43,007 [INFO] csvs: enter read_csvs
2019-08-21 13:30:43,007 [INFO] directory: enter list_files
2019-08-21 13:30:43,007 [INFO] directory: exit list_files
2019-08-21 13:30:43,007 [INFO] csvs: enter read_csv_from_file
2019-08-21 13:30:43,008 [INFO] csvs: open file: Ocn-TongueoftheOcean.Rosenheim.2005.paleo1measurement1.csv
2019-08-21 13:30:43,008 [INFO] csvs: exit read_csv_from_file
2019-08-21 13:30:43,008 [INFO] csvs: enter merge_csv_metadata
2019-08-21 13:30:43,008 [INFO] csvs: enter merge_csv_section
2019-08-21 13:30:43,009 [ERROR] inferred_data: fix_numeric_types: must be real number, not str
2019-08-21 13:30:43,010 [INFO] csvs: exit merge_csv_section
2019-08-21 13:30:43,010 [INFO] csvs: exit merge_csv_metadata
2019-08-21 13:30:43,010 [INFO] csvs: enter get_csv_from_metadata
2019-08-21 13:30:43,011 [INFO] csvs: enter get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-21 13:30:43,011 [INFO] csvs: exit get_csv_from_section: Ocn-TongueoftheOcean.Rosenheim.2005.paleo
2019-08-21 13:30:43,011 [INFO] csvs: exit get_csv_from_metadata
2019-08-21 13:30:43,012 [INFO] LiPD: lipd_read: record loaded: /Users/deborahkhider/Documents/GitHub/Pyleoclim_util/Example/Ocn-TongueoftheOcean.Rosenheim.2005.lpd
2019-08-21 13:30:43,012 [INFO] benchmarks: Benchmark - Function: readLipd , Time: 6.82 seconds
2019-08-21 13:30:43,014 [INFO] time_series: enter extract_main
2019-08-21 13:30:43,015 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:43,016 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:43,016 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:43,016 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:43,016 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:43,016 [INFO] time_series: enter extract_authors
2019-08-21 13:30:43,017 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:43,017 [INFO] time_series: processing publication #: 1
2019-08-21 13:30:43,017 [INFO] time_series: enter extract_authors
2019-08-21 13:30:43,017 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:43,017 [INFO] time_series: enter extract_pc
2019-08-21 13:30:43,018 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:43,018 [INFO] time_series: enter extract_special
2019-08-21 13:30:43,018 [INFO] time_series: enter extract_columns
2019-08-21 13:30:43,019 [INFO] time_series: enter extract_columns
2019-08-21 13:30:43,019 [INFO] time_series: exit extract_main
2019-08-21 13:30:43,025 [INFO] time_series: enter extract_main
2019-08-21 13:30:43,026 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:43,026 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:43,026 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:43,026 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:43,027 [INFO] time_series: enter extract_authors
2019-08-21 13:30:43,027 [ERROR] time_series: extract: Exception: can only concatenate list (not "str") to list
2019-08-21 13:30:43,027 [INFO] time_series: exit extract_main
2019-08-21 13:30:43,029 [INFO] time_series: enter extract_main
2019-08-21 13:30:43,029 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:43,029 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:43,029 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:43,030 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:43,030 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:43,030 [INFO] time_series: enter extract_authors
2019-08-21 13:30:43,030 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:43,030 [INFO] time_series: processing publication #: 1
2019-08-21 13:30:43,031 [INFO] time_series: enter extract_authors
2019-08-21 13:30:43,031 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:43,031 [INFO] time_series: enter extract_pc
2019-08-21 13:30:43,031 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:43,032 [INFO] time_series: enter extract_special
2019-08-21 13:30:43,033 [INFO] time_series: enter extract_columns
2019-08-21 13:30:43,034 [INFO] time_series: enter extract_columns
2019-08-21 13:30:43,034 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,084 [INFO] time_series: enter extract_main
2019-08-21 13:30:44,084 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,085 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,085 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,085 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:44,085 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:44,086 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,086 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,086 [INFO] time_series: processing publication #: 1
2019-08-21 13:30:44,086 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,087 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,087 [INFO] time_series: enter extract_pc
2019-08-21 13:30:44,087 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,087 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,089 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,090 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,090 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,892 [INFO] time_series: enter extract_main
2019-08-21 13:30:44,893 [INFO] time_series: enter _extract_funding
2019-08-21 13:30:44,893 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,894 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,894 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:44,894 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:44,894 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,895 [INFO] time_series: enter extract_pc
2019-08-21 13:30:44,895 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,895 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,896 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,896 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,897 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,897 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,898 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,898 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,899 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,910 [INFO] time_series: enter extract_main
2019-08-21 13:30:44,911 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,911 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,912 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:44,912 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:44,912 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,912 [INFO] time_series: enter extract_pc
2019-08-21 13:30:44,912 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,912 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,914 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,915 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,917 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,919 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,919 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,920 [INFO] time_series: enter extract_main
2019-08-21 13:30:44,921 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,921 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,921 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,922 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:44,922 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:44,922 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,922 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,923 [INFO] time_series: processing publication #: 1
2019-08-21 13:30:44,923 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,923 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,923 [INFO] time_series: processing publication #: 2
2019-08-21 13:30:44,923 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,924 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,924 [INFO] time_series: enter extract_pc
2019-08-21 13:30:44,924 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,924 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,925 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,926 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,926 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,929 [INFO] time_series: enter extract_main
2019-08-21 13:30:44,929 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,929 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,929 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,930 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:44,930 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:44,930 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,930 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,931 [INFO] time_series: processing publication #: 1
2019-08-21 13:30:44,931 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,931 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,931 [INFO] time_series: enter extract_pc
2019-08-21 13:30:44,932 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,932 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,933 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,933 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,934 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,935 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,935 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,936 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,936 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,937 [INFO] time_series: enter extract_main
2019-08-21 13:30:44,938 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,938 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,938 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,938 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:44,938 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:44,939 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,939 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,939 [INFO] time_series: processing publication #: 1
2019-08-21 13:30:44,939 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,939 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,940 [INFO] time_series: enter extract_pc
2019-08-21 13:30:44,940 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,940 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,941 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,941 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,941 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,944 [INFO] time_series: enter extract_main
2019-08-21 13:30:44,944 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,944 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,944 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,945 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:44,945 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:44,945 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,945 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,945 [INFO] time_series: processing publication #: 1
2019-08-21 13:30:44,945 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,945 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,946 [INFO] time_series: processing publication #: 2
2019-08-21 13:30:44,946 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,946 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,946 [INFO] time_series: enter extract_pc
2019-08-21 13:30:44,946 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,946 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,947 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,948 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,948 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,949 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,949 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,949 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,950 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,950 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,953 [INFO] time_series: enter extract_main
2019-08-21 13:30:44,953 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,953 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,954 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,954 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:44,954 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:44,954 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,954 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,954 [INFO] time_series: processing publication #: 1
2019-08-21 13:30:44,955 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,955 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,955 [INFO] time_series: processing publication #: 2
2019-08-21 13:30:44,955 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,955 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,955 [INFO] time_series: enter extract_pc
2019-08-21 13:30:44,956 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,956 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,957 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,959 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,959 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,960 [INFO] time_series: enter extract_main
2019-08-21 13:30:44,960 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,961 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,961 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:44,961 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:44,961 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,961 [INFO] time_series: enter extract_pc
2019-08-21 13:30:44,962 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,962 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,962 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,962 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,962 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,963 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,963 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,963 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,964 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,966 [INFO] time_series: enter extract_main
2019-08-21 13:30:44,966 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,967 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,967 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:44,967 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:44,967 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,967 [INFO] time_series: enter extract_pc
2019-08-21 13:30:44,967 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,968 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,968 [WARNING] time_series: extract_special: KeyError: 'units' not found, 'units'
2019-08-21 13:30:44,968 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,969 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,969 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,970 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,970 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,971 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,971 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,972 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,972 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,973 [INFO] time_series: enter extract_main
2019-08-21 13:30:44,973 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,973 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,973 [INFO] time_series: enter ts_extract_geo
2019-08-21 13:30:44,974 [INFO] time_series: enter _extract_pub
2019-08-21 13:30:44,974 [INFO] time_series: processing publication #: 0
2019-08-21 13:30:44,974 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,974 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,974 [INFO] time_series: processing publication #: 1
2019-08-21 13:30:44,974 [INFO] time_series: enter extract_authors
2019-08-21 13:30:44,975 [INFO] time_series: extract_authors: KeyError: author data not provided, 'authors'
2019-08-21 13:30:44,975 [INFO] time_series: enter extract_pc
2019-08-21 13:30:44,975 [INFO] time_series: enter extract_table_root
2019-08-21 13:30:44,975 [INFO] time_series: enter extract_special
2019-08-21 13:30:44,975 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,976 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,976 [INFO] time_series: enter extract_columns
2019-08-21 13:30:44,977 [INFO] time_series: exit extract_main
2019-08-21 13:30:44,977 [INFO] benchmarks: Benchmark - Function: extractTs , Time: 1.96 seconds
2019-08-28 12:35:33,905 [DEBUG] shapely.geos: Trying `CDLL(//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib)`
2019-08-28 12:35:33,909 [DEBUG] shapely.geos: Library path: '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib'
2019-08-28 12:35:33,909 [DEBUG] shapely.geos: DLL: <CDLL '//anaconda3/envs/py36P/bin/../lib/libgeos_c.dylib', handle 7fd5c5fa4530 at 0x121da9cc0>
2019-08-28 12:35:33,910 [DEBUG] shapely.geos: Trying `CDLL(/usr/lib/libc.dylib)`
2019-08-28 12:35:33,910 [DEBUG] shapely.geos: Library path: '/usr/lib/libc.dylib'
2019-08-28 12:35:33,911 [DEBUG] shapely.geos: DLL: <CDLL '/usr/lib/libc.dylib', handle 11be74050 at 0x121da9c50>
