2017-07-18 15:50:10,209 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:50:10,209 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'createDir')
2017-07-18 15:50:10,210 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function createDir at 0x1244e2950>
2017-07-18 15:50:10,238 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.createDir', <function createDir at 0x1244e2950>, {}, ['Create a ne
2017-07-18 15:50:10,238 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: createDir(path, foldername)
   :module: pyleoclim.LipdUtils

   Create a new folder in a working directory
   
   Create a new folder in a working directory to save outputs from Pyleoclim.
   
   Args:
       path(str): the path to the new folder.
       foldername(str): the name of the folder to be created
       
   Returns:
       newdir - the full path to the new directory
       
   
2017-07-18 15:50:10,245 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:11: input:
.. autofunction:: pyleoclim.LipdUtils.saveFigure

2017-07-18 15:50:10,245 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import saveFigure
2017-07-18 15:50:10,245 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:50:10,245 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:50:10,245 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'saveFigure')
2017-07-18 15:50:10,245 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function saveFigure at 0x1244e29d8>
2017-07-18 15:50:10,246 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.saveFigure', <function saveFigure at 0x1244e29d8>, {}, ['Save a fi
2017-07-18 15:50:10,246 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: saveFigure(name, format='eps', dir='')
   :module: pyleoclim.LipdUtils

   Save a figure
   
   Save the figure in the directory. If not given, creates a folder in the 
   current working directory. 
   
   Args:
       name (str): name of the file
       format (str): One of the file extensions supported by the active 
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       dir (str): the name of the folder in the LiPD working directory.
           If not provided, creates a default folder called 'figures'.
           
   
2017-07-18 15:50:10,248 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,249 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,251 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:16: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateLipds

2017-07-18 15:50:10,252 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateLipds
2017-07-18 15:50:10,252 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:50:10,252 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:50:10,252 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateLipds')
2017-07-18 15:50:10,252 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateLipds at 0x1244e2a60>
2017-07-18 15:50:10,252 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateLipds', <function enumerateLipds at 0x1244e2a60>, {}, ['E
2017-07-18 15:50:10,252 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateLipds(lipds)
   :module: pyleoclim.LipdUtils

   Enumerate the LiPD files loaded in the workspace
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   
2017-07-18 15:50:10,256 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:18: input:
.. autofunction:: pyleoclim.LipdUtils.promptForLipd

2017-07-18 15:50:10,257 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForLipd
2017-07-18 15:50:10,257 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:50:10,257 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:50:10,257 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForLipd')
2017-07-18 15:50:10,257 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForLipd at 0x1244e2ae8>
2017-07-18 15:50:10,257 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForLipd', <function promptForLipd at 0x1244e2ae8>, {}, ['Pro
2017-07-18 15:50:10,257 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForLipd(lipds)
   :module: pyleoclim.LipdUtils

   Prompt for a LiPD file
   
   Ask the user to select a LiPD file from a list
   Use this function in conjunction with enumerateLipds()
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   Returns:
       The index of the LiPD file
       
   
2017-07-18 15:50:10,261 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:23: input:
.. autofunction:: pyleoclim.LipdUtils.promptForVariable

2017-07-18 15:50:10,262 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForVariable
2017-07-18 15:50:10,262 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:50:10,262 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:50:10,262 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForVariable')
2017-07-18 15:50:10,262 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForVariable at 0x1244e2b70>
2017-07-18 15:50:10,262 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForVariable', <function promptForVariable at 0x1244e2b70>, {
2017-07-18 15:50:10,262 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForVariable()
   :module: pyleoclim.LipdUtils

   Prompt for a specific variable
   
   Ask the user to select the variable they are interested in.
   Use this function in conjunction with readHeaders() or getTSO()
   
   Returns:
       The index of the variable
       
   
2017-07-18 15:50:10,266 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:25: input:
.. autofunction:: pyleoclim.LipdUtils.xAxisTs

2017-07-18 15:50:10,266 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import xAxisTs
2017-07-18 15:50:10,266 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:50:10,266 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:50:10,266 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'xAxisTs')
2017-07-18 15:50:10,266 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function xAxisTs at 0x1244e2bf8>
2017-07-18 15:50:10,267 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.xAxisTs', <function xAxisTs at 0x1244e2bf8>, {}, ['Prompt the user
2017-07-18 15:50:10,267 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: xAxisTs(timeseries)
   :module: pyleoclim.LipdUtils

   Prompt the user to choose a x-axis representation for the timeseries.
   
   Args:
       timeseries: a timeseries object
       
   Returns:
       x_axis - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"
       
   
2017-07-18 15:50:10,272 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:27: input:
.. autofunction:: pyleoclim.LipdUtils.checkXaxis

2017-07-18 15:50:10,272 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import checkXaxis
2017-07-18 15:50:10,272 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:50:10,273 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:50:10,273 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'checkXaxis')
2017-07-18 15:50:10,273 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function checkXaxis at 0x1244e2c80>
2017-07-18 15:50:10,273 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.checkXaxis', <function checkXaxis at 0x1244e2c80>, {}, ['Check tha
2017-07-18 15:50:10,273 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: checkXaxis(timeseries, x_axis='')
   :module: pyleoclim.LipdUtils

   Check that a x-axis is present for the timeseries
   
   Args:
       timeseries : a timeseries
       x_axis (str) : the x-axis representation, either depth, age or year
       
   Returns:
       x - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"    
   
   
2017-07-18 15:50:10,277 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:32: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateTs

2017-07-18 15:50:10,277 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateTs
2017-07-18 15:50:10,278 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:50:10,278 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:50:10,278 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateTs')
2017-07-18 15:50:10,278 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateTs at 0x1244e2d08>
2017-07-18 15:50:10,278 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateTs', <function enumerateTs at 0x1244e2d08>, {}, ['Enumera
2017-07-18 15:50:10,278 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Enumerate the available time series objects
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   
2017-07-18 15:50:10,283 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:34: input:
.. autofunction:: pyleoclim.LipdUtils.getTs

2017-07-18 15:50:10,283 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getTs
2017-07-18 15:50:10,283 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:50:10,283 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:50:10,283 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getTs')
2017-07-18 15:50:10,283 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getTs at 0x1244e2d90>
2017-07-18 15:50:10,283 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getTs', <function getTs at 0x1244e2d90>, {}, ['Get a specific time
2017-07-18 15:50:10,283 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Get a specific timeseries object from a dictionary of timeseries
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   Returns:
       A single timeseries object 
       
   
2017-07-18 15:50:10,288 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:39: input:
.. autofunction:: pyleoclim.LipdUtils.LipdToOntology
2017-07-18 15:50:10,289 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import LipdToOntology
2017-07-18 15:50:10,289 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:50:10,289 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:50:10,289 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'LipdToOntology')
2017-07-18 15:50:10,289 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function LipdToOntology at 0x1244e2e18>
2017-07-18 15:50:10,289 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.LipdToOntology', <function LipdToOntology at 0x1244e2e18>, {}, ['s
2017-07-18 15:50:10,289 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: LipdToOntology(archiveType)
   :module: pyleoclim.LipdUtils

   standardize archiveType
   
   Transform the archiveType from their LiPD name to their ontology counterpart
   
   Args:
       archiveType (STR): name of the archiveType from the LiPD file
       
   Returns:
       archiveType according to the ontology
       
   
2017-07-18 15:50:10,306 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:10,306 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:10,307 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "lipd utilities"...>>,)
2017-07-18 15:50:10,314 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 33%] [35mMain[39;49;00m                                                  
2017-07-18 15:50:10,314 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x112335fd0>, 'Main')
2017-07-18 15:50:10,317 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Main', ['Main Functions\n==============\n\n\nUsing Pyleoclim with a LiPD file\n"""""""""""""""""""
2017-07-18 15:50:10,320 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:27: input:
.. autofunction:: pyleoclim.readLipd
2017-07-18 15:50:10,320 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import readLipd
2017-07-18 15:50:10,321 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:10,321 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:10,321 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'readLipd')
2017-07-18 15:50:10,321 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function readLipd at 0x1244e2ea0>
2017-07-18 15:50:10,649 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.readLipd', <function readLipd at 0x1244e2ea0>, {}, ['Read Lipd files into a 
2017-07-18 15:50:10,650 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: readLipd(usr_path='')
   :module: pyleoclim

   Read Lipd files into a dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Sets the dictionary as global variable so that it doesn't have to be provided
   as an argument for every function.
   
   Args:
       usr_path (str): The path to a directory or a single file. (Optional argument)
       
   Returns:
       lipd_dict - a dictionary containing the LiPD library
   
   
2017-07-18 15:50:10,655 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: input:
.. autofunction:: pyleoclim.extractTs

2017-07-18 15:50:10,655 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import extractTs
2017-07-18 15:50:10,655 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:10,656 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:10,656 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'extractTs')
2017-07-18 15:50:10,656 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function extractTs at 0x1254c0ea0>
2017-07-18 15:50:10,656 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.extractTs', <function extractTs at 0x1254c0ea0>, {}, ['Extract timeseries di
2017-07-18 15:50:10,656 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: extractTs(lipds=None)
   :module: pyleoclim

   Extract timeseries dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Set the dictionary as a global variable so that it doesn't have to be
   provided as an argument for every function. 
   
   Args:
       lipds (dict): A dictionary of LiPD files obtained through the 
       readLipd function
   
   Returns:
       ts_list - A list of timeseries object
   
   
2017-07-18 15:50:10,660 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:32: input:
.. autofunction:: pyleoclim.mapAllArchive

2017-07-18 15:50:10,661 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapAllArchive
2017-07-18 15:50:10,661 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:10,661 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:10,661 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAllArchive')
2017-07-18 15:50:10,661 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAllArchive at 0x1254c0f28>
2017-07-18 15:50:10,661 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapAllArchive', <function mapAllArchive at 0x1254c0f28>, {}, ['Map all the a
2017-07-18 15:50:10,661 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAllArchive(lipds='', markersize=50, background='shadedrelief', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map all the available records loaded into the workspace by archiveType.
   
   Map of all the records into the workspace by archiveType.
       Uses the default color palette. Enter pyleoclim.plot_default for detail.
   
   Args:
       lipds (dict): A dictionary of LiPD files. (Optional)
       markersize (int): The size of the markers. Default is 50
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
       saveFig (bool): Default is to not save the figure
       dir (str): The absolute path of the directory in which to save the
           figure. If not provided, creates a default folder called 'figures'
           in the LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
2017-07-18 15:50:10,664 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,666 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,666 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,666 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,669 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:34: input:
.. autofunction:: pyleoclim.mapLipd

2017-07-18 15:50:10,669 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapLipd
2017-07-18 15:50:10,670 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:10,670 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:10,670 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapLipd')
2017-07-18 15:50:10,670 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapLipd at 0x1254a4048>
2017-07-18 15:50:10,670 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapLipd', <function mapLipd at 0x1254a4048>, {}, ['Create a Map for a single
2017-07-18 15:50:10,671 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapLipd(timeseries='', countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='default', figsize=[4, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Create a Map for a single record
   
   Orthographic projection map of a single record.
   
   Args:
       timeseries: a LiPD timeseries object. Will prompt for one if not given
       countries (bool): Draws the country borders. Default is on (True).
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders.
           Default is off (False)
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief
       scale (float): useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): default is 50
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-18 15:50:10,674 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,674 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,676 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,676 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,677 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,677 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,677 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,683 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:38: input:
.. autofunction:: pyleoclim.plotTs

2017-07-18 15:50:10,684 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotTs
2017-07-18 15:50:10,684 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:10,684 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:10,684 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotTs')
2017-07-18 15:50:10,685 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotTs at 0x1254a40d0>
2017-07-18 15:50:10,685 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.plotTs', <function plotTs at 0x1254a40d0>, {}, ['Plot a single time series.'
2017-07-18 15:50:10,685 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotTs(timeseries='', x_axis='', markersize=50, marker='default', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Plot a single time series.
   
   Args:
       A timeseries: By default, will prompt the user for one.
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       markersize (int): default is 50.
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure.
   
   
2017-07-18 15:50:10,687 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,687 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,687 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,688 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,689 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,690 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,695 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:40: input:
.. autofunction:: pyleoclim.histTs

2017-07-18 15:50:10,696 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import histTs
2017-07-18 15:50:10,696 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:10,696 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:10,696 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'histTs')
2017-07-18 15:50:10,696 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function histTs at 0x1254a4158>
2017-07-18 15:50:10,697 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.histTs', <function histTs at 0x1254a4158>, {}, ['Plot a univariate distribut
2017-07-18 15:50:10,697 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: histTs(timeseries='', bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'Rug'}, fit_kws={'label': 'Fit'}, color='default', vertical=False, norm_hist=True, figsize=[5, 5], saveFig=False, format='eps', dir='')
   :module: pyleoclim

   Plot a univariate distribution of the PaleoData values
   
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the
   seaborn kdeplot() and rugplot() functions. It can also fit
   scipy.stats distributions and plot the estimated PDF over the data.
   
   Args:
       timeseries: A timeseries. By default, will prompt the user for one.
       bins (int): Specification of hist bins following matplotlib(hist),
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning
           a tuple that can be passed to a pdf method of positional
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in. Default is to use the default paletter for each
           archive type.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or
           fitted density is plotted
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns
       fig - The figure
   
   
2017-07-18 15:50:10,722 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,738 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,749 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,760 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,774 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,789 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,802 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,816 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:10,843 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:10,875 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:48: input:
.. autofunction:: pyleoclim.summaryTs

2017-07-18 15:50:10,894 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import summaryTs
2017-07-18 15:50:10,905 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:10,920 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:10,931 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'summaryTs')
2017-07-18 15:50:10,944 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function summaryTs at 0x1254a41e0>
2017-07-18 15:50:10,959 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.summaryTs', <function summaryTs at 0x1254a41e0>, {}, ['Basic summary plot', 
2017-07-18 15:50:10,971 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: summaryTs(timeseries='', x_axis='', saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Basic summary plot
   
   Plots the following information: the time series, a histogram of
   the PaleoData_values, location map, spectral density using the wwz 
   method, and metadata about the record.
   
   Args:
       timeseries: a timeseries object. By default, will prompt for one
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-18 15:50:10,991 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:11,004 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,017 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:11,029 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,048 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:53: input:
.. autofunction:: pyleoclim.statsTs

2017-07-18 15:50:11,060 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import statsTs
2017-07-18 15:50:11,093 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:11,110 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:11,129 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'statsTs')
2017-07-18 15:50:11,144 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function statsTs at 0x1254a4268>
2017-07-18 15:50:11,155 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.statsTs', <function statsTs at 0x1254a4268>, {}, ['Calculate simple statisti
2017-07-18 15:50:11,167 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: statsTs(timeseries='')
   :module: pyleoclim

   Calculate simple statistics of a timeseries
   
   Args:
       timeseries: sytem will prompt for one if not given
   
   Returns:
       the mean, median, min, max, standard deviation and the
       inter-quartile range (IQR) of a timeseries.
   
   Examples:
       >>> mean, median, min_, max_, std, IQR = pyleo.statsTs(timeseries)
   
   
2017-07-18 15:50:11,185 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:55: input:
.. autofunction:: pyleoclim.corrSigTs

2017-07-18 15:50:11,201 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import corrSigTs
2017-07-18 15:50:11,217 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:11,230 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:11,241 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrSigTs')
2017-07-18 15:50:11,253 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrSigTs at 0x1254a42f0>
2017-07-18 15:50:11,267 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.corrSigTs', <function corrSigTs at 0x1254a42f0>, {}, ['Estimates the signifi
2017-07-18 15:50:11,293 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrSigTs(timeseries1='', timeseries2='', x_axis='', interp_step='', start='', end='', nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim

   Estimates the significance of correlations between non IID timeseries.
   
   Function written by. F. Zhu.
   
   Args:
       timeseries1, timeseries2: timeseries object. Default is blank.
       x-axis (str): The representation against which to express the
           paleo-data. Options are "age", "year", and "depth".
           Default is to let the system choose if only one available
           or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start time/age/depth. Default is the maximum of
           the minima of the two timeseries
       end (float): End time/age/depth. Default is the minimum of the
           maxima of the two timeseries
       nsim (int): the number of simulations. Default is 1000
       method (str): method use to estimate the correlation and significance.
           Available methods include:
               - 'ttest': T-test where the degrees of freedom are corrected for
               the effect of serial correlation 
   
               - 'isopersistant': AR(1) modeling of the two timeseries 
   
               - 'isospectral' (default): phase randomization of original
               inputs.
           The T-test is parametric test, hence cheap but usually wrong
           except in idyllic circumstances.
           The others are non-parametric, but their computational
           requirements scales with nsim.
       alpha (float): significance level for critical value estimation. Default is 0.05
   
   Returns:
       r (float) - correlation between the two timeseries 
   
       sig (bool) -  Returns True if significant, False otherwise 
   
       p (real) - the p-value
   
   
2017-07-18 15:50:11,306 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:11,320 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,347 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:11,367 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,399 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,425 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:11,442 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,456 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,469 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,485 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,504 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:61: input:
.. autofunction:: pyleoclim.binTs

2017-07-18 15:50:11,518 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import binTs
2017-07-18 15:50:11,532 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:11,547 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:11,558 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'binTs')
2017-07-18 15:50:11,572 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function binTs at 0x1254a4378>
2017-07-18 15:50:11,586 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.binTs', <function binTs at 0x1254a4378>, {}, ['Bin the paleoData values of t
2017-07-18 15:50:11,609 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: binTs(timeseries='', x_axis='', bin_size='', start='', end='')
   :module: pyleoclim

   Bin the paleoData values of the timeseries
   
   Args:
       timeseries. By default, will prompt the user for one.
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system  choose if only one available or prompt the user.
       bin_size (float): the size of the bins to be used. By default,
           will prompt for one
       start (float): Start time/age/depth. Default is the minimum
       end (float): End time/age/depth. Default is the maximum
   
   Returns:
       binned_values- the binned output,
   
       bins-  the bins (centered on the median, i.e. the 100-200 bin is 150),
   
       n-  number of data points in each bin,
   
       error- the standard error on the mean in each bin
   
   
   
2017-07-18 15:50:11,633 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:11,652 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,667 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,685 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:63: input:
.. autofunction:: pyleoclim.interpTs

2017-07-18 15:50:11,703 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import interpTs
2017-07-18 15:50:11,714 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:11,728 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:11,749 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interpTs')
2017-07-18 15:50:11,770 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interpTs at 0x1254a4400>
2017-07-18 15:50:11,796 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.interpTs', <function interpTs at 0x1254a4400>, {}, ['Simple linear interpola
2017-07-18 15:50:11,820 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interpTs(timeseries='', x_axis='', interp_step='', start='', end='')
   :module: pyleoclim

   Simple linear interpolation
   
   Simple linear interpolation of the data using the numpy.interp method
   
   Args:
       timeseries. Default is blank, will prompt for it
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start year/age/depth. Default is the minimum
       end (float): End year/age/depth. Default is the maximum
   
   Returns:
       interp_age - the interpolated age/year/depth according to the end/start
       and time step, 
   
       interp_values - the interpolated values
   
   
2017-07-18 15:50:11,851 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:11,877 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:11,904 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:65: input:
.. autofunction:: pyleoclim.standardizeTs

2017-07-18 15:50:11,920 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import standardizeTs
2017-07-18 15:50:11,957 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:11,997 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:12,029 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardizeTs')
2017-07-18 15:50:12,058 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardizeTs at 0x1254a4488>
2017-07-18 15:50:12,080 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.standardizeTs', <function standardizeTs at 0x1254a4488>, {}, ['Centers and n
2017-07-18 15:50:12,143 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardizeTs(timeseries='', scale=1, ddof=0, eps=0.001)
   :module: pyleoclim

   Centers and normalizes the paleoData values of a  given time series.
   
   Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       - z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed 
   
       - mu (real): the mean of the original time series, E[X] 
   
       - sig (real): the standard deviation of the original time series, std[X] 
   
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2017-07-18 15:50:12,173 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:69: input:
.. autofunction:: pyleoclim.wwzTs

2017-07-18 15:50:12,192 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import wwzTs
2017-07-18 15:50:12,215 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:50:12,230 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:50:12,248 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwzTs')
2017-07-18 15:50:12,268 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwzTs at 0x1254a4598>
2017-07-18 15:50:12,286 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.wwzTs', <function wwzTs at 0x1254a4598>, {}, ['Weigthed wavelet Z-transform 
2017-07-18 15:50:12,315 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwzTs(timeseries='', wwz=False, psd=True, wwz_default=True, psd_default=True, wwaplot_default=True, psdplot_default=True, fig=True, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Weigthed wavelet Z-transform analysis
   
   Wavelet analysis for unevenly spaced data adapted from Foster et al. (1996)
   
   Args:
       timeseries (dict): A LiPD timeseries object (Optional, will prompt for one.)
       wwz (bool): If True, will perform wavelet analysis
       psd (bool): If True, will inform the power spectral density of the timeseries
       wwz_default: If True, will use the following default parameters:
           
           wwz_default = {'tau':None,'freqs':None,'c':1/(8*np.pi**2),'Neff':3,'nMC':200,
                              'nproc':8,'detrend':'no','method':'Kirchner_f2py'}.
               
           Modify the values for specific keys to change the default behavior.
               
       psd_default: If True, will use the following default parameters:
           
           psd_default = {'tau':None,
                         'freqs': None,
                         'c':1e-3,
                         'nproc':8,
                         'nMC':200,
                         'detrend':'no',
                         'Neff':3,
                         'anti_alias':False,
                         'avgs':2,
                         'method':'Kirchner_f2py'}
           
           Modify the values for specific keys to change the default behavior.
           
       wwaplot_default: If True, will use the following default parameters:
           
           wwaplot_default={'Neff':3,
                                'AR1_q':AR1_q,
                                'coi':coi,
                                'levels':None,
                                'tick_range':None,
                                'yticks':None,
                                'ylim':None,
                                'xticks':None,
                                'xlabels':None,
                                'figsize':[20,8],
                                'clr_map':'OrRd',
                                'cbar_drawedges':False,
                                'cone_alpha':0.5,
                                'plot_signif':True,
                                'signif_style':'contour',
                                'plot_cone':True}
           
           Modify the values for specific keys to change the default behavior.
       psdplot_default: If True, will use the following default parameters:
           
           psdplot_default={'lmstyle':None,
                            'linewidth':None,
                            'xticks':None,
                            'xlim':None,
                            'ylim':None,
                            'figsize':[20,8],
                            'label':'PSD',
                            'plot_ar1':True,
                            'psd_ar1_q95':psd_ar1_q95,
                            'psd_ar1_color':sns.xkcd_rgb["pale red"]}
           
           Modify the values for specific keys to change the default behavior.
           
       fig (bool): If True, plots the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       
   Returns:
       dict_out (dict): A dictionary of outputs. 
           
           For wwz: 
           
           - wwa (array): The weights wavelet amplitude 
       
           - AR1_q (array): AR1 simulations 
       
           - coi (array): cone of influence 
       
           - freqs (array): vector for frequencies 
       
           - tau (array): the evenly-spaced time points, namely the time 
           shift for wavelet analysis. 
       
           - Neffs (array): The matrix of effective number of points in the
           time-scale coordinates.
       
           - coeff (array): The wavelet transform coefficients
       
           For psd: 
           
           - psd (array): power spectral density 
       
           - freqs (array): vector of frequency 
       
           - psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes 
       
       fig: The figure
        
       References:
           Foster, G. (1996). Wavelets for period analysis of unevenly 
           sampled time series. The Astronomical Journal, 112(4), 1709-1729.
       
       Examples:
           To run both wwz and psd: 
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(wwz=True)
           
           Note: This will return a single figure with wwa and psd 
   
           
           To change a default behavior:
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(psd_default = {'nMC':1000}) 
          
   
2017-07-18 15:50:12,356 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:12,372 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:12,390 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:12,421 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 15:50:12,453 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 15:50:12,553 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,572 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,586 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,602 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,624 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,640 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,655 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,668 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:19: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,688 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,707 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,725 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:26: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,738 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,751 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,763 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,777 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,790 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:15: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,804 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,821 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,836 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,854 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,866 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,878 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,893 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:26: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,906 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,933 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:31: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,954 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:33: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:12,972 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:12,996 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,019 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:14: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:13,034 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,047 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:13,067 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,091 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:13,111 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,129 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:16: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,142 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:18: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:13,159 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:20: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,172 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:25: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,184 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:26: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,199 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:30: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,227 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:13,245 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,267 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:10: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,279 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:13,292 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,304 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:51: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,319 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:69: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:13,345 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:71: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,393 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:89: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,412 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:92: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:13,432 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "main functions"...>>,)
2017-07-18 15:50:13,477 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 44%] [35mMap[39;49;00m                                                   
2017-07-18 15:50:13,495 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x112335fd0>, 'Map')
2017-07-18 15:50:13,510 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Map', ['Mapping Functions\n=================\n\nThis module uses the Basemap package for mapping. 
2017-07-18 15:50:13,525 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:6: input:
.. autofunction:: pyleoclim.Map.mapAll

2017-07-18 15:50:13,541 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapAll
2017-07-18 15:50:13,555 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2017-07-18 15:50:13,571 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2017-07-18 15:50:13,585 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAll')
2017-07-18 15:50:13,598 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAll at 0x10ff8ba60>
2017-07-18 15:50:13,650 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapAll', <function mapAll at 0x10ff8ba60>, {}, ['Map the location of all
2017-07-18 15:50:13,665 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAll(lat, lon, criteria, projection='robin', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=False, counties=False, rivers=False, states=False, figsize=[10, 4], ax=None, background='none', scale=0.5, palette='', markersize=50)
   :module: pyleoclim.Map

   Map the location of all lat/lon according to some criteria 
   
   Map the location of all lat/lon according to some criteria. The choice of 
   plotting color/marker is passed through palette according to unique 
   criteria (e.g., record name, archive type, proxy observation type).
   
   Args:
       lat (list): a list of latitude.
       lon (list): a list of longitude.
       criteria (list): a list of criteria for plotting purposes. For instance,
           a map by the types of archive present in the dataset or proxy
           observations.
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       palette (dict): A dictionary of plotting color/marker by criteria. The
           keys should correspond to ***unique*** criteria with a list of 
           associated values. The list should be in the format 
           ['color', 'marker'].
       markersize (int): The size of the marker.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
       
   Returns:
       The figure       
   
2017-07-18 15:50:13,681 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:13,697 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:13,718 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:50:13,738 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:13,761 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:13,778 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:50:13,794 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:8: input:
.. autofunction:: pyleoclim.Map.mapOne
2017-07-18 15:50:13,809 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapOne
2017-07-18 15:50:13,827 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2017-07-18 15:50:13,857 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2017-07-18 15:50:13,895 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapOne')
2017-07-18 15:50:13,914 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapOne at 0x1244e28c8>
2017-07-18 15:50:13,940 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapOne', <function mapOne at 0x1244e28c8>, {}, ['Map one location on the
2017-07-18 15:50:13,958 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapOne(lat, lon, projection='ortho', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='ro', figsize=[4, 4], ax=None)
   :module: pyleoclim.Map

   Map one location on the globe
   
   Args:
       lat (float): a float number representing latitude
       lon (float): a float number representing longitude
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): The size of the marker.
       marker (str or list): color and type of marker. 
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
   
   
2017-07-18 15:50:13,979 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:13,997 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:14,014 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:50:14,029 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:14,049 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:14,069 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:50:14,099 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:14,115 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:13: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,128 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,147 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:28: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:14,161 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:29: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,176 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:38: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,190 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:7: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:14,202 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,215 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,230 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:21: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:14,250 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:22: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,270 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:27: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,284 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "mapping functions"...>>,)
2017-07-18 15:50:14,305 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 55%] [35mPlot[39;49;00m                                                  
2017-07-18 15:50:14,325 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x112335fd0>, 'Plot')
2017-07-18 15:50:14,357 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Plot', ['Plotting Functions\n==================\n\n.. autofunction:: pyleoclim.Plot.plot\n\n.. aut
2017-07-18 15:50:14,372 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:4: input:
.. autofunction:: pyleoclim.Plot.plot

2017-07-18 15:50:14,386 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot
2017-07-18 15:50:14,400 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2017-07-18 15:50:14,412 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2017-07-18 15:50:14,427 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot')
2017-07-18 15:50:14,442 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot at 0x1244eb1e0>
2017-07-18 15:50:14,476 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot', <function plot at 0x1244eb1e0>, {}, ['Make a 2-D plot', '', 'Arg
2017-07-18 15:50:14,490 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot(x, y, markersize=50, marker='ro', x_label='', y_label='', title='', figsize=[10, 4], ax=None)
   :module: pyleoclim.Plot

   Make a 2-D plot
   
   Args:
       x (numpy array): a 1xn numpy array of values for the x-axis
       y (numpy array): a 1xn numpy array for the y-axis
       markersize (int): the size of the marker
       marker (string or list): color and shape of the marker
       x_axis_label (str): the label for the x-axis
       y_axis_label (str): the label for the y-axis
       title (str): the title for the plot
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
           
   Return:
       The figure       
   
   
2017-07-18 15:50:14,507 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: input:
.. autofunction:: pyleoclim.Plot.plot_hist
2017-07-18 15:50:14,522 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot_hist
2017-07-18 15:50:14,544 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2017-07-18 15:50:14,567 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2017-07-18 15:50:14,586 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_hist')
2017-07-18 15:50:14,605 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_hist at 0x1244eb268>
2017-07-18 15:50:14,625 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot_hist', <function plot_hist at 0x1244eb268>, {}, ['Plot a univariat
2017-07-18 15:50:14,644 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_hist(y, bins=None, hist=True, label='', kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'rug'}, fit_kws={'label': 'fit'}, color='0.7', vertical=False, norm_hist=True, figsize=[5, 5], ax=None)
   :module: pyleoclim.Plot

   Plot a univariate distribution of the PaleoData values
           
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the 
   seaborn kdeplot() and rugplot() functions. It can also fit 
   scipy.stats distributions and plot the estimated PDF over the data.
       
   Args:
       y (array): nx1 numpy array. No missing values allowed 
       bins (int): Specification of hist bins following matplotlib(hist), 
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram 
       label (str): The label for the axis
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning 
           a tuple that can be passed to a pdf method of positional 
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for 
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or 
           fitted density is plotted
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
   
   Returns
      fig - The figure
   
2017-07-18 15:50:14,662 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:14,675 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:14,690 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:14,705 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:14,720 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:50:14,736 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:14,754 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:14,778 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:14,793 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,805 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:17: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:14,818 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:19: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,834 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,847 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:26: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:14,874 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:14,897 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "plotting functions"...>>,)
2017-07-18 15:50:14,925 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 66%] [35mSpectral[39;49;00m                                              
2017-07-18 15:50:14,940 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x112335fd0>, 'Spectral')
2017-07-18 15:50:14,963 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Spectral', ['Spectral Functions\n==================\n\nThis module allows analysis in the frequenc
2017-07-18 15:50:14,977 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:6: input:
.. autofunction:: pyleoclim.Spectral.ar1_fit

2017-07-18 15:50:14,992 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_fit
2017-07-18 15:50:15,010 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:50:15,032 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:50:15,055 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_fit')
2017-07-18 15:50:15,077 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_fit at 0x1244eb378>
2017-07-18 15:50:15,525 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_fit', <function ar1_fit at 0x1244eb378>, {}, ['Returns the lag-
2017-07-18 15:50:15,541 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_fit(ys, ts=None, detrend='no')
   :module: pyleoclim.Spectral

   Returns the lag-1 autocorrelation from ar1 fit OR persistence from tauest.
   
   Args:
       ys (array): the time series
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
   
   Returns:
       g (float): lag-1 autocorrelation coefficient (for evenly-spaced time series)
       OR estimated persistence (for unevenly-spaced time series)
   
2017-07-18 15:50:15,607 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:15,627 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:8: input:
.. autofunction:: pyleoclim.Spectral.ar1_sim

2017-07-18 15:50:15,650 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_sim
2017-07-18 15:50:15,664 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:50:15,682 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:50:15,697 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_sim')
2017-07-18 15:50:15,714 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_sim at 0x1253f10d0>
2017-07-18 15:50:15,729 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_sim', <function ar1_sim at 0x1253f10d0>, {}, ['Produce p realiz
2017-07-18 15:50:15,743 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_sim(ys, n, p, ts=None, detrend='no')
   :module: pyleoclim.Spectral

   Produce p realizations of an AR1 process of length n with lag-1 autocorrelation g calculated from `ys` and `ts`
   
   Args:
       ys (array): a time series
       n, p (int): dimensions as n rows by p columns
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
   
   Returns:
       red (matrix): n rows by p columns matrix of an AR1 process
   
   
2017-07-18 15:50:15,770 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:15,803 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:10: input:
.. autofunction:: pyleoclim.Spectral.wwz

2017-07-18 15:50:15,830 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz
2017-07-18 15:50:15,869 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:50:15,898 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:50:15,920 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz')
2017-07-18 15:50:15,937 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz at 0x1253f1158>
2017-07-18 15:50:15,954 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz', <function wwz at 0x1253f1158>, {}, ['Return the weighted wave
2017-07-18 15:50:15,977 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz(ys, ts, tau=None, freqs=None, c=0.012665147955292222, Neff=3, nMC=200, nproc=8, detrend='no', method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the weighted wavelet amplitude (WWA) with phase, AR1_q, and cone of influence, as well as WT coeeficients
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       tau (array): the evenly-spaced time points
       freqs (array): vector of frequency
       c (float): the decay constant, the default value 1/(8*np.pi**2) is good for most of the cases
       Neff (int): effective number of points
       nMC (int): the number of Monte-Carlo simulations
       nproc (int): the number of processes for multiprocessing
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       wwa (array): the weighted wavelet amplitude.
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neffs (array): the matrix of effective number of points in the time-scale coordinates
       coeff (array): the wavelet transform coefficents
   
   
2017-07-18 15:50:16,007 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:16,030 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:16,047 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:12: input:
.. autofunction:: pyleoclim.Spectral.wwz_psd

2017-07-18 15:50:16,081 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz_psd
2017-07-18 15:50:16,110 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:50:16,126 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:50:16,141 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz_psd')
2017-07-18 15:50:16,154 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz_psd at 0x1253f11e0>
2017-07-18 15:50:16,168 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz_psd', <function wwz_psd at 0x1253f11e0>, {}, ['Return the psd o
2017-07-18 15:50:16,189 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz_psd(ys, ts, freqs=None, tau=None, c=0.001, nproc=8, nMC=200, detrend='no', Neff=3, anti_alias=False, avgs=2, method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the psd of a timeseires directly using wwz method.
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       c (float): the decay constant, the default value 1e-3 is good for most of the cases
       nproc (int): the number of processes for multiprocessing
       nMC (int): the number of Monte-Carlo simulations
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       psd (array): power spectral density
       freqs (array): vector of frequency
       psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes
   
   
2017-07-18 15:50:16,368 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:16,391 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:16,420 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:14: input:
.. autofunction:: pyleoclim.Spectral.plot_wwa

2017-07-18 15:50:16,439 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwa
2017-07-18 15:50:16,457 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:50:16,470 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:50:16,487 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwa')
2017-07-18 15:50:16,503 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwa at 0x1253f12f0>
2017-07-18 15:50:16,519 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwa', <function plot_wwa at 0x1253f12f0>, {}, ['Plot the wavel
2017-07-18 15:50:16,532 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwa(wwa, freqs, tau, Neff=3, AR1_q=None, coi=None, levels=None, tick_range=None, yticks=None, ylim=None, xticks=None, xlabels=None, figsize=[20, 8], clr_map='OrRd', cbar_drawedges=False, cone_alpha=0.5, plot_signif=False, signif_style='contour', plot_cone=False, ax=None, xlabel='Year', ylabel='Period')
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neff (int): effective number of points
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       levels (array): levels of values to plot
       tick_range (array): levels of ticks to show on the colorbar
       yticks (list): ticks on y-axis
       ylim (list): limitations for y-axis
       xticks (list): ticks on x-axis
       figsize (list): the size for the figure
       clr_map (str): the name of the colormap
       cbar_drawedges (bool): whether to draw edges on the colorbar or not
       cone_alpha (float): the alpha value for the area covered by cone of influence
       plot_signif (bool): plot 95% significant area or not
       signif_style (str): plot 95% significant area with `contour` or `shade`
       plot_cone (bool): plot cone of influence or not
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-18 15:50:16,560 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:16: input:
.. autofunction:: pyleoclim.Spectral.plot_wwadist

2017-07-18 15:50:16,576 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwadist
2017-07-18 15:50:16,590 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:50:16,603 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:50:16,618 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwadist')
2017-07-18 15:50:16,633 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwadist at 0x1253f1378>
2017-07-18 15:50:16,664 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwadist', <function plot_wwadist at 0x1253f1378>, {}, ['Plot t
2017-07-18 15:50:16,687 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwadist(wwa, ylim=None)
   :module: pyleoclim.Spectral

   Plot the distribution of wwa with the 95% quantile line.
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       ylim (list): limitations for y-axis
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-18 15:50:16,714 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:18: input:
.. autofunction:: pyleoclim.Spectral.plot_psd
2017-07-18 15:50:16,728 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_psd
2017-07-18 15:50:16,747 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:50:16,762 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:50:16,778 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_psd')
2017-07-18 15:50:16,795 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_psd at 0x1253f1400>
2017-07-18 15:50:16,810 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_psd', <function plot_psd at 0x1253f1400>, {}, ['Plot the wavel
2017-07-18 15:50:16,826 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_psd(psd, freqs, lmstyle=None, linewidth=None, xticks=None, xlim=None, ylim=None, figsize=[20, 8], label='PSD', plot_ar1=True, psd_ar1_q95=None, psd_ar1_color='#d9544d', ax=None, xlabel='Period', ylabel='Spectral Density')
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       psd (array): power spectral density
       freqs (array): vector of frequency
       xticks (list): ticks on x-axis
       xlim (list): limits for x-axis
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-18 15:50:16,871 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_fit:7: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:16,886 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_sim:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:16,903 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:16,916 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:15: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:16,932 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:12: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:16,946 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:16,965 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "spectral functions"...>>,)
2017-07-18 15:50:16,998 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 77%] [35mStats[39;49;00m                                                 
2017-07-18 15:50:17,012 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x112335fd0>, 'Stats')
2017-07-18 15:50:17,033 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Stats', ['Statistics Functions\n====================\n\n.. autofunction:: pyleoclim.Stats.simpleSt
2017-07-18 15:50:17,075 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Stats.rst:4: input:
.. autofunction:: pyleoclim.Stats.simpleStats

2017-07-18 15:50:17,097 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Stats import simpleStats
2017-07-18 15:50:17,112 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Stats
2017-07-18 15:50:17,128 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Stats' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py'>
2017-07-18 15:50:17,142 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'simpleStats')
2017-07-18 15:50:17,157 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function simpleStats at 0x1253f1510>
2017-07-18 15:50:17,224 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Stats.simpleStats', <function simpleStats at 0x1253f1510>, {}, ['Computes si
2017-07-18 15:50:17,238 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: simpleStats(y, axis=None)
   :module: pyleoclim.Stats

   Computes simple statistics
   
   Computes the mean, median, min, max, standard deviation, and interquartile
   range of a numpy array y.
   
   Args:
       y (array): A Numpy array
       axis (int, typle of ints): Optional. Axis or Axes along which the means
           are computed, the default is to compute the mean of the flattened
           array. If a tuple of ints, performed over multiple axes
   
   Returns:
       The mean, median, min, max, standard deviation and IQR by columns
   
   
2017-07-18 15:50:17,255 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:17,279 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Stats.rst:6: input:
.. autofunction:: pyleoclim.Stats.corrsig
2017-07-18 15:50:17,293 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Stats import corrsig
2017-07-18 15:50:17,309 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Stats
2017-07-18 15:50:17,328 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Stats' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py'>
2017-07-18 15:50:17,382 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrsig')
2017-07-18 15:50:17,408 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrsig at 0x125413620>
2017-07-18 15:50:17,437 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Stats.corrsig', <function corrsig at 0x125413620>, {}, ['Estimates the signi
2017-07-18 15:50:17,455 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrsig(y1, y2, nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim.Stats

   Estimates the significance of correlations between non IID time series by 3 independent methods:
       1) 'ttest': T-test where d.o.f are corrected for the effect of serial correlation
       2) 'isopersistent': AR(1) modeling of x and y.
       3) 'isospectral': phase randomization of original inputs. (default)
       The T-test is parametric test, hence cheap but usually wrong except in idyllic circumstances.
       The others are non-parametric, but their computational requirements scales with nsim.
   
   Args:
       y1, y2 (array)- vector of (real) numbers of identical length, no NaNs allowed
       nsim (int)- the number of simulations [1000]
       method (str)- methods 1-3 above ['isospectral']
       alpha (float)- significance level for critical value estimation [0.05]
   
   Returns:
        r (real): correlation between x and y 
   
        signif (int): true  if significant; false otherwise 
   
        p (real): Fraction of time series with higher correlation coefficents than observed (approximates the p-value). 
   
           Note that signif = True if and only if p <= alpha.
   
2017-07-18 15:50:17,492 [WARNING] sphinx.util.docutils: Enumerated list ends without a blank line; unexpected unindent.
2017-07-18 15:50:17,526 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py:docstring of pyleoclim.Stats.simpleStats:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:17,541 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py:docstring of pyleoclim.Stats.corrsig:4: (WARNING/2) Enumerated list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:17,557 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "statistics functions"...>>,)
2017-07-18 15:50:17,596 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 88%] [35mSummaryPlots[39;49;00m                                          
2017-07-18 15:50:17,614 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x112335fd0>, 'SummaryPlots')
2017-07-18 15:50:17,634 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('SummaryPlots', ['Summary Plots\n==============\n\nThis module handles some basic return for the su
2017-07-18 15:50:17,651 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:8: input:
.. autofunction:: pyleoclim.SummaryPlots.getMetadata

2017-07-18 15:50:17,672 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import getMetadata
2017-07-18 15:50:17,698 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-18 15:50:17,733 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-18 15:50:17,760 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getMetadata')
2017-07-18 15:50:17,778 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getMetadata at 0x1244e2f28>
2017-07-18 15:50:17,843 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.getMetadata', <function getMetadata at 0x1244e2f28>, {}, ['Get 
2017-07-18 15:50:17,864 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getMetadata(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary metadata to be printed out automatically
   
   Args:
       timeseries: a specific timeseries object. 
       
   Returns:
       A dictionary containing the following metadata:
   
       archiveType 
   
       Authors (if more than 2, replace by et al. 
   
       PublicationYear 
   
       Publication DOI 
   
       Variable Name 
   
       Units 
   
       Climate Interpretation 
   
       Calibration Equation 
   
       Calibration References 
   
       Calibration Notes 
   
       
   
2017-07-18 15:50:17,887 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:10: input:
.. autofunction:: pyleoclim.SummaryPlots.TsData

2017-07-18 15:50:17,912 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import TsData
2017-07-18 15:50:17,942 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-18 15:50:17,962 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-18 15:50:17,985 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'TsData')
2017-07-18 15:50:18,008 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function TsData at 0x1244eb048>
2017-07-18 15:50:18,028 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.TsData', <function TsData at 0x1244eb048>, {}, ['Get the PaleoD
2017-07-18 15:50:18,079 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: TsData(timeseries, x_axis='')
   :module: pyleoclim.SummaryPlots

   Get the PaleoData with age/depth information
       
   Get the necessary information for the TS plots/necessary to allow for
   axes specification
   
   Args:
       timeseries: a single timeseries object. 
           By default, will prompt the user
       x-axis (str): The representation against which to plot the 
           paleo-data. Options are "age", "year", and "depth". 
           Default is to let the system choose if only one available 
           or prompt the user.
   Returns:
       x - the x-valus 
   
       y - the y-values 
   
       archiveType - the archiveType (for plot settings) 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       label - the results of the x-axis query. Either depth, year, or age
       
   
2017-07-18 15:50:18,121 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:12: input:
.. autofunction:: pyleoclim.SummaryPlots.agemodelData
2017-07-18 15:50:18,136 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import agemodelData
2017-07-18 15:50:18,150 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-18 15:50:18,169 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-18 15:50:18,193 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'agemodelData')
2017-07-18 15:50:18,224 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function agemodelData at 0x1244eb0d0>
2017-07-18 15:50:18,244 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.agemodelData', <function agemodelData at 0x1244eb0d0>, {}, ['Ge
2017-07-18 15:50:18,260 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: agemodelData(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary information for the agemodel plot
   
   Args:
       timeseries: a single timeseries object. By default, will
           prompt the user
   
   Returns:
       depth - the depth values 
   
       age - the age values 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       archiveType - the archiveType (for default plot settings)
   
   
2017-07-18 15:50:18,311 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "summary plots"...>>,)
2017-07-18 15:50:18,334 [INFO] sphinx.util: [01mreading sources... [39;49;00m[100%] [35mTimeseries[39;49;00m                                            
2017-07-18 15:50:18,350 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x112335fd0>, 'Timeseries')
2017-07-18 15:50:18,372 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Timeseries', ['Timeseries Functions\n====================\n\nThis module allows the manipulation o
2017-07-18 15:50:18,390 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:6: input:
.. autofunction:: pyleoclim.Timeseries.bin

2017-07-18 15:50:18,406 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import bin
2017-07-18 15:50:18,420 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 15:50:18,435 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 15:50:18,448 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'bin')
2017-07-18 15:50:18,463 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function bin at 0x1253ebb70>
2017-07-18 15:50:18,525 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.bin', <function bin at 0x1253ebb70>, {}, ['Bin the values', '', '
2017-07-18 15:50:18,541 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: bin(x, y, bin_size='', start='', end='')
   :module: pyleoclim.Timeseries

   Bin the values
   
   Args:
       x (array): the x-axis series.
       y (array): the y-axis series.
       bin_size (float): The size of the bins. Default is the average resolution
       start (float): Where/when to start binning. Default is the minimum
       end (float): When/where to stop binning. Defulat is the maximum
   
   Returns:
       binned_values - the binned output 
   
       bins - the bins (centered on the median, i.e., the 100-200 bin is 150) 
   
       n - number of data points in each bin 
   
       error -  the standard error on the mean in each bin
   
   
2017-07-18 15:50:18,562 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:8: input:
.. autofunction:: pyleoclim.Timeseries.interp

2017-07-18 15:50:18,587 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import interp
2017-07-18 15:50:18,601 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 15:50:18,618 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 15:50:18,632 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interp')
2017-07-18 15:50:18,649 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interp at 0x1253ebc80>
2017-07-18 15:50:18,663 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.interp', <function interp at 0x1253ebc80>, {}, ['Linear interpola
2017-07-18 15:50:18,681 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interp(x, y, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Linear interpolation onto a new x-axis
   
   Args:
       x (array): the x-axis
       y (array): the y-axis
       interp_step (float): the interpolation step. Default is mean resolution.
       start (float): where/when to start the interpolation. Default is min..
       end (float): where/when to stop the interpolation. Defaul is max.
   
   Returns:
       xi - the interpolated x-axis 
   
       interp_values - the interpolated values
    
   
2017-07-18 15:50:18,699 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:10: input:
.. autofunction:: pyleoclim.Timeseries.onCommonAxis

2017-07-18 15:50:18,719 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import onCommonAxis
2017-07-18 15:50:18,736 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 15:50:18,757 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 15:50:18,780 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'onCommonAxis')
2017-07-18 15:50:18,805 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function onCommonAxis at 0x1253ebd08>
2017-07-18 15:50:18,824 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.onCommonAxis', <function onCommonAxis at 0x1253ebd08>, {}, ['Plac
2017-07-18 15:50:18,840 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: onCommonAxis(x1, y1, x2, y2, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Places two timeseries on a common axis
   
   Args:
       x1 (array): x-axis values of the first timeseries
       y1 (array): y-axis values of the first timeseries
       x2 (array): x-axis values of the second timeseries
       y2 (array): y-axis values of the second timeseries
       interp_step (float): The interpolation step. Default is mean resolution
           of lowest resolution series
       start (float): where/when to start. Default is the maximum of the minima of
           the two timeseries
       end (float): Where/when to end. Default is the minimum of the maxima of
           the two timeseries
   
   Returns:
       xi -  the interpolated x-axis 
   
       interp_values1 -  the interpolated y-values for the first timeseries
       interp_values2 - the intespolated y-values for the second timeseries
   
2017-07-18 15:50:18,860 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:50:18,877 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:50:18,917 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:12: input:
.. autofunction:: pyleoclim.Timeseries.standardize
2017-07-18 15:50:18,955 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import standardize
2017-07-18 15:50:18,975 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 15:50:18,998 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 15:50:19,048 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardize')
2017-07-18 15:50:19,064 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardize at 0x1253ebd90>
2017-07-18 15:50:19,086 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.standardize', <function standardize at 0x1253ebd90>, {}, ['Center
2017-07-18 15:50:19,103 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardize(x, scale=1, axis=0, ddof=0, eps=0.001)
   :module: pyleoclim.Timeseries

   Centers and normalizes a given time series. Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed
       mu (real): the mean of the original time series, E[X]
       sig (real): the standard deviation of the original time series, std[X]
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2017-07-18 15:50:19,136 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.onCommonAxis:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:50:19,152 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.onCommonAxis:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:50:19,166 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "timeseries functions"...>>,)
2017-07-18 15:50:19,194 [INFO] sphinx.util: 
2017-07-18 15:50:19,211 [DEBUG] sphinx.application: [app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x112335fd0>,)
2017-07-18 15:50:07,018 [WARNING] sphinx.util.docutils: Literal block expected; none found.
2017-07-18 15:50:19,241 [INFO] sphinx.builders: [01mlooking for now-outdated files... [39;49;00m
2017-07-18 15:50:19,257 [DEBUG] sphinx.application: [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x112335fd0>,)
2017-07-18 15:50:19,275 [INFO] sphinx.builders: none found
2017-07-18 15:50:19,297 [INFO] sphinx.builders: [01mpickling environment... [39;49;00m
2017-07-18 15:50:19,319 [INFO] sphinx.builders: done
2017-07-18 15:50:19,353 [INFO] sphinx.builders: [01mchecking consistency... [39;49;00m
2017-07-18 15:50:19,404 [WARNING] sphinx.environment: document isn't included in any toctree
2017-07-18 15:50:19,484 [WARNING] sphinx.environment: document isn't included in any toctree
2017-07-18 15:50:19,540 [WARNING] sphinx.environment: document isn't included in any toctree
2017-07-18 15:50:19,563 [WARNING] sphinx.environment: document isn't included in any toctree
2017-07-18 15:50:19,593 [WARNING] sphinx.environment: document isn't included in any toctree
2017-07-18 15:50:19,623 [WARNING] sphinx.environment: document isn't included in any toctree
2017-07-18 15:50:19,641 [WARNING] sphinx.environment: document isn't included in any toctree
2017-07-18 15:50:19,661 [WARNING] sphinx.environment: document isn't included in any toctree
2017-07-18 15:50:19,699 [WARNING] sphinx.environment: document isn't included in any toctree
2017-07-18 15:50:19,733 [DEBUG] sphinx.application: [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x112335fd0>,)
2017-07-18 15:50:19,772 [INFO] sphinx.builders: done
2017-07-18 15:50:19,794 [DEBUG] sphinx.builders: docnames to write: Introduction, LipdUtils, Main, Map, Plot, Spectral, Stats, SummaryPlots, Timeseries
2017-07-18 15:50:19,821 [INFO] sphinx.builders: [01mpreparing documents... [39;49;00m
2017-07-18 15:50:19,851 [INFO] sphinx.builders: done
2017-07-18 15:50:19,871 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 10%] [32mIntroduction[39;49;00m                                           
2017-07-18 15:50:19,888 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "pyleoclim"...>>, 'Introduction')
2017-07-18 15:50:20,090 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 20%] [32mLipdUtils[39;49;00m                                              
2017-07-18 15:50:20,143 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "lipd utilities"...>>, 'LipdUtils')
2017-07-18 15:50:20,198 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 30%] [32mMain[39;49;00m                                                   
2017-07-18 15:50:20,230 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "main functions"...>>, 'Main')
2017-07-18 15:50:20,345 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 40%] [32mMap[39;49;00m                                                    
2017-07-18 15:50:20,392 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "mapping functions"...>>, 'Map')
2017-07-18 15:50:20,534 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 50%] [32mPlot[39;49;00m                                                   
2017-07-18 15:50:20,561 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "plotting functions"...>>, 'Plot')
2017-07-18 15:50:20,694 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 60%] [32mSpectral[39;49;00m                                               
2017-07-18 15:50:20,719 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "spectral functions"...>>, 'Spectral')
2017-07-18 15:50:20,825 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 70%] [32mStats[39;49;00m                                                  
2017-07-18 15:50:20,863 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "statistics functions"...>>, 'Stats')
2017-07-18 15:50:20,959 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 80%] [32mSummaryPlots[39;49;00m                                           
2017-07-18 15:50:20,992 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "summary plots"...>>, 'SummaryPlots')
2017-07-18 15:50:21,056 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 90%] [32mTimeseries[39;49;00m                                             
2017-07-18 15:50:21,078 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "timeseries functions"...>>, 'Timeseries')
2017-07-18 15:50:21,145 [INFO] sphinx.util: [01mwriting output... [39;49;00m[100%] [32mindex[39;49;00m                                                  
2017-07-18 15:50:21,167 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <comment...><section "welcome to pyleoclim's documentati ...>, 'index')
2017-07-18 15:50:21,207 [INFO] sphinx.util: 
2017-07-18 15:50:21,224 [INFO] sphinx.builders.html: [01mgenerating indices...[39;49;00m
2017-07-18 15:50:21,244 [INFO] sphinx.builders.html:  genindex
2017-07-18 15:50:21,300 [INFO] sphinx.builders.html: 
2017-07-18 15:50:21,315 [DEBUG] sphinx.application: [app] emitting event: 'html-collect-pages'()
2017-07-18 15:50:21,338 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 12%] [34;01mpyleoclim.Spectral[39;49;00m                           
2017-07-18 15:50:21,953 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 25%] [34;01mpyleoclim[39;49;00m                                    
2017-07-18 15:50:22,600 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 37%] [34;01mpyleoclim.LipdUtils[39;49;00m                          
2017-07-18 15:50:22,678 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 50%] [34;01mpyleoclim.Plot[39;49;00m                               
2017-07-18 15:50:22,813 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 62%] [34;01mpyleoclim.Map[39;49;00m                                
2017-07-18 15:50:22,914 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 75%] [34;01mpyleoclim.Timeseries[39;49;00m                         
2017-07-18 15:50:23,004 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 87%] [34;01mpyleoclim.Stats[39;49;00m                              
2017-07-18 15:50:23,096 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[100%] [34;01mpyleoclim.SummaryPlots[39;49;00m                       
2017-07-18 15:50:23,204 [INFO] sphinx.util: 
2017-07-18 15:50:23,257 [INFO] sphinx.builders.html: [01mwriting additional pages...[39;49;00m
2017-07-18 15:50:23,280 [INFO] sphinx.builders.html:  search
2017-07-18 15:50:23,331 [INFO] sphinx.builders.html: 
2017-07-18 15:50:23,356 [INFO] sphinx.builders.html: [01mcopying static files... [39;49;00m
2017-07-18 15:50:23,648 [INFO] sphinx.builders.html: done
2017-07-18 15:50:23,673 [INFO] sphinx.builders.html: [01mcopying extra files... [39;49;00m
2017-07-18 15:50:23,702 [INFO] sphinx.builders.html: done
2017-07-18 15:50:23,734 [INFO] sphinx.builders.html: [01mdumping search index in English (code: en) ... [39;49;00m
2017-07-18 15:50:23,814 [INFO] sphinx.builders.html: done
2017-07-18 15:50:23,858 [INFO] sphinx.builders.html: [01mdumping object inventory... [39;49;00m
2017-07-18 15:50:23,924 [INFO] sphinx.builders.html: done
2017-07-18 15:50:23,960 [INFO] sphinx.application: [01mbuild succeeded, 10 warnings.[39;49;00m
2017-07-18 15:50:23,994 [DEBUG] sphinx.application: [app] emitting event: 'build-finished'(None,)
2017-07-18 15:53:40,336 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:53:40,337 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'createDir')
2017-07-18 15:53:40,352 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function createDir at 0x12302c950>
2017-07-18 15:53:40,393 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.createDir', <function createDir at 0x12302c950>, {}, ['Create a ne
2017-07-18 15:53:40,407 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: createDir(path, foldername)
   :module: pyleoclim.LipdUtils

   Create a new folder in a working directory
   
   Create a new folder in a working directory to save outputs from Pyleoclim.
   
   Args:
       path(str): the path to the new folder.
       foldername(str): the name of the folder to be created
       
   Returns:
       newdir - the full path to the new directory
       
   
2017-07-18 15:53:40,475 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:11: input:
.. autofunction:: pyleoclim.LipdUtils.saveFigure

2017-07-18 15:53:40,494 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import saveFigure
2017-07-18 15:53:40,508 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:53:40,522 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:53:40,540 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'saveFigure')
2017-07-18 15:53:40,553 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function saveFigure at 0x12302c9d8>
2017-07-18 15:53:40,568 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.saveFigure', <function saveFigure at 0x12302c9d8>, {}, ['Save a fi
2017-07-18 15:53:40,582 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: saveFigure(name, format='eps', dir='')
   :module: pyleoclim.LipdUtils

   Save a figure
   
   Save the figure in the directory. If not given, creates a folder in the 
   current working directory. 
   
   Args:
       name (str): name of the file
       format (str): One of the file extensions supported by the active 
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       dir (str): the name of the folder in the LiPD working directory.
           If not provided, creates a default folder called 'figures'.
           
   
2017-07-18 15:53:40,600 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:40,615 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:40,639 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:16: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateLipds

2017-07-18 15:53:40,653 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateLipds
2017-07-18 15:53:40,668 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:53:40,683 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:53:40,702 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateLipds')
2017-07-18 15:53:40,716 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateLipds at 0x12302ca60>
2017-07-18 15:53:40,735 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateLipds', <function enumerateLipds at 0x12302ca60>, {}, ['E
2017-07-18 15:53:40,752 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateLipds(lipds)
   :module: pyleoclim.LipdUtils

   Enumerate the LiPD files loaded in the workspace
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   
2017-07-18 15:53:40,772 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:18: input:
.. autofunction:: pyleoclim.LipdUtils.promptForLipd

2017-07-18 15:53:40,786 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForLipd
2017-07-18 15:53:40,799 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:53:40,813 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:53:40,831 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForLipd')
2017-07-18 15:53:40,848 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForLipd at 0x12302cae8>
2017-07-18 15:53:40,861 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForLipd', <function promptForLipd at 0x12302cae8>, {}, ['Pro
2017-07-18 15:53:40,876 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForLipd(lipds)
   :module: pyleoclim.LipdUtils

   Prompt for a LiPD file
   
   Ask the user to select a LiPD file from a list
   Use this function in conjunction with enumerateLipds()
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   Returns:
       The index of the LiPD file
       
   
2017-07-18 15:53:40,899 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:23: input:
.. autofunction:: pyleoclim.LipdUtils.promptForVariable

2017-07-18 15:53:40,916 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForVariable
2017-07-18 15:53:40,960 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:53:40,983 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:53:40,999 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForVariable')
2017-07-18 15:53:41,014 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForVariable at 0x12302cb70>
2017-07-18 15:53:41,032 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForVariable', <function promptForVariable at 0x12302cb70>, {
2017-07-18 15:53:41,049 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForVariable()
   :module: pyleoclim.LipdUtils

   Prompt for a specific variable
   
   Ask the user to select the variable they are interested in.
   Use this function in conjunction with readHeaders() or getTSO()
   
   Returns:
       The index of the variable
       
   
2017-07-18 15:53:41,069 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:25: input:
.. autofunction:: pyleoclim.LipdUtils.xAxisTs

2017-07-18 15:53:41,087 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import xAxisTs
2017-07-18 15:53:41,102 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:53:41,116 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:53:41,135 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'xAxisTs')
2017-07-18 15:53:41,153 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function xAxisTs at 0x12302cbf8>
2017-07-18 15:53:41,171 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.xAxisTs', <function xAxisTs at 0x12302cbf8>, {}, ['Prompt the user
2017-07-18 15:53:41,199 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: xAxisTs(timeseries)
   :module: pyleoclim.LipdUtils

   Prompt the user to choose a x-axis representation for the timeseries.
   
   Args:
       timeseries: a timeseries object
       
   Returns:
       x_axis - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"
       
   
2017-07-18 15:53:41,222 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:27: input:
.. autofunction:: pyleoclim.LipdUtils.checkXaxis

2017-07-18 15:53:41,240 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import checkXaxis
2017-07-18 15:53:41,256 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:53:41,272 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:53:41,287 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'checkXaxis')
2017-07-18 15:53:41,301 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function checkXaxis at 0x12302cc80>
2017-07-18 15:53:41,317 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.checkXaxis', <function checkXaxis at 0x12302cc80>, {}, ['Check tha
2017-07-18 15:53:41,331 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: checkXaxis(timeseries, x_axis='')
   :module: pyleoclim.LipdUtils

   Check that a x-axis is present for the timeseries
   
   Args:
       timeseries : a timeseries
       x_axis (str) : the x-axis representation, either depth, age or year
       
   Returns:
       x - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"    
   
   
2017-07-18 15:53:41,356 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:32: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateTs

2017-07-18 15:53:41,373 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateTs
2017-07-18 15:53:41,387 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:53:41,405 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:53:41,426 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateTs')
2017-07-18 15:53:41,467 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateTs at 0x12302cd08>
2017-07-18 15:53:41,482 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateTs', <function enumerateTs at 0x12302cd08>, {}, ['Enumera
2017-07-18 15:53:41,497 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Enumerate the available time series objects
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   
2017-07-18 15:53:41,517 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:34: input:
.. autofunction:: pyleoclim.LipdUtils.getTs

2017-07-18 15:53:41,532 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getTs
2017-07-18 15:53:41,550 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:53:41,567 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:53:41,585 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getTs')
2017-07-18 15:53:41,601 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getTs at 0x12302cd90>
2017-07-18 15:53:41,614 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getTs', <function getTs at 0x12302cd90>, {}, ['Get a specific time
2017-07-18 15:53:41,627 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Get a specific timeseries object from a dictionary of timeseries
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   Returns:
       A single timeseries object 
       
   
2017-07-18 15:53:41,649 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:39: input:
.. autofunction:: pyleoclim.LipdUtils.LipdToOntology
2017-07-18 15:53:41,668 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import LipdToOntology
2017-07-18 15:53:41,685 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 15:53:41,700 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 15:53:41,714 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'LipdToOntology')
2017-07-18 15:53:41,729 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function LipdToOntology at 0x12302ce18>
2017-07-18 15:53:41,745 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.LipdToOntology', <function LipdToOntology at 0x12302ce18>, {}, ['s
2017-07-18 15:53:41,764 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: LipdToOntology(archiveType)
   :module: pyleoclim.LipdUtils

   standardize archiveType
   
   Transform the archiveType from their LiPD name to their ontology counterpart
   
   Args:
       archiveType (STR): name of the archiveType from the LiPD file
       
   Returns:
       archiveType according to the ontology
       
   
2017-07-18 15:53:41,796 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:41,815 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:41,835 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "lipd utilities"...>>,)
2017-07-18 15:53:41,875 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 30%] [35mMain[39;49;00m                                                  
2017-07-18 15:53:41,889 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110dbbf98>, 'Main')
2017-07-18 15:53:41,908 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Main', ['Main Functions\n==============\n\n\nUsing Pyleoclim with a LiPD file\n"""""""""""""""""""
2017-07-18 15:53:41,938 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:27: input:
.. autofunction:: pyleoclim.readLipd
2017-07-18 15:53:41,972 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import readLipd
2017-07-18 15:53:41,988 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:42,004 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:42,019 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'readLipd')
2017-07-18 15:53:42,034 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function readLipd at 0x12302cea0>
2017-07-18 15:53:42,350 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.readLipd', <function readLipd at 0x12302cea0>, {}, ['Read Lipd files into a 
2017-07-18 15:53:42,364 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: readLipd(usr_path='')
   :module: pyleoclim

   Read Lipd files into a dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Sets the dictionary as global variable so that it doesn't have to be provided
   as an argument for every function.
   
   Args:
       usr_path (str): The path to a directory or a single file. (Optional argument)
       
   Returns:
       lipd_dict - a dictionary containing the LiPD library
   
   
2017-07-18 15:53:42,383 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: input:
.. autofunction:: pyleoclim.extractTs

2017-07-18 15:53:42,399 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import extractTs
2017-07-18 15:53:42,416 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:42,437 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:42,452 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'extractTs')
2017-07-18 15:53:42,467 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function extractTs at 0x124005ea0>
2017-07-18 15:53:42,485 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.extractTs', <function extractTs at 0x124005ea0>, {}, ['Extract timeseries di
2017-07-18 15:53:42,505 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: extractTs(lipds=None)
   :module: pyleoclim

   Extract timeseries dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Set the dictionary as a global variable so that it doesn't have to be
   provided as an argument for every function. 
   
   Args:
       lipds (dict): A dictionary of LiPD files obtained through the 
       readLipd function
   
   Returns:
       ts_list - A list of timeseries object
   
   
2017-07-18 15:53:42,541 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:32: input:
.. autofunction:: pyleoclim.mapAllArchive

2017-07-18 15:53:42,557 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapAllArchive
2017-07-18 15:53:42,571 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:42,586 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:42,603 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAllArchive')
2017-07-18 15:53:42,621 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAllArchive at 0x124005f28>
2017-07-18 15:53:42,639 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapAllArchive', <function mapAllArchive at 0x124005f28>, {}, ['Map all the a
2017-07-18 15:53:42,653 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAllArchive(lipds='', markersize=50, background='shadedrelief', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map all the available records loaded into the workspace by archiveType.
   
   Map of all the records into the workspace by archiveType.
       Uses the default color palette. Enter pyleoclim.plot_default for detail.
   
   Args:
       lipds (dict): A dictionary of LiPD files. (Optional)
       markersize (int): The size of the markers. Default is 50
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
       saveFig (bool): Default is to not save the figure
       dir (str): The absolute path of the directory in which to save the
           figure. If not provided, creates a default folder called 'figures'
           in the LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
2017-07-18 15:53:42,671 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:42,684 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:42,699 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:42,713 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:42,736 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:34: input:
.. autofunction:: pyleoclim.mapLipd

2017-07-18 15:53:42,753 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapLipd
2017-07-18 15:53:42,768 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:42,783 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:42,798 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapLipd')
2017-07-18 15:53:42,813 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapLipd at 0x124008048>
2017-07-18 15:53:42,833 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapLipd', <function mapLipd at 0x124008048>, {}, ['Create a Map for a single
2017-07-18 15:53:42,848 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapLipd(timeseries='', countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='default', figsize=[4, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Create a Map for a single record
   
   Orthographic projection map of a single record.
   
   Args:
       timeseries: a LiPD timeseries object. Will prompt for one if not given
       countries (bool): Draws the country borders. Default is on (True).
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders.
           Default is off (False)
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief
       scale (float): useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): default is 50
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-18 15:53:42,864 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:42,878 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:42,894 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:53:42,908 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:42,928 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:42,944 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:42,970 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:43,004 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:38: input:
.. autofunction:: pyleoclim.plotTs

2017-07-18 15:53:43,038 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotTs
2017-07-18 15:53:43,056 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:43,071 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:43,086 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotTs')
2017-07-18 15:53:43,112 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotTs at 0x1240080d0>
2017-07-18 15:53:43,145 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.plotTs', <function plotTs at 0x1240080d0>, {}, ['Plot a single time series.'
2017-07-18 15:53:43,175 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotTs(timeseries='', x_axis='', markersize=50, marker='default', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Plot a single time series.
   
   Args:
       A timeseries: By default, will prompt the user for one.
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       markersize (int): default is 50.
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure.
   
   
2017-07-18 15:53:43,205 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:43,238 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:43,253 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:43,270 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:43,286 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:43,306 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:43,347 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:40: input:
.. autofunction:: pyleoclim.histTs

2017-07-18 15:53:43,387 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import histTs
2017-07-18 15:53:43,405 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:43,424 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:43,448 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'histTs')
2017-07-18 15:53:43,469 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function histTs at 0x124008158>
2017-07-18 15:53:43,487 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.histTs', <function histTs at 0x124008158>, {}, ['Plot a univariate distribut
2017-07-18 15:53:43,505 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: histTs(timeseries='', bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'Rug'}, fit_kws={'label': 'Fit'}, color='default', vertical=False, norm_hist=True, figsize=[5, 5], saveFig=False, format='eps', dir='')
   :module: pyleoclim

   Plot a univariate distribution of the PaleoData values
   
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the
   seaborn kdeplot() and rugplot() functions. It can also fit
   scipy.stats distributions and plot the estimated PDF over the data.
   
   Args:
       timeseries: A timeseries. By default, will prompt the user for one.
       bins (int): Specification of hist bins following matplotlib(hist),
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning
           a tuple that can be passed to a pdf method of positional
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in. Default is to use the default paletter for each
           archive type.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or
           fitted density is plotted
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns
       fig - The figure
   
   
2017-07-18 15:53:43,529 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:43,554 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:43,579 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:43,606 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:43,625 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:53:43,646 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:43,660 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:43,679 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:43,693 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:43,713 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:48: input:
.. autofunction:: pyleoclim.summaryTs

2017-07-18 15:53:43,729 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import summaryTs
2017-07-18 15:53:43,749 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:43,777 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:43,799 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'summaryTs')
2017-07-18 15:53:43,815 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function summaryTs at 0x1240081e0>
2017-07-18 15:53:43,835 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.summaryTs', <function summaryTs at 0x1240081e0>, {}, ['Basic summary plot', 
2017-07-18 15:53:43,854 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: summaryTs(timeseries='', x_axis='', saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Basic summary plot
   
   Plots the following information: the time series, a histogram of
   the PaleoData_values, location map, spectral density using the wwz 
   method, and metadata about the record.
   
   Args:
       timeseries: a timeseries object. By default, will prompt for one
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-18 15:53:43,874 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:43,891 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:43,907 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:43,980 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:44,003 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:53: input:
.. autofunction:: pyleoclim.statsTs

2017-07-18 15:53:44,023 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import statsTs
2017-07-18 15:53:44,055 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:44,079 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:44,098 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'statsTs')
2017-07-18 15:53:44,113 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function statsTs at 0x124008268>
2017-07-18 15:53:44,136 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.statsTs', <function statsTs at 0x124008268>, {}, ['Calculate simple statisti
2017-07-18 15:53:44,164 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: statsTs(timeseries='')
   :module: pyleoclim

   Calculate simple statistics of a timeseries
   
   Args:
       timeseries: sytem will prompt for one if not given
   
   Returns:
       the mean, median, min, max, standard deviation and the
       inter-quartile range (IQR) of a timeseries.
   
   Examples:
       >>> mean, median, min_, max_, std, IQR = pyleo.statsTs(timeseries)
   
   
2017-07-18 15:53:44,202 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:55: input:
.. autofunction:: pyleoclim.corrSigTs

2017-07-18 15:53:44,217 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import corrSigTs
2017-07-18 15:53:44,231 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:44,250 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:44,269 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrSigTs')
2017-07-18 15:53:44,285 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrSigTs at 0x1240082f0>
2017-07-18 15:53:44,300 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.corrSigTs', <function corrSigTs at 0x1240082f0>, {}, ['Estimates the signifi
2017-07-18 15:53:44,314 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrSigTs(timeseries1='', timeseries2='', x_axis='', interp_step='', start='', end='', nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim

   Estimates the significance of correlations between non IID timeseries.
   
   Function written by. F. Zhu.
   
   Args:
       timeseries1, timeseries2: timeseries object. Default is blank.
       x-axis (str): The representation against which to express the
           paleo-data. Options are "age", "year", and "depth".
           Default is to let the system choose if only one available
           or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start time/age/depth. Default is the maximum of
           the minima of the two timeseries
       end (float): End time/age/depth. Default is the minimum of the
           maxima of the two timeseries
       nsim (int): the number of simulations. Default is 1000
       method (str): method use to estimate the correlation and significance.
           Available methods include:
               - 'ttest': T-test where the degrees of freedom are corrected for
               the effect of serial correlation 
   
               - 'isopersistant': AR(1) modeling of the two timeseries 
   
               - 'isospectral' (default): phase randomization of original
               inputs.
           The T-test is parametric test, hence cheap but usually wrong
           except in idyllic circumstances.
           The others are non-parametric, but their computational
           requirements scales with nsim.
       alpha (float): significance level for critical value estimation. Default is 0.05
   
   Returns:
       r (float) - correlation between the two timeseries 
   
       sig (bool) -  Returns True if significant, False otherwise 
   
       p (real) - the p-value
   
   
2017-07-18 15:53:44,330 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:44,350 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:44,367 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:44,382 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:44,399 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:53:44,416 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:44,435 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 15:53:44,460 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 15:53:44,474 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:53:44,491 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:44,510 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:61: input:
.. autofunction:: pyleoclim.binTs

2017-07-18 15:53:44,523 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import binTs
2017-07-18 15:53:44,537 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:44,554 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:44,571 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'binTs')
2017-07-18 15:53:44,586 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function binTs at 0x124008378>
2017-07-18 15:53:44,610 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.binTs', <function binTs at 0x124008378>, {}, ['Bin the paleoData values of t
2017-07-18 15:53:44,623 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: binTs(timeseries='', x_axis='', bin_size='', start='', end='')
   :module: pyleoclim

   Bin the paleoData values of the timeseries
   
   Args:
       timeseries. By default, will prompt the user for one.
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system  choose if only one available or prompt the user.
       bin_size (float): the size of the bins to be used. By default,
           will prompt for one
       start (float): Start time/age/depth. Default is the minimum
       end (float): End time/age/depth. Default is the maximum
   
   Returns:
       binned_values- the binned output,
   
       bins-  the bins (centered on the median, i.e. the 100-200 bin is 150),
   
       n-  number of data points in each bin,
   
       error- the standard error on the mean in each bin
   
   
   
2017-07-18 15:53:44,642 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:44,690 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:44,712 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:53:44,735 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:63: input:
.. autofunction:: pyleoclim.interpTs

2017-07-18 15:53:44,747 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import interpTs
2017-07-18 15:53:44,763 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:44,780 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:44,796 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interpTs')
2017-07-18 15:53:44,810 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interpTs at 0x124008400>
2017-07-18 15:53:44,823 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.interpTs', <function interpTs at 0x124008400>, {}, ['Simple linear interpola
2017-07-18 15:53:44,836 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interpTs(timeseries='', x_axis='', interp_step='', start='', end='')
   :module: pyleoclim

   Simple linear interpolation
   
   Simple linear interpolation of the data using the numpy.interp method
   
   Args:
       timeseries. Default is blank, will prompt for it
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start year/age/depth. Default is the minimum
       end (float): End year/age/depth. Default is the maximum
   
   Returns:
       interp_age - the interpolated age/year/depth according to the end/start
       and time step, 
   
       interp_values - the interpolated values
   
   
2017-07-18 15:53:44,852 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:44,868 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:44,888 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:65: input:
.. autofunction:: pyleoclim.standardizeTs

2017-07-18 15:53:44,903 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import standardizeTs
2017-07-18 15:53:44,918 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:44,934 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:44,948 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardizeTs')
2017-07-18 15:53:44,965 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardizeTs at 0x124008488>
2017-07-18 15:53:44,984 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.standardizeTs', <function standardizeTs at 0x124008488>, {}, ['Centers and n
2017-07-18 15:53:44,999 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardizeTs(timeseries='', scale=1, ddof=0, eps=0.001)
   :module: pyleoclim

   Centers and normalizes the paleoData values of a  given time series.
   
   Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       - z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed 
   
       - mu (real): the mean of the original time series, E[X] 
   
       - sig (real): the standard deviation of the original time series, std[X] 
   
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2017-07-18 15:53:45,022 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:69: input:
.. autofunction:: pyleoclim.wwzTs

2017-07-18 15:53:45,036 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import wwzTs
2017-07-18 15:53:45,051 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 15:53:45,067 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 15:53:45,087 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwzTs')
2017-07-18 15:53:45,103 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwzTs at 0x124008598>
2017-07-18 15:53:45,120 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.wwzTs', <function wwzTs at 0x124008598>, {}, ['Weigthed wavelet Z-transform 
2017-07-18 15:53:45,133 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwzTs(timeseries='', wwz=False, psd=True, wwz_default=True, psd_default=True, wwaplot_default=True, psdplot_default=True, fig=True, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Weigthed wavelet Z-transform analysis
   
   Wavelet analysis for unevenly spaced data adapted from Foster et al. (1996)
   
   Args:
       timeseries (dict): A LiPD timeseries object (Optional, will prompt for one.)
       wwz (bool): If True, will perform wavelet analysis
       psd (bool): If True, will inform the power spectral density of the timeseries
       wwz_default: If True, will use the following default parameters:
           
           wwz_default = {'tau':None,'freqs':None,'c':1/(8*np.pi**2),'Neff':3,'nMC':200,
                              'nproc':8,'detrend':'no','method':'Kirchner_f2py'}.
               
           Modify the values for specific keys to change the default behavior.
               
       psd_default: If True, will use the following default parameters:
           
           psd_default = {'tau':None,
                         'freqs': None,
                         'c':1e-3,
                         'nproc':8,
                         'nMC':200,
                         'detrend':'no',
                         'Neff':3,
                         'anti_alias':False,
                         'avgs':2,
                         'method':'Kirchner_f2py'}
           
           Modify the values for specific keys to change the default behavior.
           
       wwaplot_default: If True, will use the following default parameters:
           
           wwaplot_default={'Neff':3,
                                'AR1_q':AR1_q,
                                'coi':coi,
                                'levels':None,
                                'tick_range':None,
                                'yticks':None,
                                'ylim':None,
                                'xticks':None,
                                'xlabels':None,
                                'figsize':[20,8],
                                'clr_map':'OrRd',
                                'cbar_drawedges':False,
                                'cone_alpha':0.5,
                                'plot_signif':True,
                                'signif_style':'contour',
                                'plot_cone':True}
           
           Modify the values for specific keys to change the default behavior.
       psdplot_default: If True, will use the following default parameters:
           
           psdplot_default={'lmstyle':None,
                            'linewidth':None,
                            'xticks':None,
                            'xlim':None,
                            'ylim':None,
                            'figsize':[20,8],
                            'label':'PSD',
                            'plot_ar1':True,
                            'psd_ar1_q95':psd_ar1_q95,
                            'psd_ar1_color':sns.xkcd_rgb["pale red"]}
           
           Modify the values for specific keys to change the default behavior.
           
       fig (bool): If True, plots the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       
   Returns:
       dict_out (dict): A dictionary of outputs. 
           
           For wwz: 
           
           - wwa (array): The weights wavelet amplitude 
       
           - AR1_q (array): AR1 simulations 
       
           - coi (array): cone of influence 
       
           - freqs (array): vector for frequencies 
       
           - tau (array): the evenly-spaced time points, namely the time 
           shift for wavelet analysis. 
       
           - Neffs (array): The matrix of effective number of points in the
           time-scale coordinates.
       
           - coeff (array): The wavelet transform coefficients
       
           For psd: 
           
           - psd (array): power spectral density 
       
           - freqs (array): vector of frequency 
       
           - psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes 
       
       fig: The figure
        
       References:
           Foster, G. (1996). Wavelets for period analysis of unevenly 
           sampled time series. The Astronomical Journal, 112(4), 1709-1729.
       
       Examples:
           To run both wwz and psd: 
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(wwz=True)
           
           Note: This will return a single figure with wwa and psd 
   
           
           To change a default behavior:
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(psd_default = {'nMC':1000}) 
          
   
2017-07-18 15:53:45,153 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:45,168 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:45,190 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:45,209 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 15:53:45,226 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 15:53:45,306 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,322 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,338 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,358 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,383 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,409 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,430 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,444 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:19: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,460 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,473 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,493 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:26: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,506 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,522 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,537 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,551 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,567 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:15: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,584 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,604 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,618 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,635 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,648 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,662 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,677 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:26: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,693 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,712 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:31: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,729 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:33: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,744 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,759 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,774 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:14: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,790 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,809 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,823 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,841 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,857 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,872 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:16: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,886 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:18: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,905 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:20: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,921 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:25: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,936 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:26: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,950 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:30: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,963 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:45,977 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:45,994 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:10: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,013 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:46,033 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,052 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:51: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,070 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:69: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:46,087 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:71: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,105 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:89: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,120 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:92: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,138 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "main functions"...>>,)
2017-07-18 15:53:46,173 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 40%] [35mMap[39;49;00m                                                   
2017-07-18 15:53:46,187 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110dbbf98>, 'Map')
2017-07-18 15:53:46,211 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Map', ['Mapping Functions\n=================\n\nThis module uses the Basemap package for mapping. 
2017-07-18 15:53:46,226 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:6: input:
.. autofunction:: pyleoclim.Map.mapAll

2017-07-18 15:53:46,243 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapAll
2017-07-18 15:53:46,258 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2017-07-18 15:53:46,271 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2017-07-18 15:53:46,285 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAll')
2017-07-18 15:53:46,301 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAll at 0x10ee71e18>
2017-07-18 15:53:46,357 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapAll', <function mapAll at 0x10ee71e18>, {}, ['Map the location of all
2017-07-18 15:53:46,372 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAll(lat, lon, criteria, projection='robin', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=False, counties=False, rivers=False, states=False, figsize=[10, 4], ax=None, background='none', scale=0.5, palette='', markersize=50)
   :module: pyleoclim.Map

   Map the location of all lat/lon according to some criteria 
   
   Map the location of all lat/lon according to some criteria. The choice of 
   plotting color/marker is passed through palette according to unique 
   criteria (e.g., record name, archive type, proxy observation type).
   
   Args:
       lat (list): a list of latitude.
       lon (list): a list of longitude.
       criteria (list): a list of criteria for plotting purposes. For instance,
           a map by the types of archive present in the dataset or proxy
           observations.
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       palette (dict): A dictionary of plotting color/marker by criteria. The
           keys should correspond to ***unique*** criteria with a list of 
           associated values. The list should be in the format 
           ['color', 'marker'].
       markersize (int): The size of the marker.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
       
   Returns:
       The figure       
   
2017-07-18 15:53:46,387 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:46,426 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:46,458 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:53:46,479 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:46,494 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:46,521 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:53:46,542 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:8: input:
.. autofunction:: pyleoclim.Map.mapOne
2017-07-18 15:53:46,558 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapOne
2017-07-18 15:53:46,574 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2017-07-18 15:53:46,591 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2017-07-18 15:53:46,612 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapOne')
2017-07-18 15:53:46,632 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapOne at 0x12302c8c8>
2017-07-18 15:53:46,649 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapOne', <function mapOne at 0x12302c8c8>, {}, ['Map one location on the
2017-07-18 15:53:46,662 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapOne(lat, lon, projection='ortho', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='ro', figsize=[4, 4], ax=None)
   :module: pyleoclim.Map

   Map one location on the globe
   
   Args:
       lat (float): a float number representing latitude
       lon (float): a float number representing longitude
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): The size of the marker.
       marker (str or list): color and type of marker. 
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
   
   
2017-07-18 15:53:46,686 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:46,718 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:46,740 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:53:46,757 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:46,771 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:46,788 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:53:46,821 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:46,839 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:13: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,858 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,872 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:28: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:46,888 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:29: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,905 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:38: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,923 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:7: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:46,939 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,955 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,970 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:21: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:46,984 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:22: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:46,997 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:27: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:47,016 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "mapping functions"...>>,)
2017-07-18 15:53:47,041 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 50%] [35mPlot[39;49;00m                                                  
2017-07-18 15:53:47,056 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110dbbf98>, 'Plot')
2017-07-18 15:53:47,074 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Plot', ['Plotting Functions\n==================\n\n.. autofunction:: pyleoclim.Plot.plot\n\n.. aut
2017-07-18 15:53:47,091 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:4: input:
.. autofunction:: pyleoclim.Plot.plot

2017-07-18 15:53:47,106 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot
2017-07-18 15:53:47,127 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2017-07-18 15:53:47,152 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2017-07-18 15:53:47,167 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot')
2017-07-18 15:53:47,180 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot at 0x1230371e0>
2017-07-18 15:53:47,212 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot', <function plot at 0x1230371e0>, {}, ['Make a 2-D plot', '', 'Arg
2017-07-18 15:53:47,231 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot(x, y, markersize=50, marker='ro', x_label='', y_label='', title='', figsize=[10, 4], ax=None)
   :module: pyleoclim.Plot

   Make a 2-D plot
   
   Args:
       x (numpy array): a 1xn numpy array of values for the x-axis
       y (numpy array): a 1xn numpy array for the y-axis
       markersize (int): the size of the marker
       marker (string or list): color and shape of the marker
       x_axis_label (str): the label for the x-axis
       y_axis_label (str): the label for the y-axis
       title (str): the title for the plot
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
           
   Return:
       The figure       
   
   
2017-07-18 15:53:47,252 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: input:
.. autofunction:: pyleoclim.Plot.plot_hist
2017-07-18 15:53:47,267 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot_hist
2017-07-18 15:53:47,281 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2017-07-18 15:53:47,298 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2017-07-18 15:53:47,312 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_hist')
2017-07-18 15:53:47,332 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_hist at 0x123037268>
2017-07-18 15:53:47,350 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot_hist', <function plot_hist at 0x123037268>, {}, ['Plot a univariat
2017-07-18 15:53:47,365 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_hist(y, bins=None, hist=True, label='', kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'rug'}, fit_kws={'label': 'fit'}, color='0.7', vertical=False, norm_hist=True, figsize=[5, 5], ax=None)
   :module: pyleoclim.Plot

   Plot a univariate distribution of the PaleoData values
           
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the 
   seaborn kdeplot() and rugplot() functions. It can also fit 
   scipy.stats distributions and plot the estimated PDF over the data.
       
   Args:
       y (array): nx1 numpy array. No missing values allowed 
       bins (int): Specification of hist bins following matplotlib(hist), 
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram 
       label (str): The label for the axis
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning 
           a tuple that can be passed to a pdf method of positional 
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for 
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or 
           fitted density is plotted
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
   
   Returns
      fig - The figure
   
2017-07-18 15:53:47,391 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:47,411 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:47,459 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:47,497 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:47,529 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 15:53:47,548 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:47,568 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:47,591 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:47,607 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:47,622 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:17: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:47,652 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:19: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:47,679 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:47,705 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:26: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:47,729 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:47,752 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "plotting functions"...>>,)
2017-07-18 15:53:47,779 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 60%] [35mSpectral[39;49;00m                                              
2017-07-18 15:53:47,801 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110dbbf98>, 'Spectral')
2017-07-18 15:53:47,829 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Spectral', ['Spectral Functions\n==================\n\nThis module allows analysis in the frequenc
2017-07-18 15:53:47,866 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:6: input:
.. autofunction:: pyleoclim.Spectral.ar1_fit

2017-07-18 15:53:47,885 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_fit
2017-07-18 15:53:47,906 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:53:47,923 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:53:47,951 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_fit')
2017-07-18 15:53:47,967 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_fit at 0x123037378>
2017-07-18 15:53:48,461 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_fit', <function ar1_fit at 0x123037378>, {}, ['Returns the lag-
2017-07-18 15:53:48,518 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_fit(ys, ts=None, detrend='no')
   :module: pyleoclim.Spectral

   Returns the lag-1 autocorrelation from ar1 fit OR persistence from tauest.
   
   Args:
       ys (array): the time series
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
   
   Returns:
       g (float): lag-1 autocorrelation coefficient (for evenly-spaced time series)
       OR estimated persistence (for unevenly-spaced time series)
   
2017-07-18 15:53:48,535 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:48,556 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:8: input:
.. autofunction:: pyleoclim.Spectral.ar1_sim

2017-07-18 15:53:48,571 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_sim
2017-07-18 15:53:48,586 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:53:48,601 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:53:48,641 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_sim')
2017-07-18 15:53:48,686 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_sim at 0x123f380d0>
2017-07-18 15:53:48,715 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_sim', <function ar1_sim at 0x123f380d0>, {}, ['Produce p realiz
2017-07-18 15:53:48,735 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_sim(ys, n, p, ts=None, detrend='no')
   :module: pyleoclim.Spectral

   Produce p realizations of an AR1 process of length n with lag-1 autocorrelation g calculated from `ys` and `ts`
   
   Args:
       ys (array): a time series
       n, p (int): dimensions as n rows by p columns
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
   
   Returns:
       red (matrix): n rows by p columns matrix of an AR1 process
   
   
2017-07-18 15:53:48,760 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:48,790 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:10: input:
.. autofunction:: pyleoclim.Spectral.wwz

2017-07-18 15:53:48,816 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz
2017-07-18 15:53:48,836 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:53:48,866 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:53:48,890 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz')
2017-07-18 15:53:48,910 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz at 0x123f38158>
2017-07-18 15:53:48,946 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz', <function wwz at 0x123f38158>, {}, ['Return the weighted wave
2017-07-18 15:53:48,982 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz(ys, ts, tau=None, freqs=None, c=0.012665147955292222, Neff=3, nMC=200, nproc=8, detrend='no', method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the weighted wavelet amplitude (WWA) with phase, AR1_q, and cone of influence, as well as WT coeeficients
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       tau (array): the evenly-spaced time points
       freqs (array): vector of frequency
       c (float): the decay constant, the default value 1/(8*np.pi**2) is good for most of the cases
       Neff (int): effective number of points
       nMC (int): the number of Monte-Carlo simulations
       nproc (int): the number of processes for multiprocessing
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       wwa (array): the weighted wavelet amplitude.
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neffs (array): the matrix of effective number of points in the time-scale coordinates
       coeff (array): the wavelet transform coefficents
   
   
2017-07-18 15:53:49,017 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:49,055 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:49,083 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:12: input:
.. autofunction:: pyleoclim.Spectral.wwz_psd

2017-07-18 15:53:49,116 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz_psd
2017-07-18 15:53:49,150 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:53:49,182 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:53:49,208 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz_psd')
2017-07-18 15:53:49,234 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz_psd at 0x123f381e0>
2017-07-18 15:53:49,253 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz_psd', <function wwz_psd at 0x123f381e0>, {}, ['Return the psd o
2017-07-18 15:53:49,278 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz_psd(ys, ts, freqs=None, tau=None, c=0.001, nproc=8, nMC=200, detrend='no', Neff=3, anti_alias=False, avgs=2, method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the psd of a timeseires directly using wwz method.
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       c (float): the decay constant, the default value 1e-3 is good for most of the cases
       nproc (int): the number of processes for multiprocessing
       nMC (int): the number of Monte-Carlo simulations
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       psd (array): power spectral density
       freqs (array): vector of frequency
       psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes
   
   
2017-07-18 15:53:49,296 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:49,314 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:49,336 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:14: input:
.. autofunction:: pyleoclim.Spectral.plot_wwa

2017-07-18 15:53:49,350 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwa
2017-07-18 15:53:49,372 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:53:49,389 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:53:49,406 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwa')
2017-07-18 15:53:49,444 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwa at 0x123f382f0>
2017-07-18 15:53:49,498 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwa', <function plot_wwa at 0x123f382f0>, {}, ['Plot the wavel
2017-07-18 15:53:49,521 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwa(wwa, freqs, tau, Neff=3, AR1_q=None, coi=None, levels=None, tick_range=None, yticks=None, ylim=None, xticks=None, xlabels=None, figsize=[20, 8], clr_map='OrRd', cbar_drawedges=False, cone_alpha=0.5, plot_signif=False, signif_style='contour', plot_cone=False, ax=None, xlabel='Year', ylabel='Period')
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neff (int): effective number of points
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       levels (array): levels of values to plot
       tick_range (array): levels of ticks to show on the colorbar
       yticks (list): ticks on y-axis
       ylim (list): limitations for y-axis
       xticks (list): ticks on x-axis
       figsize (list): the size for the figure
       clr_map (str): the name of the colormap
       cbar_drawedges (bool): whether to draw edges on the colorbar or not
       cone_alpha (float): the alpha value for the area covered by cone of influence
       plot_signif (bool): plot 95% significant area or not
       signif_style (str): plot 95% significant area with `contour` or `shade`
       plot_cone (bool): plot cone of influence or not
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-18 15:53:49,552 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:16: input:
.. autofunction:: pyleoclim.Spectral.plot_wwadist

2017-07-18 15:53:49,580 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwadist
2017-07-18 15:53:49,601 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:53:49,621 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:53:49,639 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwadist')
2017-07-18 15:53:49,654 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwadist at 0x123f38378>
2017-07-18 15:53:49,669 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwadist', <function plot_wwadist at 0x123f38378>, {}, ['Plot t
2017-07-18 15:53:49,692 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwadist(wwa, ylim=None)
   :module: pyleoclim.Spectral

   Plot the distribution of wwa with the 95% quantile line.
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       ylim (list): limitations for y-axis
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-18 15:53:49,712 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:18: input:
.. autofunction:: pyleoclim.Spectral.plot_psd
2017-07-18 15:53:49,730 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_psd
2017-07-18 15:53:49,744 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 15:53:49,758 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 15:53:49,775 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_psd')
2017-07-18 15:53:49,795 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_psd at 0x123f38400>
2017-07-18 15:53:49,811 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_psd', <function plot_psd at 0x123f38400>, {}, ['Plot the wavel
2017-07-18 15:53:49,827 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_psd(psd, freqs, lmstyle=None, linewidth=None, xticks=None, xlim=None, ylim=None, figsize=[20, 8], label='PSD', plot_ar1=True, psd_ar1_q95=None, psd_ar1_color='#d9544d', ax=None, xlabel='Period', ylabel='Spectral Density')
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       psd (array): power spectral density
       freqs (array): vector of frequency
       xticks (list): ticks on x-axis
       xlim (list): limits for x-axis
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-18 15:53:49,862 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_fit:7: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:49,881 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_sim:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:49,898 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:49,915 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:15: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:49,938 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:12: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:49,959 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:49,984 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "spectral functions"...>>,)
2017-07-18 15:53:50,027 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 70%] [35mStats[39;49;00m                                                 
2017-07-18 15:53:50,045 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110dbbf98>, 'Stats')
2017-07-18 15:53:50,064 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Stats', ['Statistics Functions\n====================\n\n.. autofunction:: pyleoclim.Stats.simpleSt
2017-07-18 15:53:50,086 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Stats.rst:4: input:
.. autofunction:: pyleoclim.Stats.simpleStats

2017-07-18 15:53:50,108 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Stats import simpleStats
2017-07-18 15:53:50,158 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Stats
2017-07-18 15:53:50,208 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Stats' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py'>
2017-07-18 15:53:50,233 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'simpleStats')
2017-07-18 15:53:50,254 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function simpleStats at 0x123f38510>
2017-07-18 15:53:50,378 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Stats.simpleStats', <function simpleStats at 0x123f38510>, {}, ['Computes si
2017-07-18 15:53:50,403 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: simpleStats(y, axis=None)
   :module: pyleoclim.Stats

   Computes simple statistics
   
   Computes the mean, median, min, max, standard deviation, and interquartile
   range of a numpy array y.
   
   Args:
       y (array): A Numpy array
       axis (int, typle of ints): Optional. Axis or Axes along which the means
           are computed, the default is to compute the mean of the flattened
           array. If a tuple of ints, performed over multiple axes
   
   Returns:
       The mean, median, min, max, standard deviation and IQR by columns
   
   
2017-07-18 15:53:50,425 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:50,465 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Stats.rst:6: input:
.. autofunction:: pyleoclim.Stats.corrsig
2017-07-18 15:53:50,498 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Stats import corrsig
2017-07-18 15:53:50,516 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Stats
2017-07-18 15:53:50,538 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Stats' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py'>
2017-07-18 15:53:50,570 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrsig')
2017-07-18 15:53:50,594 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrsig at 0x123f5b620>
2017-07-18 15:53:50,611 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Stats.corrsig', <function corrsig at 0x123f5b620>, {}, ['Estimates the signi
2017-07-18 15:53:50,633 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrsig(y1, y2, nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim.Stats

   Estimates the significance of correlations between non IID time series by 3 independent methods:
       1) 'ttest': T-test where d.o.f are corrected for the effect of serial correlation
       2) 'isopersistent': AR(1) modeling of x and y.
       3) 'isospectral': phase randomization of original inputs. (default)
       The T-test is parametric test, hence cheap but usually wrong except in idyllic circumstances.
       The others are non-parametric, but their computational requirements scales with nsim.
   
   Args:
       y1, y2 (array)- vector of (real) numbers of identical length, no NaNs allowed
       nsim (int)- the number of simulations [1000]
       method (str)- methods 1-3 above ['isospectral']
       alpha (float)- significance level for critical value estimation [0.05]
   
   Returns:
        r (real): correlation between x and y 
   
        signif (int): true  if significant; false otherwise 
   
        p (real): Fraction of time series with higher correlation coefficents than observed (approximates the p-value). 
   
           Note that signif = True if and only if p <= alpha.
   
2017-07-18 15:53:50,659 [WARNING] sphinx.util.docutils: Enumerated list ends without a blank line; unexpected unindent.
2017-07-18 15:53:50,712 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py:docstring of pyleoclim.Stats.simpleStats:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:50,731 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py:docstring of pyleoclim.Stats.corrsig:4: (WARNING/2) Enumerated list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:50,749 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "statistics functions"...>>,)
2017-07-18 15:53:50,770 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 80%] [35mSummaryPlots[39;49;00m                                          
2017-07-18 15:53:50,790 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110dbbf98>, 'SummaryPlots')
2017-07-18 15:53:50,815 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('SummaryPlots', ['Summary Plots\n==============\n\nThis module handles some basic return for the su
2017-07-18 15:53:50,836 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:8: input:
.. autofunction:: pyleoclim.SummaryPlots.getMetadata

2017-07-18 15:53:50,853 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import getMetadata
2017-07-18 15:53:50,870 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-18 15:53:50,886 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-18 15:53:50,917 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getMetadata')
2017-07-18 15:53:50,953 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getMetadata at 0x12302cf28>
2017-07-18 15:53:51,026 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.getMetadata', <function getMetadata at 0x12302cf28>, {}, ['Get 
2017-07-18 15:53:51,044 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getMetadata(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary metadata to be printed out automatically
   
   Args:
       timeseries: a specific timeseries object. 
       
   Returns:
       A dictionary containing the following metadata:
   
       archiveType 
   
       Authors (if more than 2, replace by et al. 
   
       PublicationYear 
   
       Publication DOI 
   
       Variable Name 
   
       Units 
   
       Climate Interpretation 
   
       Calibration Equation 
   
       Calibration References 
   
       Calibration Notes 
   
       
   
2017-07-18 15:53:51,066 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:10: input:
.. autofunction:: pyleoclim.SummaryPlots.TsData

2017-07-18 15:53:51,085 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import TsData
2017-07-18 15:53:51,107 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-18 15:53:51,130 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-18 15:53:51,149 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'TsData')
2017-07-18 15:53:51,167 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function TsData at 0x123037048>
2017-07-18 15:53:51,188 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.TsData', <function TsData at 0x123037048>, {}, ['Get the PaleoD
2017-07-18 15:53:51,211 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: TsData(timeseries, x_axis='')
   :module: pyleoclim.SummaryPlots

   Get the PaleoData with age/depth information
       
   Get the necessary information for the TS plots/necessary to allow for
   axes specification
   
   Args:
       timeseries: a single timeseries object. 
           By default, will prompt the user
       x-axis (str): The representation against which to plot the 
           paleo-data. Options are "age", "year", and "depth". 
           Default is to let the system choose if only one available 
           or prompt the user.
   Returns:
       x - the x-valus 
   
       y - the y-values 
   
       archiveType - the archiveType (for plot settings) 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       label - the results of the x-axis query. Either depth, year, or age
       
   
2017-07-18 15:53:51,233 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:12: input:
.. autofunction:: pyleoclim.SummaryPlots.agemodelData
2017-07-18 15:53:51,252 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import agemodelData
2017-07-18 15:53:51,267 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-18 15:53:51,283 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-18 15:53:51,303 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'agemodelData')
2017-07-18 15:53:51,323 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function agemodelData at 0x1230370d0>
2017-07-18 15:53:51,343 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.agemodelData', <function agemodelData at 0x1230370d0>, {}, ['Ge
2017-07-18 15:53:51,361 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: agemodelData(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary information for the agemodel plot
   
   Args:
       timeseries: a single timeseries object. By default, will
           prompt the user
   
   Returns:
       depth - the depth values 
   
       age - the age values 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       archiveType - the archiveType (for default plot settings)
   
   
2017-07-18 15:53:51,388 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "summary plots"...>>,)
2017-07-18 15:53:51,421 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 90%] [35mTimeseries[39;49;00m                                            
2017-07-18 15:53:51,454 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110dbbf98>, 'Timeseries')
2017-07-18 15:53:51,491 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Timeseries', ['Timeseries Functions\n====================\n\nThis module allows the manipulation o
2017-07-18 15:53:51,560 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:6: input:
.. autofunction:: pyleoclim.Timeseries.bin

2017-07-18 15:53:51,593 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import bin
2017-07-18 15:53:51,623 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 15:53:51,655 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 15:53:51,707 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'bin')
2017-07-18 15:53:51,755 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function bin at 0x123f30b70>
2017-07-18 15:53:51,828 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.bin', <function bin at 0x123f30b70>, {}, ['Bin the values', '', '
2017-07-18 15:53:51,845 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: bin(x, y, bin_size='', start='', end='')
   :module: pyleoclim.Timeseries

   Bin the values
   
   Args:
       x (array): the x-axis series.
       y (array): the y-axis series.
       bin_size (float): The size of the bins. Default is the average resolution
       start (float): Where/when to start binning. Default is the minimum
       end (float): When/where to stop binning. Defulat is the maximum
   
   Returns:
       binned_values - the binned output 
   
       bins - the bins (centered on the median, i.e., the 100-200 bin is 150) 
   
       n - number of data points in each bin 
   
       error -  the standard error on the mean in each bin
   
   
2017-07-18 15:53:51,883 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:8: input:
.. autofunction:: pyleoclim.Timeseries.interp

2017-07-18 15:53:51,912 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import interp
2017-07-18 15:53:51,936 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 15:53:51,954 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 15:53:51,979 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interp')
2017-07-18 15:53:52,012 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interp at 0x123f30c80>
2017-07-18 15:53:52,046 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.interp', <function interp at 0x123f30c80>, {}, ['Linear interpola
2017-07-18 15:53:52,068 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interp(x, y, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Linear interpolation onto a new x-axis
   
   Args:
       x (array): the x-axis
       y (array): the y-axis
       interp_step (float): the interpolation step. Default is mean resolution.
       start (float): where/when to start the interpolation. Default is min..
       end (float): where/when to stop the interpolation. Defaul is max.
   
   Returns:
       xi - the interpolated x-axis 
   
       interp_values - the interpolated values
    
   
2017-07-18 15:53:52,087 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:10: input:
.. autofunction:: pyleoclim.Timeseries.onCommonAxis

2017-07-18 15:53:52,104 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import onCommonAxis
2017-07-18 15:53:52,139 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 15:53:52,165 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 15:53:52,184 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'onCommonAxis')
2017-07-18 15:53:52,203 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function onCommonAxis at 0x123f30d08>
2017-07-18 15:53:52,237 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.onCommonAxis', <function onCommonAxis at 0x123f30d08>, {}, ['Plac
2017-07-18 15:53:52,271 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: onCommonAxis(x1, y1, x2, y2, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Places two timeseries on a common axis
   
   Args:
       x1 (array): x-axis values of the first timeseries
       y1 (array): y-axis values of the first timeseries
       x2 (array): x-axis values of the second timeseries
       y2 (array): y-axis values of the second timeseries
       interp_step (float): The interpolation step. Default is mean resolution
           of lowest resolution series
       start (float): where/when to start. Default is the maximum of the minima of
           the two timeseries
       end (float): Where/when to end. Default is the minimum of the maxima of
           the two timeseries
   
   Returns:
       xi -  the interpolated x-axis 
   
       interp_values1 -  the interpolated y-values for the first timeseries
       interp_values2 - the intespolated y-values for the second timeseries
   
2017-07-18 15:53:52,302 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 15:53:52,329 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 15:53:52,356 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:12: input:
.. autofunction:: pyleoclim.Timeseries.standardize
2017-07-18 15:53:52,380 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import standardize
2017-07-18 15:53:52,405 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 15:53:52,440 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 15:53:52,501 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardize')
2017-07-18 15:53:52,551 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardize at 0x123f30d90>
2017-07-18 15:53:52,603 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.standardize', <function standardize at 0x123f30d90>, {}, ['Center
2017-07-18 15:53:52,628 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardize(x, scale=1, axis=0, ddof=0, eps=0.001)
   :module: pyleoclim.Timeseries

   Centers and normalizes a given time series. Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed
       mu (real): the mean of the original time series, E[X]
       sig (real): the standard deviation of the original time series, std[X]
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2017-07-18 15:53:52,688 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.onCommonAxis:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 15:53:52,744 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.onCommonAxis:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 15:53:52,769 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "timeseries functions"...>>,)
2017-07-18 15:53:52,804 [INFO] sphinx.util: [01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                 
2017-07-18 15:53:52,835 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110dbbf98>, 'index')
2017-07-18 15:53:52,861 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('index', [".. Pyleoclim documentation master file, created by\n   sphinx-quickstart on Fri Feb 10 1
2017-07-18 15:53:52,904 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <comment...><section "welcome to pyleoclim's documentati ...>,)
2017-07-18 15:53:52,950 [INFO] sphinx.util: 
2017-07-18 15:53:52,983 [DEBUG] sphinx.application: [app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x110dbbf98>,)
2017-07-18 15:53:37,500 [WARNING] sphinx.util.docutils: Literal block expected; none found.
2017-07-18 15:53:53,038 [INFO] sphinx.builders: [01mlooking for now-outdated files... [39;49;00m
2017-07-18 15:53:53,060 [DEBUG] sphinx.application: [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x110dbbf98>,)
2017-07-18 15:53:53,080 [INFO] sphinx.builders: none found
2017-07-18 15:53:53,108 [INFO] sphinx.builders: [01mpickling environment... [39;49;00m
2017-07-18 15:53:53,143 [INFO] sphinx.builders: done
2017-07-18 15:53:53,162 [INFO] sphinx.builders: [01mchecking consistency... [39;49;00m
2017-07-18 15:53:53,182 [DEBUG] sphinx.application: [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x110dbbf98>,)
2017-07-18 15:53:53,205 [INFO] sphinx.builders: done
2017-07-18 15:53:53,232 [DEBUG] sphinx.builders: docnames to write: Introduction, LipdUtils, Main, Map, Plot, Spectral, Stats, SummaryPlots, Timeseries, index
2017-07-18 15:53:53,263 [INFO] sphinx.builders: [01mpreparing documents... [39;49;00m
2017-07-18 15:53:53,300 [INFO] sphinx.builders: done
2017-07-18 15:53:53,344 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 10%] [32mIntroduction[39;49;00m                                           
2017-07-18 15:53:53,387 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "pyleoclim"...>>, 'Introduction')
2017-07-18 15:53:53,736 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 20%] [32mLipdUtils[39;49;00m                                              
2017-07-18 15:53:53,830 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "lipd utilities"...>>, 'LipdUtils')
2017-07-18 15:53:53,913 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 30%] [32mMain[39;49;00m                                                   
2017-07-18 15:53:54,006 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "main functions"...>>, 'Main')
2017-07-18 15:53:54,160 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 40%] [32mMap[39;49;00m                                                    
2017-07-18 15:53:54,183 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "mapping functions"...>>, 'Map')
2017-07-18 15:53:54,263 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 50%] [32mPlot[39;49;00m                                                   
2017-07-18 15:53:54,290 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "plotting functions"...>>, 'Plot')
2017-07-18 15:53:54,366 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 60%] [32mSpectral[39;49;00m                                               
2017-07-18 15:53:54,387 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "spectral functions"...>>, 'Spectral')
2017-07-18 15:53:54,486 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 70%] [32mStats[39;49;00m                                                  
2017-07-18 15:53:54,577 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "statistics functions"...>>, 'Stats')
2017-07-18 15:53:54,677 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 80%] [32mSummaryPlots[39;49;00m                                           
2017-07-18 15:53:54,753 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "summary plots"...>>, 'SummaryPlots')
2017-07-18 15:53:54,912 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 90%] [32mTimeseries[39;49;00m                                             
2017-07-18 15:53:54,966 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "timeseries functions"...>>, 'Timeseries')
2017-07-18 15:53:55,178 [INFO] sphinx.util: [01mwriting output... [39;49;00m[100%] [32mindex[39;49;00m                                                  
2017-07-18 15:53:55,286 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <comment...><section "welcome to pyleoclim's documentati ...>, 'index')
2017-07-18 15:53:55,451 [INFO] sphinx.util: 
2017-07-18 15:53:55,503 [INFO] sphinx.builders.html: [01mgenerating indices...[39;49;00m
2017-07-18 15:53:55,618 [INFO] sphinx.builders.html:  genindex
2017-07-18 15:53:55,812 [INFO] sphinx.builders.html: 
2017-07-18 15:53:55,853 [DEBUG] sphinx.application: [app] emitting event: 'html-collect-pages'()
2017-07-18 15:53:55,877 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 12%] [34;01mpyleoclim.Stats[39;49;00m                              
2017-07-18 15:53:56,079 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 25%] [34;01mpyleoclim.Timeseries[39;49;00m                         
2017-07-18 15:53:56,307 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 37%] [34;01mpyleoclim.LipdUtils[39;49;00m                          
2017-07-18 15:53:56,573 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 50%] [34;01mpyleoclim.Plot[39;49;00m                               
2017-07-18 15:53:57,258 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 62%] [34;01mpyleoclim[39;49;00m                                    
2017-07-18 15:53:57,741 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 75%] [34;01mpyleoclim.Spectral[39;49;00m                           
2017-07-18 15:53:58,386 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[ 87%] [34;01mpyleoclim.Map[39;49;00m                                
2017-07-18 15:53:58,554 [INFO] sphinx.util: [01mhighlighting module code... [39;49;00m[100%] [34;01mpyleoclim.SummaryPlots[39;49;00m                       
2017-07-18 15:53:58,820 [INFO] sphinx.util: 
2017-07-18 15:53:59,038 [INFO] sphinx.builders.html: [01mwriting additional pages...[39;49;00m
2017-07-18 15:53:59,077 [INFO] sphinx.builders.html:  search
2017-07-18 15:53:59,222 [INFO] sphinx.builders.html: 
2017-07-18 15:53:59,292 [INFO] sphinx.builders.html: [01mcopying static files... [39;49;00m
2017-07-18 15:53:59,700 [INFO] sphinx.builders.html: done
2017-07-18 15:53:59,730 [INFO] sphinx.builders.html: [01mcopying extra files... [39;49;00m
2017-07-18 15:53:59,770 [INFO] sphinx.builders.html: done
2017-07-18 15:53:59,805 [INFO] sphinx.builders.html: [01mdumping search index in English (code: en) ... [39;49;00m
2017-07-18 15:53:59,854 [INFO] sphinx.builders.html: done
2017-07-18 15:53:59,876 [INFO] sphinx.builders.html: [01mdumping object inventory... [39;49;00m
2017-07-18 15:53:59,918 [INFO] sphinx.builders.html: done
2017-07-18 15:53:59,954 [INFO] sphinx.application: [01mbuild succeeded, 1 warning.[39;49;00m
2017-07-18 15:53:59,989 [DEBUG] sphinx.application: [app] emitting event: 'build-finished'(None,)
2017-07-18 16:20:07,608 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 16:20:07,609 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'createDir')
2017-07-18 16:20:07,622 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function createDir at 0x11c900400>
2017-07-18 16:20:07,690 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.createDir', <function createDir at 0x11c900400>, {}, ['Create a ne
2017-07-18 16:20:07,711 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: createDir(path, foldername)
   :module: pyleoclim.LipdUtils

   Create a new folder in a working directory
   
   Create a new folder in a working directory to save outputs from Pyleoclim.
   
   Args:
       path(str): the path to the new folder.
       foldername(str): the name of the folder to be created
       
   Returns:
       newdir - the full path to the new directory
       
   
2017-07-18 16:20:07,739 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:11: input:
.. autofunction:: pyleoclim.LipdUtils.saveFigure

2017-07-18 16:20:07,759 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import saveFigure
2017-07-18 16:20:07,792 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 16:20:07,821 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 16:20:07,837 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'saveFigure')
2017-07-18 16:20:07,862 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function saveFigure at 0x11c900488>
2017-07-18 16:20:07,883 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.saveFigure', <function saveFigure at 0x11c900488>, {}, ['Save a fi
2017-07-18 16:20:07,902 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: saveFigure(name, format='eps', dir='')
   :module: pyleoclim.LipdUtils

   Save a figure
   
   Save the figure in the directory. If not given, creates a folder in the 
   current working directory. 
   
   Args:
       name (str): name of the file
       format (str): One of the file extensions supported by the active 
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       dir (str): the name of the folder in the LiPD working directory.
           If not provided, creates a default folder called 'figures'.
           
   
2017-07-18 16:20:07,925 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:07,942 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:07,963 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:16: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateLipds

2017-07-18 16:20:07,983 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateLipds
2017-07-18 16:20:08,001 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 16:20:08,017 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 16:20:08,031 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateLipds')
2017-07-18 16:20:08,048 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateLipds at 0x11c900510>
2017-07-18 16:20:08,066 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateLipds', <function enumerateLipds at 0x11c900510>, {}, ['E
2017-07-18 16:20:08,085 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateLipds(lipds)
   :module: pyleoclim.LipdUtils

   Enumerate the LiPD files loaded in the workspace
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   
2017-07-18 16:20:08,113 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:18: input:
.. autofunction:: pyleoclim.LipdUtils.promptForLipd

2017-07-18 16:20:08,136 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForLipd
2017-07-18 16:20:08,191 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 16:20:08,224 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 16:20:08,242 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForLipd')
2017-07-18 16:20:08,263 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForLipd at 0x11c900598>
2017-07-18 16:20:08,283 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForLipd', <function promptForLipd at 0x11c900598>, {}, ['Pro
2017-07-18 16:20:08,299 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForLipd(lipds)
   :module: pyleoclim.LipdUtils

   Prompt for a LiPD file
   
   Ask the user to select a LiPD file from a list
   Use this function in conjunction with enumerateLipds()
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   Returns:
       The index of the LiPD file
       
   
2017-07-18 16:20:08,326 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:23: input:
.. autofunction:: pyleoclim.LipdUtils.promptForVariable

2017-07-18 16:20:08,352 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForVariable
2017-07-18 16:20:08,371 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 16:20:08,391 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 16:20:08,408 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForVariable')
2017-07-18 16:20:08,423 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForVariable at 0x11c900620>
2017-07-18 16:20:08,439 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForVariable', <function promptForVariable at 0x11c900620>, {
2017-07-18 16:20:08,452 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForVariable()
   :module: pyleoclim.LipdUtils

   Prompt for a specific variable
   
   Ask the user to select the variable they are interested in.
   Use this function in conjunction with readHeaders() or getTSO()
   
   Returns:
       The index of the variable
       
   
2017-07-18 16:20:08,476 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:25: input:
.. autofunction:: pyleoclim.LipdUtils.xAxisTs

2017-07-18 16:20:08,494 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import xAxisTs
2017-07-18 16:20:08,509 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 16:20:08,526 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 16:20:08,543 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'xAxisTs')
2017-07-18 16:20:08,557 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function xAxisTs at 0x11c9006a8>
2017-07-18 16:20:08,579 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.xAxisTs', <function xAxisTs at 0x11c9006a8>, {}, ['Prompt the user
2017-07-18 16:20:08,597 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: xAxisTs(timeseries)
   :module: pyleoclim.LipdUtils

   Prompt the user to choose a x-axis representation for the timeseries.
   
   Args:
       timeseries: a timeseries object
       
   Returns:
       x_axis - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"
       
   
2017-07-18 16:20:08,617 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:27: input:
.. autofunction:: pyleoclim.LipdUtils.checkXaxis

2017-07-18 16:20:08,633 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import checkXaxis
2017-07-18 16:20:08,694 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 16:20:08,719 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 16:20:08,735 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'checkXaxis')
2017-07-18 16:20:08,751 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function checkXaxis at 0x11c900730>
2017-07-18 16:20:08,767 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.checkXaxis', <function checkXaxis at 0x11c900730>, {}, ['Check tha
2017-07-18 16:20:08,791 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: checkXaxis(timeseries, x_axis='')
   :module: pyleoclim.LipdUtils

   Check that a x-axis is present for the timeseries
   
   Args:
       timeseries : a timeseries
       x_axis (str) : the x-axis representation, either depth, age or year
       
   Returns:
       x - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"    
   
   
2017-07-18 16:20:08,817 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:32: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateTs

2017-07-18 16:20:08,841 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateTs
2017-07-18 16:20:08,866 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 16:20:08,891 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 16:20:08,912 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateTs')
2017-07-18 16:20:08,938 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateTs at 0x11c9007b8>
2017-07-18 16:20:08,952 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateTs', <function enumerateTs at 0x11c9007b8>, {}, ['Enumera
2017-07-18 16:20:08,965 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Enumerate the available time series objects
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   
2017-07-18 16:20:08,989 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:34: input:
.. autofunction:: pyleoclim.LipdUtils.getTs

2017-07-18 16:20:09,008 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getTs
2017-07-18 16:20:09,022 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 16:20:09,038 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 16:20:09,052 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getTs')
2017-07-18 16:20:09,066 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getTs at 0x11c900840>
2017-07-18 16:20:09,087 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getTs', <function getTs at 0x11c900840>, {}, ['Get a specific time
2017-07-18 16:20:09,105 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Get a specific timeseries object from a dictionary of timeseries
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   Returns:
       A single timeseries object 
       
   
2017-07-18 16:20:09,131 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:39: input:
.. autofunction:: pyleoclim.LipdUtils.LipdToOntology
2017-07-18 16:20:09,167 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import LipdToOntology
2017-07-18 16:20:09,196 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-18 16:20:09,218 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-18 16:20:09,235 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'LipdToOntology')
2017-07-18 16:20:09,251 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function LipdToOntology at 0x11c9008c8>
2017-07-18 16:20:09,267 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.LipdToOntology', <function LipdToOntology at 0x11c9008c8>, {}, ['s
2017-07-18 16:20:09,294 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: LipdToOntology(archiveType)
   :module: pyleoclim.LipdUtils

   standardize archiveType
   
   Transform the archiveType from their LiPD name to their ontology counterpart
   
   Args:
       archiveType (STR): name of the archiveType from the LiPD file
       
   Returns:
       archiveType according to the ontology
       
   
2017-07-18 16:20:09,330 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:09,346 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:09,363 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "lipd utilities"...>>,)
2017-07-18 16:20:09,392 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 30%] [35mMain[39;49;00m                                                  
2017-07-18 16:20:09,413 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a6a2550>, 'Main')
2017-07-18 16:20:09,431 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Main', ['Main Functions\n==============\n\n\nUsing Pyleoclim with a LiPD file\n"""""""""""""""""""
2017-07-18 16:20:09,451 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:27: input:
.. autofunction:: pyleoclim.readLipd
2017-07-18 16:20:09,467 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import readLipd
2017-07-18 16:20:09,483 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:09,499 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:09,522 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'readLipd')
2017-07-18 16:20:09,536 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function readLipd at 0x11c900950>
2017-07-18 16:20:09,875 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.readLipd', <function readLipd at 0x11c900950>, {}, ['Read Lipd files into a 
2017-07-18 16:20:09,890 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: readLipd(usr_path='')
   :module: pyleoclim

   Read Lipd files into a dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Sets the dictionary as global variable so that it doesn't have to be provided
   as an argument for every function.
   
   Args:
       usr_path (str): The path to a directory or a single file. (Optional argument)
       
   Returns:
       lipd_dict - a dictionary containing the LiPD library
   
   
2017-07-18 16:20:09,911 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: input:
.. autofunction:: pyleoclim.extractTs

2017-07-18 16:20:09,931 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import extractTs
2017-07-18 16:20:09,948 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:09,965 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:09,981 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'extractTs')
2017-07-18 16:20:09,997 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function extractTs at 0x11d8d8950>
2017-07-18 16:20:10,015 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.extractTs', <function extractTs at 0x11d8d8950>, {}, ['Extract timeseries di
2017-07-18 16:20:10,034 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: extractTs(lipds=None)
   :module: pyleoclim

   Extract timeseries dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Set the dictionary as a global variable so that it doesn't have to be
   provided as an argument for every function. 
   
   Args:
       lipds (dict): A dictionary of LiPD files obtained through the 
       readLipd function
   
   Returns:
       ts_list - A list of timeseries object
   
   
2017-07-18 16:20:10,054 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:32: input:
.. autofunction:: pyleoclim.mapAllArchive

2017-07-18 16:20:10,068 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapAllArchive
2017-07-18 16:20:10,082 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:10,097 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:10,113 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAllArchive')
2017-07-18 16:20:10,135 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAllArchive at 0x11d8d89d8>
2017-07-18 16:20:10,153 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapAllArchive', <function mapAllArchive at 0x11d8d89d8>, {}, ['Map all the a
2017-07-18 16:20:10,174 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAllArchive(lipds='', markersize=50, background='shadedrelief', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map all the available records loaded into the workspace by archiveType.
   
   Map of all the records into the workspace by archiveType.
       Uses the default color palette. Enter pyleoclim.plot_default for detail.
   
   Args:
       lipds (dict): A dictionary of LiPD files. (Optional)
       markersize (int): The size of the markers. Default is 50
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
       saveFig (bool): Default is to not save the figure
       dir (str): The absolute path of the directory in which to save the
           figure. If not provided, creates a default folder called 'figures'
           in the LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
2017-07-18 16:20:10,199 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:10,227 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:10,242 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:10,260 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:10,278 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:34: input:
.. autofunction:: pyleoclim.mapLipd

2017-07-18 16:20:10,299 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapLipd
2017-07-18 16:20:10,315 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:10,338 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:10,352 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapLipd')
2017-07-18 16:20:10,371 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapLipd at 0x11d8d8a60>
2017-07-18 16:20:10,385 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapLipd', <function mapLipd at 0x11d8d8a60>, {}, ['Create a Map for a single
2017-07-18 16:20:10,401 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapLipd(timeseries='', countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='default', figsize=[4, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Create a Map for a single record
   
   Orthographic projection map of a single record.
   
   Args:
       timeseries: a LiPD timeseries object. Will prompt for one if not given
       countries (bool): Draws the country borders. Default is on (True).
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders.
           Default is off (False)
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief
       scale (float): useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): default is 50
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-18 16:20:10,417 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:10,439 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:10,455 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 16:20:10,471 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:10,491 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:10,506 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:10,522 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:10,548 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:38: input:
.. autofunction:: pyleoclim.plotTs

2017-07-18 16:20:10,564 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotTs
2017-07-18 16:20:10,579 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:10,601 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:10,617 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotTs')
2017-07-18 16:20:10,640 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotTs at 0x11d8d8ae8>
2017-07-18 16:20:10,654 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.plotTs', <function plotTs at 0x11d8d8ae8>, {}, ['Plot a single time series.'
2017-07-18 16:20:10,710 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotTs(timeseries='', x_axis='', markersize=50, marker='default', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Plot a single time series.
   
   Args:
       A timeseries: By default, will prompt the user for one.
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       markersize (int): default is 50.
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure.
   
   
2017-07-18 16:20:10,739 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:10,756 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:10,781 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:10,816 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:10,867 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:10,890 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:10,918 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:40: input:
.. autofunction:: pyleoclim.histTs

2017-07-18 16:20:10,942 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import histTs
2017-07-18 16:20:10,959 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:10,988 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:11,016 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'histTs')
2017-07-18 16:20:11,046 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function histTs at 0x11d8d8b70>
2017-07-18 16:20:11,065 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.histTs', <function histTs at 0x11d8d8b70>, {}, ['Plot a univariate distribut
2017-07-18 16:20:11,083 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: histTs(timeseries='', bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'Rug'}, fit_kws={'label': 'Fit'}, color='default', vertical=False, norm_hist=True, figsize=[5, 5], saveFig=False, format='eps', dir='')
   :module: pyleoclim

   Plot a univariate distribution of the PaleoData values
   
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the
   seaborn kdeplot() and rugplot() functions. It can also fit
   scipy.stats distributions and plot the estimated PDF over the data.
   
   Args:
       timeseries: A timeseries. By default, will prompt the user for one.
       bins (int): Specification of hist bins following matplotlib(hist),
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning
           a tuple that can be passed to a pdf method of positional
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in. Default is to use the default paletter for each
           archive type.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or
           fitted density is plotted
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns
       fig - The figure
   
   
2017-07-18 16:20:11,110 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:11,132 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:11,156 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:11,178 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:11,200 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 16:20:11,219 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:11,244 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:11,271 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:11,298 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:11,321 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:48: input:
.. autofunction:: pyleoclim.summaryTs

2017-07-18 16:20:11,340 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import summaryTs
2017-07-18 16:20:11,359 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:11,379 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:11,395 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'summaryTs')
2017-07-18 16:20:11,411 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function summaryTs at 0x11d8d8bf8>
2017-07-18 16:20:11,425 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.summaryTs', <function summaryTs at 0x11d8d8bf8>, {}, ['Basic summary plot', 
2017-07-18 16:20:11,445 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: summaryTs(timeseries='', x_axis='', saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Basic summary plot
   
   Plots the following information: the time series, a histogram of
   the PaleoData_values, location map, spectral density using the wwz 
   method, and metadata about the record.
   
   Args:
       timeseries: a timeseries object. By default, will prompt for one
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-18 16:20:11,475 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:11,503 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:11,520 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:11,540 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:11,573 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:53: input:
.. autofunction:: pyleoclim.statsTs

2017-07-18 16:20:11,614 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import statsTs
2017-07-18 16:20:11,646 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:11,669 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:11,686 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'statsTs')
2017-07-18 16:20:11,702 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function statsTs at 0x11d8d8c80>
2017-07-18 16:20:11,717 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.statsTs', <function statsTs at 0x11d8d8c80>, {}, ['Calculate simple statisti
2017-07-18 16:20:11,733 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: statsTs(timeseries='')
   :module: pyleoclim

   Calculate simple statistics of a timeseries
   
   Args:
       timeseries: sytem will prompt for one if not given
   
   Returns:
       the mean, median, min, max, standard deviation and the
       inter-quartile range (IQR) of a timeseries.
   
   Examples:
       >>> mean, median, min_, max_, std, IQR = pyleo.statsTs(timeseries)
   
   
2017-07-18 16:20:11,755 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:55: input:
.. autofunction:: pyleoclim.corrSigTs

2017-07-18 16:20:11,773 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import corrSigTs
2017-07-18 16:20:11,788 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:11,803 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:11,818 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrSigTs')
2017-07-18 16:20:11,834 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrSigTs at 0x11d8d8d08>
2017-07-18 16:20:11,862 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.corrSigTs', <function corrSigTs at 0x11d8d8d08>, {}, ['Estimates the signifi
2017-07-18 16:20:11,890 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrSigTs(timeseries1='', timeseries2='', x_axis='', interp_step='', start='', end='', nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim

   Estimates the significance of correlations between non IID timeseries.
   
   Function written by. F. Zhu.
   
   Args:
       timeseries1, timeseries2: timeseries object. Default is blank.
       x-axis (str): The representation against which to express the
           paleo-data. Options are "age", "year", and "depth".
           Default is to let the system choose if only one available
           or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start time/age/depth. Default is the maximum of
           the minima of the two timeseries
       end (float): End time/age/depth. Default is the minimum of the
           maxima of the two timeseries
       nsim (int): the number of simulations. Default is 1000
       method (str): method use to estimate the correlation and significance.
           Available methods include:
               - 'ttest': T-test where the degrees of freedom are corrected for
               the effect of serial correlation 
   
               - 'isopersistant': AR(1) modeling of the two timeseries 
   
               - 'isospectral' (default): phase randomization of original
               inputs.
           The T-test is parametric test, hence cheap but usually wrong
           except in idyllic circumstances.
           The others are non-parametric, but their computational
           requirements scales with nsim.
       alpha (float): significance level for critical value estimation. Default is 0.05
   
   Returns:
       r (float) - correlation between the two timeseries 
   
       sig (bool) -  Returns True if significant, False otherwise 
   
       p (real) - the p-value
   
   
2017-07-18 16:20:11,918 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:11,936 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:11,957 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:11,973 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:11,989 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,004 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:12,019 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,037 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,059 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,080 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,098 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:61: input:
.. autofunction:: pyleoclim.binTs

2017-07-18 16:20:12,113 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import binTs
2017-07-18 16:20:12,128 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:12,144 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:12,169 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'binTs')
2017-07-18 16:20:12,186 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function binTs at 0x11d8d8d90>
2017-07-18 16:20:12,202 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.binTs', <function binTs at 0x11d8d8d90>, {}, ['Bin the paleoData values of t
2017-07-18 16:20:12,216 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: binTs(timeseries='', x_axis='', bin_size='', start='', end='')
   :module: pyleoclim

   Bin the paleoData values of the timeseries
   
   Args:
       timeseries. By default, will prompt the user for one.
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system  choose if only one available or prompt the user.
       bin_size (float): the size of the bins to be used. By default,
           will prompt for one
       start (float): Start time/age/depth. Default is the minimum
       end (float): End time/age/depth. Default is the maximum
   
   Returns:
       binned_values- the binned output,
   
       bins-  the bins (centered on the median, i.e. the 100-200 bin is 150),
   
       n-  number of data points in each bin,
   
       error- the standard error on the mean in each bin
   
   
   
2017-07-18 16:20:12,234 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:12,251 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,284 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,311 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:63: input:
.. autofunction:: pyleoclim.interpTs

2017-07-18 16:20:12,329 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import interpTs
2017-07-18 16:20:12,346 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:12,363 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:12,381 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interpTs')
2017-07-18 16:20:12,394 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interpTs at 0x11d8d8e18>
2017-07-18 16:20:12,411 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.interpTs', <function interpTs at 0x11d8d8e18>, {}, ['Simple linear interpola
2017-07-18 16:20:12,425 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interpTs(timeseries='', x_axis='', interp_step='', start='', end='')
   :module: pyleoclim

   Simple linear interpolation
   
   Simple linear interpolation of the data using the numpy.interp method
   
   Args:
       timeseries. Default is blank, will prompt for it
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start year/age/depth. Default is the minimum
       end (float): End year/age/depth. Default is the maximum
   
   Returns:
       interp_age - the interpolated age/year/depth according to the end/start
       and time step, 
   
       interp_values - the interpolated values
   
   
2017-07-18 16:20:12,442 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:12,459 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,482 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:65: input:
.. autofunction:: pyleoclim.standardizeTs

2017-07-18 16:20:12,496 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import standardizeTs
2017-07-18 16:20:12,513 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:12,529 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:12,546 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardizeTs')
2017-07-18 16:20:12,563 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardizeTs at 0x11d8d8ea0>
2017-07-18 16:20:12,583 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.standardizeTs', <function standardizeTs at 0x11d8d8ea0>, {}, ['Centers and n
2017-07-18 16:20:12,596 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardizeTs(timeseries='', scale=1, ddof=0, eps=0.001)
   :module: pyleoclim

   Centers and normalizes the paleoData values of a  given time series.
   
   Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       - z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed 
   
       - mu (real): the mean of the original time series, E[X] 
   
       - sig (real): the standard deviation of the original time series, std[X] 
   
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2017-07-18 16:20:12,618 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:69: input:
.. autofunction:: pyleoclim.wwzTs

2017-07-18 16:20:12,634 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import wwzTs
2017-07-18 16:20:12,650 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-18 16:20:12,670 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-18 16:20:12,688 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwzTs')
2017-07-18 16:20:12,705 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwzTs at 0x11d8da048>
2017-07-18 16:20:12,720 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.wwzTs', <function wwzTs at 0x11d8da048>, {}, ['Weigthed wavelet Z-transform 
2017-07-18 16:20:12,733 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwzTs(timeseries='', wwz=False, psd=True, wwz_default=True, psd_default=True, wwaplot_default=True, psdplot_default=True, fig=True, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Weigthed wavelet Z-transform analysis
   
   Wavelet analysis for unevenly spaced data adapted from Foster et al. (1996)
   
   Args:
       timeseries (dict): A LiPD timeseries object (Optional, will prompt for one.)
       wwz (bool): If True, will perform wavelet analysis
       psd (bool): If True, will inform the power spectral density of the timeseries
       wwz_default: If True, will use the following default parameters:
           
           wwz_default = {'tau':None,'freqs':None,'c':1/(8*np.pi**2),'Neff':3,'nMC':200,
                              'nproc':8,'detrend':'no','method':'Kirchner_f2py'}.
               
           Modify the values for specific keys to change the default behavior.
               
       psd_default: If True, will use the following default parameters:
           
           psd_default = {'tau':None,
                         'freqs': None,
                         'c':1e-3,
                         'nproc':8,
                         'nMC':200,
                         'detrend':'no',
                         'Neff':3,
                         'anti_alias':False,
                         'avgs':2,
                         'method':'Kirchner_f2py'}
           
           Modify the values for specific keys to change the default behavior.
           
       wwaplot_default: If True, will use the following default parameters:
           
           wwaplot_default={'Neff':3,
                                'AR1_q':AR1_q,
                                'coi':coi,
                                'levels':None,
                                'tick_range':None,
                                'yticks':None,
                                'ylim':None,
                                'xticks':None,
                                'xlabels':None,
                                'figsize':[20,8],
                                'clr_map':'OrRd',
                                'cbar_drawedges':False,
                                'cone_alpha':0.5,
                                'plot_signif':True,
                                'signif_style':'contour',
                                'plot_cone':True}
           
           Modify the values for specific keys to change the default behavior.
       psdplot_default: If True, will use the following default parameters:
           
           psdplot_default={'lmstyle':None,
                            'linewidth':None,
                            'xticks':None,
                            'xlim':None,
                            'ylim':None,
                            'figsize':[20,8],
                            'label':'PSD',
                            'plot_ar1':True,
                            'psd_ar1_q95':psd_ar1_q95,
                            'psd_ar1_color':sns.xkcd_rgb["pale red"]}
           
           Modify the values for specific keys to change the default behavior.
           
       fig (bool): If True, plots the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       
   Returns:
       dict_out (dict): A dictionary of outputs. 
           
           For wwz: 
           
           - wwa (array): The weights wavelet amplitude 
       
           - AR1_q (array): AR1 simulations 
       
           - coi (array): cone of influence 
       
           - freqs (array): vector for frequencies 
       
           - tau (array): the evenly-spaced time points, namely the time 
           shift for wavelet analysis. 
       
           - Neffs (array): The matrix of effective number of points in the
           time-scale coordinates.
       
           - coeff (array): The wavelet transform coefficients
       
           For psd: 
           
           - psd (array): power spectral density 
       
           - freqs (array): vector of frequency 
       
           - psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes 
       
       fig: The figure
        
       References:
           Foster, G. (1996). Wavelets for period analysis of unevenly 
           sampled time series. The Astronomical Journal, 112(4), 1709-1729.
       
       Examples:
           To run both wwz and psd: 
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(wwz=True)
           
           Note: This will return a single figure with wwa and psd 
   
           
           To change a default behavior:
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(psd_default = {'nMC':1000}) 
          
   
2017-07-18 16:20:12,755 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,778 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:12,793 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,813 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,830 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-18 16:20:12,907 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:12,922 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:12,936 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:12,951 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:12,965 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:12,990 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,012 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,031 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:19: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,050 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,064 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,080 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:26: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,098 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,113 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,128 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,143 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,156 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:15: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,170 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,188 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,204 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,220 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,235 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,251 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,265 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:26: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,283 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,299 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:31: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,314 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:33: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,329 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,344 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,359 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:14: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,373 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,395 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,408 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,423 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,437 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,450 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:16: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,465 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:18: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,481 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:20: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,508 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:25: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,531 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:26: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,548 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:30: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,562 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,575 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,590 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:10: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,609 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,622 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,638 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:51: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,653 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:69: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:13,673 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:71: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,696 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:89: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,719 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:92: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:13,739 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "main functions"...>>,)
2017-07-18 16:20:13,766 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 40%] [35mMap[39;49;00m                                                   
2017-07-18 16:20:13,783 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a6a2550>, 'Map')
2017-07-18 16:20:13,806 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Map', ['Mapping Functions\n=================\n\nThis module uses the Basemap package for mapping. 
2017-07-18 16:20:13,821 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:6: input:
.. autofunction:: pyleoclim.Map.mapAll

2017-07-18 16:20:13,836 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapAll
2017-07-18 16:20:13,851 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2017-07-18 16:20:13,868 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2017-07-18 16:20:13,884 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAll')
2017-07-18 16:20:13,902 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAll at 0x1087de2f0>
2017-07-18 16:20:13,952 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapAll', <function mapAll at 0x1087de2f0>, {}, ['Map the location of all
2017-07-18 16:20:13,969 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAll(lat, lon, criteria, projection='robin', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=False, counties=False, rivers=False, states=False, figsize=[10, 4], ax=None, background='none', scale=0.5, palette='', markersize=50)
   :module: pyleoclim.Map

   Map the location of all lat/lon according to some criteria 
   
   Map the location of all lat/lon according to some criteria. The choice of 
   plotting color/marker is passed through palette according to unique 
   criteria (e.g., record name, archive type, proxy observation type).
   
   Args:
       lat (list): a list of latitude.
       lon (list): a list of longitude.
       criteria (list): a list of criteria for plotting purposes. For instance,
           a map by the types of archive present in the dataset or proxy
           observations.
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       palette (dict): A dictionary of plotting color/marker by criteria. The
           keys should correspond to ***unique*** criteria with a list of 
           associated values. The list should be in the format 
           ['color', 'marker'].
       markersize (int): The size of the marker.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
       
   Returns:
       The figure       
   
2017-07-18 16:20:13,989 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:14,008 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:14,024 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 16:20:14,041 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:14,057 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:14,072 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 16:20:14,091 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:8: input:
.. autofunction:: pyleoclim.Map.mapOne
2017-07-18 16:20:14,110 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapOne
2017-07-18 16:20:14,123 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2017-07-18 16:20:14,139 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2017-07-18 16:20:14,167 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapOne')
2017-07-18 16:20:14,193 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapOne at 0x11c900378>
2017-07-18 16:20:14,223 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapOne', <function mapOne at 0x11c900378>, {}, ['Map one location on the
2017-07-18 16:20:14,252 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapOne(lat, lon, projection='ortho', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='ro', figsize=[4, 4], ax=None)
   :module: pyleoclim.Map

   Map one location on the globe
   
   Args:
       lat (float): a float number representing latitude
       lon (float): a float number representing longitude
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): The size of the marker.
       marker (str or list): color and type of marker. 
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
   
   
2017-07-18 16:20:14,277 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:14,294 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:14,321 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 16:20:14,352 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:14,378 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:14,405 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 16:20:14,448 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:14,463 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:13: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:14,480 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:14,505 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:28: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:14,524 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:29: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:14,557 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:38: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:14,575 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:7: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:14,591 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:14,615 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:14,632 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:21: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:14,659 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:22: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:14,682 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:27: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:14,698 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "mapping functions"...>>,)
2017-07-18 16:20:14,729 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 50%] [35mPlot[39;49;00m                                                  
2017-07-18 16:20:14,746 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a6a2550>, 'Plot')
2017-07-18 16:20:14,771 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Plot', ['Plotting Functions\n==================\n\n.. autofunction:: pyleoclim.Plot.plot\n\n.. aut
2017-07-18 16:20:14,792 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:4: input:
.. autofunction:: pyleoclim.Plot.plot

2017-07-18 16:20:14,814 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot
2017-07-18 16:20:14,838 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2017-07-18 16:20:14,865 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2017-07-18 16:20:14,884 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot')
2017-07-18 16:20:14,898 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot at 0x11c900bf8>
2017-07-18 16:20:14,937 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot', <function plot at 0x11c900bf8>, {}, ['Make a 2-D plot', '', 'Arg
2017-07-18 16:20:14,952 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot(x, y, markersize=50, marker='ro', x_label='', y_label='', title='', figsize=[10, 4], ax=None)
   :module: pyleoclim.Plot

   Make a 2-D plot
   
   Args:
       x (numpy array): a 1xn numpy array of values for the x-axis
       y (numpy array): a 1xn numpy array for the y-axis
       markersize (int): the size of the marker
       marker (string or list): color and shape of the marker
       x_axis_label (str): the label for the x-axis
       y_axis_label (str): the label for the y-axis
       title (str): the title for the plot
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
           
   Return:
       The figure       
   
   
2017-07-18 16:20:14,973 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: input:
.. autofunction:: pyleoclim.Plot.plot_hist
2017-07-18 16:20:14,990 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot_hist
2017-07-18 16:20:15,003 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2017-07-18 16:20:15,025 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2017-07-18 16:20:15,051 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_hist')
2017-07-18 16:20:15,076 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_hist at 0x11c900c80>
2017-07-18 16:20:15,099 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot_hist', <function plot_hist at 0x11c900c80>, {}, ['Plot a univariat
2017-07-18 16:20:15,137 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_hist(y, bins=None, hist=True, label='', kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'rug'}, fit_kws={'label': 'fit'}, color='0.7', vertical=False, norm_hist=True, figsize=[5, 5], ax=None)
   :module: pyleoclim.Plot

   Plot a univariate distribution of the PaleoData values
           
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the 
   seaborn kdeplot() and rugplot() functions. It can also fit 
   scipy.stats distributions and plot the estimated PDF over the data.
       
   Args:
       y (array): nx1 numpy array. No missing values allowed 
       bins (int): Specification of hist bins following matplotlib(hist), 
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram 
       label (str): The label for the axis
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning 
           a tuple that can be passed to a pdf method of positional 
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for 
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or 
           fitted density is plotted
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
   
   Returns
      fig - The figure
   
2017-07-18 16:20:15,175 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:15,208 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:15,244 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:15,275 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:15,302 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-18 16:20:15,333 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:15,352 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:15,395 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:15,411 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:15,434 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:17: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:15,458 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:19: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:15,484 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:15,501 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:26: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:15,517 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:15,546 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "plotting functions"...>>,)
2017-07-18 16:20:15,569 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 60%] [35mSpectral[39;49;00m                                              
2017-07-18 16:20:15,584 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a6a2550>, 'Spectral')
2017-07-18 16:20:15,603 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Spectral', ['Spectral Functions\n==================\n\nThis module allows analysis in the frequenc
2017-07-18 16:20:15,619 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:6: input:
.. autofunction:: pyleoclim.Spectral.ar1_fit

2017-07-18 16:20:15,639 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_fit
2017-07-18 16:20:15,664 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 16:20:15,685 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 16:20:15,704 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_fit')
2017-07-18 16:20:15,730 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_fit at 0x11c900d90>
2017-07-18 16:20:16,259 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_fit', <function ar1_fit at 0x11c900d90>, {}, ['Returns the lag-
2017-07-18 16:20:16,272 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_fit(ys, ts=None, detrend='no')
   :module: pyleoclim.Spectral

   Returns the lag-1 autocorrelation from ar1 fit OR persistence from tauest.
   
   Args:
       ys (array): the time series
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
   
   Returns:
       g (float): lag-1 autocorrelation coefficient (for evenly-spaced time series)
       OR estimated persistence (for unevenly-spaced time series)
   
2017-07-18 16:20:16,287 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:16,306 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:8: input:
.. autofunction:: pyleoclim.Spectral.ar1_sim

2017-07-18 16:20:16,321 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_sim
2017-07-18 16:20:16,339 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 16:20:16,353 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 16:20:16,366 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_sim')
2017-07-18 16:20:16,380 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_sim at 0x11d80cae8>
2017-07-18 16:20:16,397 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_sim', <function ar1_sim at 0x11d80cae8>, {}, ['Produce p realiz
2017-07-18 16:20:16,417 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_sim(ys, n, p, ts=None, detrend='no')
   :module: pyleoclim.Spectral

   Produce p realizations of an AR1 process of length n with lag-1 autocorrelation g calculated from `ys` and `ts`
   
   Args:
       ys (array): a time series
       n, p (int): dimensions as n rows by p columns
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
   
   Returns:
       red (matrix): n rows by p columns matrix of an AR1 process
   
   
2017-07-18 16:20:16,436 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:16,452 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:10: input:
.. autofunction:: pyleoclim.Spectral.wwz

2017-07-18 16:20:16,466 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz
2017-07-18 16:20:16,484 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 16:20:16,512 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 16:20:16,530 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz')
2017-07-18 16:20:16,550 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz at 0x11d80cb70>
2017-07-18 16:20:16,566 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz', <function wwz at 0x11d80cb70>, {}, ['Return the weighted wave
2017-07-18 16:20:16,580 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz(ys, ts, tau=None, freqs=None, c=0.012665147955292222, Neff=3, nMC=200, nproc=8, detrend='no', method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the weighted wavelet amplitude (WWA) with phase, AR1_q, and cone of influence, as well as WT coeeficients
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       tau (array): the evenly-spaced time points
       freqs (array): vector of frequency
       c (float): the decay constant, the default value 1/(8*np.pi**2) is good for most of the cases
       Neff (int): effective number of points
       nMC (int): the number of Monte-Carlo simulations
       nproc (int): the number of processes for multiprocessing
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       wwa (array): the weighted wavelet amplitude.
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neffs (array): the matrix of effective number of points in the time-scale coordinates
       coeff (array): the wavelet transform coefficents
   
   
2017-07-18 16:20:16,600 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:16,623 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:16,647 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:12: input:
.. autofunction:: pyleoclim.Spectral.wwz_psd

2017-07-18 16:20:16,666 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz_psd
2017-07-18 16:20:16,691 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 16:20:16,733 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 16:20:16,748 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz_psd')
2017-07-18 16:20:16,764 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz_psd at 0x11d80cbf8>
2017-07-18 16:20:16,777 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz_psd', <function wwz_psd at 0x11d80cbf8>, {}, ['Return the psd o
2017-07-18 16:20:16,792 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz_psd(ys, ts, freqs=None, tau=None, c=0.001, nproc=8, nMC=200, detrend='no', Neff=3, anti_alias=False, avgs=2, method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the psd of a timeseires directly using wwz method.
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       c (float): the decay constant, the default value 1e-3 is good for most of the cases
       nproc (int): the number of processes for multiprocessing
       nMC (int): the number of Monte-Carlo simulations
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       psd (array): power spectral density
       freqs (array): vector of frequency
       psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes
   
   
2017-07-18 16:20:16,831 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:16,857 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:16,876 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:14: input:
.. autofunction:: pyleoclim.Spectral.plot_wwa

2017-07-18 16:20:16,891 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwa
2017-07-18 16:20:16,909 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 16:20:16,929 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 16:20:16,947 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwa')
2017-07-18 16:20:16,965 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwa at 0x11d80cd08>
2017-07-18 16:20:16,991 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwa', <function plot_wwa at 0x11d80cd08>, {}, ['Plot the wavel
2017-07-18 16:20:17,009 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwa(wwa, freqs, tau, Neff=3, AR1_q=None, coi=None, levels=None, tick_range=None, yticks=None, ylim=None, xticks=None, xlabels=None, figsize=[20, 8], clr_map='OrRd', cbar_drawedges=False, cone_alpha=0.5, plot_signif=False, signif_style='contour', plot_cone=False, ax=None, xlabel='Year', ylabel='Period')
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neff (int): effective number of points
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       levels (array): levels of values to plot
       tick_range (array): levels of ticks to show on the colorbar
       yticks (list): ticks on y-axis
       ylim (list): limitations for y-axis
       xticks (list): ticks on x-axis
       figsize (list): the size for the figure
       clr_map (str): the name of the colormap
       cbar_drawedges (bool): whether to draw edges on the colorbar or not
       cone_alpha (float): the alpha value for the area covered by cone of influence
       plot_signif (bool): plot 95% significant area or not
       signif_style (str): plot 95% significant area with `contour` or `shade`
       plot_cone (bool): plot cone of influence or not
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-18 16:20:17,034 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:16: input:
.. autofunction:: pyleoclim.Spectral.plot_wwadist

2017-07-18 16:20:17,052 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwadist
2017-07-18 16:20:17,071 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 16:20:17,089 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 16:20:17,110 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwadist')
2017-07-18 16:20:17,127 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwadist at 0x11d80cd90>
2017-07-18 16:20:17,144 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwadist', <function plot_wwadist at 0x11d80cd90>, {}, ['Plot t
2017-07-18 16:20:17,162 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwadist(wwa, ylim=None)
   :module: pyleoclim.Spectral

   Plot the distribution of wwa with the 95% quantile line.
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       ylim (list): limitations for y-axis
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-18 16:20:17,199 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:18: input:
.. autofunction:: pyleoclim.Spectral.plot_psd
2017-07-18 16:20:17,240 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_psd
2017-07-18 16:20:17,269 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-18 16:20:17,285 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-18 16:20:17,302 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_psd')
2017-07-18 16:20:17,322 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_psd at 0x11d80ce18>
2017-07-18 16:20:17,341 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_psd', <function plot_psd at 0x11d80ce18>, {}, ['Plot the wavel
2017-07-18 16:20:17,357 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_psd(psd, freqs, lmstyle=None, linewidth=None, xticks=None, xlim=None, ylim=None, figsize=[20, 8], label='PSD', plot_ar1=True, psd_ar1_q95=None, psd_ar1_color='#d9544d', ax=None, xlabel='Period', ylabel='Spectral Density')
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       psd (array): power spectral density
       freqs (array): vector of frequency
       xticks (list): ticks on x-axis
       xlim (list): limits for x-axis
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-18 16:20:17,392 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_fit:7: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:17,407 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_sim:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:17,425 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:17,445 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:15: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:17,463 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:12: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:17,478 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:17,491 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "spectral functions"...>>,)
2017-07-18 16:20:17,511 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 70%] [35mStats[39;49;00m                                                 
2017-07-18 16:20:17,545 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a6a2550>, 'Stats')
2017-07-18 16:20:17,573 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Stats', ['Statistics Functions\n====================\n\n.. autofunction:: pyleoclim.Stats.simpleSt
2017-07-18 16:20:17,588 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Stats.rst:4: input:
.. autofunction:: pyleoclim.Stats.simpleStats

2017-07-18 16:20:17,608 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Stats import simpleStats
2017-07-18 16:20:17,633 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Stats
2017-07-18 16:20:17,670 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Stats' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py'>
2017-07-18 16:20:17,687 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'simpleStats')
2017-07-18 16:20:17,702 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function simpleStats at 0x11d80cf28>
2017-07-18 16:20:17,788 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Stats.simpleStats', <function simpleStats at 0x11d80cf28>, {}, ['Computes si
2017-07-18 16:20:17,806 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: simpleStats(y, axis=None)
   :module: pyleoclim.Stats

   Computes simple statistics
   
   Computes the mean, median, min, max, standard deviation, and interquartile
   range of a numpy array y.
   
   Args:
       y (array): A Numpy array
       axis (int, typle of ints): Optional. Axis or Axes along which the means
           are computed, the default is to compute the mean of the flattened
           array. If a tuple of ints, performed over multiple axes
   
   Returns:
       The mean, median, min, max, standard deviation and IQR by columns
   
   
2017-07-18 16:20:17,825 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:17,848 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Stats.rst:6: input:
.. autofunction:: pyleoclim.Stats.corrsig
2017-07-18 16:20:17,869 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Stats import corrsig
2017-07-18 16:20:17,893 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Stats
2017-07-18 16:20:17,913 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Stats' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py'>
2017-07-18 16:20:17,935 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrsig')
2017-07-18 16:20:17,952 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrsig at 0x11d8a70d0>
2017-07-18 16:20:17,967 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Stats.corrsig', <function corrsig at 0x11d8a70d0>, {}, ['Estimates the signi
2017-07-18 16:20:17,984 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrsig(y1, y2, nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim.Stats

   Estimates the significance of correlations between non IID time series by 3 independent methods:
       1) 'ttest': T-test where d.o.f are corrected for the effect of serial correlation
       2) 'isopersistent': AR(1) modeling of x and y.
       3) 'isospectral': phase randomization of original inputs. (default)
       The T-test is parametric test, hence cheap but usually wrong except in idyllic circumstances.
       The others are non-parametric, but their computational requirements scales with nsim.
   
   Args:
       y1, y2 (array)- vector of (real) numbers of identical length, no NaNs allowed
       nsim (int)- the number of simulations [1000]
       method (str)- methods 1-3 above ['isospectral']
       alpha (float)- significance level for critical value estimation [0.05]
   
   Returns:
        r (real): correlation between x and y 
   
        signif (int): true  if significant; false otherwise 
   
        p (real): Fraction of time series with higher correlation coefficents than observed (approximates the p-value). 
   
           Note that signif = True if and only if p <= alpha.
   
2017-07-18 16:20:18,003 [WARNING] sphinx.util.docutils: Enumerated list ends without a blank line; unexpected unindent.
2017-07-18 16:20:18,026 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py:docstring of pyleoclim.Stats.simpleStats:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:18,046 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py:docstring of pyleoclim.Stats.corrsig:4: (WARNING/2) Enumerated list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:18,060 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "statistics functions"...>>,)
2017-07-18 16:20:18,080 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 80%] [35mSummaryPlots[39;49;00m                                          
2017-07-18 16:20:18,096 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a6a2550>, 'SummaryPlots')
2017-07-18 16:20:18,114 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('SummaryPlots', ['Summary Plots\n==============\n\nThis module handles some basic return for the su
2017-07-18 16:20:18,132 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:8: input:
.. autofunction:: pyleoclim.SummaryPlots.getMetadata

2017-07-18 16:20:18,155 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import getMetadata
2017-07-18 16:20:18,173 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-18 16:20:18,189 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-18 16:20:18,205 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getMetadata')
2017-07-18 16:20:18,220 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getMetadata at 0x11c9009d8>
2017-07-18 16:20:18,289 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.getMetadata', <function getMetadata at 0x11c9009d8>, {}, ['Get 
2017-07-18 16:20:18,308 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getMetadata(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary metadata to be printed out automatically
   
   Args:
       timeseries: a specific timeseries object. 
       
   Returns:
       A dictionary containing the following metadata:
   
       archiveType 
   
       Authors (if more than 2, replace by et al. 
   
       PublicationYear 
   
       Publication DOI 
   
       Variable Name 
   
       Units 
   
       Climate Interpretation 
   
       Calibration Equation 
   
       Calibration References 
   
       Calibration Notes 
   
       
   
2017-07-18 16:20:18,326 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:10: input:
.. autofunction:: pyleoclim.SummaryPlots.TsData

2017-07-18 16:20:18,349 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import TsData
2017-07-18 16:20:18,365 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-18 16:20:18,380 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-18 16:20:18,396 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'TsData')
2017-07-18 16:20:18,409 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function TsData at 0x11c900a60>
2017-07-18 16:20:18,425 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.TsData', <function TsData at 0x11c900a60>, {}, ['Get the PaleoD
2017-07-18 16:20:18,447 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: TsData(timeseries, x_axis='')
   :module: pyleoclim.SummaryPlots

   Get the PaleoData with age/depth information
       
   Get the necessary information for the TS plots/necessary to allow for
   axes specification
   
   Args:
       timeseries: a single timeseries object. 
           By default, will prompt the user
       x-axis (str): The representation against which to plot the 
           paleo-data. Options are "age", "year", and "depth". 
           Default is to let the system choose if only one available 
           or prompt the user.
   Returns:
       x - the x-valus 
   
       y - the y-values 
   
       archiveType - the archiveType (for plot settings) 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       label - the results of the x-axis query. Either depth, year, or age
       
   
2017-07-18 16:20:18,470 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:12: input:
.. autofunction:: pyleoclim.SummaryPlots.agemodelData
2017-07-18 16:20:18,486 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import agemodelData
2017-07-18 16:20:18,502 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-18 16:20:18,516 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-18 16:20:18,532 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'agemodelData')
2017-07-18 16:20:18,559 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function agemodelData at 0x11c900ae8>
2017-07-18 16:20:18,579 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.agemodelData', <function agemodelData at 0x11c900ae8>, {}, ['Ge
2017-07-18 16:20:18,604 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: agemodelData(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary information for the agemodel plot
   
   Args:
       timeseries: a single timeseries object. By default, will
           prompt the user
   
   Returns:
       depth - the depth values 
   
       age - the age values 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       archiveType - the archiveType (for default plot settings)
   
   
2017-07-18 16:20:18,633 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "summary plots"...>>,)
2017-07-18 16:20:18,661 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 90%] [35mTimeseries[39;49;00m                                            
2017-07-18 16:20:18,680 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a6a2550>, 'Timeseries')
2017-07-18 16:20:18,722 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Timeseries', ['Timeseries Functions\n====================\n\nThis module allows the manipulation o
2017-07-18 16:20:18,751 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:6: input:
.. autofunction:: pyleoclim.Timeseries.bin

2017-07-18 16:20:18,769 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import bin
2017-07-18 16:20:18,783 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 16:20:18,803 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 16:20:18,817 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'bin')
2017-07-18 16:20:18,835 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function bin at 0x11d806620>
2017-07-18 16:20:18,893 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.bin', <function bin at 0x11d806620>, {}, ['Bin the values', '', '
2017-07-18 16:20:18,909 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: bin(x, y, bin_size='', start='', end='')
   :module: pyleoclim.Timeseries

   Bin the values
   
   Args:
       x (array): the x-axis series.
       y (array): the y-axis series.
       bin_size (float): The size of the bins. Default is the average resolution
       start (float): Where/when to start binning. Default is the minimum
       end (float): When/where to stop binning. Defulat is the maximum
   
   Returns:
       binned_values - the binned output 
   
       bins - the bins (centered on the median, i.e., the 100-200 bin is 150) 
   
       n - number of data points in each bin 
   
       error -  the standard error on the mean in each bin
   
   
2017-07-18 16:20:18,932 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:8: input:
.. autofunction:: pyleoclim.Timeseries.interp

2017-07-18 16:20:18,950 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import interp
2017-07-18 16:20:18,989 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 16:20:19,016 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 16:20:19,035 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interp')
2017-07-18 16:20:19,073 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interp at 0x11d806730>
2017-07-18 16:20:19,089 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.interp', <function interp at 0x11d806730>, {}, ['Linear interpola
2017-07-18 16:20:19,107 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interp(x, y, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Linear interpolation onto a new x-axis
   
   Args:
       x (array): the x-axis
       y (array): the y-axis
       interp_step (float): the interpolation step. Default is mean resolution.
       start (float): where/when to start the interpolation. Default is min..
       end (float): where/when to stop the interpolation. Defaul is max.
   
   Returns:
       xi - the interpolated x-axis 
   
       interp_values - the interpolated values
    
   
2017-07-18 16:20:19,127 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:10: input:
.. autofunction:: pyleoclim.Timeseries.onCommonAxis

2017-07-18 16:20:19,146 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import onCommonAxis
2017-07-18 16:20:19,180 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 16:20:19,200 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 16:20:19,218 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'onCommonAxis')
2017-07-18 16:20:19,238 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function onCommonAxis at 0x11d8067b8>
2017-07-18 16:20:19,270 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.onCommonAxis', <function onCommonAxis at 0x11d8067b8>, {}, ['Plac
2017-07-18 16:20:19,294 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: onCommonAxis(x1, y1, x2, y2, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Places two timeseries on a common axis
   
   Args:
       x1 (array): x-axis values of the first timeseries
       y1 (array): y-axis values of the first timeseries
       x2 (array): x-axis values of the second timeseries
       y2 (array): y-axis values of the second timeseries
       interp_step (float): The interpolation step. Default is mean resolution
           of lowest resolution series
       start (float): where/when to start. Default is the maximum of the minima of
           the two timeseries
       end (float): Where/when to end. Default is the minimum of the maxima of
           the two timeseries
   
   Returns:
       xi -  the interpolated x-axis 
   
       interp_values1 -  the interpolated y-values for the first timeseries
       interp_values2 - the intespolated y-values for the second timeseries
   
2017-07-18 16:20:19,335 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-18 16:20:19,376 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-18 16:20:19,401 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:12: input:
.. autofunction:: pyleoclim.Timeseries.standardize
2017-07-18 16:20:19,419 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import standardize
2017-07-18 16:20:19,435 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-18 16:20:19,449 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-18 16:20:19,468 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardize')
2017-07-18 16:20:19,501 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardize at 0x11d806840>
2017-07-18 16:20:19,576 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.standardize', <function standardize at 0x11d806840>, {}, ['Center
2017-07-18 16:20:19,600 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardize(x, scale=1, axis=0, ddof=0, eps=0.001)
   :module: pyleoclim.Timeseries

   Centers and normalizes a given time series. Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed
       mu (real): the mean of the original time series, E[X]
       sig (real): the standard deviation of the original time series, std[X]
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2017-07-18 16:20:19,632 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.onCommonAxis:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-18 16:20:19,649 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.onCommonAxis:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-18 16:20:19,677 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "timeseries functions"...>>,)
2017-07-18 16:20:19,702 [INFO] sphinx.util: [01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                 
2017-07-18 16:20:19,722 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a6a2550>, 'index')
2017-07-18 16:20:19,748 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('index', [".. Pyleoclim documentation master file, created by\n   sphinx-quickstart on Fri Feb 10 1
2017-07-18 16:20:19,784 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <comment...><section "welcome to pyleoclim's documentati ...>,)
2017-07-18 16:20:19,806 [INFO] sphinx.util: 
2017-07-18 16:20:19,822 [DEBUG] sphinx.application: [app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x10a6a2550>,)
2017-07-18 16:20:05,034 [WARNING] sphinx.util.docutils: Literal block expected; none found.
2017-07-18 16:20:19,902 [INFO] sphinx.builders: [01mlooking for now-outdated files... [39;49;00m
2017-07-18 16:20:19,947 [DEBUG] sphinx.application: [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x10a6a2550>,)
2017-07-18 16:20:20,010 [INFO] sphinx.builders: none found
2017-07-18 16:20:20,086 [INFO] sphinx.builders: [01mpickling environment... [39;49;00m
2017-07-18 16:20:20,119 [INFO] sphinx.builders: done
2017-07-18 16:20:20,162 [INFO] sphinx.builders: [01mchecking consistency... [39;49;00m
2017-07-18 16:20:20,218 [DEBUG] sphinx.application: [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x10a6a2550>,)
2017-07-18 16:20:20,287 [INFO] sphinx.builders: done
2017-07-18 16:20:20,311 [DEBUG] sphinx.builders: docnames to write: Introduction, LipdUtils, Main, Map, Plot, Spectral, Stats, SummaryPlots, Timeseries, index
2017-07-18 16:20:20,337 [INFO] sphinx.builders: [01mpreparing documents... [39;49;00m
2017-07-18 16:20:20,376 [INFO] sphinx.builders: done
2017-07-18 16:20:20,406 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 10%] [32mIntroduction[39;49;00m                                           
2017-07-18 16:20:20,425 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "pyleoclim"...>>, 'Introduction')
2017-07-18 16:20:20,587 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 20%] [32mLipdUtils[39;49;00m                                              
2017-07-18 16:20:20,610 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "lipd utilities"...>>, 'LipdUtils')
2017-07-18 16:20:20,687 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 30%] [32mMain[39;49;00m                                                   
2017-07-18 16:20:20,715 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "main functions"...>>, 'Main')
2017-07-18 16:20:20,811 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 40%] [32mMap[39;49;00m                                                    
2017-07-18 16:20:20,841 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "mapping functions"...>>, 'Map')
2017-07-18 16:20:20,925 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 50%] [32mPlot[39;49;00m                                                   
2017-07-18 16:20:20,956 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "plotting functions"...>>, 'Plot')
2017-07-18 16:20:21,037 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 60%] [32mSpectral[39;49;00m                                               
2017-07-18 16:20:21,097 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "spectral functions"...>>, 'Spectral')
2017-07-18 16:20:21,148 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 70%] [32mStats[39;49;00m                                                  
2017-07-18 16:20:21,187 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "statistics functions"...>>, 'Stats')
2017-07-18 16:20:21,359 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 80%] [32mSummaryPlots[39;49;00m                                           
2017-07-18 16:20:21,388 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "summary plots"...>>, 'SummaryPlots')
2017-07-18 16:20:21,464 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 90%] [32mTimeseries[39;49;00m                                             
2017-07-18 16:20:21,496 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "timeseries functions"...>>, 'Timeseries')
2017-07-18 16:20:21,597 [INFO] sphinx.util: [01mwriting output... [39;49;00m[100%] [32mindex[39;49;00m                                                  
2017-07-18 16:20:21,629 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <comment...><section "welcome to pyleoclim's documentati ...>, 'index')
2017-07-18 16:20:21,746 [INFO] sphinx.util: 
2017-07-18 16:20:21,771 [INFO] sphinx.builders.html: [01mgenerating indices...[39;49;00m
2017-07-18 16:20:21,793 [INFO] sphinx.builders.html:  genindex
2017-07-18 16:20:21,896 [INFO] sphinx.builders.html: 
2017-07-18 16:20:21,919 [DEBUG] sphinx.application: [app] emitting event: 'html-collect-pages'()
2017-07-18 16:20:21,942 [INFO] sphinx.builders.html: [01mwriting additional pages...[39;49;00m
2017-07-18 16:20:21,962 [INFO] sphinx.builders.html:  search
2017-07-18 16:20:22,004 [INFO] sphinx.builders.html: 
2017-07-18 16:20:22,031 [INFO] sphinx.builders.html: [01mcopying static files... [39;49;00m
2017-07-18 16:20:22,227 [INFO] sphinx.builders.html: done
2017-07-18 16:20:22,260 [INFO] sphinx.builders.html: [01mcopying extra files... [39;49;00m
2017-07-18 16:20:22,383 [INFO] sphinx.builders.html: done
2017-07-18 16:20:22,414 [INFO] sphinx.builders.html: [01mdumping search index in English (code: en) ... [39;49;00m
2017-07-18 16:20:22,468 [INFO] sphinx.builders.html: done
2017-07-18 16:20:22,499 [INFO] sphinx.builders.html: [01mdumping object inventory... [39;49;00m
2017-07-18 16:20:22,549 [INFO] sphinx.builders.html: done
2017-07-18 16:20:22,574 [INFO] sphinx.application: [01mbuild succeeded, 1 warning.[39;49;00m
2017-07-18 16:20:22,598 [DEBUG] sphinx.application: [app] emitting event: 'build-finished'(None,)
2017-07-20 11:01:26,047 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:26,048 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'readLipd')
2017-07-20 11:01:26,066 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'readLipd' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'readLipd'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: readLipd

2017-07-20 11:01:26,082 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:27: (WARNING/2) autodoc: failed to import function 'readLipd' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'readLipd'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: readLipd
2017-07-20 11:01:26,100 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: input:
.. autofunction:: pyleoclim.extractTs

2017-07-20 11:01:26,114 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import extractTs
2017-07-20 11:01:26,129 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:26,147 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:26,162 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'extractTs')
2017-07-20 11:01:26,179 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'extractTs' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'extractTs'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: extractTs

2017-07-20 11:01:26,195 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: (WARNING/2) autodoc: failed to import function 'extractTs' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'extractTs'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: extractTs
2017-07-20 11:01:26,211 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:32: input:
.. autofunction:: pyleoclim.mapAllArchive

2017-07-20 11:01:26,230 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapAllArchive
2017-07-20 11:01:26,244 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:26,258 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:26,276 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAllArchive')
2017-07-20 11:01:26,289 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAllArchive at 0x122ae38c8>
2017-07-20 11:01:26,616 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapAllArchive', <function mapAllArchive at 0x122ae38c8>, {}, ['Map all the a
2017-07-20 11:01:26,631 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAllArchive(lipds='', markersize=50, background='shadedrelief', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map all the available records loaded into the workspace by archiveType.
   
   Map of all the records into the workspace by archiveType.
       Uses the default color palette. Enter pyleoclim.plot_default for detail.
   
   Args:
       lipds (dict): A dictionary of LiPD files. (Optional)
       markersize (int): The size of the markers. Default is 50
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
       saveFig (bool): Default is to not save the figure
       dir (str): The absolute path of the directory in which to save the
           figure. If not provided, creates a default folder called 'figures'
           in the LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
2017-07-20 11:01:26,651 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:26,666 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:26,682 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:26,697 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:26,716 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:34: input:
.. autofunction:: pyleoclim.mapLipd

2017-07-20 11:01:26,730 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapLipd
2017-07-20 11:01:26,745 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:26,766 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:26,791 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapLipd')
2017-07-20 11:01:26,809 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapLipd at 0x122ae3950>
2017-07-20 11:01:26,823 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapLipd', <function mapLipd at 0x122ae3950>, {}, ['Create a Map for a single
2017-07-20 11:01:26,838 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapLipd(timeseries='', countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='default', figsize=[4, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Create a Map for a single record
   
   Orthographic projection map of a single record.
   
   Args:
       timeseries: a LiPD timeseries object. Will prompt for one if not given
       countries (bool): Draws the country borders. Default is on (True).
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders.
           Default is off (False)
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief
       scale (float): useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): default is 50
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-20 11:01:26,854 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:26,869 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:26,884 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:01:26,898 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:26,914 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:26,930 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:26,946 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:26,963 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:38: input:
.. autofunction:: pyleoclim.plotTs

2017-07-20 11:01:26,979 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotTs
2017-07-20 11:01:26,996 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:27,012 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:27,026 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotTs')
2017-07-20 11:01:27,043 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotTs at 0x122ae39d8>
2017-07-20 11:01:27,058 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.plotTs', <function plotTs at 0x122ae39d8>, {}, ['Plot a single time series.'
2017-07-20 11:01:27,073 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotTs(timeseries='', x_axis='', markersize=50, marker='default', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Plot a single time series.
   
   Args:
       A timeseries: By default, will prompt the user for one.
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       markersize (int): default is 50.
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure.
   
   
2017-07-20 11:01:27,096 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:27,115 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:27,135 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:27,151 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:27,165 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:27,181 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:27,198 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:40: input:
.. autofunction:: pyleoclim.histTs

2017-07-20 11:01:27,213 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import histTs
2017-07-20 11:01:27,227 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:27,242 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:27,258 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'histTs')
2017-07-20 11:01:27,298 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function histTs at 0x122ae3a60>
2017-07-20 11:01:27,318 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.histTs', <function histTs at 0x122ae3a60>, {}, ['Plot a univariate distribut
2017-07-20 11:01:27,335 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: histTs(timeseries='', bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'Rug'}, fit_kws={'label': 'Fit'}, color='default', vertical=False, norm_hist=True, figsize=[5, 5], saveFig=False, format='eps', dir='')
   :module: pyleoclim

   Plot a univariate distribution of the PaleoData values
   
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the
   seaborn kdeplot() and rugplot() functions. It can also fit
   scipy.stats distributions and plot the estimated PDF over the data.
   
   Args:
       timeseries: A timeseries. By default, will prompt the user for one.
       bins (int): Specification of hist bins following matplotlib(hist),
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning
           a tuple that can be passed to a pdf method of positional
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in. Default is to use the default paletter for each
           archive type.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or
           fitted density is plotted
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns
       fig - The figure
   
   
2017-07-20 11:01:27,352 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:27,371 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:27,386 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:27,402 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:27,418 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:01:27,435 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:27,452 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:27,467 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:27,484 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:27,503 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:48: input:
.. autofunction:: pyleoclim.summaryTs

2017-07-20 11:01:27,516 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import summaryTs
2017-07-20 11:01:27,530 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:27,545 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:27,558 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'summaryTs')
2017-07-20 11:01:27,574 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function summaryTs at 0x122ae3ae8>
2017-07-20 11:01:27,589 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.summaryTs', <function summaryTs at 0x122ae3ae8>, {}, ['Basic summary plot', 
2017-07-20 11:01:27,604 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: summaryTs(timeseries='', x_axis='', saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Basic summary plot
   
   Plots the following information: the time series, a histogram of
   the PaleoData_values, location map, spectral density using the wwz 
   method, and metadata about the record.
   
   Args:
       timeseries: a timeseries object. By default, will prompt for one
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-20 11:01:27,621 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:27,643 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:27,661 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:27,679 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:27,698 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:53: input:
.. autofunction:: pyleoclim.statsTs

2017-07-20 11:01:27,715 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import statsTs
2017-07-20 11:01:27,738 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:27,784 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:27,819 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'statsTs')
2017-07-20 11:01:27,836 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function statsTs at 0x122ae3b70>
2017-07-20 11:01:27,851 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.statsTs', <function statsTs at 0x122ae3b70>, {}, ['Calculate simple statisti
2017-07-20 11:01:27,867 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: statsTs(timeseries='')
   :module: pyleoclim

   Calculate simple statistics of a timeseries
   
   Args:
       timeseries: sytem will prompt for one if not given
   
   Returns:
       the mean, median, min, max, standard deviation and the
       inter-quartile range (IQR) of a timeseries.
   
   Examples:
       >>> mean, median, min_, max_, std, IQR = pyleo.statsTs(timeseries)
   
   
2017-07-20 11:01:27,889 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:55: input:
.. autofunction:: pyleoclim.corrSigTs

2017-07-20 11:01:27,905 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import corrSigTs
2017-07-20 11:01:27,920 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:27,936 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:27,951 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrSigTs')
2017-07-20 11:01:27,967 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrSigTs at 0x122ae3bf8>
2017-07-20 11:01:27,984 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.corrSigTs', <function corrSigTs at 0x122ae3bf8>, {}, ['Estimates the signifi
2017-07-20 11:01:28,001 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrSigTs(timeseries1='', timeseries2='', x_axis='', interp_step='', start='', end='', nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim

   Estimates the significance of correlations between non IID timeseries.
   
   Function written by. F. Zhu.
   
   Args:
       timeseries1, timeseries2: timeseries object. Default is blank.
       x-axis (str): The representation against which to express the
           paleo-data. Options are "age", "year", and "depth".
           Default is to let the system choose if only one available
           or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start time/age/depth. Default is the maximum of
           the minima of the two timeseries
       end (float): End time/age/depth. Default is the minimum of the
           maxima of the two timeseries
       nsim (int): the number of simulations. Default is 1000
       method (str): method use to estimate the correlation and significance.
           Available methods include:
               - 'ttest': T-test where the degrees of freedom are corrected for
               the effect of serial correlation 
   
               - 'isopersistant': AR(1) modeling of the two timeseries 
   
               - 'isospectral' (default): phase randomization of original
               inputs.
           The T-test is parametric test, hence cheap but usually wrong
           except in idyllic circumstances.
           The others are non-parametric, but their computational
           requirements scales with nsim.
       alpha (float): significance level for critical value estimation. Default is 0.05
   
   Returns:
       r (float) - correlation between the two timeseries 
   
       sig (bool) -  Returns True if significant, False otherwise 
   
       p (real) - the p-value
   
   
2017-07-20 11:01:28,020 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:28,042 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,058 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:28,084 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,103 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,119 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:28,138 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,154 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,171 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,187 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,207 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:61: input:
.. autofunction:: pyleoclim.binTs

2017-07-20 11:01:28,221 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import binTs
2017-07-20 11:01:28,241 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:28,258 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:28,304 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'binTs')
2017-07-20 11:01:28,323 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function binTs at 0x122ae3c80>
2017-07-20 11:01:28,346 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.binTs', <function binTs at 0x122ae3c80>, {}, ['Bin the paleoData values of t
2017-07-20 11:01:28,361 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: binTs(timeseries='', x_axis='', bin_size='', start='', end='')
   :module: pyleoclim

   Bin the paleoData values of the timeseries
   
   Args:
       timeseries. By default, will prompt the user for one.
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system  choose if only one available or prompt the user.
       bin_size (float): the size of the bins to be used. By default,
           will prompt for one
       start (float): Start time/age/depth. Default is the minimum
       end (float): End time/age/depth. Default is the maximum
   
   Returns:
       binned_values- the binned output,
   
       bins-  the bins (centered on the median, i.e. the 100-200 bin is 150),
   
       n-  number of data points in each bin,
   
       error- the standard error on the mean in each bin
   
   
   
2017-07-20 11:01:28,382 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:28,398 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,415 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,436 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:63: input:
.. autofunction:: pyleoclim.interpTs

2017-07-20 11:01:28,451 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import interpTs
2017-07-20 11:01:28,467 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:28,485 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:28,501 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interpTs')
2017-07-20 11:01:28,515 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interpTs at 0x122ae3d08>
2017-07-20 11:01:28,531 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.interpTs', <function interpTs at 0x122ae3d08>, {}, ['Simple linear interpola
2017-07-20 11:01:28,546 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interpTs(timeseries='', x_axis='', interp_step='', start='', end='')
   :module: pyleoclim

   Simple linear interpolation
   
   Simple linear interpolation of the data using the numpy.interp method
   
   Args:
       timeseries. Default is blank, will prompt for it
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start year/age/depth. Default is the minimum
       end (float): End year/age/depth. Default is the maximum
   
   Returns:
       interp_age - the interpolated age/year/depth according to the end/start
       and time step, 
   
       interp_values - the interpolated values
   
   
2017-07-20 11:01:28,563 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:28,585 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,609 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:65: input:
.. autofunction:: pyleoclim.standardizeTs

2017-07-20 11:01:28,627 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import standardizeTs
2017-07-20 11:01:28,646 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:28,661 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:28,677 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardizeTs')
2017-07-20 11:01:28,691 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardizeTs at 0x122ae3d90>
2017-07-20 11:01:28,706 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.standardizeTs', <function standardizeTs at 0x122ae3d90>, {}, ['Centers and n
2017-07-20 11:01:28,719 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardizeTs(timeseries='', scale=1, ddof=0, eps=0.001)
   :module: pyleoclim

   Centers and normalizes the paleoData values of a  given time series.
   
   Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       - z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed 
   
       - mu (real): the mean of the original time series, E[X] 
   
       - sig (real): the standard deviation of the original time series, std[X] 
   
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2017-07-20 11:01:28,744 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:69: input:
.. autofunction:: pyleoclim.wwzTs

2017-07-20 11:01:28,773 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import wwzTs
2017-07-20 11:01:28,799 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:01:28,817 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:01:28,832 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwzTs')
2017-07-20 11:01:28,849 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwzTs at 0x122ae3ea0>
2017-07-20 11:01:28,863 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.wwzTs', <function wwzTs at 0x122ae3ea0>, {}, ['Weigthed wavelet Z-transform 
2017-07-20 11:01:28,879 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwzTs(timeseries='', wwz=False, psd=True, wwz_default=True, psd_default=True, wwaplot_default=True, psdplot_default=True, fig=True, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Weigthed wavelet Z-transform analysis
   
   Wavelet analysis for unevenly spaced data adapted from Foster et al. (1996)
   
   Args:
       timeseries (dict): A LiPD timeseries object (Optional, will prompt for one.)
       wwz (bool): If True, will perform wavelet analysis
       psd (bool): If True, will inform the power spectral density of the timeseries
       wwz_default: If True, will use the following default parameters:
           
           wwz_default = {'tau':None,'freqs':None,'c':1/(8*np.pi**2),'Neff':3,'nMC':200,
                              'nproc':8,'detrend':'no','method':'Kirchner_f2py'}.
               
           Modify the values for specific keys to change the default behavior.
               
       psd_default: If True, will use the following default parameters:
           
           psd_default = {'tau':None,
                         'freqs': None,
                         'c':1e-3,
                         'nproc':8,
                         'nMC':200,
                         'detrend':'no',
                         'Neff':3,
                         'anti_alias':False,
                         'avgs':2,
                         'method':'Kirchner_f2py'}
           
           Modify the values for specific keys to change the default behavior.
           
       wwaplot_default: If True, will use the following default parameters:
           
           wwaplot_default={'Neff':3,
                                'AR1_q':AR1_q,
                                'coi':coi,
                                'levels':None,
                                'tick_range':None,
                                'yticks':None,
                                'ylim':None,
                                'xticks':None,
                                'xlabels':None,
                                'figsize':[20,8],
                                'clr_map':'OrRd',
                                'cbar_drawedges':False,
                                'cone_alpha':0.5,
                                'plot_signif':True,
                                'signif_style':'contour',
                                'plot_cone':True}
           
           Modify the values for specific keys to change the default behavior.
       psdplot_default: If True, will use the following default parameters:
           
           psdplot_default={'lmstyle':None,
                            'linewidth':None,
                            'xticks':None,
                            'xlim':None,
                            'ylim':None,
                            'figsize':[20,8],
                            'label':'PSD',
                            'plot_ar1':True,
                            'psd_ar1_q95':psd_ar1_q95,
                            'psd_ar1_color':sns.xkcd_rgb["pale red"]}
           
           Modify the values for specific keys to change the default behavior.
           
       fig (bool): If True, plots the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       
   Returns:
       dict_out (dict): A dictionary of outputs. 
           
           For wwz: 
           
           - wwa (array): The weights wavelet amplitude 
       
           - AR1_q (array): AR1 simulations 
       
           - coi (array): cone of influence 
       
           - freqs (array): vector for frequencies 
       
           - tau (array): the evenly-spaced time points, namely the time 
           shift for wavelet analysis. 
       
           - Neffs (array): The matrix of effective number of points in the
           time-scale coordinates.
       
           - coeff (array): The wavelet transform coefficients
       
           For psd: 
           
           - psd (array): power spectral density 
       
           - freqs (array): vector of frequency 
       
           - psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes 
       
       fig: The figure
        
       References:
           Foster, G. (1996). Wavelets for period analysis of unevenly 
           sampled time series. The Astronomical Journal, 112(4), 1709-1729.
       
       Examples:
           To run both wwz and psd: 
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(wwz=True)
           
           Note: This will return a single figure with wwa and psd 
   
           
           To change a default behavior:
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(psd_default = {'nMC':1000}) 
          
   
2017-07-20 11:01:28,905 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,920 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:28,937 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,956 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:01:28,972 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:01:29,044 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:27: (WARNING/2) autodoc: failed to import function ‘readLipd’ from module ‘pyleoclim’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim’ has no attribute ‘readLipd’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: readLipd
 [filtered system message]
2017-07-20 11:01:29,057 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: (WARNING/2) autodoc: failed to import function ‘extractTs’ from module ‘pyleoclim’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim’ has no attribute ‘extractTs’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: extractTs
 [filtered system message]
2017-07-20 11:01:29,071 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,086 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,104 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,118 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,136 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,152 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,166 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,183 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:19: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,202 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,219 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,235 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:26: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,248 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,268 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,292 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,311 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,324 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:15: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,339 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,352 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,366 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,380 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,394 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,409 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,422 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:26: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,440 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,454 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:31: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,468 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:33: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,482 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,496 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,510 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:14: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,523 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,540 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,555 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,570 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,587 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,603 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:16: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,617 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:18: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,631 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:20: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,646 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:25: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,659 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:26: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,675 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:30: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,691 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,708 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,723 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:10: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,738 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,753 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,773 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:51: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,792 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:69: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:29,812 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:71: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,828 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:89: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,842 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:92: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:29,857 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "main functions"...>>,)
2017-07-20 11:01:29,882 [INFO] sphinx.util: [01mreading sources... [39;49;00m[100%] [35mSpectral[39;49;00m                                              
2017-07-20 11:01:29,896 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10f8c1390>, 'Spectral')
2017-07-20 11:01:29,916 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Spectral', ['Spectral Functions\n==================\n\nThis module allows analysis in the frequenc
2017-07-20 11:01:29,933 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:6: input:
.. autofunction:: pyleoclim.Spectral.ar1_fit

2017-07-20 11:01:29,946 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_fit
2017-07-20 11:01:29,960 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:01:29,975 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:01:29,989 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_fit')
2017-07-20 11:01:30,005 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_fit at 0x121b0dbf8>
2017-07-20 11:01:30,520 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_fit', <function ar1_fit at 0x121b0dbf8>, {}, ['Returns the lag-
2017-07-20 11:01:30,537 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_fit(ys, ts=None, detrend='no')
   :module: pyleoclim.Spectral

   Returns the lag-1 autocorrelation from ar1 fit OR persistence from tauest.
   
   Args:
       ys (array): the time series
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
   
   Returns:
       g (float): lag-1 autocorrelation coefficient (for evenly-spaced time series)
       OR estimated persistence (for unevenly-spaced time series)
   
2017-07-20 11:01:30,553 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:30,572 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:8: input:
.. autofunction:: pyleoclim.Spectral.ar1_sim

2017-07-20 11:01:30,590 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_sim
2017-07-20 11:01:30,613 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:01:30,627 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:01:30,643 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_sim')
2017-07-20 11:01:30,658 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_sim at 0x122a199d8>
2017-07-20 11:01:30,673 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_sim', <function ar1_sim at 0x122a199d8>, {}, ['Produce p realiz
2017-07-20 11:01:30,687 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_sim(ys, n, p, ts=None, detrend='no')
   :module: pyleoclim.Spectral

   Produce p realizations of an AR1 process of length n with lag-1 autocorrelation g calculated from `ys` and `ts`
   
   Args:
       ys (array): a time series
       n, p (int): dimensions as n rows by p columns
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
   
   Returns:
       red (matrix): n rows by p columns matrix of an AR1 process
   
   
2017-07-20 11:01:30,706 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:30,727 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:10: input:
.. autofunction:: pyleoclim.Spectral.wwz

2017-07-20 11:01:30,742 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz
2017-07-20 11:01:30,759 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:01:30,775 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:01:30,789 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz')
2017-07-20 11:01:30,810 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz at 0x122a19a60>
2017-07-20 11:01:30,832 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz', <function wwz at 0x122a19a60>, {}, ['Return the weighted wave
2017-07-20 11:01:30,851 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz(ys, ts, tau=None, freqs=None, c=0.012665147955292222, Neff=3, nMC=200, nproc=8, detrend='no', method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the weighted wavelet amplitude (WWA) with phase, AR1_q, and cone of influence, as well as WT coeeficients
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       tau (array): the evenly-spaced time points
       freqs (array): vector of frequency
       c (float): the decay constant, the default value 1/(8*np.pi**2) is good for most of the cases
       Neff (int): effective number of points
       nMC (int): the number of Monte-Carlo simulations
       nproc (int): the number of processes for multiprocessing
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       wwa (array): the weighted wavelet amplitude.
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neffs (array): the matrix of effective number of points in the time-scale coordinates
       coeff (array): the wavelet transform coefficents
   
   
2017-07-20 11:01:30,870 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:30,886 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:30,904 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:12: input:
.. autofunction:: pyleoclim.Spectral.wwz_psd

2017-07-20 11:01:30,919 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz_psd
2017-07-20 11:01:30,934 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:01:30,954 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:01:30,973 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz_psd')
2017-07-20 11:01:30,989 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz_psd at 0x122a19ae8>
2017-07-20 11:01:31,006 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz_psd', <function wwz_psd at 0x122a19ae8>, {}, ['Return the psd o
2017-07-20 11:01:31,027 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz_psd(ys, ts, freqs=None, tau=None, c=0.001, nproc=8, nMC=200, detrend='no', Neff=3, anti_alias=False, avgs=2, method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the psd of a timeseires directly using wwz method.
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       c (float): the decay constant, the default value 1e-3 is good for most of the cases
       nproc (int): the number of processes for multiprocessing
       nMC (int): the number of Monte-Carlo simulations
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       psd (array): power spectral density
       freqs (array): vector of frequency
       psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes
   
   
2017-07-20 11:01:31,056 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:01:31,085 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:01:31,104 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:14: input:
.. autofunction:: pyleoclim.Spectral.plot_wwa

2017-07-20 11:01:31,123 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwa
2017-07-20 11:01:31,140 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:01:31,153 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:01:31,175 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwa')
2017-07-20 11:01:31,193 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwa at 0x122a19bf8>
2017-07-20 11:01:31,211 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwa', <function plot_wwa at 0x122a19bf8>, {}, ['Plot the wavel
2017-07-20 11:01:31,224 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwa(wwa, freqs, tau, Neff=3, AR1_q=None, coi=None, levels=None, tick_range=None, yticks=None, ylim=None, xticks=None, xlabels=None, figsize=[20, 8], clr_map='OrRd', cbar_drawedges=False, cone_alpha=0.5, plot_signif=False, signif_style='contour', plot_cone=False, ax=None, xlabel='Year', ylabel='Period')
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neff (int): effective number of points
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       levels (array): levels of values to plot
       tick_range (array): levels of ticks to show on the colorbar
       yticks (list): ticks on y-axis
       ylim (list): limitations for y-axis
       xticks (list): ticks on x-axis
       figsize (list): the size for the figure
       clr_map (str): the name of the colormap
       cbar_drawedges (bool): whether to draw edges on the colorbar or not
       cone_alpha (float): the alpha value for the area covered by cone of influence
       plot_signif (bool): plot 95% significant area or not
       signif_style (str): plot 95% significant area with `contour` or `shade`
       plot_cone (bool): plot cone of influence or not
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-20 11:01:31,244 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:16: input:
.. autofunction:: pyleoclim.Spectral.plot_wwadist

2017-07-20 11:01:31,258 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwadist
2017-07-20 11:01:31,274 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:01:31,291 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:01:31,306 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwadist')
2017-07-20 11:01:31,320 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwadist at 0x122a19c80>
2017-07-20 11:01:31,335 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwadist', <function plot_wwadist at 0x122a19c80>, {}, ['Plot t
2017-07-20 11:01:31,349 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwadist(wwa, ylim=None)
   :module: pyleoclim.Spectral

   Plot the distribution of wwa with the 95% quantile line.
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       ylim (list): limitations for y-axis
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-20 11:01:31,376 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:18: input:
.. autofunction:: pyleoclim.Spectral.plot_psd
2017-07-20 11:01:31,392 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_psd
2017-07-20 11:01:31,409 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:01:31,426 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:01:31,446 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_psd')
2017-07-20 11:01:31,463 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_psd at 0x122a19d08>
2017-07-20 11:01:31,479 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_psd', <function plot_psd at 0x122a19d08>, {}, ['Plot the wavel
2017-07-20 11:01:31,495 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_psd(psd, freqs, lmstyle=None, linewidth=None, xticks=None, xlim=None, ylim=None, figsize=[20, 8], label='PSD', plot_ar1=False, psd_ar1_q95=None, psd_ar1_color='#d9544d', ax=None, xlabel='Period', ylabel='Spectral Density')
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       psd (array): power spectral density
       freqs (array): vector of frequency
       xticks (list): ticks on x-axis
       xlim (list): limits for x-axis
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-20 11:01:31,536 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_fit:7: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:31,550 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_sim:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:31,564 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:31,580 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:15: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:31,594 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:12: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:01:31,610 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:01:31,625 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "spectral functions"...>>,)
2017-07-20 11:01:31,646 [INFO] sphinx.util: 
2017-07-20 11:01:31,660 [DEBUG] sphinx.application: [app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x10f8c1390>,)
2017-07-20 11:01:31,675 [INFO] sphinx.builders: [01mlooking for now-outdated files... [39;49;00m
2017-07-20 11:01:31,688 [DEBUG] sphinx.application: [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x10f8c1390>,)
2017-07-20 11:01:31,704 [INFO] sphinx.builders: none found
2017-07-20 11:01:31,740 [INFO] sphinx.builders: [01mpickling environment... [39;49;00m
2017-07-20 11:01:31,776 [INFO] sphinx.builders: done
2017-07-20 11:01:31,793 [INFO] sphinx.builders: [01mchecking consistency... [39;49;00m
2017-07-20 11:01:31,808 [DEBUG] sphinx.application: [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x10f8c1390>,)
2017-07-20 11:01:31,831 [INFO] sphinx.builders: done
2017-07-20 11:01:31,855 [DEBUG] sphinx.builders: docnames to write: Main, Spectral
2017-07-20 11:01:31,875 [INFO] sphinx.builders: [01mpreparing documents... [39;49;00m
2017-07-20 11:01:31,904 [INFO] sphinx.builders: done
2017-07-20 11:01:31,919 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 33%] [32mMain[39;49;00m                                                   
2017-07-20 11:01:31,942 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "main functions"...>>, 'Main')
2017-07-20 11:01:32,097 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 66%] [32mSpectral[39;49;00m                                               
2017-07-20 11:01:32,117 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "spectral functions"...>>, 'Spectral')
2017-07-20 11:01:32,166 [INFO] sphinx.util: [01mwriting output... [39;49;00m[100%] [32mindex[39;49;00m                                                  
2017-07-20 11:01:32,182 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <comment...><section "welcome to pyleoclim's documentati ...>, 'index')
2017-07-20 11:01:32,239 [INFO] sphinx.util: 
2017-07-20 11:01:32,254 [INFO] sphinx.builders.html: [01mgenerating indices...[39;49;00m
2017-07-20 11:01:32,273 [INFO] sphinx.builders.html:  genindex
2017-07-20 11:01:32,361 [INFO] sphinx.builders.html: 
2017-07-20 11:01:32,377 [DEBUG] sphinx.application: [app] emitting event: 'html-collect-pages'()
2017-07-20 11:01:32,400 [INFO] sphinx.builders.html: [01mwriting additional pages...[39;49;00m
2017-07-20 11:01:32,420 [INFO] sphinx.builders.html:  search
2017-07-20 11:01:32,476 [INFO] sphinx.builders.html: 
2017-07-20 11:01:32,495 [INFO] sphinx.builders.html: [01mcopying static files... [39;49;00m
2017-07-20 11:01:32,598 [INFO] sphinx.builders.html: done
2017-07-20 11:01:32,617 [INFO] sphinx.builders.html: [01mcopying extra files... [39;49;00m
2017-07-20 11:01:32,640 [INFO] sphinx.builders.html: done
2017-07-20 11:01:32,671 [INFO] sphinx.builders.html: [01mdumping search index in English (code: en) ... [39;49;00m
2017-07-20 11:01:32,729 [INFO] sphinx.builders.html: done
2017-07-20 11:01:32,760 [INFO] sphinx.builders.html: [01mdumping object inventory... [39;49;00m
2017-07-20 11:01:32,817 [INFO] sphinx.builders.html: done
2017-07-20 11:01:32,849 [INFO] sphinx.application: [01mbuild succeeded.[39;49;00m
2017-07-20 11:01:32,881 [DEBUG] sphinx.application: [app] emitting event: 'build-finished'(None,)
2017-07-20 11:03:01,765 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:01,766 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'openLipd')
2017-07-20 11:03:01,785 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function openLipd at 0x10cd0e048>
2017-07-20 11:03:02,205 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.openLipd', <function openLipd at 0x10cd0e048>, {}, ['Read Lipd files into a 
2017-07-20 11:03:02,221 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: openLipd(usr_path='')
   :module: pyleoclim

   Read Lipd files into a dictionary
   
   Sets the dictionary as global variable so that it doesn't have to be provided
   as an argument for every function.
   
   Args:
       usr_path (str): The path to a directory or a single file. (Optional argument)
       
   Returns:
       lipd_dict - a dictionary containing the LiPD library
   
   
2017-07-20 11:03:02,248 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: input:
.. autofunction:: pyleoclim.fetchTs

2017-07-20 11:03:02,263 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import fetchTs
2017-07-20 11:03:02,283 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:02,299 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:02,319 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'fetchTs')
2017-07-20 11:03:02,348 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function fetchTs at 0x11fea5840>
2017-07-20 11:03:02,367 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.fetchTs', <function fetchTs at 0x11fea5840>, {}, ['Extract timeseries dictio
2017-07-20 11:03:02,387 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: fetchTs(lipds=None)
   :module: pyleoclim

   Extract timeseries dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Set the dictionary as a global variable so that it doesn't have to be
   provided as an argument for every function. 
   
   Args:
       lipds (dict): A dictionary of LiPD files obtained through the 
       readLipd function
   
   Returns:
       ts_list - A list of timeseries object
   
   
2017-07-20 11:03:02,412 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:32: input:
.. autofunction:: pyleoclim.mapAllArchive

2017-07-20 11:03:02,429 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapAllArchive
2017-07-20 11:03:02,452 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:02,477 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:02,500 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAllArchive')
2017-07-20 11:03:02,524 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAllArchive at 0x11fea58c8>
2017-07-20 11:03:02,567 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapAllArchive', <function mapAllArchive at 0x11fea58c8>, {}, ['Map all the a
2017-07-20 11:03:02,595 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAllArchive(lipds='', markersize=50, background='shadedrelief', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map all the available records loaded into the workspace by archiveType.
   
   Map of all the records into the workspace by archiveType.
       Uses the default color palette. Enter pyleoclim.plot_default for detail.
   
   Args:
       lipds (dict): A dictionary of LiPD files. (Optional)
       markersize (int): The size of the markers. Default is 50
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
       saveFig (bool): Default is to not save the figure
       dir (str): The absolute path of the directory in which to save the
           figure. If not provided, creates a default folder called 'figures'
           in the LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
2017-07-20 11:03:02,619 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:02,663 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:02,695 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:02,717 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:02,746 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:34: input:
.. autofunction:: pyleoclim.mapLipd

2017-07-20 11:03:02,775 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapLipd
2017-07-20 11:03:02,796 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:02,818 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:02,841 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapLipd')
2017-07-20 11:03:02,865 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapLipd at 0x11fea5950>
2017-07-20 11:03:02,886 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapLipd', <function mapLipd at 0x11fea5950>, {}, ['Create a Map for a single
2017-07-20 11:03:02,906 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapLipd(timeseries='', countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='default', figsize=[4, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Create a Map for a single record
   
   Orthographic projection map of a single record.
   
   Args:
       timeseries: a LiPD timeseries object. Will prompt for one if not given
       countries (bool): Draws the country borders. Default is on (True).
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders.
           Default is off (False)
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief
       scale (float): useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): default is 50
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-20 11:03:02,926 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:02,958 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:02,985 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:03,008 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:03,025 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:03,048 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:03,075 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:03,102 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:38: input:
.. autofunction:: pyleoclim.plotTs

2017-07-20 11:03:03,126 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotTs
2017-07-20 11:03:03,186 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:03,225 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:03,263 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotTs')
2017-07-20 11:03:03,298 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotTs at 0x11fea59d8>
2017-07-20 11:03:03,322 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.plotTs', <function plotTs at 0x11fea59d8>, {}, ['Plot a single time series.'
2017-07-20 11:03:03,344 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotTs(timeseries='', x_axis='', markersize=50, marker='default', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Plot a single time series.
   
   Args:
       A timeseries: By default, will prompt the user for one.
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       markersize (int): default is 50.
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure.
   
   
2017-07-20 11:03:03,373 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:03,393 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:03,418 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:03,440 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:03,458 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:03,484 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:03,509 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:40: input:
.. autofunction:: pyleoclim.histTs

2017-07-20 11:03:03,528 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import histTs
2017-07-20 11:03:03,553 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:03,575 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:03,598 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'histTs')
2017-07-20 11:03:03,622 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function histTs at 0x11fea5a60>
2017-07-20 11:03:03,670 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.histTs', <function histTs at 0x11fea5a60>, {}, ['Plot a univariate distribut
2017-07-20 11:03:03,714 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: histTs(timeseries='', bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'Rug'}, fit_kws={'label': 'Fit'}, color='default', vertical=False, norm_hist=True, figsize=[5, 5], saveFig=False, format='eps', dir='')
   :module: pyleoclim

   Plot a univariate distribution of the PaleoData values
   
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the
   seaborn kdeplot() and rugplot() functions. It can also fit
   scipy.stats distributions and plot the estimated PDF over the data.
   
   Args:
       timeseries: A timeseries. By default, will prompt the user for one.
       bins (int): Specification of hist bins following matplotlib(hist),
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning
           a tuple that can be passed to a pdf method of positional
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in. Default is to use the default paletter for each
           archive type.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or
           fitted density is plotted
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns
       fig - The figure
   
   
2017-07-20 11:03:03,741 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:03,759 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:03,789 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:03,811 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:03,831 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:03,858 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:03,889 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:03,910 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:03,932 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:03,958 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:48: input:
.. autofunction:: pyleoclim.summaryTs

2017-07-20 11:03:03,986 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import summaryTs
2017-07-20 11:03:04,008 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:04,025 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:04,048 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'summaryTs')
2017-07-20 11:03:04,065 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function summaryTs at 0x11fea5ae8>
2017-07-20 11:03:04,104 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.summaryTs', <function summaryTs at 0x11fea5ae8>, {}, ['Basic summary plot', 
2017-07-20 11:03:04,158 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: summaryTs(timeseries='', x_axis='', saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Basic summary plot
   
   Plots the following information: the time series, a histogram of
   the PaleoData_values, location map, spectral density using the wwz 
   method, and metadata about the record.
   
   Args:
       timeseries: a timeseries object. By default, will prompt for one
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-20 11:03:04,210 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:04,247 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:04,266 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:04,289 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:04,312 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:53: input:
.. autofunction:: pyleoclim.statsTs

2017-07-20 11:03:04,329 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import statsTs
2017-07-20 11:03:04,349 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:04,365 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:04,391 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'statsTs')
2017-07-20 11:03:04,411 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function statsTs at 0x11fea5b70>
2017-07-20 11:03:04,427 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.statsTs', <function statsTs at 0x11fea5b70>, {}, ['Calculate simple statisti
2017-07-20 11:03:04,446 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: statsTs(timeseries='')
   :module: pyleoclim

   Calculate simple statistics of a timeseries
   
   Args:
       timeseries: sytem will prompt for one if not given
   
   Returns:
       the mean, median, min, max, standard deviation and the
       inter-quartile range (IQR) of a timeseries.
   
   Examples:
       >>> mean, median, min_, max_, std, IQR = pyleo.statsTs(timeseries)
   
   
2017-07-20 11:03:04,472 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:55: input:
.. autofunction:: pyleoclim.corrSigTs

2017-07-20 11:03:04,495 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import corrSigTs
2017-07-20 11:03:04,516 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:04,536 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:04,555 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrSigTs')
2017-07-20 11:03:04,573 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrSigTs at 0x11fea5bf8>
2017-07-20 11:03:04,597 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.corrSigTs', <function corrSigTs at 0x11fea5bf8>, {}, ['Estimates the signifi
2017-07-20 11:03:04,618 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrSigTs(timeseries1='', timeseries2='', x_axis='', interp_step='', start='', end='', nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim

   Estimates the significance of correlations between non IID timeseries.
   
   Function written by. F. Zhu.
   
   Args:
       timeseries1, timeseries2: timeseries object. Default is blank.
       x-axis (str): The representation against which to express the
           paleo-data. Options are "age", "year", and "depth".
           Default is to let the system choose if only one available
           or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start time/age/depth. Default is the maximum of
           the minima of the two timeseries
       end (float): End time/age/depth. Default is the minimum of the
           maxima of the two timeseries
       nsim (int): the number of simulations. Default is 1000
       method (str): method use to estimate the correlation and significance.
           Available methods include:
               - 'ttest': T-test where the degrees of freedom are corrected for
               the effect of serial correlation 
   
               - 'isopersistant': AR(1) modeling of the two timeseries 
   
               - 'isospectral' (default): phase randomization of original
               inputs.
           The T-test is parametric test, hence cheap but usually wrong
           except in idyllic circumstances.
           The others are non-parametric, but their computational
           requirements scales with nsim.
       alpha (float): significance level for critical value estimation. Default is 0.05
   
   Returns:
       r (float) - correlation between the two timeseries 
   
       sig (bool) -  Returns True if significant, False otherwise 
   
       p (real) - the p-value
   
   
2017-07-20 11:03:04,640 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:04,671 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:04,699 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:04,719 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:04,740 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:04,756 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:04,776 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:03:04,806 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:03:04,826 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:04,845 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:04,864 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:61: input:
.. autofunction:: pyleoclim.binTs

2017-07-20 11:03:04,885 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import binTs
2017-07-20 11:03:04,910 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:04,936 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:04,960 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'binTs')
2017-07-20 11:03:04,987 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function binTs at 0x11fea5c80>
2017-07-20 11:03:05,010 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.binTs', <function binTs at 0x11fea5c80>, {}, ['Bin the paleoData values of t
2017-07-20 11:03:05,028 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: binTs(timeseries='', x_axis='', bin_size='', start='', end='')
   :module: pyleoclim

   Bin the paleoData values of the timeseries
   
   Args:
       timeseries. By default, will prompt the user for one.
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system  choose if only one available or prompt the user.
       bin_size (float): the size of the bins to be used. By default,
           will prompt for one
       start (float): Start time/age/depth. Default is the minimum
       end (float): End time/age/depth. Default is the maximum
   
   Returns:
       binned_values- the binned output,
   
       bins-  the bins (centered on the median, i.e. the 100-200 bin is 150),
   
       n-  number of data points in each bin,
   
       error- the standard error on the mean in each bin
   
   
   
2017-07-20 11:03:05,051 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:05,069 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:05,087 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:05,114 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:63: input:
.. autofunction:: pyleoclim.interpTs

2017-07-20 11:03:05,135 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import interpTs
2017-07-20 11:03:05,153 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:05,170 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:05,188 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interpTs')
2017-07-20 11:03:05,212 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interpTs at 0x11fea5d08>
2017-07-20 11:03:05,231 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.interpTs', <function interpTs at 0x11fea5d08>, {}, ['Simple linear interpola
2017-07-20 11:03:05,250 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interpTs(timeseries='', x_axis='', interp_step='', start='', end='')
   :module: pyleoclim

   Simple linear interpolation
   
   Simple linear interpolation of the data using the numpy.interp method
   
   Args:
       timeseries. Default is blank, will prompt for it
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start year/age/depth. Default is the minimum
       end (float): End year/age/depth. Default is the maximum
   
   Returns:
       interp_age - the interpolated age/year/depth according to the end/start
       and time step, 
   
       interp_values - the interpolated values
   
   
2017-07-20 11:03:05,268 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:05,287 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:05,311 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:65: input:
.. autofunction:: pyleoclim.standardizeTs

2017-07-20 11:03:05,329 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import standardizeTs
2017-07-20 11:03:05,348 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:05,364 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:05,384 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardizeTs')
2017-07-20 11:03:05,404 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardizeTs at 0x11fea5d90>
2017-07-20 11:03:05,427 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.standardizeTs', <function standardizeTs at 0x11fea5d90>, {}, ['Centers and n
2017-07-20 11:03:05,448 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardizeTs(timeseries='', scale=1, ddof=0, eps=0.001)
   :module: pyleoclim

   Centers and normalizes the paleoData values of a  given time series.
   
   Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       - z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed 
   
       - mu (real): the mean of the original time series, E[X] 
   
       - sig (real): the standard deviation of the original time series, std[X] 
   
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2017-07-20 11:03:05,473 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:69: input:
.. autofunction:: pyleoclim.wwzTs

2017-07-20 11:03:05,487 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import wwzTs
2017-07-20 11:03:05,503 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:05,527 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:05,546 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwzTs')
2017-07-20 11:03:05,565 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwzTs at 0x11fea5ea0>
2017-07-20 11:03:05,584 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.wwzTs', <function wwzTs at 0x11fea5ea0>, {}, ['Weigthed wavelet Z-transform 
2017-07-20 11:03:05,599 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwzTs(timeseries='', wwz=False, psd=True, wwz_default=True, psd_default=True, wwaplot_default=True, psdplot_default=True, fig=True, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Weigthed wavelet Z-transform analysis
   
   Wavelet analysis for unevenly spaced data adapted from Foster et al. (1996)
   
   Args:
       timeseries (dict): A LiPD timeseries object (Optional, will prompt for one.)
       wwz (bool): If True, will perform wavelet analysis
       psd (bool): If True, will inform the power spectral density of the timeseries
       wwz_default: If True, will use the following default parameters:
           
           wwz_default = {'tau':None,'freqs':None,'c':1/(8*np.pi**2),'Neff':3,'nMC':200,
                              'nproc':8,'detrend':'no','method':'Kirchner_f2py'}.
               
           Modify the values for specific keys to change the default behavior.
               
       psd_default: If True, will use the following default parameters:
           
           psd_default = {'tau':None,
                         'freqs': None,
                         'c':1e-3,
                         'nproc':8,
                         'nMC':200,
                         'detrend':'no',
                         'Neff':3,
                         'anti_alias':False,
                         'avgs':2,
                         'method':'Kirchner_f2py'}
           
           Modify the values for specific keys to change the default behavior.
           
       wwaplot_default: If True, will use the following default parameters:
           
           wwaplot_default={'Neff':3,
                                'AR1_q':AR1_q,
                                'coi':coi,
                                'levels':None,
                                'tick_range':None,
                                'yticks':None,
                                'ylim':None,
                                'xticks':None,
                                'xlabels':None,
                                'figsize':[20,8],
                                'clr_map':'OrRd',
                                'cbar_drawedges':False,
                                'cone_alpha':0.5,
                                'plot_signif':True,
                                'signif_style':'contour',
                                'plot_cone':True}
           
           Modify the values for specific keys to change the default behavior.
       psdplot_default: If True, will use the following default parameters:
           
           psdplot_default={'lmstyle':None,
                            'linewidth':None,
                            'xticks':None,
                            'xlim':None,
                            'ylim':None,
                            'figsize':[20,8],
                            'label':'PSD',
                            'plot_ar1':True,
                            'psd_ar1_q95':psd_ar1_q95,
                            'psd_ar1_color':sns.xkcd_rgb["pale red"]}
           
           Modify the values for specific keys to change the default behavior.
           
       fig (bool): If True, plots the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       
   Returns:
       dict_out (dict): A dictionary of outputs. 
           
           For wwz: 
           
           - wwa (array): The weights wavelet amplitude 
       
           - AR1_q (array): AR1 simulations 
       
           - coi (array): cone of influence 
       
           - freqs (array): vector for frequencies 
       
           - tau (array): the evenly-spaced time points, namely the time 
           shift for wavelet analysis. 
       
           - Neffs (array): The matrix of effective number of points in the
           time-scale coordinates.
       
           - coeff (array): The wavelet transform coefficients
       
           For psd: 
           
           - psd (array): power spectral density 
       
           - freqs (array): vector of frequency 
       
           - psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes 
       
       fig: The figure
        
       References:
           Foster, G. (1996). Wavelets for period analysis of unevenly 
           sampled time series. The Astronomical Journal, 112(4), 1709-1729.
       
       Examples:
           To run both wwz and psd: 
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(wwz=True)
           
           Note: This will return a single figure with wwa and psd 
   
           
           To change a default behavior:
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(psd_default = {'nMC':1000}) 
          
   
2017-07-20 11:03:05,630 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:05,664 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:05,689 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:05,720 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:03:05,750 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:03:05,840 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:05,857 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:05,875 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:05,890 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:05,909 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:05,930 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:05,954 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:05,972 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:19: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:05,987 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,007 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,024 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:26: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,048 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,066 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,084 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,101 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,118 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:15: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,147 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,191 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,208 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,225 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,257 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,276 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,292 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:26: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,310 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,325 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:31: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,351 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:33: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,378 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,400 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,424 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:14: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,450 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,473 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,490 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,509 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,524 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,544 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:16: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,565 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:18: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,583 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:20: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,598 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:25: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,617 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:26: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,638 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:30: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,673 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,695 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,717 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:10: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,735 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,758 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,778 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:51: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,799 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:69: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:06,818 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:71: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,849 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:89: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,870 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:92: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:06,888 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "main functions"...>>,)
2017-07-20 11:03:06,922 [INFO] sphinx.util: 
2017-07-20 11:03:06,940 [DEBUG] sphinx.application: [app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x10cc7b3c8>,)
2017-07-20 11:03:06,961 [INFO] sphinx.builders: [01mlooking for now-outdated files... [39;49;00m
2017-07-20 11:03:06,982 [DEBUG] sphinx.application: [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x10cc7b3c8>,)
2017-07-20 11:03:06,999 [INFO] sphinx.builders: none found
2017-07-20 11:03:07,017 [INFO] sphinx.builders: [01mpickling environment... [39;49;00m
2017-07-20 11:03:07,073 [INFO] sphinx.builders: done
2017-07-20 11:03:07,094 [INFO] sphinx.builders: [01mchecking consistency... [39;49;00m
2017-07-20 11:03:07,120 [DEBUG] sphinx.application: [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x10cc7b3c8>,)
2017-07-20 11:03:07,162 [INFO] sphinx.builders: done
2017-07-20 11:03:07,208 [DEBUG] sphinx.builders: docnames to write: Main
2017-07-20 11:03:07,244 [INFO] sphinx.builders: [01mpreparing documents... [39;49;00m
2017-07-20 11:03:07,294 [INFO] sphinx.builders: done
2017-07-20 11:03:07,329 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 50%] [32mMain[39;49;00m                                                   
2017-07-20 11:03:07,426 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "main functions"...>>, 'Main')
2017-07-20 11:03:07,899 [INFO] sphinx.util: [01mwriting output... [39;49;00m[100%] [32mindex[39;49;00m                                                  
2017-07-20 11:03:07,971 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <comment...><section "welcome to pyleoclim's documentati ...>, 'index')
2017-07-20 11:03:08,084 [INFO] sphinx.util: 
2017-07-20 11:03:08,110 [INFO] sphinx.builders.html: [01mgenerating indices...[39;49;00m
2017-07-20 11:03:08,139 [INFO] sphinx.builders.html:  genindex
2017-07-20 11:03:08,436 [INFO] sphinx.builders.html: 
2017-07-20 11:03:08,465 [DEBUG] sphinx.application: [app] emitting event: 'html-collect-pages'()
2017-07-20 11:03:08,509 [INFO] sphinx.builders.html: [01mwriting additional pages...[39;49;00m
2017-07-20 11:03:08,730 [INFO] sphinx.builders.html:  search
2017-07-20 11:03:08,798 [INFO] sphinx.builders.html: 
2017-07-20 11:03:08,832 [INFO] sphinx.builders.html: [01mcopying static files... [39;49;00m
2017-07-20 11:03:09,004 [INFO] sphinx.builders.html: done
2017-07-20 11:03:09,030 [INFO] sphinx.builders.html: [01mcopying extra files... [39;49;00m
2017-07-20 11:03:09,064 [INFO] sphinx.builders.html: done
2017-07-20 11:03:09,127 [INFO] sphinx.builders.html: [01mdumping search index in English (code: en) ... [39;49;00m
2017-07-20 11:03:09,246 [INFO] sphinx.builders.html: done
2017-07-20 11:03:09,311 [INFO] sphinx.builders.html: [01mdumping object inventory... [39;49;00m
2017-07-20 11:03:09,389 [INFO] sphinx.builders.html: done
2017-07-20 11:03:09,462 [INFO] sphinx.application: [01mbuild succeeded.[39;49;00m
2017-07-20 11:03:09,588 [DEBUG] sphinx.application: [app] emitting event: 'build-finished'(None,)
2017-07-20 11:03:45,832 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-20 11:03:45,833 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'createDir')
2017-07-20 11:03:45,851 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function createDir at 0x122ac1400>
2017-07-20 11:03:45,906 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.createDir', <function createDir at 0x122ac1400>, {}, ['Create a ne
2017-07-20 11:03:45,936 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: createDir(path, foldername)
   :module: pyleoclim.LipdUtils

   Create a new folder in a working directory
   
   Create a new folder in a working directory to save outputs from Pyleoclim.
   
   Args:
       path(str): the path to the new folder.
       foldername(str): the name of the folder to be created
       
   Returns:
       newdir - the full path to the new directory
       
   
2017-07-20 11:03:45,977 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:11: input:
.. autofunction:: pyleoclim.LipdUtils.saveFigure

2017-07-20 11:03:46,008 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import saveFigure
2017-07-20 11:03:46,030 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-20 11:03:46,052 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-20 11:03:46,082 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'saveFigure')
2017-07-20 11:03:46,100 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function saveFigure at 0x122ac1488>
2017-07-20 11:03:46,122 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.saveFigure', <function saveFigure at 0x122ac1488>, {}, ['Save a fi
2017-07-20 11:03:46,141 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: saveFigure(name, format='eps', dir='')
   :module: pyleoclim.LipdUtils

   Save a figure
   
   Save the figure in the directory. If not given, creates a folder in the 
   current working directory. 
   
   Args:
       name (str): name of the file
       format (str): One of the file extensions supported by the active 
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       dir (str): the name of the folder in the LiPD working directory.
           If not provided, creates a default folder called 'figures'.
           
   
2017-07-20 11:03:46,164 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:46,189 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:46,213 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:16: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateLipds

2017-07-20 11:03:46,232 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateLipds
2017-07-20 11:03:46,250 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-20 11:03:46,268 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-20 11:03:46,302 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateLipds')
2017-07-20 11:03:46,346 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateLipds at 0x122ac1510>
2017-07-20 11:03:46,366 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateLipds', <function enumerateLipds at 0x122ac1510>, {}, ['E
2017-07-20 11:03:46,387 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateLipds(lipds)
   :module: pyleoclim.LipdUtils

   Enumerate the LiPD files loaded in the workspace
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   
2017-07-20 11:03:46,414 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:18: input:
.. autofunction:: pyleoclim.LipdUtils.promptForLipd

2017-07-20 11:03:46,430 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForLipd
2017-07-20 11:03:46,447 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-20 11:03:46,463 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-20 11:03:46,480 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForLipd')
2017-07-20 11:03:46,501 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForLipd at 0x122ac1598>
2017-07-20 11:03:46,520 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForLipd', <function promptForLipd at 0x122ac1598>, {}, ['Pro
2017-07-20 11:03:46,540 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForLipd(lipds)
   :module: pyleoclim.LipdUtils

   Prompt for a LiPD file
   
   Ask the user to select a LiPD file from a list
   Use this function in conjunction with enumerateLipds()
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   Returns:
       The index of the LiPD file
       
   
2017-07-20 11:03:46,564 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:23: input:
.. autofunction:: pyleoclim.LipdUtils.promptForVariable

2017-07-20 11:03:46,583 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForVariable
2017-07-20 11:03:46,604 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-20 11:03:46,624 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-20 11:03:46,641 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForVariable')
2017-07-20 11:03:46,659 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForVariable at 0x122ac1620>
2017-07-20 11:03:46,677 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForVariable', <function promptForVariable at 0x122ac1620>, {
2017-07-20 11:03:46,700 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForVariable()
   :module: pyleoclim.LipdUtils

   Prompt for a specific variable
   
   Ask the user to select the variable they are interested in.
   Use this function in conjunction with readHeaders() or getTSO()
   
   Returns:
       The index of the variable
       
   
2017-07-20 11:03:46,724 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:25: input:
.. autofunction:: pyleoclim.LipdUtils.xAxisTs

2017-07-20 11:03:46,752 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import xAxisTs
2017-07-20 11:03:46,844 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-20 11:03:46,867 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-20 11:03:46,885 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'xAxisTs')
2017-07-20 11:03:46,909 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function xAxisTs at 0x122ac16a8>
2017-07-20 11:03:46,928 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.xAxisTs', <function xAxisTs at 0x122ac16a8>, {}, ['Prompt the user
2017-07-20 11:03:46,952 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: xAxisTs(timeseries)
   :module: pyleoclim.LipdUtils

   Prompt the user to choose a x-axis representation for the timeseries.
   
   Args:
       timeseries: a timeseries object
       
   Returns:
       x_axis - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"
       
   
2017-07-20 11:03:46,973 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:27: input:
.. autofunction:: pyleoclim.LipdUtils.checkXaxis

2017-07-20 11:03:46,991 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import checkXaxis
2017-07-20 11:03:47,019 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-20 11:03:47,038 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-20 11:03:47,058 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'checkXaxis')
2017-07-20 11:03:47,077 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function checkXaxis at 0x122ac1730>
2017-07-20 11:03:47,097 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.checkXaxis', <function checkXaxis at 0x122ac1730>, {}, ['Check tha
2017-07-20 11:03:47,119 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: checkXaxis(timeseries, x_axis='')
   :module: pyleoclim.LipdUtils

   Check that a x-axis is present for the timeseries
   
   Args:
       timeseries : a timeseries
       x_axis (str) : the x-axis representation, either depth, age or year
       
   Returns:
       x - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"    
   
   
2017-07-20 11:03:47,146 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:32: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateTs

2017-07-20 11:03:47,165 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateTs
2017-07-20 11:03:47,182 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-20 11:03:47,208 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-20 11:03:47,224 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateTs')
2017-07-20 11:03:47,244 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateTs at 0x122ac17b8>
2017-07-20 11:03:47,263 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateTs', <function enumerateTs at 0x122ac17b8>, {}, ['Enumera
2017-07-20 11:03:47,280 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Enumerate the available time series objects
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   
2017-07-20 11:03:47,306 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:34: input:
.. autofunction:: pyleoclim.LipdUtils.getTs

2017-07-20 11:03:47,327 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getTs
2017-07-20 11:03:47,346 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-20 11:03:47,366 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-20 11:03:47,384 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getTs')
2017-07-20 11:03:47,401 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getTs at 0x122ac1840>
2017-07-20 11:03:47,427 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getTs', <function getTs at 0x122ac1840>, {}, ['Get a specific time
2017-07-20 11:03:47,446 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Get a specific timeseries object from a dictionary of timeseries
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   Returns:
       A single timeseries object 
       
   
2017-07-20 11:03:47,469 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:39: input:
.. autofunction:: pyleoclim.LipdUtils.LipdToOntology
2017-07-20 11:03:47,486 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import LipdToOntology
2017-07-20 11:03:47,504 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2017-07-20 11:03:47,530 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2017-07-20 11:03:47,551 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'LipdToOntology')
2017-07-20 11:03:47,567 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function LipdToOntology at 0x122ac18c8>
2017-07-20 11:03:47,584 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.LipdToOntology', <function LipdToOntology at 0x122ac18c8>, {}, ['s
2017-07-20 11:03:47,613 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: LipdToOntology(archiveType)
   :module: pyleoclim.LipdUtils

   standardize archiveType
   
   Transform the archiveType from their LiPD name to their ontology counterpart
   
   Args:
       archiveType (STR): name of the archiveType from the LiPD file
       
   Returns:
       archiveType according to the ontology
       
   
2017-07-20 11:03:47,680 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:47,699 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:47,721 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "lipd utilities"...>>,)
2017-07-20 11:03:47,751 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 30%] [35mMain[39;49;00m                                                  
2017-07-20 11:03:47,775 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110830128>, 'Main')
2017-07-20 11:03:47,798 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Main', ['Main Functions\n==============\n\n\nUsing Pyleoclim with a LiPD file\n"""""""""""""""""""
2017-07-20 11:03:47,830 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:27: input:
.. autofunction:: pyleoclim.openLipd
2017-07-20 11:03:47,852 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import openLipd
2017-07-20 11:03:47,873 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:47,893 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:47,917 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'openLipd')
2017-07-20 11:03:47,948 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function openLipd at 0x122ac1950>
2017-07-20 11:03:48,302 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.openLipd', <function openLipd at 0x122ac1950>, {}, ['Read Lipd files into a 
2017-07-20 11:03:48,379 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: openLipd(usr_path='')
   :module: pyleoclim

   Read Lipd files into a dictionary
   
   Sets the dictionary as global variable so that it doesn't have to be provided
   as an argument for every function.
   
   Args:
       usr_path (str): The path to a directory or a single file. (Optional argument)
       
   Returns:
       lipd_dict - a dictionary containing the LiPD library
   
   
2017-07-20 11:03:48,417 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: input:
.. autofunction:: pyleoclim.fetchTs

2017-07-20 11:03:48,435 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import fetchTs
2017-07-20 11:03:48,463 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:48,492 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:48,514 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'fetchTs')
2017-07-20 11:03:48,555 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function fetchTs at 0x123ab89d8>
2017-07-20 11:03:48,628 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.fetchTs', <function fetchTs at 0x123ab89d8>, {}, ['Extract timeseries dictio
2017-07-20 11:03:48,663 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: fetchTs(lipds=None)
   :module: pyleoclim

   Extract timeseries dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Set the dictionary as a global variable so that it doesn't have to be
   provided as an argument for every function. 
   
   Args:
       lipds (dict): A dictionary of LiPD files obtained through the 
       readLipd function
   
   Returns:
       ts_list - A list of timeseries object
   
   
2017-07-20 11:03:48,690 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:32: input:
.. autofunction:: pyleoclim.mapAllArchive

2017-07-20 11:03:48,717 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapAllArchive
2017-07-20 11:03:48,738 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:48,768 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:48,787 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAllArchive')
2017-07-20 11:03:48,812 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAllArchive at 0x123ab8a60>
2017-07-20 11:03:48,833 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapAllArchive', <function mapAllArchive at 0x123ab8a60>, {}, ['Map all the a
2017-07-20 11:03:48,877 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAllArchive(lipds='', markersize=50, background='shadedrelief', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map all the available records loaded into the workspace by archiveType.
   
   Map of all the records into the workspace by archiveType.
       Uses the default color palette. Enter pyleoclim.plot_default for detail.
   
   Args:
       lipds (dict): A dictionary of LiPD files. (Optional)
       markersize (int): The size of the markers. Default is 50
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
       saveFig (bool): Default is to not save the figure
       dir (str): The absolute path of the directory in which to save the
           figure. If not provided, creates a default folder called 'figures'
           in the LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
2017-07-20 11:03:48,907 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:48,927 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:48,953 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:48,976 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:49,000 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:34: input:
.. autofunction:: pyleoclim.mapLipd

2017-07-20 11:03:49,019 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapLipd
2017-07-20 11:03:49,038 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:49,089 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:49,127 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapLipd')
2017-07-20 11:03:49,196 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapLipd at 0x123ab8ae8>
2017-07-20 11:03:49,235 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapLipd', <function mapLipd at 0x123ab8ae8>, {}, ['Create a Map for a single
2017-07-20 11:03:49,267 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapLipd(timeseries='', countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='default', figsize=[4, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Create a Map for a single record
   
   Orthographic projection map of a single record.
   
   Args:
       timeseries: a LiPD timeseries object. Will prompt for one if not given
       countries (bool): Draws the country borders. Default is on (True).
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders.
           Default is off (False)
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief
       scale (float): useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): default is 50
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-20 11:03:49,298 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:49,321 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:49,344 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:49,367 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:49,391 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:49,412 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:49,429 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:49,458 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:38: input:
.. autofunction:: pyleoclim.plotTs

2017-07-20 11:03:49,480 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotTs
2017-07-20 11:03:49,498 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:49,517 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:49,533 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotTs')
2017-07-20 11:03:49,555 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotTs at 0x123ab8b70>
2017-07-20 11:03:49,576 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.plotTs', <function plotTs at 0x123ab8b70>, {}, ['Plot a single time series.'
2017-07-20 11:03:49,595 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotTs(timeseries='', x_axis='', markersize=50, marker='default', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Plot a single time series.
   
   Args:
       A timeseries: By default, will prompt the user for one.
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       markersize (int): default is 50.
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure.
   
   
2017-07-20 11:03:49,620 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:49,643 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:49,670 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:49,695 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:49,724 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:49,777 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:49,812 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:40: input:
.. autofunction:: pyleoclim.histTs

2017-07-20 11:03:49,829 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import histTs
2017-07-20 11:03:49,850 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:49,873 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:49,890 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'histTs')
2017-07-20 11:03:49,910 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function histTs at 0x123ab8bf8>
2017-07-20 11:03:49,928 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.histTs', <function histTs at 0x123ab8bf8>, {}, ['Plot a univariate distribut
2017-07-20 11:03:49,977 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: histTs(timeseries='', bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'Rug'}, fit_kws={'label': 'Fit'}, color='default', vertical=False, norm_hist=True, figsize=[5, 5], saveFig=False, format='eps', dir='')
   :module: pyleoclim

   Plot a univariate distribution of the PaleoData values
   
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the
   seaborn kdeplot() and rugplot() functions. It can also fit
   scipy.stats distributions and plot the estimated PDF over the data.
   
   Args:
       timeseries: A timeseries. By default, will prompt the user for one.
       bins (int): Specification of hist bins following matplotlib(hist),
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning
           a tuple that can be passed to a pdf method of positional
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in. Default is to use the default paletter for each
           archive type.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or
           fitted density is plotted
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns
       fig - The figure
   
   
2017-07-20 11:03:50,003 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:50,030 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:50,081 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:50,106 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:50,141 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:50,176 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:50,199 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:50,218 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:50,237 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:50,260 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:48: input:
.. autofunction:: pyleoclim.summaryTs

2017-07-20 11:03:50,290 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import summaryTs
2017-07-20 11:03:50,320 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:50,348 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:50,372 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'summaryTs')
2017-07-20 11:03:50,394 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function summaryTs at 0x123ab8c80>
2017-07-20 11:03:50,416 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.summaryTs', <function summaryTs at 0x123ab8c80>, {}, ['Basic summary plot', 
2017-07-20 11:03:50,432 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: summaryTs(timeseries='', x_axis='', saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Basic summary plot
   
   Plots the following information: the time series, a histogram of
   the PaleoData_values, location map, spectral density using the wwz 
   method, and metadata about the record.
   
   Args:
       timeseries: a timeseries object. By default, will prompt for one
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-20 11:03:50,453 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:50,479 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:50,497 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:50,517 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:50,540 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:53: input:
.. autofunction:: pyleoclim.statsTs

2017-07-20 11:03:50,559 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import statsTs
2017-07-20 11:03:50,579 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:50,602 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:50,624 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'statsTs')
2017-07-20 11:03:50,644 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function statsTs at 0x123ab8d08>
2017-07-20 11:03:50,662 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.statsTs', <function statsTs at 0x123ab8d08>, {}, ['Calculate simple statisti
2017-07-20 11:03:50,683 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: statsTs(timeseries='')
   :module: pyleoclim

   Calculate simple statistics of a timeseries
   
   Args:
       timeseries: sytem will prompt for one if not given
   
   Returns:
       the mean, median, min, max, standard deviation and the
       inter-quartile range (IQR) of a timeseries.
   
   Examples:
       >>> mean, median, min_, max_, std, IQR = pyleo.statsTs(timeseries)
   
   
2017-07-20 11:03:50,710 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:55: input:
.. autofunction:: pyleoclim.corrSigTs

2017-07-20 11:03:50,729 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import corrSigTs
2017-07-20 11:03:50,747 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:50,770 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:50,820 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrSigTs')
2017-07-20 11:03:50,847 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrSigTs at 0x123ab8d90>
2017-07-20 11:03:50,868 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.corrSigTs', <function corrSigTs at 0x123ab8d90>, {}, ['Estimates the signifi
2017-07-20 11:03:50,892 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrSigTs(timeseries1='', timeseries2='', x_axis='', interp_step='', start='', end='', nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim

   Estimates the significance of correlations between non IID timeseries.
   
   Function written by. F. Zhu.
   
   Args:
       timeseries1, timeseries2: timeseries object. Default is blank.
       x-axis (str): The representation against which to express the
           paleo-data. Options are "age", "year", and "depth".
           Default is to let the system choose if only one available
           or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start time/age/depth. Default is the maximum of
           the minima of the two timeseries
       end (float): End time/age/depth. Default is the minimum of the
           maxima of the two timeseries
       nsim (int): the number of simulations. Default is 1000
       method (str): method use to estimate the correlation and significance.
           Available methods include:
               - 'ttest': T-test where the degrees of freedom are corrected for
               the effect of serial correlation 
   
               - 'isopersistant': AR(1) modeling of the two timeseries 
   
               - 'isospectral' (default): phase randomization of original
               inputs.
           The T-test is parametric test, hence cheap but usually wrong
           except in idyllic circumstances.
           The others are non-parametric, but their computational
           requirements scales with nsim.
       alpha (float): significance level for critical value estimation. Default is 0.05
   
   Returns:
       r (float) - correlation between the two timeseries 
   
       sig (bool) -  Returns True if significant, False otherwise 
   
       p (real) - the p-value
   
   
2017-07-20 11:03:50,914 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:50,931 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:50,950 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:50,967 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:50,991 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:51,018 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:51,053 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:03:51,075 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:03:51,120 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:51,141 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:51,170 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:61: input:
.. autofunction:: pyleoclim.binTs

2017-07-20 11:03:51,207 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import binTs
2017-07-20 11:03:51,230 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:51,254 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:51,274 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'binTs')
2017-07-20 11:03:51,316 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function binTs at 0x123ab8e18>
2017-07-20 11:03:51,346 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.binTs', <function binTs at 0x123ab8e18>, {}, ['Bin the paleoData values of t
2017-07-20 11:03:51,378 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: binTs(timeseries='', x_axis='', bin_size='', start='', end='')
   :module: pyleoclim

   Bin the paleoData values of the timeseries
   
   Args:
       timeseries. By default, will prompt the user for one.
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system  choose if only one available or prompt the user.
       bin_size (float): the size of the bins to be used. By default,
           will prompt for one
       start (float): Start time/age/depth. Default is the minimum
       end (float): End time/age/depth. Default is the maximum
   
   Returns:
       binned_values- the binned output,
   
       bins-  the bins (centered on the median, i.e. the 100-200 bin is 150),
   
       n-  number of data points in each bin,
   
       error- the standard error on the mean in each bin
   
   
   
2017-07-20 11:03:51,417 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:51,452 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:51,478 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:51,507 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:63: input:
.. autofunction:: pyleoclim.interpTs

2017-07-20 11:03:51,529 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import interpTs
2017-07-20 11:03:51,560 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:51,590 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:51,634 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interpTs')
2017-07-20 11:03:51,657 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interpTs at 0x123ab8ea0>
2017-07-20 11:03:51,673 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.interpTs', <function interpTs at 0x123ab8ea0>, {}, ['Simple linear interpola
2017-07-20 11:03:51,690 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interpTs(timeseries='', x_axis='', interp_step='', start='', end='')
   :module: pyleoclim

   Simple linear interpolation
   
   Simple linear interpolation of the data using the numpy.interp method
   
   Args:
       timeseries. Default is blank, will prompt for it
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start year/age/depth. Default is the minimum
       end (float): End year/age/depth. Default is the maximum
   
   Returns:
       interp_age - the interpolated age/year/depth according to the end/start
       and time step, 
   
       interp_values - the interpolated values
   
   
2017-07-20 11:03:51,720 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:51,738 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:51,766 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:65: input:
.. autofunction:: pyleoclim.standardizeTs

2017-07-20 11:03:51,785 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import standardizeTs
2017-07-20 11:03:51,806 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:51,831 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:51,852 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardizeTs')
2017-07-20 11:03:51,868 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardizeTs at 0x123ab8f28>
2017-07-20 11:03:51,887 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.standardizeTs', <function standardizeTs at 0x123ab8f28>, {}, ['Centers and n
2017-07-20 11:03:51,913 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardizeTs(timeseries='', scale=1, ddof=0, eps=0.001)
   :module: pyleoclim

   Centers and normalizes the paleoData values of a  given time series.
   
   Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       - z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed 
   
       - mu (real): the mean of the original time series, E[X] 
   
       - sig (real): the standard deviation of the original time series, std[X] 
   
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2017-07-20 11:03:51,946 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:69: input:
.. autofunction:: pyleoclim.wwzTs

2017-07-20 11:03:51,964 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import wwzTs
2017-07-20 11:03:51,984 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:03:51,999 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:03:52,030 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwzTs')
2017-07-20 11:03:52,055 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwzTs at 0x123abb0d0>
2017-07-20 11:03:52,078 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.wwzTs', <function wwzTs at 0x123abb0d0>, {}, ['Weigthed wavelet Z-transform 
2017-07-20 11:03:52,097 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwzTs(timeseries='', wwz=False, psd=True, wwz_default=True, psd_default=True, wwaplot_default=True, psdplot_default=True, fig=True, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Weigthed wavelet Z-transform analysis
   
   Wavelet analysis for unevenly spaced data adapted from Foster et al. (1996)
   
   Args:
       timeseries (dict): A LiPD timeseries object (Optional, will prompt for one.)
       wwz (bool): If True, will perform wavelet analysis
       psd (bool): If True, will inform the power spectral density of the timeseries
       wwz_default: If True, will use the following default parameters:
           
           wwz_default = {'tau':None,'freqs':None,'c':1/(8*np.pi**2),'Neff':3,'nMC':200,
                              'nproc':8,'detrend':'no','method':'Kirchner_f2py'}.
               
           Modify the values for specific keys to change the default behavior.
               
       psd_default: If True, will use the following default parameters:
           
           psd_default = {'tau':None,
                         'freqs': None,
                         'c':1e-3,
                         'nproc':8,
                         'nMC':200,
                         'detrend':'no',
                         'Neff':3,
                         'anti_alias':False,
                         'avgs':2,
                         'method':'Kirchner_f2py'}
           
           Modify the values for specific keys to change the default behavior.
           
       wwaplot_default: If True, will use the following default parameters:
           
           wwaplot_default={'Neff':3,
                                'AR1_q':AR1_q,
                                'coi':coi,
                                'levels':None,
                                'tick_range':None,
                                'yticks':None,
                                'ylim':None,
                                'xticks':None,
                                'xlabels':None,
                                'figsize':[20,8],
                                'clr_map':'OrRd',
                                'cbar_drawedges':False,
                                'cone_alpha':0.5,
                                'plot_signif':True,
                                'signif_style':'contour',
                                'plot_cone':True}
           
           Modify the values for specific keys to change the default behavior.
       psdplot_default: If True, will use the following default parameters:
           
           psdplot_default={'lmstyle':None,
                            'linewidth':None,
                            'xticks':None,
                            'xlim':None,
                            'ylim':None,
                            'figsize':[20,8],
                            'label':'PSD',
                            'plot_ar1':True,
                            'psd_ar1_q95':psd_ar1_q95,
                            'psd_ar1_color':sns.xkcd_rgb["pale red"]}
           
           Modify the values for specific keys to change the default behavior.
           
       fig (bool): If True, plots the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       
   Returns:
       dict_out (dict): A dictionary of outputs. 
           
           For wwz: 
           
           - wwa (array): The weights wavelet amplitude 
       
           - AR1_q (array): AR1 simulations 
       
           - coi (array): cone of influence 
       
           - freqs (array): vector for frequencies 
       
           - tau (array): the evenly-spaced time points, namely the time 
           shift for wavelet analysis. 
       
           - Neffs (array): The matrix of effective number of points in the
           time-scale coordinates.
       
           - coeff (array): The wavelet transform coefficients
       
           For psd: 
           
           - psd (array): power spectral density 
       
           - freqs (array): vector of frequency 
       
           - psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes 
       
       fig: The figure
        
       References:
           Foster, G. (1996). Wavelets for period analysis of unevenly 
           sampled time series. The Astronomical Journal, 112(4), 1709-1729.
       
       Examples:
           To run both wwz and psd: 
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(wwz=True)
           
           Note: This will return a single figure with wwa and psd 
   
           
           To change a default behavior:
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(psd_default = {'nMC':1000}) 
          
   
2017-07-20 11:03:52,135 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:52,162 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:52,183 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:52,210 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:03:52,241 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:03:52,376 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,399 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,434 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,463 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,489 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,511 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,536 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,561 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:19: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,585 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,602 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,624 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:26: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,649 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,666 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,683 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,700 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,723 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:15: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,743 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,768 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,799 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,818 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,843 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,862 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,879 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:26: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,896 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,914 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:31: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,937 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:33: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,957 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:52,976 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:52,992 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:14: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:53,010 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,027 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:53,054 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,070 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:53,090 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,110 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:16: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,130 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:18: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:53,153 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:20: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,172 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:25: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,197 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:26: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,220 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:30: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,255 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:53,278 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,296 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:10: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,313 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:53,330 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,355 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:51: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,376 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:69: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:53,393 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:71: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,414 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:89: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,429 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:92: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:53,455 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "main functions"...>>,)
2017-07-20 11:03:53,489 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 40%] [35mMap[39;49;00m                                                   
2017-07-20 11:03:53,508 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110830128>, 'Map')
2017-07-20 11:03:53,527 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Map', ['Mapping Functions\n=================\n\nThis module uses the Basemap package for mapping. 
2017-07-20 11:03:53,552 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:6: input:
.. autofunction:: pyleoclim.Map.mapAll

2017-07-20 11:03:53,572 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapAll
2017-07-20 11:03:53,591 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2017-07-20 11:03:53,612 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2017-07-20 11:03:53,630 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAll')
2017-07-20 11:03:53,654 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAll at 0x10ffb7378>
2017-07-20 11:03:53,714 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapAll', <function mapAll at 0x10ffb7378>, {}, ['Map the location of all
2017-07-20 11:03:53,731 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAll(lat, lon, criteria, projection='robin', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=False, counties=False, rivers=False, states=False, figsize=[10, 4], ax=None, background='none', scale=0.5, palette='', markersize=50)
   :module: pyleoclim.Map

   Map the location of all lat/lon according to some criteria 
   
   Map the location of all lat/lon according to some criteria. The choice of 
   plotting color/marker is passed through palette according to unique 
   criteria (e.g., record name, archive type, proxy observation type).
   
   Args:
       lat (list): a list of latitude.
       lon (list): a list of longitude.
       criteria (list): a list of criteria for plotting purposes. For instance,
           a map by the types of archive present in the dataset or proxy
           observations.
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       palette (dict): A dictionary of plotting color/marker by criteria. The
           keys should correspond to ***unique*** criteria with a list of 
           associated values. The list should be in the format 
           ['color', 'marker'].
       markersize (int): The size of the marker.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
       
   Returns:
       The figure       
   
2017-07-20 11:03:53,756 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:53,785 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:53,814 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:53,836 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:53,866 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:53,887 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:53,909 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:8: input:
.. autofunction:: pyleoclim.Map.mapOne
2017-07-20 11:03:53,927 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapOne
2017-07-20 11:03:53,947 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2017-07-20 11:03:53,983 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2017-07-20 11:03:54,011 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapOne')
2017-07-20 11:03:54,030 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapOne at 0x122ac1378>
2017-07-20 11:03:54,050 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapOne', <function mapOne at 0x122ac1378>, {}, ['Map one location on the
2017-07-20 11:03:54,073 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapOne(lat, lon, projection='ortho', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='ro', figsize=[4, 4], ax=None)
   :module: pyleoclim.Map

   Map one location on the globe
   
   Args:
       lat (float): a float number representing latitude
       lon (float): a float number representing longitude
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): The size of the marker.
       marker (str or list): color and type of marker. 
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
   
   
2017-07-20 11:03:54,096 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:54,118 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:54,138 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:54,159 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:54,184 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:54,205 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:54,234 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:54,253 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:13: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:54,303 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:54,324 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:28: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:54,353 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:29: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:54,375 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:38: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:54,395 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:7: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:54,422 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:54,439 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:54,458 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:21: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:54,482 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:22: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:54,502 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:27: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:54,520 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "mapping functions"...>>,)
2017-07-20 11:03:54,541 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 50%] [35mPlot[39;49;00m                                                  
2017-07-20 11:03:54,560 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110830128>, 'Plot')
2017-07-20 11:03:54,595 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Plot', ['Plotting Functions\n==================\n\n.. autofunction:: pyleoclim.Plot.plot\n\n.. aut
2017-07-20 11:03:54,618 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:4: input:
.. autofunction:: pyleoclim.Plot.plot

2017-07-20 11:03:54,637 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot
2017-07-20 11:03:54,656 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2017-07-20 11:03:54,674 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2017-07-20 11:03:54,697 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot')
2017-07-20 11:03:54,720 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot at 0x122ac1bf8>
2017-07-20 11:03:54,782 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot', <function plot at 0x122ac1bf8>, {}, ['Make a 2-D plot', '', 'Arg
2017-07-20 11:03:54,821 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot(x, y, markersize=50, marker='ro', x_label='', y_label='', title='', figsize=[10, 4], ax=None)
   :module: pyleoclim.Plot

   Make a 2-D plot
   
   Args:
       x (numpy array): a 1xn numpy array of values for the x-axis
       y (numpy array): a 1xn numpy array for the y-axis
       markersize (int): the size of the marker
       marker (string or list): color and shape of the marker
       x_axis_label (str): the label for the x-axis
       y_axis_label (str): the label for the y-axis
       title (str): the title for the plot
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
           
   Return:
       The figure       
   
   
2017-07-20 11:03:54,850 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: input:
.. autofunction:: pyleoclim.Plot.plot_hist
2017-07-20 11:03:54,876 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot_hist
2017-07-20 11:03:54,917 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2017-07-20 11:03:54,940 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2017-07-20 11:03:54,964 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_hist')
2017-07-20 11:03:54,992 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_hist at 0x122ac1c80>
2017-07-20 11:03:55,015 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot_hist', <function plot_hist at 0x122ac1c80>, {}, ['Plot a univariat
2017-07-20 11:03:55,032 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_hist(y, bins=None, hist=True, label='', kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'rug'}, fit_kws={'label': 'fit'}, color='0.7', vertical=False, norm_hist=True, figsize=[5, 5], ax=None)
   :module: pyleoclim.Plot

   Plot a univariate distribution of the PaleoData values
           
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the 
   seaborn kdeplot() and rugplot() functions. It can also fit 
   scipy.stats distributions and plot the estimated PDF over the data.
       
   Args:
       y (array): nx1 numpy array. No missing values allowed 
       bins (int): Specification of hist bins following matplotlib(hist), 
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram 
       label (str): The label for the axis
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning 
           a tuple that can be passed to a pdf method of positional 
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for 
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or 
           fitted density is plotted
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
   
   Returns
      fig - The figure
   
2017-07-20 11:03:55,065 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:55,096 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:55,129 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:55,159 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:55,187 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:03:55,214 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:55,232 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:55,265 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:55,298 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:55,326 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:17: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:55,345 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:19: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:55,363 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:55,385 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:26: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:55,421 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:55,442 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "plotting functions"...>>,)
2017-07-20 11:03:55,476 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 60%] [35mSpectral[39;49;00m                                              
2017-07-20 11:03:55,524 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110830128>, 'Spectral')
2017-07-20 11:03:55,578 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Spectral', ['Spectral Functions\n==================\n\nThis module allows analysis in the frequenc
2017-07-20 11:03:55,604 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:6: input:
.. autofunction:: pyleoclim.Spectral.ar1_fit

2017-07-20 11:03:55,624 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_fit
2017-07-20 11:03:55,642 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:03:55,661 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:03:55,689 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_fit')
2017-07-20 11:03:55,715 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_fit at 0x122ac1d90>
2017-07-20 11:03:56,578 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_fit', <function ar1_fit at 0x122ac1d90>, {}, ['Returns the lag-
2017-07-20 11:03:56,595 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_fit(ys, ts=None, detrend='no')
   :module: pyleoclim.Spectral

   Returns the lag-1 autocorrelation from ar1 fit OR persistence from tauest.
   
   Args:
       ys (array): the time series
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
   
   Returns:
       g (float): lag-1 autocorrelation coefficient (for evenly-spaced time series)
       OR estimated persistence (for unevenly-spaced time series)
   
2017-07-20 11:03:56,620 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:56,646 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:8: input:
.. autofunction:: pyleoclim.Spectral.ar1_sim

2017-07-20 11:03:56,666 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_sim
2017-07-20 11:03:56,684 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:03:56,709 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:03:56,726 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_sim')
2017-07-20 11:03:56,752 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_sim at 0x1239cbb70>
2017-07-20 11:03:56,775 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_sim', <function ar1_sim at 0x1239cbb70>, {}, ['Produce p realiz
2017-07-20 11:03:56,791 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_sim(ys, n, p, ts=None, detrend='no')
   :module: pyleoclim.Spectral

   Produce p realizations of an AR1 process of length n with lag-1 autocorrelation g calculated from `ys` and `ts`
   
   Args:
       ys (array): a time series
       n, p (int): dimensions as n rows by p columns
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
   
   Returns:
       red (matrix): n rows by p columns matrix of an AR1 process
   
   
2017-07-20 11:03:56,815 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:56,858 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:10: input:
.. autofunction:: pyleoclim.Spectral.wwz

2017-07-20 11:03:56,892 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz
2017-07-20 11:03:56,918 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:03:56,951 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:03:56,988 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz')
2017-07-20 11:03:57,022 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz at 0x1239cbbf8>
2017-07-20 11:03:57,090 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz', <function wwz at 0x1239cbbf8>, {}, ['Return the weighted wave
2017-07-20 11:03:57,123 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz(ys, ts, tau=None, freqs=None, c=0.012665147955292222, Neff=3, nMC=200, nproc=8, detrend='no', method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the weighted wavelet amplitude (WWA) with phase, AR1_q, and cone of influence, as well as WT coeeficients
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       tau (array): the evenly-spaced time points
       freqs (array): vector of frequency
       c (float): the decay constant, the default value 1/(8*np.pi**2) is good for most of the cases
       Neff (int): effective number of points
       nMC (int): the number of Monte-Carlo simulations
       nproc (int): the number of processes for multiprocessing
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       wwa (array): the weighted wavelet amplitude.
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neffs (array): the matrix of effective number of points in the time-scale coordinates
       coeff (array): the wavelet transform coefficents
   
   
2017-07-20 11:03:57,163 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:57,198 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:57,265 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:12: input:
.. autofunction:: pyleoclim.Spectral.wwz_psd

2017-07-20 11:03:57,331 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz_psd
2017-07-20 11:03:57,360 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:03:57,380 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:03:57,403 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz_psd')
2017-07-20 11:03:57,424 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz_psd at 0x1239cbc80>
2017-07-20 11:03:57,444 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz_psd', <function wwz_psd at 0x1239cbc80>, {}, ['Return the psd o
2017-07-20 11:03:57,474 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz_psd(ys, ts, freqs=None, tau=None, c=0.001, nproc=8, nMC=200, detrend='no', Neff=3, anti_alias=False, avgs=2, method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the psd of a timeseires directly using wwz method.
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       c (float): the decay constant, the default value 1e-3 is good for most of the cases
       nproc (int): the number of processes for multiprocessing
       nMC (int): the number of Monte-Carlo simulations
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       psd (array): power spectral density
       freqs (array): vector of frequency
       psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes
   
   
2017-07-20 11:03:57,513 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:57,543 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:03:57,586 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:14: input:
.. autofunction:: pyleoclim.Spectral.plot_wwa

2017-07-20 11:03:57,623 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwa
2017-07-20 11:03:57,642 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:03:57,665 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:03:57,691 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwa')
2017-07-20 11:03:57,712 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwa at 0x1239cbd90>
2017-07-20 11:03:57,730 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwa', <function plot_wwa at 0x1239cbd90>, {}, ['Plot the wavel
2017-07-20 11:03:57,755 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwa(wwa, freqs, tau, Neff=3, AR1_q=None, coi=None, levels=None, tick_range=None, yticks=None, ylim=None, xticks=None, xlabels=None, figsize=[20, 8], clr_map='OrRd', cbar_drawedges=False, cone_alpha=0.5, plot_signif=False, signif_style='contour', plot_cone=False, ax=None, xlabel='Year', ylabel='Period')
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neff (int): effective number of points
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       levels (array): levels of values to plot
       tick_range (array): levels of ticks to show on the colorbar
       yticks (list): ticks on y-axis
       ylim (list): limitations for y-axis
       xticks (list): ticks on x-axis
       figsize (list): the size for the figure
       clr_map (str): the name of the colormap
       cbar_drawedges (bool): whether to draw edges on the colorbar or not
       cone_alpha (float): the alpha value for the area covered by cone of influence
       plot_signif (bool): plot 95% significant area or not
       signif_style (str): plot 95% significant area with `contour` or `shade`
       plot_cone (bool): plot cone of influence or not
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-20 11:03:57,784 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:16: input:
.. autofunction:: pyleoclim.Spectral.plot_wwadist

2017-07-20 11:03:57,806 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwadist
2017-07-20 11:03:57,824 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:03:57,844 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:03:57,865 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwadist')
2017-07-20 11:03:57,884 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwadist at 0x1239cbe18>
2017-07-20 11:03:57,905 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwadist', <function plot_wwadist at 0x1239cbe18>, {}, ['Plot t
2017-07-20 11:03:57,931 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwadist(wwa, ylim=None)
   :module: pyleoclim.Spectral

   Plot the distribution of wwa with the 95% quantile line.
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       ylim (list): limitations for y-axis
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-20 11:03:57,967 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:18: input:
.. autofunction:: pyleoclim.Spectral.plot_psd
2017-07-20 11:03:57,995 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_psd
2017-07-20 11:03:58,016 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2017-07-20 11:03:58,037 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2017-07-20 11:03:58,067 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_psd')
2017-07-20 11:03:58,100 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_psd at 0x1239cbea0>
2017-07-20 11:03:58,125 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_psd', <function plot_psd at 0x1239cbea0>, {}, ['Plot the wavel
2017-07-20 11:03:58,152 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_psd(psd, freqs, lmstyle=None, linewidth=None, xticks=None, xlim=None, ylim=None, figsize=[20, 8], label='PSD', plot_ar1=False, psd_ar1_q95=None, psd_ar1_color='#d9544d', ax=None, xlabel='Period', ylabel='Spectral Density')
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       psd (array): power spectral density
       freqs (array): vector of frequency
       xticks (list): ticks on x-axis
       xlim (list): limits for x-axis
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2017-07-20 11:03:58,236 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_fit:7: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:58,267 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_sim:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:58,288 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:58,334 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:15: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:58,368 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:12: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:58,399 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:58,420 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "spectral functions"...>>,)
2017-07-20 11:03:58,447 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 70%] [35mStats[39;49;00m                                                 
2017-07-20 11:03:58,472 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110830128>, 'Stats')
2017-07-20 11:03:58,496 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Stats', ['Statistics Functions\n====================\n\n.. autofunction:: pyleoclim.Stats.simpleSt
2017-07-20 11:03:58,520 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Stats.rst:4: input:
.. autofunction:: pyleoclim.Stats.simpleStats

2017-07-20 11:03:58,580 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Stats import simpleStats
2017-07-20 11:03:58,610 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Stats
2017-07-20 11:03:58,638 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Stats' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py'>
2017-07-20 11:03:58,663 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'simpleStats')
2017-07-20 11:03:58,692 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function simpleStats at 0x1239cc048>
2017-07-20 11:03:58,864 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Stats.simpleStats', <function simpleStats at 0x1239cc048>, {}, ['Computes si
2017-07-20 11:03:58,893 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: simpleStats(y, axis=None)
   :module: pyleoclim.Stats

   Computes simple statistics
   
   Computes the mean, median, min, max, standard deviation, and interquartile
   range of a numpy array y.
   
   Args:
       y (array): A Numpy array
       axis (int, typle of ints): Optional. Axis or Axes along which the means
           are computed, the default is to compute the mean of the flattened
           array. If a tuple of ints, performed over multiple axes
   
   Returns:
       The mean, median, min, max, standard deviation and IQR by columns
   
   
2017-07-20 11:03:58,923 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:03:58,951 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Stats.rst:6: input:
.. autofunction:: pyleoclim.Stats.corrsig
2017-07-20 11:03:58,968 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Stats import corrsig
2017-07-20 11:03:58,992 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Stats
2017-07-20 11:03:59,013 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Stats' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py'>
2017-07-20 11:03:59,029 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrsig')
2017-07-20 11:03:59,053 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrsig at 0x123a63158>
2017-07-20 11:03:59,069 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Stats.corrsig', <function corrsig at 0x123a63158>, {}, ['Estimates the signi
2017-07-20 11:03:59,109 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrsig(y1, y2, nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim.Stats

   Estimates the significance of correlations between non IID time series by 3 independent methods:
       1) 'ttest': T-test where d.o.f are corrected for the effect of serial correlation
       2) 'isopersistent': AR(1) modeling of x and y.
       3) 'isospectral': phase randomization of original inputs. (default)
       The T-test is parametric test, hence cheap but usually wrong except in idyllic circumstances.
       The others are non-parametric, but their computational requirements scales with nsim.
   
   Args:
       y1, y2 (array)- vector of (real) numbers of identical length, no NaNs allowed
       nsim (int)- the number of simulations [1000]
       method (str)- methods 1-3 above ['isospectral']
       alpha (float)- significance level for critical value estimation [0.05]
   
   Returns:
        r (real): correlation between x and y 
   
        signif (int): true  if significant; false otherwise 
   
        p (real): Fraction of time series with higher correlation coefficents than observed (approximates the p-value). 
   
           Note that signif = True if and only if p <= alpha.
   
2017-07-20 11:03:59,138 [WARNING] sphinx.util.docutils: Enumerated list ends without a blank line; unexpected unindent.
2017-07-20 11:03:59,176 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py:docstring of pyleoclim.Stats.simpleStats:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:03:59,200 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py:docstring of pyleoclim.Stats.corrsig:4: (WARNING/2) Enumerated list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:03:59,221 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "statistics functions"...>>,)
2017-07-20 11:03:59,245 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 80%] [35mSummaryPlots[39;49;00m                                          
2017-07-20 11:03:59,263 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110830128>, 'SummaryPlots')
2017-07-20 11:03:59,289 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('SummaryPlots', ['Summary Plots\n==============\n\nThis module handles some basic return for the su
2017-07-20 11:03:59,317 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:8: input:
.. autofunction:: pyleoclim.SummaryPlots.getMetadata

2017-07-20 11:03:59,337 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import getMetadata
2017-07-20 11:03:59,359 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-20 11:03:59,378 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-20 11:03:59,402 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getMetadata')
2017-07-20 11:03:59,424 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getMetadata at 0x122ac19d8>
2017-07-20 11:03:59,521 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.getMetadata', <function getMetadata at 0x122ac19d8>, {}, ['Get 
2017-07-20 11:03:59,538 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getMetadata(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary metadata to be printed out automatically
   
   Args:
       timeseries: a specific timeseries object. 
       
   Returns:
       A dictionary containing the following metadata:
   
       archiveType 
   
       Authors (if more than 2, replace by et al. 
   
       PublicationYear 
   
       Publication DOI 
   
       Variable Name 
   
       Units 
   
       Climate Interpretation 
   
       Calibration Equation 
   
       Calibration References 
   
       Calibration Notes 
   
       
   
2017-07-20 11:03:59,566 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:10: input:
.. autofunction:: pyleoclim.SummaryPlots.TsData

2017-07-20 11:03:59,583 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import TsData
2017-07-20 11:03:59,610 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-20 11:03:59,628 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-20 11:03:59,653 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'TsData')
2017-07-20 11:03:59,674 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function TsData at 0x122ac1a60>
2017-07-20 11:03:59,695 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.TsData', <function TsData at 0x122ac1a60>, {}, ['Get the PaleoD
2017-07-20 11:03:59,717 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: TsData(timeseries, x_axis='')
   :module: pyleoclim.SummaryPlots

   Get the PaleoData with age/depth information
       
   Get the necessary information for the TS plots/necessary to allow for
   axes specification
   
   Args:
       timeseries: a single timeseries object. 
           By default, will prompt the user
       x-axis (str): The representation against which to plot the 
           paleo-data. Options are "age", "year", and "depth". 
           Default is to let the system choose if only one available 
           or prompt the user.
   Returns:
       x - the x-valus 
   
       y - the y-values 
   
       archiveType - the archiveType (for plot settings) 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       label - the results of the x-axis query. Either depth, year, or age
       
   
2017-07-20 11:03:59,740 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:12: input:
.. autofunction:: pyleoclim.SummaryPlots.agemodelData
2017-07-20 11:03:59,761 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import agemodelData
2017-07-20 11:03:59,780 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2017-07-20 11:03:59,800 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2017-07-20 11:03:59,823 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'agemodelData')
2017-07-20 11:03:59,841 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function agemodelData at 0x122ac1ae8>
2017-07-20 11:03:59,861 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.agemodelData', <function agemodelData at 0x122ac1ae8>, {}, ['Ge
2017-07-20 11:03:59,882 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: agemodelData(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary information for the agemodel plot
   
   Args:
       timeseries: a single timeseries object. By default, will
           prompt the user
   
   Returns:
       depth - the depth values 
   
       age - the age values 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       archiveType - the archiveType (for default plot settings)
   
   
2017-07-20 11:03:59,945 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "summary plots"...>>,)
2017-07-20 11:03:59,973 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 90%] [35mTimeseries[39;49;00m                                            
2017-07-20 11:03:59,989 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110830128>, 'Timeseries')
2017-07-20 11:04:00,018 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Timeseries', ['Timeseries Functions\n====================\n\nThis module allows the manipulation o
2017-07-20 11:04:00,039 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:6: input:
.. autofunction:: pyleoclim.Timeseries.bin

2017-07-20 11:04:00,062 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import bin
2017-07-20 11:04:00,083 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-20 11:04:00,107 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-20 11:04:00,134 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'bin')
2017-07-20 11:04:00,162 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function bin at 0x1239c56a8>
2017-07-20 11:04:00,309 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.bin', <function bin at 0x1239c56a8>, {}, ['Bin the values', '', '
2017-07-20 11:04:00,333 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: bin(x, y, bin_size='', start='', end='')
   :module: pyleoclim.Timeseries

   Bin the values
   
   Args:
       x (array): the x-axis series.
       y (array): the y-axis series.
       bin_size (float): The size of the bins. Default is the average resolution
       start (float): Where/when to start binning. Default is the minimum
       end (float): When/where to stop binning. Defulat is the maximum
   
   Returns:
       binned_values - the binned output 
   
       bins - the bins (centered on the median, i.e., the 100-200 bin is 150) 
   
       n - number of data points in each bin 
   
       error -  the standard error on the mean in each bin
   
   
2017-07-20 11:04:00,365 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:8: input:
.. autofunction:: pyleoclim.Timeseries.interp

2017-07-20 11:04:00,386 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import interp
2017-07-20 11:04:00,419 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-20 11:04:00,450 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-20 11:04:00,469 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interp')
2017-07-20 11:04:00,490 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interp at 0x1239c57b8>
2017-07-20 11:04:00,516 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.interp', <function interp at 0x1239c57b8>, {}, ['Linear interpola
2017-07-20 11:04:00,535 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interp(x, y, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Linear interpolation onto a new x-axis
   
   Args:
       x (array): the x-axis
       y (array): the y-axis
       interp_step (float): the interpolation step. Default is mean resolution.
       start (float): where/when to start the interpolation. Default is min..
       end (float): where/when to stop the interpolation. Defaul is max.
   
   Returns:
       xi - the interpolated x-axis 
   
       interp_values - the interpolated values
    
   
2017-07-20 11:04:00,594 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:10: input:
.. autofunction:: pyleoclim.Timeseries.onCommonAxis

2017-07-20 11:04:00,660 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import onCommonAxis
2017-07-20 11:04:00,687 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-20 11:04:00,715 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-20 11:04:00,743 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'onCommonAxis')
2017-07-20 11:04:00,786 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function onCommonAxis at 0x1239c5840>
2017-07-20 11:04:00,813 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.onCommonAxis', <function onCommonAxis at 0x1239c5840>, {}, ['Plac
2017-07-20 11:04:00,839 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: onCommonAxis(x1, y1, x2, y2, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Places two timeseries on a common axis
   
   Args:
       x1 (array): x-axis values of the first timeseries
       y1 (array): y-axis values of the first timeseries
       x2 (array): x-axis values of the second timeseries
       y2 (array): y-axis values of the second timeseries
       interp_step (float): The interpolation step. Default is mean resolution
           of lowest resolution series
       start (float): where/when to start. Default is the maximum of the minima of
           the two timeseries
       end (float): Where/when to end. Default is the minimum of the maxima of
           the two timeseries
   
   Returns:
       xi -  the interpolated x-axis 
   
       interp_values1 -  the interpolated y-values for the first timeseries
       interp_values2 - the intespolated y-values for the second timeseries
   
2017-07-20 11:04:00,870 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:04:00,899 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:04:00,955 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:12: input:
.. autofunction:: pyleoclim.Timeseries.standardize
2017-07-20 11:04:01,042 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import standardize
2017-07-20 11:04:01,074 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2017-07-20 11:04:01,102 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2017-07-20 11:04:01,128 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardize')
2017-07-20 11:04:01,159 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardize at 0x1239c58c8>
2017-07-20 11:04:01,196 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.standardize', <function standardize at 0x1239c58c8>, {}, ['Center
2017-07-20 11:04:01,228 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardize(x, scale=1, axis=0, ddof=0, eps=0.001)
   :module: pyleoclim.Timeseries

   Centers and normalizes a given time series. Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed
       mu (real): the mean of the original time series, E[X]
       sig (real): the standard deviation of the original time series, std[X]
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2017-07-20 11:04:01,284 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.onCommonAxis:9: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:04:01,307 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.onCommonAxis:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:04:01,330 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "timeseries functions"...>>,)
2017-07-20 11:04:01,361 [INFO] sphinx.util: [01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                 
2017-07-20 11:04:01,382 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110830128>, 'index')
2017-07-20 11:04:01,431 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('index', [".. Pyleoclim documentation master file, created by\n   sphinx-quickstart on Fri Feb 10 1
2017-07-20 11:04:01,487 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <comment...><section "welcome to pyleoclim's documentati ...>,)
2017-07-20 11:04:01,543 [INFO] sphinx.util: 
2017-07-20 11:04:01,571 [DEBUG] sphinx.application: [app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x110830128>,)
2017-07-20 11:03:42,650 [WARNING] sphinx.util.docutils: Literal block expected; none found.
2017-07-20 11:04:01,613 [INFO] sphinx.builders: [01mlooking for now-outdated files... [39;49;00m
2017-07-20 11:04:01,644 [DEBUG] sphinx.application: [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x110830128>,)
2017-07-20 11:04:01,680 [INFO] sphinx.builders: none found
2017-07-20 11:04:01,707 [INFO] sphinx.builders: [01mpickling environment... [39;49;00m
2017-07-20 11:04:01,742 [INFO] sphinx.builders: done
2017-07-20 11:04:01,764 [INFO] sphinx.builders: [01mchecking consistency... [39;49;00m
2017-07-20 11:04:01,787 [DEBUG] sphinx.application: [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x110830128>,)
2017-07-20 11:04:01,811 [INFO] sphinx.builders: done
2017-07-20 11:04:01,850 [DEBUG] sphinx.builders: docnames to write: Introduction, LipdUtils, Main, Map, Plot, Spectral, Stats, SummaryPlots, Timeseries, index
2017-07-20 11:04:01,878 [INFO] sphinx.builders: [01mpreparing documents... [39;49;00m
2017-07-20 11:04:01,915 [INFO] sphinx.builders: done
2017-07-20 11:04:01,957 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 10%] [32mIntroduction[39;49;00m                                           
2017-07-20 11:04:01,988 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "pyleoclim"...>>, 'Introduction')
2017-07-20 11:04:02,170 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 20%] [32mLipdUtils[39;49;00m                                              
2017-07-20 11:04:02,227 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "lipd utilities"...>>, 'LipdUtils')
2017-07-20 11:04:02,324 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 30%] [32mMain[39;49;00m                                                   
2017-07-20 11:04:02,366 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "main functions"...>>, 'Main')
2017-07-20 11:04:02,522 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 40%] [32mMap[39;49;00m                                                    
2017-07-20 11:04:02,617 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "mapping functions"...>>, 'Map')
2017-07-20 11:04:02,830 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 50%] [32mPlot[39;49;00m                                                   
2017-07-20 11:04:02,892 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "plotting functions"...>>, 'Plot')
2017-07-20 11:04:02,960 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 60%] [32mSpectral[39;49;00m                                               
2017-07-20 11:04:02,980 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "spectral functions"...>>, 'Spectral')
2017-07-20 11:04:03,187 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 70%] [32mStats[39;49;00m                                                  
2017-07-20 11:04:03,216 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "statistics functions"...>>, 'Stats')
2017-07-20 11:04:03,311 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 80%] [32mSummaryPlots[39;49;00m                                           
2017-07-20 11:04:03,370 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "summary plots"...>>, 'SummaryPlots')
2017-07-20 11:04:03,496 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 90%] [32mTimeseries[39;49;00m                                             
2017-07-20 11:04:03,547 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "timeseries functions"...>>, 'Timeseries')
2017-07-20 11:04:03,666 [INFO] sphinx.util: [01mwriting output... [39;49;00m[100%] [32mindex[39;49;00m                                                  
2017-07-20 11:04:03,704 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <comment...><section "welcome to pyleoclim's documentati ...>, 'index')
2017-07-20 11:04:03,853 [INFO] sphinx.util: 
2017-07-20 11:04:03,883 [INFO] sphinx.builders.html: [01mgenerating indices...[39;49;00m
2017-07-20 11:04:03,912 [INFO] sphinx.builders.html:  genindex
2017-07-20 11:04:04,003 [INFO] sphinx.builders.html: 
2017-07-20 11:04:04,029 [DEBUG] sphinx.application: [app] emitting event: 'html-collect-pages'()
2017-07-20 11:04:04,062 [INFO] sphinx.builders.html: [01mwriting additional pages...[39;49;00m
2017-07-20 11:04:04,082 [INFO] sphinx.builders.html:  search
2017-07-20 11:04:04,136 [INFO] sphinx.builders.html: 
2017-07-20 11:04:04,162 [INFO] sphinx.builders.html: [01mcopying static files... [39;49;00m
2017-07-20 11:04:04,287 [INFO] sphinx.builders.html: done
2017-07-20 11:04:04,307 [INFO] sphinx.builders.html: [01mcopying extra files... [39;49;00m
2017-07-20 11:04:04,324 [INFO] sphinx.builders.html: done
2017-07-20 11:04:04,366 [INFO] sphinx.builders.html: [01mdumping search index in English (code: en) ... [39;49;00m
2017-07-20 11:04:04,445 [INFO] sphinx.builders.html: done
2017-07-20 11:04:04,525 [INFO] sphinx.builders.html: [01mdumping object inventory... [39;49;00m
2017-07-20 11:04:04,582 [INFO] sphinx.builders.html: done
2017-07-20 11:04:04,610 [INFO] sphinx.application: [01mbuild succeeded, 1 warning.[39;49;00m
2017-07-20 11:04:04,628 [DEBUG] sphinx.application: [app] emitting event: 'build-finished'(None,)
2017-07-20 11:05:35,171 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:35,172 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'openLipd')
2017-07-20 11:05:35,189 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function openLipd at 0x109284048>
2017-07-20 11:05:35,599 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.openLipd', <function openLipd at 0x109284048>, {}, ['Read Lipd files into a 
2017-07-20 11:05:35,620 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: openLipd(usr_path='')
   :module: pyleoclim

   Read Lipd files into a dictionary
   
   Sets the dictionary as global variable so that it doesn't have to be provided
   as an argument for every function.
   
   Args:
       usr_path (str): The path to a directory or a single file. (Optional argument)
       
   Returns:
       lipd_dict - a dictionary containing the LiPD library
   
   
2017-07-20 11:05:35,647 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: input:
.. autofunction:: pyleoclim.fetchTs

2017-07-20 11:05:35,667 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import fetchTs
2017-07-20 11:05:35,684 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:35,706 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:35,740 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'fetchTs')
2017-07-20 11:05:35,776 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function fetchTs at 0x11c421840>
2017-07-20 11:05:35,816 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.fetchTs', <function fetchTs at 0x11c421840>, {}, ['Extract timeseries dictio
2017-07-20 11:05:35,838 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: fetchTs(lipds=None)
   :module: pyleoclim

   Extract timeseries dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Set the dictionary as a global variable so that it doesn't have to be
   provided as an argument for every function. 
   
   Args:
       lipds (dict): A dictionary of LiPD files obtained through the 
       readLipd function
   
   Returns:
       ts_list - A list of timeseries object
   
   
2017-07-20 11:05:35,861 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:32: input:
.. autofunction:: pyleoclim.mapAllArchive

2017-07-20 11:05:35,881 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapAllArchive
2017-07-20 11:05:35,903 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:35,925 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:35,941 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAllArchive')
2017-07-20 11:05:35,959 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAllArchive at 0x11c4218c8>
2017-07-20 11:05:35,976 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapAllArchive', <function mapAllArchive at 0x11c4218c8>, {}, ['Map all the a
2017-07-20 11:05:36,000 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAllArchive(lipds='', markersize=50, background='shadedrelief', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map all the available records loaded into the workspace by archiveType.
   
   Map of all the records into the workspace by archiveType.
       Uses the default color palette. Enter pyleoclim.plot_default for detail.
   
   Args:
       lipds (dict): A dictionary of LiPD files. (Optional)
       markersize (int): The size of the markers. Default is 50
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
       saveFig (bool): Default is to not save the figure
       dir (str): The absolute path of the directory in which to save the
           figure. If not provided, creates a default folder called 'figures'
           in the LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
2017-07-20 11:05:36,026 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:36,044 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:36,069 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:36,107 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:36,136 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:34: input:
.. autofunction:: pyleoclim.mapLipd

2017-07-20 11:05:36,155 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapLipd
2017-07-20 11:05:36,171 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:36,192 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:36,238 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapLipd')
2017-07-20 11:05:36,271 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapLipd at 0x11c421950>
2017-07-20 11:05:36,292 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapLipd', <function mapLipd at 0x11c421950>, {}, ['Create a Map for a single
2017-07-20 11:05:36,317 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapLipd(timeseries='', countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='default', figsize=[4, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Create a Map for a single record
   
   Orthographic projection map of a single record.
   
   Args:
       timeseries: a LiPD timeseries object. Will prompt for one if not given
       countries (bool): Draws the country borders. Default is on (True).
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders.
           Default is off (False)
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief
       scale (float): useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): default is 50
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-20 11:05:36,339 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:36,361 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:36,383 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:05:36,405 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:36,430 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:36,451 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:36,470 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:36,497 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:38: input:
.. autofunction:: pyleoclim.plotTs

2017-07-20 11:05:36,522 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotTs
2017-07-20 11:05:36,540 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:36,559 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:36,576 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotTs')
2017-07-20 11:05:36,595 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotTs at 0x11c4219d8>
2017-07-20 11:05:36,620 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.plotTs', <function plotTs at 0x11c4219d8>, {}, ['Plot a single time series.'
2017-07-20 11:05:36,637 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotTs(timeseries='', x_axis='', markersize=50, marker='default', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Plot a single time series.
   
   Args:
       A timeseries: By default, will prompt the user for one.
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       markersize (int): default is 50.
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure.
   
   
2017-07-20 11:05:36,659 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:36,679 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:36,696 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:36,724 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:36,745 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:36,767 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:36,789 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:40: input:
.. autofunction:: pyleoclim.histTs

2017-07-20 11:05:36,806 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import histTs
2017-07-20 11:05:36,830 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:36,855 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:36,880 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'histTs')
2017-07-20 11:05:36,902 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function histTs at 0x11c421a60>
2017-07-20 11:05:36,935 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.histTs', <function histTs at 0x11c421a60>, {}, ['Plot a univariate distribut
2017-07-20 11:05:36,955 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: histTs(timeseries='', bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'Rug'}, fit_kws={'label': 'Fit'}, color='default', vertical=False, norm_hist=True, figsize=[5, 5], saveFig=False, format='eps', dir='')
   :module: pyleoclim

   Plot a univariate distribution of the PaleoData values
   
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the
   seaborn kdeplot() and rugplot() functions. It can also fit
   scipy.stats distributions and plot the estimated PDF over the data.
   
   Args:
       timeseries: A timeseries. By default, will prompt the user for one.
       bins (int): Specification of hist bins following matplotlib(hist),
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning
           a tuple that can be passed to a pdf method of positional
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in. Default is to use the default paletter for each
           archive type.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or
           fitted density is plotted
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns
       fig - The figure
   
   
2017-07-20 11:05:36,975 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:36,995 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:37,023 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:37,050 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:37,070 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:05:37,091 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:37,114 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:37,157 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:37,189 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:37,233 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:48: input:
.. autofunction:: pyleoclim.summaryTs

2017-07-20 11:05:37,267 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import summaryTs
2017-07-20 11:05:37,298 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:37,321 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:37,352 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'summaryTs')
2017-07-20 11:05:37,375 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function summaryTs at 0x11c421ae8>
2017-07-20 11:05:37,395 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.summaryTs', <function summaryTs at 0x11c421ae8>, {}, ['Basic summary plot', 
2017-07-20 11:05:37,418 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: summaryTs(timeseries='', x_axis='', saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Basic summary plot
   
   Plots the following information: the time series, a histogram of
   the PaleoData_values, location map, spectral density using the wwz 
   method, and metadata about the record.
   
   Args:
       timeseries: a timeseries object. By default, will prompt for one
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2017-07-20 11:05:37,450 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:37,469 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:37,493 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:37,512 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:37,537 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:53: input:
.. autofunction:: pyleoclim.statsTs

2017-07-20 11:05:37,564 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import statsTs
2017-07-20 11:05:37,585 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:37,613 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:37,664 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'statsTs')
2017-07-20 11:05:37,694 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function statsTs at 0x11c421b70>
2017-07-20 11:05:37,717 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.statsTs', <function statsTs at 0x11c421b70>, {}, ['Calculate simple statisti
2017-07-20 11:05:37,739 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: statsTs(timeseries='')
   :module: pyleoclim

   Calculate simple statistics of a timeseries
   
   Args:
       timeseries: sytem will prompt for one if not given
   
   Returns:
       the mean, median, min, max, standard deviation and the
       inter-quartile range (IQR) of a timeseries.
   
   Examples:
       >>> mean, median, min_, max_, std, IQR = pyleo.statsTs(timeseries)
   
   
2017-07-20 11:05:37,825 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:55: input:
.. autofunction:: pyleoclim.corrSigTs

2017-07-20 11:05:37,866 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import corrSigTs
2017-07-20 11:05:37,889 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:37,912 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:37,931 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrSigTs')
2017-07-20 11:05:37,961 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrSigTs at 0x11c421bf8>
2017-07-20 11:05:37,985 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.corrSigTs', <function corrSigTs at 0x11c421bf8>, {}, ['Estimates the signifi
2017-07-20 11:05:38,005 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrSigTs(timeseries1='', timeseries2='', x_axis='', interp_step='', start='', end='', nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim

   Estimates the significance of correlations between non IID timeseries.
   
   Function written by. F. Zhu.
   
   Args:
       timeseries1, timeseries2: timeseries object. Default is blank.
       x-axis (str): The representation against which to express the
           paleo-data. Options are "age", "year", and "depth".
           Default is to let the system choose if only one available
           or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start time/age/depth. Default is the maximum of
           the minima of the two timeseries
       end (float): End time/age/depth. Default is the minimum of the
           maxima of the two timeseries
       nsim (int): the number of simulations. Default is 1000
       method (str): method use to estimate the correlation and significance.
           Available methods include:
               - 'ttest': T-test where the degrees of freedom are corrected for
               the effect of serial correlation 
   
               - 'isopersistant': AR(1) modeling of the two timeseries 
   
               - 'isospectral' (default): phase randomization of original
               inputs.
           The T-test is parametric test, hence cheap but usually wrong
           except in idyllic circumstances.
           The others are non-parametric, but their computational
           requirements scales with nsim.
       alpha (float): significance level for critical value estimation. Default is 0.05
   
   Returns:
       r (float) - correlation between the two timeseries 
   
       sig (bool) -  Returns True if significant, False otherwise 
   
       p (real) - the p-value
   
   
2017-07-20 11:05:38,031 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:38,052 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:38,081 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:38,103 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:38,128 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:05:38,166 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:38,188 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:05:38,210 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:05:38,228 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:05:38,247 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:38,272 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:61: input:
.. autofunction:: pyleoclim.binTs

2017-07-20 11:05:38,317 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import binTs
2017-07-20 11:05:38,339 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:38,365 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:38,382 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'binTs')
2017-07-20 11:05:38,399 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function binTs at 0x11c421c80>
2017-07-20 11:05:38,418 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.binTs', <function binTs at 0x11c421c80>, {}, ['Bin the paleoData values of t
2017-07-20 11:05:38,436 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: binTs(timeseries='', x_axis='', bin_size='', start='', end='')
   :module: pyleoclim

   Bin the paleoData values of the timeseries
   
   Args:
       timeseries. By default, will prompt the user for one.
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system  choose if only one available or prompt the user.
       bin_size (float): the size of the bins to be used. By default,
           will prompt for one
       start (float): Start time/age/depth. Default is the minimum
       end (float): End time/age/depth. Default is the maximum
   
   Returns:
       binned_values- the binned output,
   
       bins-  the bins (centered on the median, i.e. the 100-200 bin is 150),
   
       n-  number of data points in each bin,
   
       error- the standard error on the mean in each bin
   
   
   
2017-07-20 11:05:38,465 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:38,499 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:38,534 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2017-07-20 11:05:38,559 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:63: input:
.. autofunction:: pyleoclim.interpTs

2017-07-20 11:05:38,582 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import interpTs
2017-07-20 11:05:38,599 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:38,618 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:38,636 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interpTs')
2017-07-20 11:05:38,654 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interpTs at 0x11c421d08>
2017-07-20 11:05:38,679 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.interpTs', <function interpTs at 0x11c421d08>, {}, ['Simple linear interpola
2017-07-20 11:05:38,697 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interpTs(timeseries='', x_axis='', interp_step='', start='', end='')
   :module: pyleoclim

   Simple linear interpolation
   
   Simple linear interpolation of the data using the numpy.interp method
   
   Args:
       timeseries. Default is blank, will prompt for it
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start year/age/depth. Default is the minimum
       end (float): End year/age/depth. Default is the maximum
   
   Returns:
       interp_age - the interpolated age/year/depth according to the end/start
       and time step, 
   
       interp_values - the interpolated values
   
   
2017-07-20 11:05:38,720 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:38,734 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:38,755 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:65: input:
.. autofunction:: pyleoclim.standardizeTs

2017-07-20 11:05:38,777 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import standardizeTs
2017-07-20 11:05:38,801 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:38,820 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:38,839 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardizeTs')
2017-07-20 11:05:38,858 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardizeTs at 0x11c421d90>
2017-07-20 11:05:38,882 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.standardizeTs', <function standardizeTs at 0x11c421d90>, {}, ['Centers and n
2017-07-20 11:05:38,901 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardizeTs(timeseries='', scale=1, ddof=0, eps=0.001)
   :module: pyleoclim

   Centers and normalizes the paleoData values of a  given time series.
   
   Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       - z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed 
   
       - mu (real): the mean of the original time series, E[X] 
   
       - sig (real): the standard deviation of the original time series, std[X] 
   
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2017-07-20 11:05:38,926 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:67: input:
.. autofunction:: pyleoclim.segmentTs

2017-07-20 11:05:38,942 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import segmentTs
2017-07-20 11:05:38,959 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:38,983 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:39,002 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'segmentTs')
2017-07-20 11:05:39,020 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function segmentTs at 0x11c421e18>
2017-07-20 11:05:39,035 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.segmentTs', <function segmentTs at 0x11c421e18>, {}, ['Divides a time series
2017-07-20 11:05:39,052 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: segmentTs(timeseries='', factor=2)
   :module: pyleoclim

   Divides a time series into several segments using a gap detection algorithm
   
   Gap detection rule: If the time interval between some two data points is
   larger than some factor times the mean resolution of the timeseries, then
   a brak point is applied and the timseries is divided. 
   
   Args:
       timeseries: a LiPD timeseries object
       factor (float): factor to adjust the threshold. threshold = factor*dt_mean.
           Default is 2.
   
   Returns:
       seg_y (list) - a list of several segments with potentially different length
       seg_t (list) - A list of the time values for each y segment. 
       n_segs (int) - the number of segments
       
   
   
2017-07-20 11:05:39,072 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:39,100 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:71: input:
.. autofunction:: pyleoclim.wwzTs

2017-07-20 11:05:39,122 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import wwzTs
2017-07-20 11:05:39,137 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2017-07-20 11:05:39,155 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2017-07-20 11:05:39,171 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwzTs')
2017-07-20 11:05:39,195 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwzTs at 0x11c421ea0>
2017-07-20 11:05:39,216 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.wwzTs', <function wwzTs at 0x11c421ea0>, {}, ['Weigthed wavelet Z-transform 
2017-07-20 11:05:39,234 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwzTs(timeseries='', wwz=False, psd=True, wwz_default=True, psd_default=True, wwaplot_default=True, psdplot_default=True, fig=True, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Weigthed wavelet Z-transform analysis
   
   Wavelet analysis for unevenly spaced data adapted from Foster et al. (1996)
   
   Args:
       timeseries (dict): A LiPD timeseries object (Optional, will prompt for one.)
       wwz (bool): If True, will perform wavelet analysis
       psd (bool): If True, will inform the power spectral density of the timeseries
       wwz_default: If True, will use the following default parameters:
           
           wwz_default = {'tau':None,'freqs':None,'c':1/(8*np.pi**2),'Neff':3,'nMC':200,
                              'nproc':8,'detrend':'no','method':'Kirchner_f2py'}.
               
           Modify the values for specific keys to change the default behavior.
               
       psd_default: If True, will use the following default parameters:
           
           psd_default = {'tau':None,
                         'freqs': None,
                         'c':1e-3,
                         'nproc':8,
                         'nMC':200,
                         'detrend':'no',
                         'Neff':3,
                         'anti_alias':False,
                         'avgs':2,
                         'method':'Kirchner_f2py'}
           
           Modify the values for specific keys to change the default behavior.
           
       wwaplot_default: If True, will use the following default parameters:
           
           wwaplot_default={'Neff':3,
                                'AR1_q':AR1_q,
                                'coi':coi,
                                'levels':None,
                                'tick_range':None,
                                'yticks':None,
                                'ylim':None,
                                'xticks':None,
                                'xlabels':None,
                                'figsize':[20,8],
                                'clr_map':'OrRd',
                                'cbar_drawedges':False,
                                'cone_alpha':0.5,
                                'plot_signif':True,
                                'signif_style':'contour',
                                'plot_cone':True}
           
           Modify the values for specific keys to change the default behavior.
       psdplot_default: If True, will use the following default parameters:
           
           psdplot_default={'lmstyle':None,
                            'linewidth':None,
                            'xticks':None,
                            'xlim':None,
                            'ylim':None,
                            'figsize':[20,8],
                            'label':'PSD',
                            'plot_ar1':True,
                            'psd_ar1_q95':psd_ar1_q95,
                            'psd_ar1_color':sns.xkcd_rgb["pale red"]}
           
           Modify the values for specific keys to change the default behavior.
           
       fig (bool): If True, plots the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       
   Returns:
       dict_out (dict): A dictionary of outputs. 
           
           For wwz: 
           
           - wwa (array): The weights wavelet amplitude 
       
           - AR1_q (array): AR1 simulations 
       
           - coi (array): cone of influence 
       
           - freqs (array): vector for frequencies 
       
           - tau (array): the evenly-spaced time points, namely the time 
           shift for wavelet analysis. 
       
           - Neffs (array): The matrix of effective number of points in the
           time-scale coordinates.
       
           - coeff (array): The wavelet transform coefficients
       
           For psd: 
           
           - psd (array): power spectral density 
       
           - freqs (array): vector of frequency 
       
           - psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes 
       
       fig: The figure
        
       References:
           Foster, G. (1996). Wavelets for period analysis of unevenly 
           sampled time series. The Astronomical Journal, 112(4), 1709-1729.
       
       Examples:
           To run both wwz and psd: 
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(wwz=True)
           
           Note: This will return a single figure with wwa and psd 
   
           
           To change a default behavior:
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(psd_default = {'nMC':1000}) 
          
   
2017-07-20 11:05:39,270 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:39,328 [ERROR] sphinx.util.docutils: Unexpected indentation.
2017-07-20 11:05:39,359 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2017-07-20 11:05:39,380 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:05:39,409 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2017-07-20 11:05:39,521 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:39,537 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,555 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:39,573 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,604 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:39,623 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,642 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,660 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:19: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:39,679 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,703 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:39,724 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:26: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,741 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:39,759 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,776 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:39,803 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,823 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:15: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:39,839 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,857 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:11: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:39,874 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,893 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:16: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:39,917 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,935 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,955 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:26: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:39,970 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:39,988 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:31: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:40,014 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:33: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,032 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:40,049 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,064 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:14: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:40,081 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,099 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:40,122 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,141 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:13: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:40,162 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,188 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:16: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,221 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:18: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:40,241 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:20: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,260 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:25: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,279 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:26: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,296 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:30: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,320 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:40,337 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,355 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:10: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,372 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:40,390 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,411 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.segmentTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:40,431 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:51: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,452 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:69: (ERROR/3) Unexpected indentation. [filtered system message]
2017-07-20 11:05:40,469 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:71: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,486 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:89: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,507 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:92: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2017-07-20 11:05:40,529 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "main functions"...>>,)
2017-07-20 11:05:40,562 [INFO] sphinx.util: 
2017-07-20 11:05:40,580 [DEBUG] sphinx.application: [app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x1091f9400>,)
2017-07-20 11:05:40,595 [INFO] sphinx.builders: [01mlooking for now-outdated files... [39;49;00m
2017-07-20 11:05:40,620 [DEBUG] sphinx.application: [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x1091f9400>,)
2017-07-20 11:05:40,638 [INFO] sphinx.builders: none found
2017-07-20 11:05:40,658 [INFO] sphinx.builders: [01mpickling environment... [39;49;00m
2017-07-20 11:05:40,761 [INFO] sphinx.builders: done
2017-07-20 11:05:40,822 [INFO] sphinx.builders: [01mchecking consistency... [39;49;00m
2017-07-20 11:05:40,849 [DEBUG] sphinx.application: [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x1091f9400>,)
2017-07-20 11:05:40,873 [INFO] sphinx.builders: done
2017-07-20 11:05:40,894 [DEBUG] sphinx.builders: docnames to write: Main
2017-07-20 11:05:40,913 [INFO] sphinx.builders: [01mpreparing documents... [39;49;00m
2017-07-20 11:05:40,961 [INFO] sphinx.builders: done
2017-07-20 11:05:40,986 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 50%] [32mMain[39;49;00m                                                   
2017-07-20 11:05:41,023 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "main functions"...>>, 'Main')
2017-07-20 11:05:41,218 [INFO] sphinx.util: [01mwriting output... [39;49;00m[100%] [32mindex[39;49;00m                                                  
2017-07-20 11:05:41,272 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <comment...><section "welcome to pyleoclim's documentati ...>, 'index')
2017-07-20 11:05:41,354 [INFO] sphinx.util: 
2017-07-20 11:05:41,386 [INFO] sphinx.builders.html: [01mgenerating indices...[39;49;00m
2017-07-20 11:05:41,413 [INFO] sphinx.builders.html:  genindex
2017-07-20 11:05:41,594 [INFO] sphinx.builders.html: 
2017-07-20 11:05:41,617 [DEBUG] sphinx.application: [app] emitting event: 'html-collect-pages'()
2017-07-20 11:05:41,645 [INFO] sphinx.builders.html: [01mwriting additional pages...[39;49;00m
2017-07-20 11:05:41,671 [INFO] sphinx.builders.html:  search
2017-07-20 11:05:41,781 [INFO] sphinx.builders.html: 
2017-07-20 11:05:41,821 [INFO] sphinx.builders.html: [01mcopying static files... [39;49;00m
2017-07-20 11:05:42,076 [INFO] sphinx.builders.html: done
2017-07-20 11:05:42,094 [INFO] sphinx.builders.html: [01mcopying extra files... [39;49;00m
2017-07-20 11:05:42,111 [INFO] sphinx.builders.html: done
2017-07-20 11:05:42,134 [INFO] sphinx.builders.html: [01mdumping search index in English (code: en) ... [39;49;00m
2017-07-20 11:05:42,193 [INFO] sphinx.builders.html: done
2017-07-20 11:05:42,225 [INFO] sphinx.builders.html: [01mdumping object inventory... [39;49;00m
2017-07-20 11:05:42,289 [INFO] sphinx.builders.html: done
2017-07-20 11:05:42,433 [INFO] sphinx.application: [01mbuild succeeded.[39;49;00m
2017-07-20 11:05:42,462 [DEBUG] sphinx.application: [app] emitting event: 'build-finished'(None,)
2018-03-08 15:24:09,173 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:09,175 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'createDir')
2018-03-08 15:24:09,189 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function createDir at 0x1186b7510>
2018-03-08 15:24:09,341 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.createDir', <function createDir at 0x1186b7510>, {}, ['Create a ne
2018-03-08 15:24:09,356 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: createDir(path, foldername)
   :module: pyleoclim.LipdUtils

   Create a new folder in a working directory
   
   Create a new folder in a working directory to save outputs from Pyleoclim.
   
   Args:
       path(str): the path to the new folder.
       foldername(str): the name of the folder to be created
       
   Returns:
       newdir - the full path to the new directory
       
   
2018-03-08 15:24:09,375 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:11: input:
.. autofunction:: pyleoclim.LipdUtils.saveFigure

2018-03-08 15:24:09,390 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import saveFigure
2018-03-08 15:24:09,403 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:09,420 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:09,439 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'saveFigure')
2018-03-08 15:24:09,453 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function saveFigure at 0x1186b7598>
2018-03-08 15:24:09,468 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.saveFigure', <function saveFigure at 0x1186b7598>, {}, ['Save a fi
2018-03-08 15:24:09,482 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: saveFigure(name, format='eps', dir='')
   :module: pyleoclim.LipdUtils

   Save a figure
   
   Save the figure in the directory. If not given, creates a folder in the 
   current working directory. 
   
   Args:
       name (str): name of the file
       format (str): One of the file extensions supported by the active 
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       dir (str): the name of the folder in the LiPD working directory.
           If not provided, creates a default folder called 'figures'.
           
   
2018-03-08 15:24:09,498 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:09,513 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:09,540 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:16: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateLipds

2018-03-08 15:24:09,554 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateLipds
2018-03-08 15:24:09,590 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:09,615 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:09,637 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateLipds')
2018-03-08 15:24:09,667 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateLipds at 0x1186b7620>
2018-03-08 15:24:09,687 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateLipds', <function enumerateLipds at 0x1186b7620>, {}, ['E
2018-03-08 15:24:09,709 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateLipds(lipds)
   :module: pyleoclim.LipdUtils

   Enumerate the LiPD files loaded in the workspace
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   
2018-03-08 15:24:09,753 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:18: input:
.. autofunction:: pyleoclim.LipdUtils.getLipd

2018-03-08 15:24:09,768 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getLipd
2018-03-08 15:24:09,781 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:09,794 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:09,810 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getLipd')
2018-03-08 15:24:09,825 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getLipd at 0x1186b76a8>
2018-03-08 15:24:09,852 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getLipd', <function getLipd at 0x1186b76a8>, {}, ['Prompt for a Li
2018-03-08 15:24:09,866 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getLipd(lipds)
   :module: pyleoclim.LipdUtils

   Prompt for a LiPD file
   
   Ask the user to select a LiPD file from a list
   Use this function in conjunction with enumerateLipds()
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   Returns:
       The index of the LiPD file
       
   
2018-03-08 15:24:09,884 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:23: input:
.. autofunction:: pyleoclim.LipdUtils.promptForVariable

2018-03-08 15:24:09,897 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForVariable
2018-03-08 15:24:09,912 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:09,928 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:09,954 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForVariable')
2018-03-08 15:24:09,968 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForVariable at 0x1186b7730>
2018-03-08 15:24:09,982 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForVariable', <function promptForVariable at 0x1186b7730>, {
2018-03-08 15:24:09,997 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForVariable()
   :module: pyleoclim.LipdUtils

   Prompt for a specific variable
   
   Ask the user to select the variable they are interested in.
   Use this function in conjunction with readHeaders() or getTSO()
   
   Returns:
       The index of the variable
       
   
2018-03-08 15:24:10,014 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:25: input:
.. autofunction:: pyleoclim.LipdUtils.xAxisTs

2018-03-08 15:24:10,031 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import xAxisTs
2018-03-08 15:24:10,049 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:10,063 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:10,077 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'xAxisTs')
2018-03-08 15:24:10,091 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function xAxisTs at 0x1186b77b8>
2018-03-08 15:24:10,105 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.xAxisTs', <function xAxisTs at 0x1186b77b8>, {}, ['Prompt the user
2018-03-08 15:24:10,119 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: xAxisTs(timeseries)
   :module: pyleoclim.LipdUtils

   Prompt the user to choose a x-axis representation for the timeseries.
   
   Args:
       timeseries: a timeseries object
       
   Returns:
       x_axis - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"
       
   
2018-03-08 15:24:10,149 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:27: input:
.. autofunction:: pyleoclim.LipdUtils.checkXaxis

2018-03-08 15:24:10,172 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import checkXaxis
2018-03-08 15:24:10,196 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:10,218 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:10,244 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'checkXaxis')
2018-03-08 15:24:10,271 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function checkXaxis at 0x1186b7840>
2018-03-08 15:24:10,289 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.checkXaxis', <function checkXaxis at 0x1186b7840>, {}, ['Check tha
2018-03-08 15:24:10,306 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: checkXaxis(timeseries, x_axis='')
   :module: pyleoclim.LipdUtils

   Check that a x-axis is present for the timeseries
   
   Args:
       timeseries : a timeseries
       x_axis (str) : the x-axis representation, either depth, age or year
       
   Returns:
       x - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"    
   
   
2018-03-08 15:24:10,323 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:29: input:
.. autofunction:: pyleoclim.LipdUtils.searchVar

2018-03-08 15:24:10,341 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import searchVar
2018-03-08 15:24:10,359 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:10,373 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:10,396 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'searchVar')
2018-03-08 15:24:10,413 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function searchVar at 0x1186b78c8>
2018-03-08 15:24:10,428 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.searchVar', <function searchVar at 0x1186b78c8>, {}, ['This functi
2018-03-08 15:24:10,449 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: searchVar(timeseries_list, key, exact=True, override=True)
   :module: pyleoclim.LipdUtils

   This function search for key words (exact match) for a variable
   
   Args:
       timeseries_list (list): A list of available series
       key (list): A list of keys to search
       exact (bool): if True, looks for an exact match.
       override (bool): if True, override the exact match if no match is found
   
   Returns:
       match (list)- A list of keys for the timeseries that match the selection
           criteria.
   
2018-03-08 15:24:10,471 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:34: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateTs

2018-03-08 15:24:10,484 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateTs
2018-03-08 15:24:10,498 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:10,512 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:10,525 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateTs')
2018-03-08 15:24:10,542 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateTs at 0x1186b7950>
2018-03-08 15:24:10,560 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateTs', <function enumerateTs at 0x1186b7950>, {}, ['Enumera
2018-03-08 15:24:10,574 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Enumerate the available time series objects
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   
2018-03-08 15:24:10,592 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:36: input:
.. autofunction:: pyleoclim.LipdUtils.getTs

2018-03-08 15:24:10,606 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getTs
2018-03-08 15:24:10,620 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:10,634 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:10,657 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getTs')
2018-03-08 15:24:10,673 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getTs at 0x1186b79d8>
2018-03-08 15:24:10,687 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getTs', <function getTs at 0x1186b79d8>, {}, ['Get a specific time
2018-03-08 15:24:10,702 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getTs(timeseries_list, option='')
   :module: pyleoclim.LipdUtils

   Get a specific timeseries object from a dictionary of timeseries
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
       option: An expression to filter the datasets. Uses lipd.filterTs()    
           
   Returns:
       A single timeseries object if not optional filter selected or a filtered
       list if optional arguments given
       
   
2018-03-08 15:24:10,719 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:10,751 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:41: input:
.. autofunction:: pyleoclim.LipdUtils.LipdToOntology

2018-03-08 15:24:10,769 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import LipdToOntology
2018-03-08 15:24:10,783 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:10,796 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:10,811 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'LipdToOntology')
2018-03-08 15:24:10,825 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function LipdToOntology at 0x1186b7a60>
2018-03-08 15:24:10,852 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.LipdToOntology', <function LipdToOntology at 0x1186b7a60>, {}, ['s
2018-03-08 15:24:10,873 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: LipdToOntology(archiveType)
   :module: pyleoclim.LipdUtils

   standardize archiveType
   
   Transform the archiveType from their LiPD name to their ontology counterpart
   
   Args:
       archiveType (STR): name of the archiveType from the LiPD file
       
   Returns:
       archiveType according to the ontology
       
   
2018-03-08 15:24:10,893 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:46: input:
.. autofunction:: pyleoclim.LipdUtils.isModel

2018-03-08 15:24:10,908 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isModel
2018-03-08 15:24:10,922 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:10,937 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:10,957 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isModel')
2018-03-08 15:24:10,972 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isModel at 0x1186b7ae8>
2018-03-08 15:24:10,988 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isModel', <function isModel at 0x1186b7ae8>, {}, ['Check for the p
2018-03-08 15:24:11,002 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isModel(csvName, lipd)
   :module: pyleoclim.LipdUtils

   Check for the presence of a model in the same object than the measurement table
   
   Args:
       csvName (str): The name of the csv file corresponding to the measurement table
       lipd (dict): A LiPD object
   
   Returns:
       model (list): List of models already available
   
       dataObject (str): The name of the paleoData or ChronData
           object in which the model(s) are stored
   
2018-03-08 15:24:11,111 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:48: input:
.. autofunction:: pyleoclim.LipdUtils.modelNumber

2018-03-08 15:24:11,125 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import modelNumber
2018-03-08 15:24:11,140 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:11,163 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:11,178 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'modelNumber')
2018-03-08 15:24:11,193 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function modelNumber at 0x1186b7b70>
2018-03-08 15:24:11,208 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.modelNumber', <function modelNumber at 0x1186b7b70>, {}, ['Assign 
2018-03-08 15:24:11,222 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: modelNumber(model)
   :module: pyleoclim.LipdUtils

   Assign a new or existing model number
   
   Args:
       model (list): List of possible model number. Obtained from isModel
       
   Returns:
       modelNum (int): The number of the model
   
2018-03-08 15:24:11,239 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:53: input:
.. autofunction:: pyleoclim.LipdUtils.isMeasurement

2018-03-08 15:24:11,257 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isMeasurement
2018-03-08 15:24:11,275 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:11,290 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:11,305 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isMeasurement')
2018-03-08 15:24:11,319 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isMeasurement at 0x1186b7bf8>
2018-03-08 15:24:11,333 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isMeasurement', <function isMeasurement at 0x1186b7bf8>, {}, ['Che
2018-03-08 15:24:11,347 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isMeasurement(csv_dict)
   :module: pyleoclim.LipdUtils

   Check whether measurement tables are available
   
   Args:
       csv_dict (dict): Dictionary of available csv
   
   Returns:
       paleoMeasurementTables - List of available paleoMeasurementTables
       chronMeasurementTables - List of available chronMeasurementTables
   
2018-03-08 15:24:11,372 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:55: input:
.. autofunction:: pyleoclim.LipdUtils.whichMeasurement

2018-03-08 15:24:11,386 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import whichMeasurement
2018-03-08 15:24:11,401 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:11,415 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:11,429 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'whichMeasurement')
2018-03-08 15:24:11,448 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function whichMeasurement at 0x1186b7c80>
2018-03-08 15:24:11,478 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.whichMeasurement', <function whichMeasurement at 0x1186b7c80>, {},
2018-03-08 15:24:11,499 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: whichMeasurement(measurementTableList, csv_dict)
   :module: pyleoclim.LipdUtils

   Select a measurement table from a list
   
   Use in conjunction with the function isMeasurement
   
   Args:
       measurementTableList (list): List of measurement tables contained in the
           LiPD file. Output from the isMeasurement function
       csv_list (list): Dictionary of available csv     
   
   Returns:
       csvName (str) - the name of the csv file
   
   
2018-03-08 15:24:11,516 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:11,532 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:57: input:
.. autofunction:: pyleoclim.LipdUtils.getMeasurement

2018-03-08 15:24:11,546 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getMeasurement
2018-03-08 15:24:11,562 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:11,578 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:11,592 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getMeasurement')
2018-03-08 15:24:11,606 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getMeasurement at 0x1186b7d08>
2018-03-08 15:24:11,620 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getMeasurement', <function getMeasurement at 0x1186b7d08>, {}, ['E
2018-03-08 15:24:11,636 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getMeasurement(csvName, lipd)
   :module: pyleoclim.LipdUtils

   Extract the dictionary corresponding to the measurement table
   
   Args:
       csvName (str): The name of the csv file
       lipd (dict): The LiPD object from which to extract the data
   
   Returns:
       ts_list - A dictionary containing data and metadata for each column in the
           csv file.
   
   
2018-03-08 15:24:11,658 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:62: input:
.. autofunction:: pyleoclim.LipdUtils.isEnsemble

2018-03-08 15:24:11,691 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isEnsemble
2018-03-08 15:24:11,709 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:11,727 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:11,744 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isEnsemble')
2018-03-08 15:24:11,768 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isEnsemble at 0x1186b7d90>
2018-03-08 15:24:11,788 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isEnsemble', <function isEnsemble at 0x1186b7d90>, {}, ['Check whe
2018-03-08 15:24:11,802 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isEnsemble(csv_dict)
   :module: pyleoclim.LipdUtils

   Check whether ensembles are available
   
   Args:
       csv_dict (dict): Dictionary of available csv
   
   Returns:
       paleoEnsembleTables - List of available paleoEnsembleTables 
   
       chronEnsembleTables - List of availale chronEnsemble Tables
       
   
2018-03-08 15:24:11,824 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: input:
.. autofunction:: pyleocli.LipdUtils.getEnsembleValues

2018-03-08 15:24:11,842 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleocli.LipdUtils import getEnsembleValues
2018-03-08 15:24:11,858 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleocli.LipdUtils
2018-03-08 15:24:11,888 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'getEnsembleValues' from module 'pyleocli.LipdUtils'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleocli'

2018-03-08 15:24:11,910 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: (WARNING/2) autodoc: failed to import function 'getEnsembleValues' from module 'pyleocli.LipdUtils'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleocli'
2018-03-08 15:24:11,944 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:66: input:
.. autofunction:: pyleoclim.LipdUtils.mapAgeEnsembleToPaleoData
2018-03-08 15:24:12,008 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import mapAgeEnsembleToPaleoData
2018-03-08 15:24:12,032 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:24:12,048 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:24:12,067 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAgeEnsembleToPaleoData')
2018-03-08 15:24:12,108 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAgeEnsembleToPaleoData at 0x1186b7ea0>
2018-03-08 15:24:12,136 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.mapAgeEnsembleToPaleoData', <function mapAgeEnsembleToPaleoData at
2018-03-08 15:24:12,158 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAgeEnsembleToPaleoData(ensembleValues, depthEnsemble, depthPaleo)
   :module: pyleoclim.LipdUtils

   Map the depth for the ensemble age values to the paleo depth
   
   Args:
       ensembleValues (array): A matrix of possible age models. Realizations
           should be stored in columns
       depthEnsemble (array): A vector of depth. The vector should have the same
           length as the number of rows in the ensembleValues
       depthPaleo (array): A vector corresponding to the depth at which there
           are paleodata information
           
   Returns:
       ensembleValuesToPaleo - A matrix of age ensemble on the PaleoData scale 
       
   
   
2018-03-08 15:24:12,246 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:9: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:12,280 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:12,315 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.getTs:7: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:12,332 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.whichMeasurement:8: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:12,358 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: (WARNING/2) autodoc: failed to import function ‘getEnsembleValues’ from module ‘pyleocli.LipdUtils’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 657, in import_object
    __import__(self.modname)
ImportError: No module named ‘pyleocli’
 [filtered system message]
2018-03-08 15:24:12,380 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "lipd utilities"...>>,)
2018-03-08 15:24:12,413 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 30%] [35mMain[39;49;00m                                                                                              
2018-03-08 15:24:12,434 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a66dd68>, 'Main')
2018-03-08 15:24:12,459 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Main', ['Main Functions\n==============\n\n\nUsing Pyleoclim with a LiPD file\n"""""""""""""""""""
2018-03-08 15:24:12,533 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:27: input:
.. autofunction:: pyleoclim.openLipd
2018-03-08 15:24:12,570 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import openLipd
2018-03-08 15:24:12,598 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:12,615 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:12,630 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'openLipd')
2018-03-08 15:24:12,647 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function openLipd at 0x1186b7f28>
2018-03-08 15:24:13,074 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.openLipd', <function openLipd at 0x1186b7f28>, {}, ['Read Lipd files into a 
2018-03-08 15:24:13,088 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: openLipd(usr_path='')
   :module: pyleoclim

   Read Lipd files into a dictionary
   
   Sets the dictionary as global variable so that it doesn't have to be provided
   as an argument for every function.
   
   Args:
       usr_path (str): The path to a directory or a single file. (Optional argument)
       
   Returns:
       lipd_dict - a dictionary containing the LiPD library
   
   
2018-03-08 15:24:13,108 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: input:
.. autofunction:: pyleoclim.fetchTs

2018-03-08 15:24:13,121 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import fetchTs
2018-03-08 15:24:13,136 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:13,155 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:13,170 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'fetchTs')
2018-03-08 15:24:13,185 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function fetchTs at 0x11c243730>
2018-03-08 15:24:13,200 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.fetchTs', <function fetchTs at 0x11c243730>, {}, ['Extract timeseries dictio
2018-03-08 15:24:13,216 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: fetchTs(lipds=None)
   :module: pyleoclim

   Extract timeseries dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Set the dictionary as a global variable so that it doesn't have to be
   provided as an argument for every function. 
   
   Args:
       lipds (dict): A dictionary of LiPD files obtained through the 
       readLipd function
   
   Returns:
       ts_list - A list of timeseries object
   
   
2018-03-08 15:24:13,339 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:32: input:
.. autofunction:: pyleoclim.mapAllArchive

2018-03-08 15:24:13,363 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapAllArchive
2018-03-08 15:24:13,377 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:13,391 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:13,410 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAllArchive')
2018-03-08 15:24:13,429 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAllArchive at 0x11c2437b8>
2018-03-08 15:24:13,464 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapAllArchive', <function mapAllArchive at 0x11c2437b8>, {}, ['Map all the a
2018-03-08 15:24:13,484 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAllArchive(lipds='', markersize=50, background='shadedrelief', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map all the available records loaded into the workspace by archiveType.
   
   Map of all the records into the workspace by archiveType.
       Uses the default color palette. Enter pyleoclim.plot_default for detail.
   
   Args:
       lipds (dict): A list of LiPD files. (Optional)
       markersize (int): The size of the markers. Default is 50
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
       saveFig (bool): Default is to not save the figure
       dir (str): The absolute path of the directory in which to save the
           figure. If not provided, creates a default folder called 'figures'
           in the LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
2018-03-08 15:24:13,506 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:13,532 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:13,565 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:13,582 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:13,599 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:34: input:
.. autofunction:: pyleoclim.mapLipd

2018-03-08 15:24:13,613 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapLipd
2018-03-08 15:24:13,627 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:13,649 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:13,672 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapLipd')
2018-03-08 15:24:13,687 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapLipd at 0x11c243840>
2018-03-08 15:24:13,703 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapLipd', <function mapLipd at 0x11c243840>, {}, ['Create a Map for a single
2018-03-08 15:24:13,718 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapLipd(timeseries='', countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='default', figsize=[4, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Create a Map for a single record
   
   Orthographic projection map of a single record.
   
   Args:
       timeseries: a LiPD timeseries object. Will prompt for one if not given
       countries (bool): Draws the country borders. Default is on (True).
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders.
           Default is off (False)
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief
       scale (float): useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): default is 50
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2018-03-08 15:24:13,734 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:13,758 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:13,776 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:13,789 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:13,803 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:13,818 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:13,833 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:13,872 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:36: input:
.. autofunction:: pyleoclim.mapNearRecords

2018-03-08 15:24:13,891 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapNearRecords
2018-03-08 15:24:13,907 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:13,921 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:13,935 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapNearRecords')
2018-03-08 15:24:13,949 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapNearRecords at 0x11c2438c8>
2018-03-08 15:24:13,974 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapNearRecords', <function mapNearRecords at 0x11c2438c8>, {}, ['Map the nea
2018-03-08 15:24:13,988 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapNearRecords(timeseries='', lipds='', n=5, radius=None, sameArchive=False, projection='ortho', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=200, markersize_adjust=True, marker_r='ko', marker_c='default', cmap='Reds', colorbar=True, location='right', label='Distance in km', figsize=[4, 4], ax=None, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map the nearest records from the record of interest
   
   Args:
       timeseries (dict): A timeseries object. If none given, will prompt for one
       lipds (list): A list of LiPD files. (Optional)
       n (int): the number of records to match
       radius (float): The distance (in km) to search for nearby records.
           Default is to search the entire globe
       sameArchive (bool): Returns only records with the same archiveType.
           Default is not to do so.
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): the size of the marker
       markersize_adjust (bool): If True, will proportionaly adjust the size of
           the marker according to distance.
       marker_r (list or str): The color and shape of the marker for the
           reference record.
       marker_c (list or str): The color and shape of the marker for the other
           records. Default is to use the color palette by archiveType. If set
           to None then the color of the marker will represent the distance from
           the reference records.
       cmap (str): The colormap to use to represent the distance from the 
           reference record if no marker is selected.
       colorbar (bool): Create a colorbar. Default is True
       location (str): Location of the colorbar
       label (str): Label for the colorbar.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
       
   Returns:
       ax - The figure       
   
   
2018-03-08 15:24:14,004 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:14,018 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,034 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,048 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:14,076 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,091 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,106 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:14,126 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,143 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,161 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:14,179 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,195 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:40: input:
.. autofunction:: pyleoclim.plotTs

2018-03-08 15:24:14,211 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotTs
2018-03-08 15:24:14,224 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:14,238 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:14,252 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotTs')
2018-03-08 15:24:14,279 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotTs at 0x11c243c80>
2018-03-08 15:24:14,295 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.plotTs', <function plotTs at 0x11c243c80>, {}, ['Plot a single time series.'
2018-03-08 15:24:14,310 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotTs(timeseries='', x_axis='', markersize=50, marker='default', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Plot a single time series.
   
   Args:
       A timeseries: By default, will prompt the user for one.
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       markersize (int): default is 50.
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure.
   
   
2018-03-08 15:24:14,325 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:14,340 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,354 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:14,378 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,396 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:14,411 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,431 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: input:
.. autofunction:: pyleoclim.plotEns

2018-03-08 15:24:14,446 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotEns
2018-03-08 15:24:14,471 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:14,503 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:14,519 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotEns')
2018-03-08 15:24:14,537 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'plotEns' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'plotEns'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns

2018-03-08 15:24:14,551 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: (WARNING/2) autodoc: failed to import function 'plotEns' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'plotEns'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns
2018-03-08 15:24:14,566 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:44: input:
.. autofunction:: pyleoclim.histTs

2018-03-08 15:24:14,586 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import histTs
2018-03-08 15:24:14,599 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:14,613 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:14,628 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'histTs')
2018-03-08 15:24:14,645 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function histTs at 0x11c243d90>
2018-03-08 15:24:14,660 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.histTs', <function histTs at 0x11c243d90>, {}, ['Plot a univariate distribut
2018-03-08 15:24:14,681 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: histTs(timeseries='', bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'Rug'}, fit_kws={'label': 'Fit'}, color='default', vertical=False, norm_hist=True, figsize=[5, 5], saveFig=False, format='eps', dir='')
   :module: pyleoclim

   Plot a univariate distribution of the PaleoData values
   
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the
   seaborn kdeplot() and rugplot() functions. It can also fit
   scipy.stats distributions and plot the estimated PDF over the data.
   
   Args:
       timeseries: A timeseries. By default, will prompt the user for one.
       bins (int): Specification of hist bins following matplotlib(hist),
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning
           a tuple that can be passed to a pdf method of positional
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in. Default is to use the default paletter for each
           archive type.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or
           fitted density is plotted
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns
       fig - The figure
   
   
2018-03-08 15:24:14,700 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:14,715 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,729 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:14,746 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,762 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,788 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:14,806 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,820 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:14,835 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:14,852 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:52: input:
.. autofunction:: pyleoclim.summaryTs

2018-03-08 15:24:14,869 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import summaryTs
2018-03-08 15:24:14,895 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:14,918 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:14,934 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'summaryTs')
2018-03-08 15:24:14,948 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function summaryTs at 0x11c243e18>
2018-03-08 15:24:14,962 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.summaryTs', <function summaryTs at 0x11c243e18>, {}, ['Basic summary plot', 
2018-03-08 15:24:14,983 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: summaryTs(timeseries='', x_axis='', saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Basic summary plot
   
   Plots the following information: the time series, a histogram of
   the PaleoData_values, location map, spectral density using the wwz 
   method, and metadata about the record.
   
   Args:
       timeseries: a timeseries object. By default, will prompt for one
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2018-03-08 15:24:15,002 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:15,016 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:15,030 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:15,048 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:15,070 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:57: input:
.. autofunction:: pyleoclim.statsTs

2018-03-08 15:24:15,102 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import statsTs
2018-03-08 15:24:15,119 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:15,136 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:15,151 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'statsTs')
2018-03-08 15:24:15,164 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function statsTs at 0x11c243ea0>
2018-03-08 15:24:15,192 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.statsTs', <function statsTs at 0x11c243ea0>, {}, ['Calculate simple statisti
2018-03-08 15:24:15,212 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: statsTs(timeseries='')
   :module: pyleoclim

   Calculate simple statistics of a timeseries
   
   Args:
       timeseries: sytem will prompt for one if not given
   
   Returns:
       the mean, median, min, max, standard deviation and the
       inter-quartile range (IQR) of a timeseries.
   
   Examples:
       >>> mean, median, min_, max_, std, IQR = pyleo.statsTs(timeseries)
   
   
2018-03-08 15:24:15,232 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:59: input:
.. autofunction:: pyleoclim.corrSigTs

2018-03-08 15:24:15,253 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import corrSigTs
2018-03-08 15:24:15,281 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:15,303 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:15,317 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrSigTs')
2018-03-08 15:24:15,331 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrSigTs at 0x11c243f28>
2018-03-08 15:24:15,348 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.corrSigTs', <function corrSigTs at 0x11c243f28>, {}, ['Estimates the signifi
2018-03-08 15:24:15,364 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrSigTs(timeseries1='', timeseries2='', x_axis='', interp_step='', start='', end='', nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim

   Estimates the significance of correlations between non IID timeseries.
   
   Function written by. F. Zhu.
   
   Args:
       timeseries1, timeseries2: timeseries object. Default is blank.
       x-axis (str): The representation against which to express the
           paleo-data. Options are "age", "year", and "depth".
           Default is to let the system choose if only one available
           or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start time/age/depth. Default is the maximum of
           the minima of the two timeseries
       end (float): End time/age/depth. Default is the minimum of the
           maxima of the two timeseries
       nsim (int): the number of simulations. Default is 1000
       method (str): method use to estimate the correlation and significance.
           Available methods include:
               - 'ttest': T-test where the degrees of freedom are corrected for
               the effect of serial correlation 
   
               - 'isopersistant': AR(1) modeling of the two timeseries 
   
               - 'isospectral' (default): phase randomization of original
               inputs.
           The T-test is parametric test, hence cheap but usually wrong
           except in idyllic circumstances.
           The others are non-parametric, but their computational
           requirements scales with nsim.
       alpha (float): significance level for critical value estimation. Default is 0.05
   
   Returns:
       r (float) - correlation between the two timeseries 
   
       sig (bool) -  Returns True if significant, False otherwise 
   
       p (real) - the p-value
   
   
2018-03-08 15:24:15,382 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:15,404 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:15,419 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:15,434 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:15,448 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:15,462 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:15,480 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:24:15,504 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:24:15,518 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:15,532 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:15,549 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:65: input:
.. autofunction:: pyleoclim.binTs

2018-03-08 15:24:15,562 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import binTs
2018-03-08 15:24:15,578 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:15,596 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:15,616 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'binTs')
2018-03-08 15:24:15,629 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function binTs at 0x11c245048>
2018-03-08 15:24:15,647 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.binTs', <function binTs at 0x11c245048>, {}, ['Bin the paleoData values of t
2018-03-08 15:24:15,661 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: binTs(timeseries='', x_axis='', bin_size='', start='', end='')
   :module: pyleoclim

   Bin the paleoData values of the timeseries
   
   Args:
       timeseries. By default, will prompt the user for one.
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system  choose if only one available or prompt the user.
       bin_size (float): the size of the bins to be used. By default,
           will prompt for one
       start (float): Start time/age/depth. Default is the minimum
       end (float): End time/age/depth. Default is the maximum
   
   Returns:
       binned_values- the binned output,
   
       bins-  the bins (centered on the median, i.e. the 100-200 bin is 150),
   
       n-  number of data points in each bin,
   
       error- the standard error on the mean in each bin
   
   
   
2018-03-08 15:24:15,680 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:15,713 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:15,773 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:15,803 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:67: input:
.. autofunction:: pyleoclim.interpTs

2018-03-08 15:24:15,822 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import interpTs
2018-03-08 15:24:15,836 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:15,849 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:15,863 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interpTs')
2018-03-08 15:24:15,878 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interpTs at 0x11c2450d0>
2018-03-08 15:24:15,895 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.interpTs', <function interpTs at 0x11c2450d0>, {}, ['Simple linear interpola
2018-03-08 15:24:15,913 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interpTs(timeseries='', x_axis='', interp_step='', start='', end='')
   :module: pyleoclim

   Simple linear interpolation
   
   Simple linear interpolation of the data using the numpy.interp method
   
   Args:
       timeseries. Default is blank, will prompt for it
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start year/age/depth. Default is the minimum
       end (float): End year/age/depth. Default is the maximum
   
   Returns:
       interp_age - the interpolated age/year/depth according to the end/start
       and time step, 
   
       interp_values - the interpolated values
   
   
2018-03-08 15:24:15,936 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:15,970 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:16,003 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:69: input:
.. autofunction:: pyleoclim.standardizeTs

2018-03-08 15:24:16,027 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import standardizeTs
2018-03-08 15:24:16,052 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:16,074 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:16,093 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardizeTs')
2018-03-08 15:24:16,110 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardizeTs at 0x11c245158>
2018-03-08 15:24:16,124 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.standardizeTs', <function standardizeTs at 0x11c245158>, {}, ['Centers and n
2018-03-08 15:24:16,139 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardizeTs(timeseries='', scale=1, ddof=0, eps=0.001)
   :module: pyleoclim

   Centers and normalizes the paleoData values of a  given time series.
   
   Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       - z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed 
   
       - mu (real): the mean of the original time series, E[X] 
   
       - sig (real): the standard deviation of the original time series, std[X] 
   
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2018-03-08 15:24:16,161 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:71: input:
.. autofunction:: pyleoclim.segmentTs

2018-03-08 15:24:16,176 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import segmentTs
2018-03-08 15:24:16,191 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:16,214 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:16,228 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'segmentTs')
2018-03-08 15:24:16,243 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function segmentTs at 0x11c2451e0>
2018-03-08 15:24:16,258 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.segmentTs', <function segmentTs at 0x11c2451e0>, {}, ['Divides a time series
2018-03-08 15:24:16,273 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: segmentTs(timeseries='', factor=2)
   :module: pyleoclim

   Divides a time series into several segments using a gap detection algorithm
   
   Gap detection rule: If the time interval between some two data points is
   larger than some factor times the mean resolution of the timeseries, then
   a brak point is applied and the timseries is divided. 
   
   Args:
       timeseries: a LiPD timeseries object
       factor (float): factor to adjust the threshold. threshold = factor*dt_mean.
           Default is 2.
   
   Returns:
       seg_y (list) - a list of several segments with potentially different length
       seg_t (list) - A list of the time values for each y segment. 
       n_segs (int) - the number of segments
       
   
   
2018-03-08 15:24:16,311 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:16,345 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:75: input:
.. autofunction:: pyleoclim.wwzTs

2018-03-08 15:24:16,359 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import wwzTs
2018-03-08 15:24:16,375 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:16,390 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:16,409 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwzTs')
2018-03-08 15:24:16,424 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwzTs at 0x11c245268>
2018-03-08 15:24:16,448 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.wwzTs', <function wwzTs at 0x11c245268>, {}, ['Weigthed wavelet Z-transform 
2018-03-08 15:24:16,466 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwzTs(timeseries='', lim=None, wwz=False, psd=True, wwz_default=True, psd_default=True, wwaplot_default=True, psdplot_default=True, fig=True, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Weigthed wavelet Z-transform analysis
   
   Wavelet analysis for unevenly spaced data adapted from Foster et al. (1996)
   
   Args:
       timeseries (dict): A LiPD timeseries object (Optional, will prompt for one.)
       lim (list): Truncate the timeseries between min/max time (e.g., [0,10000])
       wwz (bool): If True, will perform wavelet analysis
       psd (bool): If True, will inform the power spectral density of the timeseries
       wwz_default: If True, will use the following default parameters:
           
           wwz_default = {'tau':None,
                          'freqs':None,
                          'c':1/(8*np.pi**2),
                          'Neff':3,
                          'Neff_coi':3,
                          'nMC':200,
                          'nproc':8,
                          'detrend':'no',
                          'params' : ["default",4,0,1],
                          'gaussianize': False,
                          'standardize':True,
                          'method':'Kirchner_f2py',
                          'bc_mode':'reflect',
                          'reflect_type':'odd',
                          'len_bd':0}
               
           Modify the values for specific keys to change the default behavior.
               
       psd_default: If True, will use the following default parameters:
           
           psd_default = {'tau':None,
                      'freqs': None,
                      'c':1e-3,
                      'nproc':8,
                      'nMC':200,
                      'detrend':'no',
                      'params' : ["default",4,0,1],
                      'gaussianize': False,
                      'standardize':True,
                      'Neff':3,
                      'anti_alias':False,
                      'avgs':1,
                      'method':'Kirchner_f2py',
                      }
           
           Modify the values for specific keys to change the default behavior.
           
       wwaplot_default: If True, will use the following default parameters:
           
           wwaplot_default={'AR1_q':AR1_q,
                                'coi':coi,
                                'levels':None,
                                'tick_range':None,
                                'yticks':None,
                                'yticks_label': None,
                                'ylim':None,
                                'xticks':None,
                                'xlabels':None,
                                'figsize':[20,8],
                                'clr_map':'OrRd',
                                'cbar_drawedges':False,
                                'cone_alpha':0.5,
                                'plot_signif':True,
                                'signif_style':'contour',
                                'plot_cone':True,
                                'title':None,
                                'ax':None,
                                'xlabel': label.upper()[0]+label[1:]+'('+s+')',
                                'ylabel': 'Period ('+ageunits+')',
                                'cbar_orientation':'vertical',
                                'cbar_pad':0.05,
                                'cbar_frac':0.15,
                                'cbar_labelsize':None}
           
           Modify the values for specific keys to change the default behavior.
       psdplot_default: If True, will use the following default parameters:
           
           psdplot_default={'lmstyle':'-',
                                'linewidth':None,
                                'color': sns.xkcd_rgb["denim blue"],
                                'ar1_lmstyle':'-',
                                'ar1_linewidth':1,
                                'period_ticks':None,
                                'period_tickslabel':None,
                                'psd_lim':None,
                                'period_lim':None,
                                'figsize':[20,8],
                                'label':'PSD',
                                'plot_ar1':True,
                                'psd_ar1_q95':psd_ar1_q95,
                                'title': None,
                                'psd_ar1_color':sns.xkcd_rgb["pale red"],
                                'ax':None,
                                'vertical':False,
                                'plot_gridlines':True,
                                'period_label':'Period ('+ageunits+')',
                                'psd_label':'Spectral Density',
                                'zorder' : None}    
           
           Modify the values for specific keys to change the default behavior.
           
       fig (bool): If True, plots the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       
   Returns:
       dict_out (dict): A dictionary of outputs. 
           
           For wwz: 
           
           - wwa (array): The weights wavelet amplitude 
       
           - AR1_q (array): AR1 simulations 
       
           - coi (array): cone of influence 
       
           - freqs (array): vector for frequencies 
       
           - tau (array): the evenly-spaced time points, namely the time 
           shift for wavelet analysis. 
       
           - Neffs (array): The matrix of effective number of points in the
           time-scale coordinates.
       
           - coeff (array): The wavelet transform coefficients
       
           For psd: 
           
           - psd (array): power spectral density 
       
           - freqs (array): vector of frequency 
       
           - psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes 
       
       fig: The figure
        
       References:
           Foster, G. (1996). Wavelets for period analysis of unevenly 
           sampled time series. The Astronomical Journal, 112(4), 1709-1729.
       
       Examples:
           To run both wwz and psd: 
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(wwz=True)
           
           Note: This will return a single figure with wwa and psd 
   
           
           To change a default behavior:
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(psd_default = {'nMC':1000}) 
          
   
2018-03-08 15:24:16,490 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:16,513 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:16,528 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:16,547 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:24:16,561 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:24:16,582 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:80: input:
.. autofunction:: pyleoclim.Bchron

2018-03-08 15:24:16,596 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import Bchron
2018-03-08 15:24:16,622 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:24:16,637 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:24:16,651 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'Bchron')
2018-03-08 15:24:16,664 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function Bchron at 0x11c2452f0>
2018-03-08 15:24:16,680 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Bchron', <function Bchron at 0x11c2452f0>, {}, ['Runs Bchron and plot if ask
2018-03-08 15:24:16,694 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: Bchron(lipd, modelNum=None, objectName=None, rejectAges=None, calCurves=None, reservoirAgeCorr=None, predictPositions='paleo', positionsThickness=None, outlierProbs=None, iterations=1000, burn=2000, thin=8, extractDate=-68, maxExtrap=500, thetaMhSd=0.5, muMhSd=0.1, psiMhSd=0.1, ageScaleVal=1000, positionScaleVal=100, saveLipd=True, plot=True, figsize=[4, 8], flipCoor=False, xlabel=None, ylabel=None, xlim=None, ylim=None, violinColor='#8B008B', medianLineColor='black', medianLineWidth=2.0, CIFillColor='Silver', samplePaths=True, samplePathNumber=10, alpha=0.5, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Runs Bchron and plot if asked 
   
   Fits a non-parametric chronology model to age/position data according to
   the Compound Poisson-Gamma model defined by Haslett and Parnell (2008). 
   This version used a slightly modified Markov chain Monte-Carlo fitting
   algorithm which aims to converge quicker and requires fewer iterations.
   It also a slightly modified procedure for identifying outliers.
   
   The Bchronology functions fits a compounf Poisson-Gamma distribution to the
   incrememnts between the dated levels. This involves a stochastic linear
   interpolation step where the age gaps are Gamma distributed, and the position
   gaps are Exponential. Radiocarbon and non-radiocarbon dates (including outliers)
   are updated within the fucntion also by MCMC.
   
   This function also allows to save the ensemble, distributions, and probability
   tables as well as the parameters with which the model was run into the LiPD file.
   
   Finally allows to make a plot.
   
   Args:
       lipd (dict): A dictionary containing the entry of a LiPD file. Can be
           obtained from lipd.readLipd() or pyleoclim.openLipd(). Please note
           that the Bchron function currently only allows for a single LiPD file
           (i.e., not the entire directory).
       modelNum (int): The model number in which to place the Bchron output. 
           If unknown, the function will try to make a guess and/or prompt
           based on the number of already available models.
       objectName (str): The name of the chron object in which to store the new
           model (e.g. "chron0")
       rejectAges (vector): A vector of 1/0 where 1 include the dates to be rejected. 
           Default it None.
       calCurves (list): (Optional) A vector of values containing either 'intcal13',
           'marine13', 'shcal13', or 'normal'. If none is provided, will
           prompt the user. Should be either of length =1 if using the same
           calibration for each age or the same length as the vector of ages.
       reservoirAgeCorr (array): (Optional) A list (matrix) of two floats that correspond to the
           DeltaR and DeltaR uncertainty. If already added to the ages and
           ages standard deviation, then enter [0,0] to bypass the prompt.
           Will only be applied if CalCurves is set to 'marine13'. Otherwise,
           leave to none.
       predictPositions (array): (Optional) a vector of positions 
           (e.g. depths) at which predicted age values are required. 
           Defaults to a sequence of length 100 from the top position to the
           bottom position.
       positionsThickness (array): (Optional) Thickness values for each of the positions.
           The thickness values should be the full thickness value of the
           slice. By default set to zero.
       outlierProbs (array): (Optional) A vector of prior outlier probabilities,
           one for each age. Defaults to 0.01
       iterations (int): (Optional) The number of iterations to start the procedure. 
           Default and minimum should be 10000.
       burn (int): (Optional) The number of starting iterations to discard.
           Default is 200
       thin (int): (Optional) The step size for every iteration to keep beyond
           the burnin. Default is 8.
       extractDate (float): (Optional) The top age of the core. Used for
           extrapolation purposes so that no extrapolated ages go beyond the
           top age of the core. Defaults to the current year.
       maxExtrap (int): (Optional) The maximum number of extrapolations to
           perform before giving up and setting the predicted ages to NA. 
           Useful for when large amounts of extrapolation are required, i.e.
           some of the predictPositions are a long way from the dated
           positions. Defaults to 500.
       thetaMhSd (float):  (Optional)  The Metropolis-Hastings standard
           deviation for the age parameters. Defaults to 0.5.
       muMhSd (float): (Optional)  The Metropolis-Hastings standard deviation
           for the compound Poisson-Gamma Scale. Defaults to 0.1
       psiMhSd (float): (Optional) The Metropolis-Hastings standard deviation 
           for the Compound Poisson-Gamma Scale.
       ageScaleVal (int): (Optional) A scale value for the ages. 
           Bchronology works best when the ages are scaled to be 
           approximately between 0 and 100.
           The default value is thus 1000 for ages given in years.
       positionScaleVal (int):  (Optional) A scale value for the positions. 
           Bchronology works best when the positions are scaled to be 
           approximately between 0 and 100. The default value is thus
           100 for positions given in cm.
       saveLipd (bool): If True, saves the ensemble, distribution, and probability
           tables along with the parameters used to run the model in the LiPD
           file.
       plot (bool): If True, makes a plot for the chronology
       figsize (list): The figure size. Default is [4,8]
       flipCoor (bool): If True, plots depth on the y-axis.
       xlabel (str): The label for the x-axis
       ylabel (str): The label for the y-axis
       xlim (list): Limits for the x-axis. Default corresponds to the min/max
           of the depth vector.
       ylim (list): Limits for the y-axis. Default set by matplotlib
       violinColor (str): The color for the violins. Default is purple
       medianLineColor (str): The color for the median line. Default is black.
       medianLineWidth (float): The width for the median line
       CIFillColor (str): Fill color in between the 95% confidence interval.
           Default is silver.
       samplePaths (bool): If True, draws sample paths from the distribution.
           Use the same color as the violins. 
       samplePathNumber (int): The number of sample paths to draw. Default is 10.
           Note: samplePaths need to be set to True. 
       alpha (float): The violins' transparency. Number between 0 and 1
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       depth - the predicted positions (either same as the user or the default) 
   
       chron -  a numpy array of possible chronologies in each column.
           The number of rows is the same as the length of depth
       ageDist - the distribution of ages around each dates.
       fig - the figure        
   
   Warnings:
       This function requires R and the Bchron package and all its
           dependencies to be installed on the same machine.
           
   Reference:
       - Haslett, J., and Parnell, A. C. (2008). A simple monotone 
           process with application to radiocarbon-dated depth 
           chronologies. Journal of the Royal Statistical Society, 
           Series C, 57, 399-418. DOI:10.1111/j.1467-9876.2008.00623.x
       - Parnell, A. C., Haslett, J., Allen, J. R. M., Buck, C. E., 
           and Huntley, B. (2008). A flexible approach to assessing 
           synchroneity of past events using Bayesian reconstructions
           of sedimentation history. Quaternary Science Reviews, 
           27(19-20), 1872-1885. DOI:10.1016/j.quascirev.2008.07.009        
   
2018-03-08 15:24:16,726 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:16,744 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:16,761 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:16,778 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:16,802 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:16,848 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:16,869 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:16,884 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:16,907 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:17,009 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,035 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,054 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,071 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,088 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,109 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,128 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,143 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:19: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,157 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,172 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,185 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:26: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,200 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,221 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:9: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,235 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:22: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,249 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,263 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:27: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,278 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:32: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,292 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:34: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,308 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:35: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,326 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:43: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,364 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:50: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,380 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:52: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,397 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,418 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,439 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,461 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,481 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:15: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,499 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,524 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: (WARNING/2) autodoc: failed to import function ‘plotEns’ from module ‘pyleoclim’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim’ has no attribute ‘plotEns’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns
 [filtered system message]
2018-03-08 15:24:17,557 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,573 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,588 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,602 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,621 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,640 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,661 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,680 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:31: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,702 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:33: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,735 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,757 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,780 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:14: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,796 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,812 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,836 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,852 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:13: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:17,868 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,884 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:16: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:17,902 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:18: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:18,042 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:20: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,065 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:25: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,095 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:26: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,118 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:30: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,134 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:18,148 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,165 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:10: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,180 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:18,200 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,217 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.segmentTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:18,235 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:77: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,257 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:106: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:18,272 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:108: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,292 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:126: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,315 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:129: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,332 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:81: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,349 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:87: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:18,366 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:88: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,380 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:93: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:18,402 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:94: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,416 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:98: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,429 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:101: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:18,444 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:103: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,457 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:112: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:18,473 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "main functions"...>>,)
2018-03-08 15:24:18,513 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 40%] [35mMap[39;49;00m                                                                                               
2018-03-08 15:24:18,537 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a66dd68>, 'Map')
2018-03-08 15:24:18,571 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Map', ['Mapping Functions\n=================\n\nThis module uses the Basemap package for mapping. 
2018-03-08 15:24:18,664 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:6: input:
.. autofunction:: pyleoclim.Map.mapAll

2018-03-08 15:24:18,691 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapAll
2018-03-08 15:24:18,722 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2018-03-08 15:24:18,741 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2018-03-08 15:24:18,777 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAll')
2018-03-08 15:24:18,823 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAll at 0x108732400>
2018-03-08 15:24:18,940 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapAll', <function mapAll at 0x108732400>, {}, ['Map the location of all
2018-03-08 15:24:18,961 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAll(lat, lon, criteria, projection='robin', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=False, counties=False, rivers=False, states=False, figsize=[10, 4], ax=None, background='none', scale=0.5, palette='', markersize=50)
   :module: pyleoclim.Map

   Map the location of all lat/lon according to some criteria 
   
   Map the location of all lat/lon according to some criteria. The choice of 
   plotting color/marker is passed through palette according to unique 
   criteria (e.g., record name, archive type, proxy observation type).
   
   Args:
       lat (list): a list of latitude.
       lon (list): a list of longitude.
       criteria (list): a list of criteria for plotting purposes. For instance,
           a map by the types of archive present in the dataset or proxy
           observations.
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       palette (dict): A dictionary of plotting color/marker by criteria. The
           keys should correspond to ***unique*** criteria with a list of 
           associated values. The list should be in the format 
           ['color', 'marker'].
       markersize (int): The size of the marker.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
       
   Returns:
       The figure       
   
2018-03-08 15:24:19,050 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:19,076 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:19,102 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:19,124 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:19,141 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:19,163 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:19,186 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:8: input:
.. autofunction:: pyleoclim.Map.mapOne
2018-03-08 15:24:19,211 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapOne
2018-03-08 15:24:19,231 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2018-03-08 15:24:19,250 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2018-03-08 15:24:19,263 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapOne')
2018-03-08 15:24:19,279 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapOne at 0x1186b7488>
2018-03-08 15:24:19,293 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapOne', <function mapOne at 0x1186b7488>, {}, ['Map one location on the
2018-03-08 15:24:19,324 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapOne(lat, lon, projection='ortho', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='ro', figsize=[4, 4], ax=None)
   :module: pyleoclim.Map

   Map one location on the globe
   
   Args:
       lat (float): a float number representing latitude
       lon (float): a float number representing longitude
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): The size of the marker.
       marker (str or list): color and type of marker. 
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
   
   
2018-03-08 15:24:19,344 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:19,361 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:19,386 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:19,403 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:19,426 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:19,443 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:19,474 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:19,490 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:13: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:19,512 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:19,536 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:28: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:19,552 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:29: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:19,566 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:38: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:19,580 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:7: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:19,602 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:19,630 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:19,654 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:21: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:19,677 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:22: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:19,693 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:27: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:19,718 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "mapping functions"...>>,)
2018-03-08 15:24:19,739 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 50%] [35mPlot[39;49;00m                                                                                              
2018-03-08 15:24:19,752 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a66dd68>, 'Plot')
2018-03-08 15:24:19,769 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Plot', ['Plotting Functions\n==================\n\n.. autofunction:: pyleoclim.Plot.plot\n\n.. aut
2018-03-08 15:24:19,783 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:4: input:
.. autofunction:: pyleoclim.Plot.plot

2018-03-08 15:24:19,797 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot
2018-03-08 15:24:19,812 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2018-03-08 15:24:19,835 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2018-03-08 15:24:19,851 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot')
2018-03-08 15:24:19,867 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot at 0x1186bf268>
2018-03-08 15:24:19,905 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot', <function plot at 0x1186bf268>, {}, ['Make a 2-D plot', '', 'Arg
2018-03-08 15:24:19,936 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot(x, y, markersize=50, marker='ro', x_label='', y_label='', title='', figsize=[10, 4], ax=None)
   :module: pyleoclim.Plot

   Make a 2-D plot
   
   Args:
       x (numpy array): a 1xn numpy array of values for the x-axis
       y (numpy array): a 1xn numpy array for the y-axis
       markersize (int): the size of the marker
       marker (string or list): color and shape of the marker
       x_axis_label (str): the label for the x-axis
       y_axis_label (str): the label for the y-axis
       title (str): the title for the plot
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
           
   Return:
       The figure       
   
   
2018-03-08 15:24:19,983 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: input:
.. autofunction:: pyleoclim.Pot.plotEns

2018-03-08 15:24:20,000 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Pot import plotEns
2018-03-08 15:24:20,014 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Pot
2018-03-08 15:24:20,035 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'plotEns' from module 'pyleoclim.Pot'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleoclim.Pot'

2018-03-08 15:24:20,049 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: (WARNING/2) autodoc: failed to import function 'plotEns' from module 'pyleoclim.Pot'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleoclim.Pot'
2018-03-08 15:24:20,064 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:8: input:
.. autofunction:: pyleoclim.Plot.plot_hist
2018-03-08 15:24:20,079 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot_hist
2018-03-08 15:24:20,096 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2018-03-08 15:24:20,110 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2018-03-08 15:24:20,127 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_hist')
2018-03-08 15:24:20,145 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_hist at 0x1186bf378>
2018-03-08 15:24:20,165 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot_hist', <function plot_hist at 0x1186bf378>, {}, ['Plot a univariat
2018-03-08 15:24:20,183 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_hist(y, bins=None, hist=True, label='', kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'rug'}, fit_kws={'label': 'fit'}, color='0.7', vertical=False, norm_hist=True, figsize=[5, 5], ax=None)
   :module: pyleoclim.Plot

   Plot a univariate distribution of the PaleoData values
           
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the 
   seaborn kdeplot() and rugplot() functions. It can also fit 
   scipy.stats distributions and plot the estimated PDF over the data.
       
   Args:
       y (array): nx1 numpy array. No missing values allowed 
       bins (int): Specification of hist bins following matplotlib(hist), 
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram 
       label (str): The label for the axis
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning 
           a tuple that can be passed to a pdf method of positional 
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for 
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or 
           fitted density is plotted
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
   
   Returns
      fig - The figure
   
2018-03-08 15:24:20,220 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:20,262 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:20,306 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:20,322 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:20,349 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:20,369 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:20,388 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:20,410 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: (WARNING/2) autodoc: failed to import function ‘plotEns’ from module ‘pyleoclim.Pot’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 657, in import_object
    __import__(self.modname)
ImportError: No module named ‘pyleoclim.Pot’
 [filtered system message]
2018-03-08 15:24:20,426 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:20,453 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:20,469 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:17: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:20,484 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:19: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:20,508 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:20,534 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:20,549 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:20,562 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "plotting functions"...>>,)
2018-03-08 15:24:20,581 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 60%] [35mRBchron[39;49;00m                                                                                           
2018-03-08 15:24:20,596 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a66dd68>, 'RBchron')
2018-03-08 15:24:20,613 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('RBchron', ['RBchron\n=======\n\nThis module helps in the preparation of a Bchron run.\n\nWhen usin
2018-03-08 15:24:20,632 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:10: input:
.. autofunction:: pyleoclim.RBchron.chooseCalCurves

2018-03-08 15:24:20,654 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import chooseCalCurves
2018-03-08 15:24:20,668 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:24:20,684 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:24:20,698 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'chooseCalCurves')
2018-03-08 15:24:20,724 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function chooseCalCurves at 0x1190ffae8>
2018-03-08 15:24:20,845 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.chooseCalCurves', <function chooseCalCurves at 0x1190ffae8>, {}, ['P
2018-03-08 15:24:20,859 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: chooseCalCurves()
   :module: pyleoclim.RBchron

   Prompt for a calibration curve if not given by the user.
   
   Prompt the user for the name of a calibration curve used to run the Bchron 
   software package. The user can enter either enter only one name that will
   be applied to each age or a list of names of different ages. To enter a list, 
   separate each name with a comma. No quotation marks needed. 
   
   Returns:
       A list of calibration curves to be applied  
   
   
2018-03-08 15:24:20,876 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: input:
.. autofunction:: pyleoclim.RBchron.verufyCalCurves

2018-03-08 15:24:20,892 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import verufyCalCurves
2018-03-08 15:24:20,907 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:24:20,921 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:24:20,940 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'verufyCalCurves')
2018-03-08 15:24:20,963 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'verufyCalCurves' from module 'pyleoclim.RBchron'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.RBchron' has no attribute 'verufyCalCurves'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves

2018-03-08 15:24:20,979 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: (WARNING/2) autodoc: failed to import function 'verufyCalCurves' from module 'pyleoclim.RBchron'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.RBchron' has no attribute 'verufyCalCurves'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves
2018-03-08 15:24:20,994 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:14: input:
.. autofunction:: pyleoclim.RBchron.reservoirAgeCorrection

2018-03-08 15:24:21,008 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import reservoirAgeCorrection
2018-03-08 15:24:21,021 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:24:21,035 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:24:21,055 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'reservoirAgeCorrection')
2018-03-08 15:24:21,068 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function reservoirAgeCorrection at 0x11c243598>
2018-03-08 15:24:21,082 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.reservoirAgeCorrection', <function reservoirAgeCorrection at 0x11c24
2018-03-08 15:24:21,095 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: reservoirAgeCorrection()
   :module: pyleoclim.RBchron

   Estimate reservoir age correction
   
   Assists in estimating the reservoir age correction for marine records.
   If unknown, will direct the user to copy and paste the table available
   on the 14Chrono Marine Reservoir database: http://intcal.qub.ac.uk/marine/
   
   Returns:
       ageCorr -  the DeltaR for the site. 
   
       ageCorrStd - The error on DeltaR estimated as the standard error on the 
       mean if using the 14Chrono Marine Reservoir database.
   
   
2018-03-08 15:24:21,114 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:16: input:
.. autofunction:: pyleoclim.RBchron.runBchron

2018-03-08 15:24:21,132 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import runBchron
2018-03-08 15:24:21,154 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:24:21,186 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:24:21,205 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'runBchron')
2018-03-08 15:24:21,219 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function runBchron at 0x11c243620>
2018-03-08 15:24:21,237 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.runBchron', <function runBchron at 0x11c243620>, {}, ['Age model for
2018-03-08 15:24:21,260 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: runBchron(ages, agesStd, positions, rejectAges=None, positionsThickness=None, calCurves=None, reservoirAgeCorr=None, outlierProbs=None, predictPositions=None, iterations=10000, burn=2000, thin=8, extractDate=-68, maxExtrap=500, thetaMhSd=0.5, muMhSd=0.1, psiMhSd=0.1, ageScaleVal=1000, positionScaleVal=100)
   :module: pyleoclim.RBchron

   Age model for Tie-Point chronologies
   
   Fits a non-parametric chronology model to age/position data according to
   the Compound Poisson-Gamma model defined by Haslett and Parnell (2008). 
   This version used a slightly modified Markov chain Monte-Carlo fitting
   algorithm which aims to converge quicker and requires fewer iterations.
   It also a slightly modified procedure for identifying outliers.
   
   The Bchronology functions fits a compounf Poisson-Gamma distribution to the
   incrememnts between the dated levels. This involves a stochastic linear
   interpolation step where the age gaps are Gamma distributed, and the position
   gaps are Exponential. Radiocarbon and non-radiocarbon dates (including outliers)
   are updated within the fucntion also by MCMC.
   
   Args:
       ages (array): A vector of ages (most likely 14C)
       ageSds (array): A vector of 1-sigma values for the ages given above
       positions (array): Position values (e.g. depths) for each age
       rejectAges (vector): A vector of 1/0 where 1 include the dates to be rejected. 
           Default it None.
       positionsThickness (array): (Optional) Thickness values for each of the positions.
           The thickness values should be the full thickness value of the
           slice. By default set to zero.
       calCurves (list): (Optional) A vector of values containing either 'intcal13',
           'marine13', 'shcal13', or 'normal'. If none is provided, will
           prompt the user. Should be either of length =1 if using the same
           calibration for each age or the same length as the vector of ages.
       reservoirAgeCorr (array): (Optional) A list (matrix) of two floats that correspond to the
           DeltaR and DeltaR uncertainty. If already added to the ages and
           ages standard deviation, then enter [0,0] to bypass the prompt.
           Will only be applied if CalCurves is set to 'marine13'. Otherwise,
           leave to none.
       outlierProbs (array): (Optional) A vector of prior outlier probabilities,
           one for each age. Defaults to 0.01
       predictPositions (array): (Optional) a vector of positions 
           (e.g. depths) at which predicted age values are required. 
           Defaults to a sequence of length 100 from the top position to the
           bottom position.
       iterations (int): (Optional) The number of iterations to start the procedure. 
           Default and minimum should be 10000.
       burn (int): (Optional) The number of starting iterations to discard.
           Default is 200
       thin (int): (Optional) The step size for every iteration to keep beyond
           the burnin. Default is 8.
       extractDate (float): (Optional) The top age of the core. Used for
           extrapolation purposes so that no extrapolated ages go beyond the
           top age of the core. Defaults to the current year.
       maxExtrap (int): (Optional) The maximum number of extrapolations to
           perform before giving up and setting the predicted ages to NA. 
           Useful for when large amounts of extrapolation are required, i.e.
           some of the predictPositions are a long way from the dated
           positions. Defaults to 500. 
       thetaMhSd (float):  (Optional)  The Metropolis-Hastings standard
           deviation for the age parameters. Defaults to 0.5.
       muMhSd (float): (Optional)  The Metropolis-Hastings standard deviation
           for the compound Poisson-Gamma Scale. Defaults to 0.1
       psiMhSd (float): (Optional) The Metropolis-Hastings standard deviation 
           for the Compound Poisson-Gamma Scale.
       ageScaleVal (int): (Optional) A scale value for the ages. 
           Bchronology works best when the ages are scaled to be 
           approximately between 0 and 100.
           The default value is thus 1000 for ages given in years.
       positionScaleVal (int):  (Optional) A scale value for the positions. 
           Bchronology works best when the positions are scaled to be 
           approximately between 0 and 100. The default value is thus
           100 for positions given in cm.
   
       Returns:
           depth - the predicted positions (either same as the user or the default) 
   
           chron -  a numpy array of possible chronologies in each column.
               The number of rows is the same as the length of depth
           ageDist - the distribution of ages around each dates.
           run - the full R object containing the outputs of the Bchron run
       
       Warnings:
           This function requires R and the Bchron package and all its
               dependencies to be installed on the same machine.
               
       Reference:
           - Haslett, J., and Parnell, A. C. (2008). A simple monotone 
               process with application to radiocarbon-dated depth 
               chronologies. Journal of the Royal Statistical Society, 
               Series C, 57, 399-418. DOI:10.1111/j.1467-9876.2008.00623.x
           - Parnell, A. C., Haslett, J., Allen, J. R. M., Buck, C. E., 
               and Huntley, B. (2008). A flexible approach to assessing 
               synchroneity of past events using Bayesian reconstructions
               of sedimentation history. Quaternary Science Reviews, 
               27(19-20), 1872-1885. DOI:10.1016/j.quascirev.2008.07.009     
   
   
2018-03-08 15:24:21,276 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:21,290 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:21,317 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:21,379 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:18: input:
.. autofunction:: pyleoclim.RBchron.plotBchron
2018-03-08 15:24:21,402 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import plotBchron
2018-03-08 15:24:21,420 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:24:21,435 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:24:21,453 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotBchron')
2018-03-08 15:24:21,470 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotBchron at 0x11c2436a8>
2018-03-08 15:24:21,486 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.plotBchron', <function plotBchron at 0x11c2436a8>, {}, ['Plot a Bchr
2018-03-08 15:24:21,499 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotBchron(depth, chron, positions, ageDist, flipCoor=False, xlabel='Depth', ylabel='Age', xlim=None, ylim=None, violinColor='#8B008B', medianLineColor='black', medianLineWidth=2.0, CIFillColor='Silver', samplePaths=True, samplePathNumber=10, alpha=0.5, figsize=[4, 8], ax=None)
   :module: pyleoclim.RBchron

   Plot a Bchron output
   
   This function creates a plot showing the calibrated calendar ages and
   associated 95% confidence interval as error bars, the 95% ensemble from
   the produced age model as well as randomly drawn members of the ensemble.
   
   Args:
       depth (array): the positions in the archive (often referred to as
           depth) where the age model was interpolated to. Should be a vector
       chron (array): The possible age models returned by BChron. The number
           of rows should be the same length as the depth vector, with each
           possible realization stored in the columns.
       positions (array): The depth on the archive at which chronological
           measurements have been made. Should be a vector 
       agesDist (array): The distribution of ages for each chronological tie
           points. The number of columns should correspond to the number of
           chronological tie points available.
       flipCoor (bool): If True, plots depth on the y-axis.     
       xlabel (str): The label for the x-axis
       ylabel (str): The label for the y-axis
       xlim (list): Limits for the x-axis. Default corresponds to the min/max
           of the depth vector.
       ylim (list): Limits for the y-axis. Default set by matplotlib
       violinColor (str): The color for the violins. Default is purple
       medianLineColor (str): The color for the median line. Default is black.
       medianLineWidth (float): The width for the median line
       CIFillColor (str): Fill color in between the 95% confidence interval.
           Default is silver.
       samplePaths (bool): If True, draws sample paths from the distribution.
           Use the same color as the violins. 
       samplePathNumber (int): The number of sample paths to draw. Default is 10.
           Note: samplePaths need to be set to True. 
       alpha (float): The violins' transparency. Number between 0 and 1
       figsize (list): The figure size. Default is [4,8]
       ax: Default is None. Useful to set for subplots. 
           
   Returns:
       - fig: the figure.      
         
   
2018-03-08 15:24:21,521 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:21,554 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:21,578 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:21,592 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:21,606 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:21,621 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:21,663 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: (WARNING/2) autodoc: failed to import function ‘verufyCalCurves’ from module ‘pyleoclim.RBchron’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim.RBchron’ has no attribute ‘verufyCalCurves’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves
 [filtered system message]
2018-03-08 15:24:21,684 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:20: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:21,699 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:21,731 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:73: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:21,755 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:18: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:21,783 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:22: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:21,797 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:23: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:21,810 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:28: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:21,824 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:29: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:21,843 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:33: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:21,873 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "rbchron"...>>,)
2018-03-08 15:24:21,896 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 70%] [35mSpectral[39;49;00m                                                                                          
2018-03-08 15:24:21,918 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a66dd68>, 'Spectral')
2018-03-08 15:24:21,947 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Spectral', ['Spectral Functions\n==================\n\nThis module allows analysis in the frequenc
2018-03-08 15:24:21,970 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:6: input:
.. autofunction:: pyleoclim.Spectral.ar1_fit

2018-03-08 15:24:22,009 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_fit
2018-03-08 15:24:22,042 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:24:22,079 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:24:22,100 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_fit')
2018-03-08 15:24:22,143 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_fit at 0x1186bf488>
2018-03-08 15:24:22,805 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_fit', <function ar1_fit at 0x1186bf488>, {}, ['Returns the lag-
2018-03-08 15:24:22,820 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_fit(ys, ts=None, detrend='no', params=['default', 4, 0, 1])
   :module: pyleoclim.Spectral

   Returns the lag-1 autocorrelation from ar1 fit OR persistence from tauest.
   
   Args:
       ys (array): the time series
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
                      'savitzy-golay' - ys is filtered using the Savitzky-Golay
                              filters and the resulting filtered series is subtracted from y.
           params (list): The paramters for the Savitzky-Golay filters. The first parameter
               corresponds to the window size (default it set to half of the data)
               while the second parameter correspond to the order of the filter
               (default is 4). The third parameter is the order of the derivative
               (the default is zero, which means only smoothing.)
   
   Returns:
       g (float): lag-1 autocorrelation coefficient (for evenly-spaced time series)
       OR estimated persistence (for unevenly-spaced time series)
   
2018-03-08 15:24:22,840 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:22,868 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:22,885 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:22,903 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:8: input:
.. autofunction:: pyleoclim.Spectral.ar1_sim

2018-03-08 15:24:22,917 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_sim
2018-03-08 15:24:22,931 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:24:22,946 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:24:22,966 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_sim')
2018-03-08 15:24:22,984 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_sim at 0x118fc7950>
2018-03-08 15:24:23,004 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_sim', <function ar1_sim at 0x118fc7950>, {}, ['Produce p realiz
2018-03-08 15:24:23,022 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_sim(ys, n, p, ts=None, detrend='no', params=['default', 4, 0, 1])
   :module: pyleoclim.Spectral

   Produce p realizations of an AR1 process of length n with lag-1 autocorrelation g calculated from `ys` and `ts`
   
   Args:
       ys (array): a time series
       n, p (int): dimensions as n rows by p columns
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
                      'savitzy-golay' - ys is filtered using the Savitzky-Golay
                              filters and the resulting filtered series is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data)
           while the second parameter correspond to the order of the filter
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
   
   Returns:
       red (matrix): n rows by p columns matrix of an AR1 process
   
   
2018-03-08 15:24:23,038 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:23,055 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:23,072 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:23,089 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:10: input:
.. autofunction:: pyleoclim.Spectral.wwz

2018-03-08 15:24:23,102 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz
2018-03-08 15:24:23,116 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:24:23,129 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:24:23,142 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz')
2018-03-08 15:24:23,160 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz at 0x118fc79d8>
2018-03-08 15:24:23,189 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz', <function wwz at 0x118fc79d8>, {}, ['Return the weighted wave
2018-03-08 15:24:23,210 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz(ys, ts, tau=None, freqs=None, c=0.012665147955292222, Neff=3, Neff_coi=3, nMC=200, nproc=8, detrend='no', params=['default', 4, 0, 1], gaussianize=False, standardize=True, method='Kirchner_f2py', len_bd=0, bc_mode='reflect', reflect_type='odd')
   :module: pyleoclim.Spectral

   Return the weighted wavelet amplitude (WWA) with phase, AR1_q, and cone of influence, as well as WT coeeficients
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       tau (array): the evenly-spaced time points
       freqs (array): vector of frequency
       c (float): the decay constant, the default value 1/(8*np.pi**2) is good for most of the cases
       Neff (int): effective number of points
       nMC (int): the number of Monte-Carlo simulations
       nproc (int): the number of processes for multiprocessing
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
                      'savitzy-golay' - ys is filtered using the Savitzky-Golay
                              filters and the resulting filtered series is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data)
           while the second parameter correspond to the order of the filter
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
       len_bd (int): the number of the ghost grids want to creat on each boundary
       bc_mode (str): see np.lib.pad()
       reflect_type (str): see np.lib.pad()
   
   Returns:
       wwa (array): the weighted wavelet amplitude.
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neffs (array): the matrix of effective number of points in the time-scale coordinates
       coeff (array): the wavelet transform coefficents
   
   
2018-03-08 15:24:23,235 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:23,259 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:23,286 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:23,316 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:23,332 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:12: input:
.. autofunction:: pyleoclim.Spectral.wwz_psd

2018-03-08 15:24:23,346 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz_psd
2018-03-08 15:24:23,374 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:24:23,405 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:24:23,423 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz_psd')
2018-03-08 15:24:23,441 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz_psd at 0x118fc7a60>
2018-03-08 15:24:23,463 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz_psd', <function wwz_psd at 0x118fc7a60>, {}, ['Return the psd o
2018-03-08 15:24:23,482 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz_psd(ys, ts, freqs=None, tau=None, c=0.001, nproc=8, nMC=200, detrend='no', params=['default', 4, 0, 1], gaussianize=False, standardize=True, Neff=3, anti_alias=False, avgs=1, method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the psd of a timeseries directly using wwz method.
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       c (float): the decay constant, the default value 1e-3 is good for most of the cases
       nproc (int): the number of processes for multiprocessing
       nMC (int): the number of Monte-Carlo simulations
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
                      'savitzy-golay' - ys is filtered using the Savitzky-Golay
                              filters and the resulting filtered series is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data)
           while the second parameter correspond to the order of the filter
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
       gaussionize (bool): If True, gaussianizes the timeseries
       standardize (bool): If True, standardizes the timeseries
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       psd (array): power spectral density
       freqs (array): vector of frequency
       psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes
       psd_ar1 (array): the psds of AR1 processes
   
   
2018-03-08 15:24:23,500 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:23,514 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:23,528 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:23,544 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:23,559 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:23,578 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:14: input:
.. autofunction:: pyleoclim.Spectral.xwc

2018-03-08 15:24:23,593 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import xwc
2018-03-08 15:24:23,609 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:24:23,639 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:24:23,653 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'xwc')
2018-03-08 15:24:23,675 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function xwc at 0x118fc7bf8>
2018-03-08 15:24:23,692 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.xwc', <function xwc at 0x118fc7bf8>, {}, ['Return the crosse wavele
2018-03-08 15:24:23,709 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: xwc(ys1, ts1, ys2, ts2, tau=None, freqs=None, c=0.012665147955292222, Neff=3, nproc=8, detrend='no', nMC=200, params=['default', 4, 0, 1], gaussianize=False, standardize=True, method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the crosse wavelet coherence of two time series.
   
   Args:
       ys1, ys2 (array): the two time series
       ts1, ts2 (array): the time axis of the two time series
       tau (array): the evenly-spaced time points
       freqs (array): vector of frequency
       c (float): the decay constant, the default value 1/(8*np.pi**2) is good for most of the cases
       Neff (int): effective number of points
       nproc (int): the number of processes for multiprocessing
       nMC (int): the number of Monte-Carlo simulations
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
                      'savitzy-golay' - ys is filtered using the Savitzky-Golay
                              filters and the resulting filtered series is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data)
           while the second parameter correspond to the order of the filter
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
       gaussionize (bool): If True, gaussianizes the timeseries
       standardize (bool): If True, standardizes the timeseries
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       xw_coherence (array): the cross wavelet coherence
       xw_phase (array): the cross wavelet phase
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
   
   
2018-03-08 15:24:23,737 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:23,755 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:23,774 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:23,800 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:24:23,818 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:23,841 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:16: input:
.. autofunction:: pyleoclim.Spectral.plot_wwa

2018-03-08 15:24:23,854 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwa
2018-03-08 15:24:23,871 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:24:23,888 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:24:23,902 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwa')
2018-03-08 15:24:23,916 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwa at 0x118fc7d08>
2018-03-08 15:24:23,934 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwa', <function plot_wwa at 0x118fc7d08>, {}, ['Plot the wavel
2018-03-08 15:24:23,952 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwa(wwa, freqs, tau, AR1_q=None, coi=None, levels=None, tick_range=None, yticks=None, yticks_label=None, ylim=None, xticks=None, xlabels=None, figsize=[20, 8], clr_map='OrRd', cbar_drawedges=False, cone_alpha=0.5, plot_signif=False, signif_style='contour', title=None, plot_cone=False, ax=None, xlabel='Year', ylabel='Period', cbar_orientation='vertical', cbar_pad=0.05, cbar_frac=0.15, cbar_labelsize=None)
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       levels (array): levels of values to plot
       tick_range (array): levels of ticks to show on the colorbar
       yticks (list): ticks on y-axis
       ylim (list): limitations for y-axis
       xticks (list): ticks on x-axis
       figsize (list): the size for the figure
       clr_map (str): the name of the colormap
       cbar_drawedges (bool): whether to draw edges on the colorbar or not
       cone_alpha (float): the alpha value for the area covered by cone of influence
       plot_signif (bool): plot 95% significant area or not
       signif_style (str): plot 95% significant area with `contour` or `shade`
       plot_cone (bool): plot cone of influence or not
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
       cbar_pad (float): the pad for the colorbar
       cbar_frac (float): the frac for the colorbar
       cbar_labelsize (float): the font size of the colorbar label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2018-03-08 15:24:23,975 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:18: input:
.. autofunction:: pyleoclim.Spectral.plot_coherence

2018-03-08 15:24:23,991 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_coherence
2018-03-08 15:24:24,005 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:24:24,022 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:24:24,039 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_coherence')
2018-03-08 15:24:24,055 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_coherence at 0x118fc7d90>
2018-03-08 15:24:24,069 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_coherence', <function plot_coherence at 0x118fc7d90>, {}, ['Pl
2018-03-08 15:24:24,090 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_coherence(xw_coherence, xw_phase, freqs, tau, AR1_q=None, coi=None, levels=None, tick_range=None, basey=2, yticks=None, ylim=None, xticks=None, xlabels=None, figsize=[20, 8], clr_map='OrRd', exg=5, scale=30, width=0.004, cbar_drawedges=False, cone_alpha=0.5, plot_signif=False, signif_style='contour', title=None, plot_cone=False, ax=None, xlabel='Year', ylabel='Period', cbar_orientation='vertical', cbar_pad=0.05, cbar_frac=0.15, cbar_labelsize=None)
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       xw_coherence (array): the wavelet cohernce
       xw_phase (array): the wavelet cohernce phase
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       levels (array): levels of values to plot
       tick_range (array): levels of ticks to show on the colorbar
       yticks (list): ticks on y-axis
       ylim (list): limitations for y-axis
       xticks (list): ticks on x-axis
       figsize (list): the size for the figure
       clr_map (str): the name of the colormap
       cbar_drawedges (bool): whether to draw edges on the colorbar or not
       cone_alpha (float): the alpha value for the area covered by cone of influence
       plot_signif (bool): plot 95% significant area or not
       signif_style (str): plot 95% significant area with `contour` or `shade`
       plot_cone (bool): plot cone of influence or not
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
       cbar_pad (float): the pad for the colorbar
       c)bar_frac (float): the frac for the colorbar
       cbar_labelsize (float): the font size of the colorbar label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2018-03-08 15:24:24,122 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:20: input:
.. autofunction:: pyleoclim.Spectral.plot_wwadist

2018-03-08 15:24:24,141 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwadist
2018-03-08 15:24:24,159 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:24:24,182 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:24:24,203 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwadist')
2018-03-08 15:24:24,223 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwadist at 0x118fc7e18>
2018-03-08 15:24:24,262 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwadist', <function plot_wwadist at 0x118fc7e18>, {}, ['Plot t
2018-03-08 15:24:24,295 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwadist(wwa, ylim=None)
   :module: pyleoclim.Spectral

   Plot the distribution of wwa with the 95% quantile line.
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       ylim (list): limitations for y-axis
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2018-03-08 15:24:24,327 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:22: input:
.. autofunction:: pyleoclim.Spectral.plot_psd

2018-03-08 15:24:24,349 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_psd
2018-03-08 15:24:24,372 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:24:24,412 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:24:24,433 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_psd')
2018-03-08 15:24:24,452 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_psd at 0x118fc7ea0>
2018-03-08 15:24:24,472 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_psd', <function plot_psd at 0x118fc7ea0>, {}, ['Plot the wavel
2018-03-08 15:24:24,505 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_psd(psd, freqs, lmstyle='-', linewidth=None, color='#3b5b92', ar1_lmstyle='-', ar1_linewidth=None, period_ticks=None, period_tickslabel=None, psd_lim=None, period_lim=None, figsize=[20, 8], label='PSD', plot_ar1=False, psd_ar1_q95=None, title=None, legend=True, psd_ar1_color='#d9544d', ax=None, vertical=False, plot_gridlines=True, period_label='Period (years)', psd_label='Spectral Density', zorder=None)
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       psd (array): power spectral density
       freqs (array): vector of frequency
       period_ticks (list): ticks for period
       psd_lim (list): limits for spectral density axis
       label (str): the label for the PSD
       plot_ar1 (bool): plot the ar1 curve or not
       psd_ar1_q95 (array): the 95% quantile of the AR1 PSD
       psd_ar1_color (str): the color for the 95% quantile of the AR1 PSD
       title (str): the title for the figure
       period_lim (list): limits for period axis
       figsize (list): the size for the figure
       ax (axis): Return as axis instead of figure (useful to integrate plot into a subplot)
       vertical (bool): plot in vertical layout or not
       legend (bool): plot legend or not
       lmstyle (str): the line style
       linewidth (float): the line width
       period_label (str): the label for period
       psd_label (str): the label for psd
       zorder (int): the order of the layer
   
   Returns:
       ax (figure): the 2-D plot of wavelet analysis
   
   
2018-03-08 15:24:24,547 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:24: input:
.. autofunction:: pyleoclim.Spectral.plot_summary
2018-03-08 15:24:24,571 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_summary
2018-03-08 15:24:24,590 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:24:24,605 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:24:24,620 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_summary')
2018-03-08 15:24:24,633 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_summary at 0x118fc7f28>
2018-03-08 15:24:24,647 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_summary', <function plot_summary at 0x118fc7f28>, {}, ['Plot t
2018-03-08 15:24:24,661 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_summary(ys, ts, freqs=None, tau=None, c1=0.012665147955292222, c2=0.001, nMC=200, nproc=8, detrend='no', gaussianize=False, standardize=True, levels=None, method='Kirchner_f2py', anti_alias=False, period_ticks=None, ts_color=None, title=None, ts_ylabel=None, wwa_xlabel=None, wwa_ylabel=None, psd_lmstyle='-', psd_lim=None, period_I=[0.125, 0.5], period_D=[0.005, 0.05])
   :module: pyleoclim.Spectral

   Plot the time series with the wavelet analysis and psd
   
   Args:
       ys (array): a time series
       ts (array): time axis of the time series
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       c (float): the decay constant
       Neff (int): the threshold of the number of effective degree of freedom
       nproc (int): fake argument, just for convenience
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       ts_color (str): the color for the time series curve
       title (str): the title for the time series plot
       ts_ylabel (str): label for y-axis in the time series plot
       wwa_xlabel (str): label for x-axis in the wwa plot
       wwa_ylabel (str): label for y-axis in the wwa plot
       psd_lmstyle (str): the line style in the psd plot
       psd_lim (list): the limits for psd
       period_I, period_D (list): the ranges for beta estimation
   
   Returns:
       fig (figure): the summary plot
   
   
2018-03-08 15:24:24,677 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:24,697 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:24,738 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_fit:7: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:24,752 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_fit:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:24,781 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_fit:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:24,805 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_sim:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:24,828 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_sim:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:24,843 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_sim:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:24,856 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:13: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:24,870 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:24,884 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:24,917 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:25: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:24,931 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:12: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:24,947 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:15: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:24,960 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:24,974 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:21: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:24,989 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:25,007 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.xwc:13: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:25,025 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.xwc:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:25,046 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.xwc:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:25,063 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.xwc:22: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:25,076 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.xwc:25: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:25,092 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.plot_summary:12: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:25,110 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.plot_summary:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:25,124 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "spectral functions"...>>,)
2018-03-08 15:24:25,144 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 80%] [35mSummaryPlots[39;49;00m                                                                                      
2018-03-08 15:24:25,158 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a66dd68>, 'SummaryPlots')
2018-03-08 15:24:25,174 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('SummaryPlots', ['Summary Plots\n==============\n\nThis module handles some basic return for the su
2018-03-08 15:24:25,191 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:8: input:
.. autofunction:: pyleoclim.SummaryPlots.getMetadata

2018-03-08 15:24:25,242 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import getMetadata
2018-03-08 15:24:25,258 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2018-03-08 15:24:25,272 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2018-03-08 15:24:25,285 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getMetadata')
2018-03-08 15:24:25,303 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getMetadata at 0x1186bf048>
2018-03-08 15:24:25,358 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.getMetadata', <function getMetadata at 0x1186bf048>, {}, ['Get 
2018-03-08 15:24:25,372 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getMetadata(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary metadata to be printed out automatically
   
   Args:
       timeseries: a specific timeseries object. 
       
   Returns:
       A dictionary containing the following metadata:
   
       archiveType 
   
       Authors (if more than 2, replace by et al. 
   
       PublicationYear 
   
       Publication DOI 
   
       Variable Name 
   
       Units 
   
       Climate Interpretation 
   
       Calibration Equation 
   
       Calibration References 
   
       Calibration Notes 
   
       
   
2018-03-08 15:24:25,394 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:10: input:
.. autofunction:: pyleoclim.SummaryPlots.TsData

2018-03-08 15:24:25,412 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import TsData
2018-03-08 15:24:25,426 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2018-03-08 15:24:25,441 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2018-03-08 15:24:25,456 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'TsData')
2018-03-08 15:24:25,469 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function TsData at 0x1186bf0d0>
2018-03-08 15:24:25,483 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.TsData', <function TsData at 0x1186bf0d0>, {}, ['Get the PaleoD
2018-03-08 15:24:25,500 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: TsData(timeseries, x_axis='')
   :module: pyleoclim.SummaryPlots

   Get the PaleoData with age/depth information
       
   Get the necessary information for the TS plots/necessary to allow for
   axes specification
   
   Args:
       timeseries: a single timeseries object. 
           By default, will prompt the user
       x-axis (str): The representation against which to plot the 
           paleo-data. Options are "age", "year", and "depth". 
           Default is to let the system choose if only one available 
           or prompt the user.
   Returns:
       x - the x-valus 
   
       y - the y-values 
   
       archiveType - the archiveType (for plot settings) 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       label - the results of the x-axis query. Either depth, year, or age
       
   
2018-03-08 15:24:25,520 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:12: input:
.. autofunction:: pyleoclim.SummaryPlots.agemodelData
2018-03-08 15:24:25,534 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import agemodelData
2018-03-08 15:24:25,548 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2018-03-08 15:24:25,561 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2018-03-08 15:24:25,575 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'agemodelData')
2018-03-08 15:24:25,588 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function agemodelData at 0x1186bf158>
2018-03-08 15:24:25,605 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.agemodelData', <function agemodelData at 0x1186bf158>, {}, ['Ge
2018-03-08 15:24:25,621 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: agemodelData(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary information for the agemodel plot
   
   Args:
       timeseries: a single timeseries object. By default, will
           prompt the user
   
   Returns:
       depth - the depth values 
   
       age - the age values 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       archiveType - the archiveType (for default plot settings)
   
   
2018-03-08 15:24:25,648 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "summary plots"...>>,)
2018-03-08 15:24:25,666 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 90%] [35mTimeseries[39;49;00m                                                                                        
2018-03-08 15:24:25,679 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a66dd68>, 'Timeseries')
2018-03-08 15:24:25,695 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Timeseries', ['Timeseries Functions\n====================\n\nThis module allows the manipulation o
2018-03-08 15:24:25,721 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:6: input:
.. autofunction:: pyleoclim.Timeseries.bin

2018-03-08 15:24:25,751 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import bin
2018-03-08 15:24:25,774 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:24:25,799 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:24:25,824 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'bin')
2018-03-08 15:24:25,843 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function bin at 0x118fb7f28>
2018-03-08 15:24:25,939 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.bin', <function bin at 0x118fb7f28>, {}, ['Bin the values', '', '
2018-03-08 15:24:25,956 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: bin(x, y, bin_size='', start='', end='')
   :module: pyleoclim.Timeseries

   Bin the values
   
   Args:
       x (array): the x-axis series.
       y (array): the y-axis series.
       bin_size (float): The size of the bins. Default is the average resolution
       start (float): Where/when to start binning. Default is the minimum
       end (float): When/where to stop binning. Defulat is the maximum
   
   Returns:
       binned_values - the binned output 
   
       bins - the bins (centered on the median, i.e., the 100-200 bin is 150) 
   
       n - number of data points in each bin 
   
       error -  the standard error on the mean in each bin
   
   
2018-03-08 15:24:25,987 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:8: input:
.. autofunction:: pyleoclim.Timeseries.interp

2018-03-08 15:24:26,010 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import interp
2018-03-08 15:24:26,031 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:24:26,051 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:24:26,065 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interp')
2018-03-08 15:24:26,078 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interp at 0x118fc4158>
2018-03-08 15:24:26,092 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.interp', <function interp at 0x118fc4158>, {}, ['Linear interpola
2018-03-08 15:24:26,106 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interp(x, y, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Linear interpolation onto a new x-axis
   
   Args:
       x (array): the x-axis
       y (array): the y-axis
       interp_step (float): the interpolation step. Default is mean resolution.
       start (float): where/when to start the interpolation. Default is min..
       end (float): where/when to stop the interpolation. Default is max.
   
   Returns:
       xi - the interpolated x-axis 
   
       interp_values - the interpolated values
       
   
2018-03-08 15:24:26,136 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:10: input:
.. autofunction:: pyleoclim.Timeseries.onCommonAxis

2018-03-08 15:24:26,150 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import onCommonAxis
2018-03-08 15:24:26,164 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:24:26,177 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:24:26,191 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'onCommonAxis')
2018-03-08 15:24:26,205 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function onCommonAxis at 0x118fc41e0>
2018-03-08 15:24:26,225 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.onCommonAxis', <function onCommonAxis at 0x118fc41e0>, {}, ['Plac
2018-03-08 15:24:26,247 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: onCommonAxis(x1, y1, x2, y2, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Places two timeseries on a common axis
   
   Args:
       x1 (array): x-axis values of the first timeseries
       y1 (array): y-axis values of the first timeseries
       x2 (array): x-axis values of the second timeseries
       y2 (array): y-axis values of the second timeseries
       interp_step (float): The interpolation step. Default is mean resolution
       of lowest resolution series
       start (float): where/when to start. Default is the maximum of the minima of
       the two timeseries
       end (float): Where/when to end. Default is the minimum of the maxima of
       the two timeseries
   
   Returns:
       xi -  the interpolated x-axis 
   
       interp_values1 -  the interpolated y-values for the first timeseries
       interp_values2 - the intespolated y-values for the second timeseries
       
   
2018-03-08 15:24:26,282 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:12: input:
.. autofunction:: pyleoclim.Timeseries.standardize

2018-03-08 15:24:26,319 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import standardize
2018-03-08 15:24:26,348 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:24:26,369 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:24:26,393 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardize')
2018-03-08 15:24:26,417 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardize at 0x118fc4268>
2018-03-08 15:24:26,448 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.standardize', <function standardize at 0x118fc4268>, {}, ['Center
2018-03-08 15:24:26,485 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardize(x, scale=1, axis=0, ddof=0, eps=0.001)
   :module: pyleoclim.Timeseries

   Centers and normalizes a given time series. Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed
       mu (real): the mean of the original time series, E[X]
       sig (real): the standard deviation of the original time series, std[X]
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2018-03-08 15:24:26,538 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:14: input:
.. autofunction:: pyleoclim.Timeseries.ts2segments

2018-03-08 15:24:26,557 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import ts2segments
2018-03-08 15:24:26,574 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:24:26,588 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:24:26,601 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ts2segments')
2018-03-08 15:24:26,623 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ts2segments at 0x118fc42f0>
2018-03-08 15:24:26,657 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.ts2segments', <function ts2segments at 0x118fc42f0>, {}, ['Chop a
2018-03-08 15:24:26,679 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ts2segments(ys, ts, factor=10)
   :module: pyleoclim.Timeseries

   Chop a time series into several segments based on gap detection.
   
   The rule of gap detection is very simple:
       we define the intervals between time points as dts, then if dts[i] is larger than factor * dts[i-1],
       we think that the change of dts (or the gradient) is too large, and we regard it as a breaking point
       and chop the time series into two segments here
   
   Args:
       ys (array): a time series, NaNs allowed
       ts (array): the time points
       factor (float): the factor that adjusts the threshold for gap detection
   
   Returns:
       seg_ys (list): a list of several segments with potentially different lengths
       seg_ts (list): a list of the time axis of the several segments
       n_segs (int): the number of segments
   
   @author: fzhu
   
2018-03-08 15:24:26,698 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:16: input:
.. autofunction:: pyleoclim.Timeseries.clean_ts

2018-03-08 15:24:26,715 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import clean_ts
2018-03-08 15:24:26,752 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:24:26,769 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:24:26,787 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'clean_ts')
2018-03-08 15:24:26,815 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function clean_ts at 0x118fc4378>
2018-03-08 15:24:26,869 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.clean_ts', <function clean_ts at 0x118fc4378>, {}, ['Delete the N
2018-03-08 15:24:26,903 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: clean_ts(ys, ts)
   :module: pyleoclim.Timeseries

   Delete the NaNs in the time series and sort it with time axis ascending
   
   Args:
       ys (array): a time series, NaNs allowed
       ts (array): the time axis of the time series, NaNs allowed
   
   Returns:
       ys (array): the time series without nans
       ts (array): the time axis of the time series without nans
   
   
2018-03-08 15:24:26,942 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: input:
.. autofunction:: pyleoclim.Timeseries.annualize

2018-03-08 15:24:26,970 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import annualize
2018-03-08 15:24:26,996 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:24:27,013 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:24:27,031 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'annualize')
2018-03-08 15:24:27,052 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'annualize' from module 'pyleoclim.Timeseries'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.Timeseries' has no attribute 'annualize'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize

2018-03-08 15:24:27,073 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: (WARNING/2) autodoc: failed to import function 'annualize' from module 'pyleoclim.Timeseries'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.Timeseries' has no attribute 'annualize'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize
2018-03-08 15:24:27,086 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:20: input:
.. autofunction:: pyleoclim.Timeseries.gaussianize

2018-03-08 15:24:27,102 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import gaussianize
2018-03-08 15:24:27,120 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:24:27,149 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:24:27,169 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'gaussianize')
2018-03-08 15:24:27,189 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function gaussianize at 0x118fc4400>
2018-03-08 15:24:27,211 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.gaussianize', <function gaussianize at 0x118fc4400>, {}, ['Transf
2018-03-08 15:24:27,244 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: gaussianize(X)
   :module: pyleoclim.Timeseries

   Transforms a (proxy) timeseries to Gaussian distribution.
   
   Originator: Michael Erb, Univ. of Southern California - April 2017
   
2018-03-08 15:24:27,270 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:22: input:
.. autofunction:: pyleoclim.Timeseries.gaussianize_single

2018-03-08 15:24:27,285 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import gaussianize_single
2018-03-08 15:24:27,305 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:24:27,326 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:24:27,346 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'gaussianize_single')
2018-03-08 15:24:27,368 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function gaussianize_single at 0x118fc4488>
2018-03-08 15:24:27,391 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.gaussianize_single', <function gaussianize_single at 0x118fc4488>
2018-03-08 15:24:27,415 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: gaussianize_single(X_single)
   :module: pyleoclim.Timeseries

   Transforms a single (proxy) timeseries to Gaussian distribution.
   
   Originator: Michael Erb, Univ. of Southern California - April 2017
   
2018-03-08 15:24:27,434 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:24: input:
.. autofunction:: pyleoclim.Timeseries.detrend
2018-03-08 15:24:27,452 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import detrend
2018-03-08 15:24:27,470 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:24:27,488 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:24:27,501 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'detrend')
2018-03-08 15:24:27,515 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function detrend at 0x118fc4510>
2018-03-08 15:24:27,528 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.detrend', <function detrend at 0x118fc4510>, {}, ['Detrend a time
2018-03-08 15:24:27,550 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: detrend(y, x=None, method='linear', params=['default', 4, 0, 1])
   :module: pyleoclim.Timeseries

   Detrend a timeseries according to three methods
   
   Detrending methods include, "linear" (default), "constant", and using a low-pass
       Savitzky-Golay filters.
       
   Args:
       y (array): The series to be detrended. 
       x (array): The time axis for the timeseries. Necessary for use with 
           the Savitzky-Golay filters method since the series should be evenly spaced.    
       method (str): The type of detrending. If linear (default), the result of
           a linear least-squares fit to y is subtracted from y. If constant, 
           only the mean of data is subtrated. If "savitzy-golay", y is filtered
           using the Savitzky-Golay filters and the resulting filtered series
           is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data) 
           while the second parameter correspond to the order of the filter 
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
           
   Returns:
       ys (array) - the detrended timeseries.        
   
2018-03-08 15:24:27,567 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:24:27,588 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:24:27,619 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: (WARNING/2) autodoc: failed to import function ‘annualize’ from module ‘pyleoclim.Timeseries’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim.Timeseries’ has no attribute ‘annualize’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize
 [filtered system message]
2018-03-08 15:24:27,632 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.detrend:9: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:24:27,665 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.detrend:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:24:27,691 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "timeseries functions"...>>,)
2018-03-08 15:24:27,718 [INFO] sphinx.util: [01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                                                             
2018-03-08 15:24:27,755 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x10a66dd68>, 'index')
2018-03-08 15:24:27,799 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('index', [".. Pyleoclim documentation master file, created by\n   sphinx-quickstart on Fri Feb 10 1
2018-03-08 15:24:27,824 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <comment...><section "welcome to pyleoclim's documentati ...>,)
2018-03-08 15:24:27,843 [INFO] sphinx.util: 
2018-03-08 15:24:27,874 [DEBUG] sphinx.application: [app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x10a66dd68>,)
2018-03-08 15:24:05,678 [WARNING] sphinx.util.docutils: Literal block expected; none found.
2018-03-08 15:24:27,920 [INFO] sphinx.builders: [01mlooking for now-outdated files... [39;49;00m
2018-03-08 15:24:27,938 [DEBUG] sphinx.application: [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x10a66dd68>,)
2018-03-08 15:24:27,959 [INFO] sphinx.builders: none found
2018-03-08 15:24:27,983 [INFO] sphinx.builders: [01mpickling environment... [39;49;00m
2018-03-08 15:24:28,002 [INFO] sphinx.builders: done
2018-03-08 15:24:28,016 [INFO] sphinx.builders: [01mchecking consistency... [39;49;00m
2018-03-08 15:24:28,030 [DEBUG] sphinx.application: [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x10a66dd68>,)
2018-03-08 15:24:28,047 [INFO] sphinx.builders: done
2018-03-08 15:24:28,068 [DEBUG] sphinx.builders: docnames to write: Introduction, LipdUtils, Main, Map, Plot, RBchron, Spectral, SummaryPlots, Timeseries, index
2018-03-08 15:24:28,085 [INFO] sphinx.builders: [01mpreparing documents... [39;49;00m
2018-03-08 15:24:28,115 [INFO] sphinx.builders: done
2018-03-08 15:24:28,129 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 10%] [32mIntroduction[39;49;00m                                                                                       
2018-03-08 15:24:28,150 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "pyleoclim"...>>, 'Introduction')
2018-03-08 15:24:28,304 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 20%] [32mLipdUtils[39;49;00m                                                                                          
2018-03-08 15:24:28,323 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "lipd utilities"...>>, 'LipdUtils')
2018-03-08 15:24:28,569 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 30%] [32mMain[39;49;00m                                                                                               
2018-03-08 15:24:28,594 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "main functions"...>>, 'Main')
2018-03-08 15:24:28,735 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 40%] [32mMap[39;49;00m                                                                                                
2018-03-08 15:24:28,764 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "mapping functions"...>>, 'Map')
2018-03-08 15:24:28,839 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 50%] [32mPlot[39;49;00m                                                                                               
2018-03-08 15:24:28,857 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "plotting functions"...>>, 'Plot')
2018-03-08 15:24:28,903 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 60%] [32mRBchron[39;49;00m                                                                                            
2018-03-08 15:24:28,928 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "rbchron"...>>, 'RBchron')
2018-03-08 15:24:28,984 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 70%] [32mSpectral[39;49;00m                                                                                           
2018-03-08 15:24:29,002 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "spectral functions"...>>, 'Spectral')
2018-03-08 15:24:29,081 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 80%] [32mSummaryPlots[39;49;00m                                                                                       
2018-03-08 15:24:29,101 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "summary plots"...>>, 'SummaryPlots')
2018-03-08 15:24:29,173 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 90%] [32mTimeseries[39;49;00m                                                                                         
2018-03-08 15:24:29,191 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "timeseries functions"...>>, 'Timeseries')
2018-03-08 15:24:29,272 [INFO] sphinx.util: [01mwriting output... [39;49;00m[100%] [32mindex[39;49;00m                                                                                              
2018-03-08 15:24:29,293 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <comment...><section "welcome to pyleoclim's documentati ...>, 'index')
2018-03-08 15:24:29,481 [INFO] sphinx.util: 
2018-03-08 15:24:29,507 [INFO] sphinx.builders.html: [01mgenerating indices...[39;49;00m
2018-03-08 15:24:29,540 [INFO] sphinx.builders.html:  genindex
2018-03-08 15:24:29,602 [INFO] sphinx.builders.html: 
2018-03-08 15:24:29,615 [DEBUG] sphinx.application: [app] emitting event: 'html-collect-pages'()
2018-03-08 15:24:29,632 [INFO] sphinx.builders.html: [01mwriting additional pages...[39;49;00m
2018-03-08 15:24:29,663 [INFO] sphinx.builders.html:  search
2018-03-08 15:24:29,701 [INFO] sphinx.builders.html: 
2018-03-08 15:24:29,715 [INFO] sphinx.builders.html: [01mcopying static files... [39;49;00m
2018-03-08 15:24:29,945 [INFO] sphinx.builders.html: done
2018-03-08 15:24:29,983 [INFO] sphinx.builders.html: [01mcopying extra files... [39;49;00m
2018-03-08 15:24:30,020 [INFO] sphinx.builders.html: done
2018-03-08 15:24:30,073 [INFO] sphinx.builders.html: [01mdumping search index in English (code: en) ... [39;49;00m
2018-03-08 15:24:30,168 [INFO] sphinx.builders.html: done
2018-03-08 15:24:30,194 [INFO] sphinx.builders.html: [01mdumping object inventory... [39;49;00m
2018-03-08 15:24:30,274 [INFO] sphinx.builders.html: done
2018-03-08 15:24:30,310 [INFO] sphinx.application: [01mbuild succeeded, 1 warning.[39;49;00m
2018-03-08 15:24:30,333 [DEBUG] sphinx.application: [app] emitting event: 'build-finished'(None,)
2018-03-08 15:25:54,003 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:54,005 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'createDir')
2018-03-08 15:25:54,018 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function createDir at 0x11ffd20d0>
2018-03-08 15:25:54,157 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.createDir', <function createDir at 0x11ffd20d0>, {}, ['Create a ne
2018-03-08 15:25:54,177 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: createDir(path, foldername)
   :module: pyleoclim.LipdUtils

   Create a new folder in a working directory
   
   Create a new folder in a working directory to save outputs from Pyleoclim.
   
   Args:
       path(str): the path to the new folder.
       foldername(str): the name of the folder to be created
       
   Returns:
       newdir - the full path to the new directory
       
   
2018-03-08 15:25:54,198 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:11: input:
.. autofunction:: pyleoclim.LipdUtils.saveFigure

2018-03-08 15:25:54,212 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import saveFigure
2018-03-08 15:25:54,225 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:54,239 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:54,253 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'saveFigure')
2018-03-08 15:25:54,278 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function saveFigure at 0x11ffd2158>
2018-03-08 15:25:54,294 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.saveFigure', <function saveFigure at 0x11ffd2158>, {}, ['Save a fi
2018-03-08 15:25:54,310 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: saveFigure(name, format='eps', dir='')
   :module: pyleoclim.LipdUtils

   Save a figure
   
   Save the figure in the directory. If not given, creates a folder in the 
   current working directory. 
   
   Args:
       name (str): name of the file
       format (str): One of the file extensions supported by the active 
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       dir (str): the name of the folder in the LiPD working directory.
           If not provided, creates a default folder called 'figures'.
           
   
2018-03-08 15:25:54,328 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:54,347 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:54,372 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:16: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateLipds

2018-03-08 15:25:54,404 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateLipds
2018-03-08 15:25:54,422 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:54,443 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:54,458 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateLipds')
2018-03-08 15:25:54,481 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateLipds at 0x11ffd21e0>
2018-03-08 15:25:54,495 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateLipds', <function enumerateLipds at 0x11ffd21e0>, {}, ['E
2018-03-08 15:25:54,515 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateLipds(lipds)
   :module: pyleoclim.LipdUtils

   Enumerate the LiPD files loaded in the workspace
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   
2018-03-08 15:25:54,537 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:18: input:
.. autofunction:: pyleoclim.LipdUtils.getLipd

2018-03-08 15:25:54,563 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getLipd
2018-03-08 15:25:54,582 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:54,596 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:54,610 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getLipd')
2018-03-08 15:25:54,623 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getLipd at 0x11ffd2268>
2018-03-08 15:25:54,638 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getLipd', <function getLipd at 0x11ffd2268>, {}, ['Prompt for a Li
2018-03-08 15:25:54,651 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getLipd(lipds)
   :module: pyleoclim.LipdUtils

   Prompt for a LiPD file
   
   Ask the user to select a LiPD file from a list
   Use this function in conjunction with enumerateLipds()
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   Returns:
       The index of the LiPD file
       
   
2018-03-08 15:25:54,672 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:23: input:
.. autofunction:: pyleoclim.LipdUtils.promptForVariable

2018-03-08 15:25:54,688 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForVariable
2018-03-08 15:25:54,702 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:54,715 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:54,730 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForVariable')
2018-03-08 15:25:54,743 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForVariable at 0x11ffd22f0>
2018-03-08 15:25:54,757 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForVariable', <function promptForVariable at 0x11ffd22f0>, {
2018-03-08 15:25:54,771 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForVariable()
   :module: pyleoclim.LipdUtils

   Prompt for a specific variable
   
   Ask the user to select the variable they are interested in.
   Use this function in conjunction with readHeaders() or getTSO()
   
   Returns:
       The index of the variable
       
   
2018-03-08 15:25:54,795 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:25: input:
.. autofunction:: pyleoclim.LipdUtils.xAxisTs

2018-03-08 15:25:54,809 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import xAxisTs
2018-03-08 15:25:54,822 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:54,835 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:54,849 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'xAxisTs')
2018-03-08 15:25:54,866 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function xAxisTs at 0x11ffd2378>
2018-03-08 15:25:54,894 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.xAxisTs', <function xAxisTs at 0x11ffd2378>, {}, ['Prompt the user
2018-03-08 15:25:54,911 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: xAxisTs(timeseries)
   :module: pyleoclim.LipdUtils

   Prompt the user to choose a x-axis representation for the timeseries.
   
   Args:
       timeseries: a timeseries object
       
   Returns:
       x_axis - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"
       
   
2018-03-08 15:25:54,929 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:27: input:
.. autofunction:: pyleoclim.LipdUtils.checkXaxis

2018-03-08 15:25:54,943 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import checkXaxis
2018-03-08 15:25:54,958 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:54,972 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:54,991 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'checkXaxis')
2018-03-08 15:25:55,005 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function checkXaxis at 0x11ffd2400>
2018-03-08 15:25:55,018 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.checkXaxis', <function checkXaxis at 0x11ffd2400>, {}, ['Check tha
2018-03-08 15:25:55,033 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: checkXaxis(timeseries, x_axis='')
   :module: pyleoclim.LipdUtils

   Check that a x-axis is present for the timeseries
   
   Args:
       timeseries : a timeseries
       x_axis (str) : the x-axis representation, either depth, age or year
       
   Returns:
       x - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"    
   
   
2018-03-08 15:25:55,145 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:29: input:
.. autofunction:: pyleoclim.LipdUtils.searchVar

2018-03-08 15:25:55,160 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import searchVar
2018-03-08 15:25:55,173 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:55,195 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:55,209 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'searchVar')
2018-03-08 15:25:55,222 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function searchVar at 0x11ffd2488>
2018-03-08 15:25:55,237 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.searchVar', <function searchVar at 0x11ffd2488>, {}, ['This functi
2018-03-08 15:25:55,253 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: searchVar(timeseries_list, key, exact=True, override=True)
   :module: pyleoclim.LipdUtils

   This function search for key words (exact match) for a variable
   
   Args:
       timeseries_list (list): A list of available series
       key (list): A list of keys to search
       exact (bool): if True, looks for an exact match.
       override (bool): if True, override the exact match if no match is found
   
   Returns:
       match (list)- A list of keys for the timeseries that match the selection
           criteria.
   
2018-03-08 15:25:55,274 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:34: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateTs

2018-03-08 15:25:55,301 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateTs
2018-03-08 15:25:55,318 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:55,334 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:55,350 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateTs')
2018-03-08 15:25:55,367 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateTs at 0x11ffd2510>
2018-03-08 15:25:55,397 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateTs', <function enumerateTs at 0x11ffd2510>, {}, ['Enumera
2018-03-08 15:25:55,418 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Enumerate the available time series objects
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   
2018-03-08 15:25:55,444 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:36: input:
.. autofunction:: pyleoclim.LipdUtils.getTs

2018-03-08 15:25:55,471 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getTs
2018-03-08 15:25:55,496 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:55,518 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:55,536 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getTs')
2018-03-08 15:25:55,555 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getTs at 0x11ffd2598>
2018-03-08 15:25:55,571 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getTs', <function getTs at 0x11ffd2598>, {}, ['Get a specific time
2018-03-08 15:25:55,587 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getTs(timeseries_list, option='')
   :module: pyleoclim.LipdUtils

   Get a specific timeseries object from a dictionary of timeseries
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
       option: An expression to filter the datasets. Uses lipd.filterTs()    
           
   Returns:
       A single timeseries object if not optional filter selected or a filtered
       list if optional arguments given
       
   
2018-03-08 15:25:55,609 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:25:55,625 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:41: input:
.. autofunction:: pyleoclim.LipdUtils.LipdToOntology

2018-03-08 15:25:55,639 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import LipdToOntology
2018-03-08 15:25:55,654 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:55,667 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:55,680 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'LipdToOntology')
2018-03-08 15:25:55,697 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function LipdToOntology at 0x11ffd2620>
2018-03-08 15:25:55,714 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.LipdToOntology', <function LipdToOntology at 0x11ffd2620>, {}, ['s
2018-03-08 15:25:55,728 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: LipdToOntology(archiveType)
   :module: pyleoclim.LipdUtils

   standardize archiveType
   
   Transform the archiveType from their LiPD name to their ontology counterpart
   
   Args:
       archiveType (STR): name of the archiveType from the LiPD file
       
   Returns:
       archiveType according to the ontology
       
   
2018-03-08 15:25:55,746 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:46: input:
.. autofunction:: pyleoclim.LipdUtils.isModel

2018-03-08 15:25:55,759 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isModel
2018-03-08 15:25:55,772 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:55,786 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:55,808 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isModel')
2018-03-08 15:25:55,821 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isModel at 0x11ffd26a8>
2018-03-08 15:25:55,835 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isModel', <function isModel at 0x11ffd26a8>, {}, ['Check for the p
2018-03-08 15:25:55,850 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isModel(csvName, lipd)
   :module: pyleoclim.LipdUtils

   Check for the presence of a model in the same object than the measurement table
   
   Args:
       csvName (str): The name of the csv file corresponding to the measurement table
       lipd (dict): A LiPD object
   
   Returns:
       model (list): List of models already available
   
       dataObject (str): The name of the paleoData or ChronData
           object in which the model(s) are stored
   
2018-03-08 15:25:55,870 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:48: input:
.. autofunction:: pyleoclim.LipdUtils.modelNumber

2018-03-08 15:25:55,887 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import modelNumber
2018-03-08 15:25:55,906 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:55,921 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:55,934 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'modelNumber')
2018-03-08 15:25:55,947 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function modelNumber at 0x11ffd2730>
2018-03-08 15:25:55,962 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.modelNumber', <function modelNumber at 0x11ffd2730>, {}, ['Assign 
2018-03-08 15:25:55,976 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: modelNumber(model)
   :module: pyleoclim.LipdUtils

   Assign a new or existing model number
   
   Args:
       model (list): List of possible model number. Obtained from isModel
       
   Returns:
       modelNum (int): The number of the model
   
2018-03-08 15:25:55,995 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:53: input:
.. autofunction:: pyleoclim.LipdUtils.isMeasurement

2018-03-08 15:25:56,012 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isMeasurement
2018-03-08 15:25:56,026 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:56,039 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:56,052 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isMeasurement')
2018-03-08 15:25:56,066 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isMeasurement at 0x11ffd27b8>
2018-03-08 15:25:56,080 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isMeasurement', <function isMeasurement at 0x11ffd27b8>, {}, ['Che
2018-03-08 15:25:56,108 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isMeasurement(csv_dict)
   :module: pyleoclim.LipdUtils

   Check whether measurement tables are available
   
   Args:
       csv_dict (dict): Dictionary of available csv
   
   Returns:
       paleoMeasurementTables - List of available paleoMeasurementTables
       chronMeasurementTables - List of available chronMeasurementTables
   
2018-03-08 15:25:56,136 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:55: input:
.. autofunction:: pyleoclim.LipdUtils.whichMeasurement

2018-03-08 15:25:56,150 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import whichMeasurement
2018-03-08 15:25:56,163 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:56,177 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:56,190 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'whichMeasurement')
2018-03-08 15:25:56,210 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function whichMeasurement at 0x11ffd2840>
2018-03-08 15:25:56,224 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.whichMeasurement', <function whichMeasurement at 0x11ffd2840>, {},
2018-03-08 15:25:56,237 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: whichMeasurement(measurementTableList, csv_dict)
   :module: pyleoclim.LipdUtils

   Select a measurement table from a list
   
   Use in conjunction with the function isMeasurement
   
   Args:
       measurementTableList (list): List of measurement tables contained in the
           LiPD file. Output from the isMeasurement function
       csv_list (list): Dictionary of available csv     
   
   Returns:
       csvName (str) - the name of the csv file
   
   
2018-03-08 15:25:56,253 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:25:56,270 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:57: input:
.. autofunction:: pyleoclim.LipdUtils.getMeasurement

2018-03-08 15:25:56,283 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getMeasurement
2018-03-08 15:25:56,297 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:56,316 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:56,330 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getMeasurement')
2018-03-08 15:25:56,343 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getMeasurement at 0x11ffd28c8>
2018-03-08 15:25:56,357 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getMeasurement', <function getMeasurement at 0x11ffd28c8>, {}, ['E
2018-03-08 15:25:56,371 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getMeasurement(csvName, lipd)
   :module: pyleoclim.LipdUtils

   Extract the dictionary corresponding to the measurement table
   
   Args:
       csvName (str): The name of the csv file
       lipd (dict): The LiPD object from which to extract the data
   
   Returns:
       ts_list - A dictionary containing data and metadata for each column in the
           csv file.
   
   
2018-03-08 15:25:56,389 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:62: input:
.. autofunction:: pyleoclim.LipdUtils.isEnsemble

2018-03-08 15:25:56,403 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isEnsemble
2018-03-08 15:25:56,428 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:56,443 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:56,457 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isEnsemble')
2018-03-08 15:25:56,472 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isEnsemble at 0x11ffd2950>
2018-03-08 15:25:56,486 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isEnsemble', <function isEnsemble at 0x11ffd2950>, {}, ['Check whe
2018-03-08 15:25:56,499 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isEnsemble(csv_dict)
   :module: pyleoclim.LipdUtils

   Check whether ensembles are available
   
   Args:
       csv_dict (dict): Dictionary of available csv
   
   Returns:
       paleoEnsembleTables - List of available paleoEnsembleTables 
   
       chronEnsembleTables - List of availale chronEnsemble Tables
       
   
2018-03-08 15:25:56,527 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: input:
.. autofunction:: pyleocli.LipdUtils.getEnsembleValues

2018-03-08 15:25:56,541 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleocli.LipdUtils import getEnsembleValues
2018-03-08 15:25:56,554 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleocli.LipdUtils
2018-03-08 15:25:56,568 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'getEnsembleValues' from module 'pyleocli.LipdUtils'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleocli'

2018-03-08 15:25:56,582 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: (WARNING/2) autodoc: failed to import function 'getEnsembleValues' from module 'pyleocli.LipdUtils'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleocli'
2018-03-08 15:25:56,596 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:66: input:
.. autofunction:: pyleoclim.LipdUtils.mapAgeEnsembleToPaleoData
2018-03-08 15:25:56,611 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import mapAgeEnsembleToPaleoData
2018-03-08 15:25:56,629 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:25:56,643 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:25:56,657 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAgeEnsembleToPaleoData')
2018-03-08 15:25:56,695 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAgeEnsembleToPaleoData at 0x11ffd2a60>
2018-03-08 15:25:56,725 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.mapAgeEnsembleToPaleoData', <function mapAgeEnsembleToPaleoData at
2018-03-08 15:25:56,746 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAgeEnsembleToPaleoData(ensembleValues, depthEnsemble, depthPaleo)
   :module: pyleoclim.LipdUtils

   Map the depth for the ensemble age values to the paleo depth
   
   Args:
       ensembleValues (array): A matrix of possible age models. Realizations
           should be stored in columns
       depthEnsemble (array): A vector of depth. The vector should have the same
           length as the number of rows in the ensembleValues
       depthPaleo (array): A vector corresponding to the depth at which there
           are paleodata information
           
   Returns:
       ensembleValuesToPaleo - A matrix of age ensemble on the PaleoData scale 
       
   
   
2018-03-08 15:25:56,802 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:9: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:25:56,819 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:25:56,836 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.getTs:7: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:25:56,850 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.whichMeasurement:8: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:25:56,863 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: (WARNING/2) autodoc: failed to import function ‘getEnsembleValues’ from module ‘pyleocli.LipdUtils’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 657, in import_object
    __import__(self.modname)
ImportError: No module named ‘pyleocli’
 [filtered system message]
2018-03-08 15:25:56,878 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "lipd utilities"...>>,)
2018-03-08 15:25:56,900 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 40%] [35mMain[39;49;00m                                                                                              
2018-03-08 15:25:56,914 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x111fe4898>, 'Main')
2018-03-08 15:25:56,937 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Main', ['Main Functions\n==============\n\n\nUsing Pyleoclim with a LiPD file\n"""""""""""""""""""
2018-03-08 15:25:56,954 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:27: input:
.. autofunction:: pyleoclim.openLipd
2018-03-08 15:25:56,967 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import openLipd
2018-03-08 15:25:56,982 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:56,996 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:57,009 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'openLipd')
2018-03-08 15:25:57,028 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function openLipd at 0x11ffd2ae8>
2018-03-08 15:25:57,447 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.openLipd', <function openLipd at 0x11ffd2ae8>, {}, ['Read Lipd files into a 
2018-03-08 15:25:57,460 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: openLipd(usr_path='')
   :module: pyleoclim

   Read Lipd files into a dictionary
   
   Sets the dictionary as global variable so that it doesn't have to be provided
   as an argument for every function.
   
   Args:
       usr_path (str): The path to a directory or a single file. (Optional argument)
       
   Returns:
       lipd_dict - a dictionary containing the LiPD library
   
   
2018-03-08 15:25:57,478 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: input:
.. autofunction:: pyleoclim.fetchTs

2018-03-08 15:25:57,498 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import fetchTs
2018-03-08 15:25:57,513 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:57,526 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:57,544 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'fetchTs')
2018-03-08 15:25:57,560 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function fetchTs at 0x1239f72f0>
2018-03-08 15:25:57,575 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.fetchTs', <function fetchTs at 0x1239f72f0>, {}, ['Extract timeseries dictio
2018-03-08 15:25:57,590 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: fetchTs(lipds=None)
   :module: pyleoclim

   Extract timeseries dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Set the dictionary as a global variable so that it doesn't have to be
   provided as an argument for every function. 
   
   Args:
       lipds (dict): A dictionary of LiPD files obtained through the 
       readLipd function
   
   Returns:
       ts_list - A list of timeseries object
   
   
2018-03-08 15:25:57,612 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:32: input:
.. autofunction:: pyleoclim.mapAllArchive

2018-03-08 15:25:57,628 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapAllArchive
2018-03-08 15:25:57,643 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:57,656 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:57,670 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAllArchive')
2018-03-08 15:25:57,683 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAllArchive at 0x1239f7378>
2018-03-08 15:25:57,702 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapAllArchive', <function mapAllArchive at 0x1239f7378>, {}, ['Map all the a
2018-03-08 15:25:57,716 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAllArchive(lipds='', markersize=50, background='shadedrelief', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map all the available records loaded into the workspace by archiveType.
   
   Map of all the records into the workspace by archiveType.
       Uses the default color palette. Enter pyleoclim.plot_default for detail.
   
   Args:
       lipds (dict): A list of LiPD files. (Optional)
       markersize (int): The size of the markers. Default is 50
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
       saveFig (bool): Default is to not save the figure
       dir (str): The absolute path of the directory in which to save the
           figure. If not provided, creates a default folder called 'figures'
           in the LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
2018-03-08 15:25:57,732 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:57,748 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:57,761 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:57,776 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:57,797 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:34: input:
.. autofunction:: pyleoclim.mapLipd

2018-03-08 15:25:57,812 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapLipd
2018-03-08 15:25:57,827 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:57,843 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:57,859 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapLipd')
2018-03-08 15:25:57,876 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapLipd at 0x1239f7400>
2018-03-08 15:25:57,890 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapLipd', <function mapLipd at 0x1239f7400>, {}, ['Create a Map for a single
2018-03-08 15:25:57,914 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapLipd(timeseries='', countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='default', figsize=[4, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Create a Map for a single record
   
   Orthographic projection map of a single record.
   
   Args:
       timeseries: a LiPD timeseries object. Will prompt for one if not given
       countries (bool): Draws the country borders. Default is on (True).
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders.
           Default is off (False)
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief
       scale (float): useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): default is 50
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2018-03-08 15:25:57,929 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:57,944 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:57,958 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:25:57,972 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:57,987 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,007 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:58,021 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,037 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:36: input:
.. autofunction:: pyleoclim.mapNearRecords

2018-03-08 15:25:58,051 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapNearRecords
2018-03-08 15:25:58,080 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:58,120 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:58,140 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapNearRecords')
2018-03-08 15:25:58,153 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapNearRecords at 0x1239f7488>
2018-03-08 15:25:58,167 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapNearRecords', <function mapNearRecords at 0x1239f7488>, {}, ['Map the nea
2018-03-08 15:25:58,180 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapNearRecords(timeseries='', lipds='', n=5, radius=None, sameArchive=False, projection='ortho', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=200, markersize_adjust=True, marker_r='ko', marker_c='default', cmap='Reds', colorbar=True, location='right', label='Distance in km', figsize=[4, 4], ax=None, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map the nearest records from the record of interest
   
   Args:
       timeseries (dict): A timeseries object. If none given, will prompt for one
       lipds (list): A list of LiPD files. (Optional)
       n (int): the number of records to match
       radius (float): The distance (in km) to search for nearby records.
           Default is to search the entire globe
       sameArchive (bool): Returns only records with the same archiveType.
           Default is not to do so.
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): the size of the marker
       markersize_adjust (bool): If True, will proportionaly adjust the size of
           the marker according to distance.
       marker_r (list or str): The color and shape of the marker for the
           reference record.
       marker_c (list or str): The color and shape of the marker for the other
           records. Default is to use the color palette by archiveType. If set
           to None then the color of the marker will represent the distance from
           the reference records.
       cmap (str): The colormap to use to represent the distance from the 
           reference record if no marker is selected.
       colorbar (bool): Create a colorbar. Default is True
       location (str): Location of the colorbar
       label (str): Label for the colorbar.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
       
   Returns:
       ax - The figure       
   
   
2018-03-08 15:25:58,206 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:58,226 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,246 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,266 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:58,297 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,344 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,365 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:58,383 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,491 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,516 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:58,531 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,550 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:40: input:
.. autofunction:: pyleoclim.plotTs

2018-03-08 15:25:58,564 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotTs
2018-03-08 15:25:58,578 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:58,592 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:58,607 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotTs')
2018-03-08 15:25:58,626 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotTs at 0x1239f7840>
2018-03-08 15:25:58,640 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.plotTs', <function plotTs at 0x1239f7840>, {}, ['Plot a single time series.'
2018-03-08 15:25:58,654 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotTs(timeseries='', x_axis='', markersize=50, marker='default', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Plot a single time series.
   
   Args:
       A timeseries: By default, will prompt the user for one.
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       markersize (int): default is 50.
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure.
   
   
2018-03-08 15:25:58,670 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:58,685 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,704 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:58,725 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,739 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:58,754 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:58,771 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: input:
.. autofunction:: pyleoclim.plotEns

2018-03-08 15:25:58,785 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotEns
2018-03-08 15:25:58,798 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:58,816 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:58,833 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotEns')
2018-03-08 15:25:58,848 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'plotEns' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'plotEns'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns

2018-03-08 15:25:58,861 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: (WARNING/2) autodoc: failed to import function 'plotEns' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'plotEns'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns
2018-03-08 15:25:58,877 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:44: input:
.. autofunction:: pyleoclim.histTs

2018-03-08 15:25:58,907 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import histTs
2018-03-08 15:25:58,962 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:58,983 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:59,017 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'histTs')
2018-03-08 15:25:59,046 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function histTs at 0x1239f7950>
2018-03-08 15:25:59,061 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.histTs', <function histTs at 0x1239f7950>, {}, ['Plot a univariate distribut
2018-03-08 15:25:59,079 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: histTs(timeseries='', bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'Rug'}, fit_kws={'label': 'Fit'}, color='default', vertical=False, norm_hist=True, figsize=[5, 5], saveFig=False, format='eps', dir='')
   :module: pyleoclim

   Plot a univariate distribution of the PaleoData values
   
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the
   seaborn kdeplot() and rugplot() functions. It can also fit
   scipy.stats distributions and plot the estimated PDF over the data.
   
   Args:
       timeseries: A timeseries. By default, will prompt the user for one.
       bins (int): Specification of hist bins following matplotlib(hist),
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning
           a tuple that can be passed to a pdf method of positional
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in. Default is to use the default paletter for each
           archive type.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or
           fitted density is plotted
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns
       fig - The figure
   
   
2018-03-08 15:25:59,096 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:59,110 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,129 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:59,144 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,158 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,172 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:59,186 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,199 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:59,213 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,236 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:52: input:
.. autofunction:: pyleoclim.summaryTs

2018-03-08 15:25:59,250 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import summaryTs
2018-03-08 15:25:59,263 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:59,278 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:59,291 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'summaryTs')
2018-03-08 15:25:59,312 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function summaryTs at 0x1239f79d8>
2018-03-08 15:25:59,343 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.summaryTs', <function summaryTs at 0x1239f79d8>, {}, ['Basic summary plot', 
2018-03-08 15:25:59,358 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: summaryTs(timeseries='', x_axis='', saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Basic summary plot
   
   Plots the following information: the time series, a histogram of
   the PaleoData_values, location map, spectral density using the wwz 
   method, and metadata about the record.
   
   Args:
       timeseries: a timeseries object. By default, will prompt for one
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2018-03-08 15:25:59,378 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:59,396 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,417 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:59,441 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,479 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:57: input:
.. autofunction:: pyleoclim.statsTs

2018-03-08 15:25:59,502 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import statsTs
2018-03-08 15:25:59,540 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:59,562 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:59,576 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'statsTs')
2018-03-08 15:25:59,589 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function statsTs at 0x1239f7a60>
2018-03-08 15:25:59,602 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.statsTs', <function statsTs at 0x1239f7a60>, {}, ['Calculate simple statisti
2018-03-08 15:25:59,616 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: statsTs(timeseries='')
   :module: pyleoclim

   Calculate simple statistics of a timeseries
   
   Args:
       timeseries: sytem will prompt for one if not given
   
   Returns:
       the mean, median, min, max, standard deviation and the
       inter-quartile range (IQR) of a timeseries.
   
   Examples:
       >>> mean, median, min_, max_, std, IQR = pyleo.statsTs(timeseries)
   
   
2018-03-08 15:25:59,640 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:59: input:
.. autofunction:: pyleoclim.corrSigTs

2018-03-08 15:25:59,653 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import corrSigTs
2018-03-08 15:25:59,666 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:59,679 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:59,692 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrSigTs')
2018-03-08 15:25:59,706 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrSigTs at 0x1239f7ae8>
2018-03-08 15:25:59,724 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.corrSigTs', <function corrSigTs at 0x1239f7ae8>, {}, ['Estimates the signifi
2018-03-08 15:25:59,740 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrSigTs(timeseries1='', timeseries2='', x_axis='', interp_step='', start='', end='', nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim

   Estimates the significance of correlations between non IID timeseries.
   
   Function written by. F. Zhu.
   
   Args:
       timeseries1, timeseries2: timeseries object. Default is blank.
       x-axis (str): The representation against which to express the
           paleo-data. Options are "age", "year", and "depth".
           Default is to let the system choose if only one available
           or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start time/age/depth. Default is the maximum of
           the minima of the two timeseries
       end (float): End time/age/depth. Default is the minimum of the
           maxima of the two timeseries
       nsim (int): the number of simulations. Default is 1000
       method (str): method use to estimate the correlation and significance.
           Available methods include:
               - 'ttest': T-test where the degrees of freedom are corrected for
               the effect of serial correlation 
   
               - 'isopersistant': AR(1) modeling of the two timeseries 
   
               - 'isospectral' (default): phase randomization of original
               inputs.
           The T-test is parametric test, hence cheap but usually wrong
           except in idyllic circumstances.
           The others are non-parametric, but their computational
           requirements scales with nsim.
       alpha (float): significance level for critical value estimation. Default is 0.05
   
   Returns:
       r (float) - correlation between the two timeseries 
   
       sig (bool) -  Returns True if significant, False otherwise 
   
       p (real) - the p-value
   
   
2018-03-08 15:25:59,755 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:59,769 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,783 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:59,796 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,811 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,826 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:25:59,848 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,863 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,878 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,892 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:25:59,907 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:65: input:
.. autofunction:: pyleoclim.binTs

2018-03-08 15:25:59,921 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import binTs
2018-03-08 15:25:59,943 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:25:59,957 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:25:59,971 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'binTs')
2018-03-08 15:25:59,984 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function binTs at 0x1239f7b70>
2018-03-08 15:25:59,998 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.binTs', <function binTs at 0x1239f7b70>, {}, ['Bin the paleoData values of t
2018-03-08 15:26:00,013 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: binTs(timeseries='', x_axis='', bin_size='', start='', end='')
   :module: pyleoclim

   Bin the paleoData values of the timeseries
   
   Args:
       timeseries. By default, will prompt the user for one.
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system  choose if only one available or prompt the user.
       bin_size (float): the size of the bins to be used. By default,
           will prompt for one
       start (float): Start time/age/depth. Default is the minimum
       end (float): End time/age/depth. Default is the maximum
   
   Returns:
       binned_values- the binned output,
   
       bins-  the bins (centered on the median, i.e. the 100-200 bin is 150),
   
       n-  number of data points in each bin,
   
       error- the standard error on the mean in each bin
   
   
   
2018-03-08 15:26:00,034 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:00,059 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,073 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,089 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:67: input:
.. autofunction:: pyleoclim.interpTs

2018-03-08 15:26:00,103 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import interpTs
2018-03-08 15:26:00,116 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:26:00,132 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:26:00,148 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interpTs')
2018-03-08 15:26:00,162 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interpTs at 0x1239f7bf8>
2018-03-08 15:26:00,175 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.interpTs', <function interpTs at 0x1239f7bf8>, {}, ['Simple linear interpola
2018-03-08 15:26:00,189 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interpTs(timeseries='', x_axis='', interp_step='', start='', end='')
   :module: pyleoclim

   Simple linear interpolation
   
   Simple linear interpolation of the data using the numpy.interp method
   
   Args:
       timeseries. Default is blank, will prompt for it
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start year/age/depth. Default is the minimum
       end (float): End year/age/depth. Default is the maximum
   
   Returns:
       interp_age - the interpolated age/year/depth according to the end/start
       and time step, 
   
       interp_values - the interpolated values
   
   
2018-03-08 15:26:00,207 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:00,223 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,252 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:69: input:
.. autofunction:: pyleoclim.standardizeTs

2018-03-08 15:26:00,266 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import standardizeTs
2018-03-08 15:26:00,279 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:26:00,292 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:26:00,306 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardizeTs')
2018-03-08 15:26:00,319 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardizeTs at 0x1239f7c80>
2018-03-08 15:26:00,342 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.standardizeTs', <function standardizeTs at 0x1239f7c80>, {}, ['Centers and n
2018-03-08 15:26:00,357 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardizeTs(timeseries='', scale=1, ddof=0, eps=0.001)
   :module: pyleoclim

   Centers and normalizes the paleoData values of a  given time series.
   
   Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       - z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed 
   
       - mu (real): the mean of the original time series, E[X] 
   
       - sig (real): the standard deviation of the original time series, std[X] 
   
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2018-03-08 15:26:00,376 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:71: input:
.. autofunction:: pyleoclim.segmentTs

2018-03-08 15:26:00,391 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import segmentTs
2018-03-08 15:26:00,404 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:26:00,417 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:26:00,434 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'segmentTs')
2018-03-08 15:26:00,454 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function segmentTs at 0x1239f7d08>
2018-03-08 15:26:00,467 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.segmentTs', <function segmentTs at 0x1239f7d08>, {}, ['Divides a time series
2018-03-08 15:26:00,481 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: segmentTs(timeseries='', factor=2)
   :module: pyleoclim

   Divides a time series into several segments using a gap detection algorithm
   
   Gap detection rule: If the time interval between some two data points is
   larger than some factor times the mean resolution of the timeseries, then
   a brak point is applied and the timseries is divided. 
   
   Args:
       timeseries: a LiPD timeseries object
       factor (float): factor to adjust the threshold. threshold = factor*dt_mean.
           Default is 2.
   
   Returns:
       seg_y (list) - a list of several segments with potentially different length
       seg_t (list) - A list of the time values for each y segment. 
       n_segs (int) - the number of segments
       
   
   
2018-03-08 15:26:00,496 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:00,512 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:75: input:
.. autofunction:: pyleoclim.wwzTs

2018-03-08 15:26:00,528 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import wwzTs
2018-03-08 15:26:00,548 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:26:00,563 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:26:00,577 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwzTs')
2018-03-08 15:26:00,590 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwzTs at 0x1239f7d90>
2018-03-08 15:26:00,604 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.wwzTs', <function wwzTs at 0x1239f7d90>, {}, ['Weigthed wavelet Z-transform 
2018-03-08 15:26:00,617 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwzTs(timeseries='', lim=None, wwz=False, psd=True, wwz_default=True, psd_default=True, wwaplot_default=True, psdplot_default=True, fig=True, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Weigthed wavelet Z-transform analysis
   
   Wavelet analysis for unevenly spaced data adapted from Foster et al. (1996)
   
   Args:
       timeseries (dict): A LiPD timeseries object (Optional, will prompt for one.)
       lim (list): Truncate the timeseries between min/max time (e.g., [0,10000])
       wwz (bool): If True, will perform wavelet analysis
       psd (bool): If True, will inform the power spectral density of the timeseries
       wwz_default: If True, will use the following default parameters:
           
           wwz_default = {'tau':None,
                          'freqs':None,
                          'c':1/(8*np.pi**2),
                          'Neff':3,
                          'Neff_coi':3,
                          'nMC':200,
                          'nproc':8,
                          'detrend':'no',
                          'params' : ["default",4,0,1],
                          'gaussianize': False,
                          'standardize':True,
                          'method':'Kirchner_f2py',
                          'bc_mode':'reflect',
                          'reflect_type':'odd',
                          'len_bd':0}
               
           Modify the values for specific keys to change the default behavior.
               
       psd_default: If True, will use the following default parameters:
           
           psd_default = {'tau':None,
                      'freqs': None,
                      'c':1e-3,
                      'nproc':8,
                      'nMC':200,
                      'detrend':'no',
                      'params' : ["default",4,0,1],
                      'gaussianize': False,
                      'standardize':True,
                      'Neff':3,
                      'anti_alias':False,
                      'avgs':1,
                      'method':'Kirchner_f2py',
                      }
           
           Modify the values for specific keys to change the default behavior.
           
       wwaplot_default: If True, will use the following default parameters:
           
           wwaplot_default={'AR1_q':AR1_q,
                                'coi':coi,
                                'levels':None,
                                'tick_range':None,
                                'yticks':None,
                                'yticks_label': None,
                                'ylim':None,
                                'xticks':None,
                                'xlabels':None,
                                'figsize':[20,8],
                                'clr_map':'OrRd',
                                'cbar_drawedges':False,
                                'cone_alpha':0.5,
                                'plot_signif':True,
                                'signif_style':'contour',
                                'plot_cone':True,
                                'title':None,
                                'ax':None,
                                'xlabel': label.upper()[0]+label[1:]+'('+s+')',
                                'ylabel': 'Period ('+ageunits+')',
                                'cbar_orientation':'vertical',
                                'cbar_pad':0.05,
                                'cbar_frac':0.15,
                                'cbar_labelsize':None}
           
           Modify the values for specific keys to change the default behavior.
       psdplot_default: If True, will use the following default parameters:
           
           psdplot_default={'lmstyle':'-',
                                'linewidth':None,
                                'color': sns.xkcd_rgb["denim blue"],
                                'ar1_lmstyle':'-',
                                'ar1_linewidth':1,
                                'period_ticks':None,
                                'period_tickslabel':None,
                                'psd_lim':None,
                                'period_lim':None,
                                'figsize':[20,8],
                                'label':'PSD',
                                'plot_ar1':True,
                                'psd_ar1_q95':psd_ar1_q95,
                                'title': None,
                                'psd_ar1_color':sns.xkcd_rgb["pale red"],
                                'ax':None,
                                'vertical':False,
                                'plot_gridlines':True,
                                'period_label':'Period ('+ageunits+')',
                                'psd_label':'Spectral Density',
                                'zorder' : None}    
           
           Modify the values for specific keys to change the default behavior.
           
       fig (bool): If True, plots the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       
   Returns:
       dict_out (dict): A dictionary of outputs. 
           
           For wwz: 
           
           - wwa (array): The weights wavelet amplitude 
       
           - AR1_q (array): AR1 simulations 
       
           - coi (array): cone of influence 
       
           - freqs (array): vector for frequencies 
       
           - tau (array): the evenly-spaced time points, namely the time 
           shift for wavelet analysis. 
       
           - Neffs (array): The matrix of effective number of points in the
           time-scale coordinates.
       
           - coeff (array): The wavelet transform coefficients
       
           For psd: 
           
           - psd (array): power spectral density 
       
           - freqs (array): vector of frequency 
       
           - psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes 
       
       fig: The figure
        
       References:
           Foster, G. (1996). Wavelets for period analysis of unevenly 
           sampled time series. The Astronomical Journal, 112(4), 1709-1729.
       
       Examples:
           To run both wwz and psd: 
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(wwz=True)
           
           Note: This will return a single figure with wwa and psd 
   
           
           To change a default behavior:
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(psd_default = {'nMC':1000}) 
          
   
2018-03-08 15:26:00,636 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,658 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:00,671 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,688 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,703 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,721 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:80: input:
.. autofunction:: pyleoclim.Bchron

2018-03-08 15:26:00,738 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import Bchron
2018-03-08 15:26:00,767 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:26:00,784 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:26:00,799 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'Bchron')
2018-03-08 15:26:00,815 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function Bchron at 0x1239f7e18>
2018-03-08 15:26:00,829 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Bchron', <function Bchron at 0x1239f7e18>, {}, ['Runs Bchron and plot if ask
2018-03-08 15:26:00,844 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: Bchron(lipd, modelNum=None, objectName=None, rejectAges=None, calCurves=None, reservoirAgeCorr=None, predictPositions='paleo', positionsThickness=None, outlierProbs=None, iterations=1000, burn=2000, thin=8, extractDate=-68, maxExtrap=500, thetaMhSd=0.5, muMhSd=0.1, psiMhSd=0.1, ageScaleVal=1000, positionScaleVal=100, saveLipd=True, plot=True, figsize=[4, 8], flipCoor=False, xlabel=None, ylabel=None, xlim=None, ylim=None, violinColor='#8B008B', medianLineColor='black', medianLineWidth=2.0, CIFillColor='Silver', samplePaths=True, samplePathNumber=10, alpha=0.5, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Runs Bchron and plot if asked 
   
   Fits a non-parametric chronology model to age/position data according to
   the Compound Poisson-Gamma model defined by Haslett and Parnell (2008). 
   This version used a slightly modified Markov chain Monte-Carlo fitting
   algorithm which aims to converge quicker and requires fewer iterations.
   It also a slightly modified procedure for identifying outliers.
   
   The Bchronology functions fits a compounf Poisson-Gamma distribution to the
   incrememnts between the dated levels. This involves a stochastic linear
   interpolation step where the age gaps are Gamma distributed, and the position
   gaps are Exponential. Radiocarbon and non-radiocarbon dates (including outliers)
   are updated within the fucntion also by MCMC.
   
   This function also allows to save the ensemble, distributions, and probability
   tables as well as the parameters with which the model was run into the LiPD file.
   
   Finally allows to make a plot.
   
   Args:
       lipd (dict): A dictionary containing the entry of a LiPD file. Can be
           obtained from lipd.readLipd() or pyleoclim.openLipd(). Please note
           that the Bchron function currently only allows for a single LiPD file
           (i.e., not the entire directory).
       modelNum (int): The model number in which to place the Bchron output. 
           If unknown, the function will try to make a guess and/or prompt
           based on the number of already available models.
       objectName (str): The name of the chron object in which to store the new
           model (e.g. "chron0")
       rejectAges (vector): A vector of 1/0 where 1 include the dates to be rejected. 
           Default it None.
       calCurves (list): (Optional) A vector of values containing either 'intcal13',
           'marine13', 'shcal13', or 'normal'. If none is provided, will
           prompt the user. Should be either of length =1 if using the same
           calibration for each age or the same length as the vector of ages.
       reservoirAgeCorr (array): (Optional) A list (matrix) of two floats that correspond to the
           DeltaR and DeltaR uncertainty. If already added to the ages and
           ages standard deviation, then enter [0,0] to bypass the prompt.
           Will only be applied if CalCurves is set to 'marine13'. Otherwise,
           leave to none.
       predictPositions (array): (Optional) a vector of positions 
           (e.g. depths) at which predicted age values are required. 
           Defaults to a sequence of length 100 from the top position to the
           bottom position.
       positionsThickness (array): (Optional) Thickness values for each of the positions.
           The thickness values should be the full thickness value of the
           slice. By default set to zero.
       outlierProbs (array): (Optional) A vector of prior outlier probabilities,
           one for each age. Defaults to 0.01
       iterations (int): (Optional) The number of iterations to start the procedure. 
           Default and minimum should be 10000.
       burn (int): (Optional) The number of starting iterations to discard.
           Default is 200
       thin (int): (Optional) The step size for every iteration to keep beyond
           the burnin. Default is 8.
       extractDate (float): (Optional) The top age of the core. Used for
           extrapolation purposes so that no extrapolated ages go beyond the
           top age of the core. Defaults to the current year.
       maxExtrap (int): (Optional) The maximum number of extrapolations to
           perform before giving up and setting the predicted ages to NA. 
           Useful for when large amounts of extrapolation are required, i.e.
           some of the predictPositions are a long way from the dated
           positions. Defaults to 500.
       thetaMhSd (float):  (Optional)  The Metropolis-Hastings standard
           deviation for the age parameters. Defaults to 0.5.
       muMhSd (float): (Optional)  The Metropolis-Hastings standard deviation
           for the compound Poisson-Gamma Scale. Defaults to 0.1
       psiMhSd (float): (Optional) The Metropolis-Hastings standard deviation 
           for the Compound Poisson-Gamma Scale.
       ageScaleVal (int): (Optional) A scale value for the ages. 
           Bchronology works best when the ages are scaled to be 
           approximately between 0 and 100.
           The default value is thus 1000 for ages given in years.
       positionScaleVal (int):  (Optional) A scale value for the positions. 
           Bchronology works best when the positions are scaled to be 
           approximately between 0 and 100. The default value is thus
           100 for positions given in cm.
       saveLipd (bool): If True, saves the ensemble, distribution, and probability
           tables along with the parameters used to run the model in the LiPD
           file.
       plot (bool): If True, makes a plot for the chronology
       figsize (list): The figure size. Default is [4,8]
       flipCoor (bool): If True, plots depth on the y-axis.
       xlabel (str): The label for the x-axis
       ylabel (str): The label for the y-axis
       xlim (list): Limits for the x-axis. Default corresponds to the min/max
           of the depth vector.
       ylim (list): Limits for the y-axis. Default set by matplotlib
       violinColor (str): The color for the violins. Default is purple
       medianLineColor (str): The color for the median line. Default is black.
       medianLineWidth (float): The width for the median line
       CIFillColor (str): Fill color in between the 95% confidence interval.
           Default is silver.
       samplePaths (bool): If True, draws sample paths from the distribution.
           Use the same color as the violins. 
       samplePathNumber (int): The number of sample paths to draw. Default is 10.
           Note: samplePaths need to be set to True. 
       alpha (float): The violins' transparency. Number between 0 and 1
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       depth - the predicted positions (either same as the user or the default) 
   
       chron -  a numpy array of possible chronologies in each column.
           The number of rows is the same as the length of depth
       ageDist - the distribution of ages around each dates.
       fig - the figure        
   
   Warnings:
       This function requires R and the Bchron package and all its
           dependencies to be installed on the same machine.
           
   Reference:
       - Haslett, J., and Parnell, A. C. (2008). A simple monotone 
           process with application to radiocarbon-dated depth 
           chronologies. Journal of the Royal Statistical Society, 
           Series C, 57, 399-418. DOI:10.1111/j.1467-9876.2008.00623.x
       - Parnell, A. C., Haslett, J., Allen, J. R. M., Buck, C. E., 
           and Huntley, B. (2008). A flexible approach to assessing 
           synchroneity of past events using Bayesian reconstructions
           of sedimentation history. Quaternary Science Reviews, 
           27(19-20), 1872-1885. DOI:10.1016/j.quascirev.2008.07.009        
   
2018-03-08 15:26:00,871 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,885 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:00,899 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,912 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:00,927 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,943 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,963 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:00,977 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:00,992 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:26:01,100 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,114 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,129 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,144 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,165 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,179 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,193 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,208 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:19: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,222 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,236 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,256 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:26: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,272 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,286 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:9: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,300 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:22: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,314 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,329 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:27: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,354 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:32: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,379 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:34: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,394 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:35: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,409 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:43: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,424 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:50: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,438 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:52: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,459 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,480 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,495 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,509 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,526 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:15: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,553 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,583 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: (WARNING/2) autodoc: failed to import function ‘plotEns’ from module ‘pyleoclim’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim’ has no attribute ‘plotEns’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns
 [filtered system message]
2018-03-08 15:26:01,597 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,610 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,623 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,637 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,651 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,670 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,684 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,698 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:31: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,711 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:33: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,724 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,738 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,752 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:14: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,772 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,785 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,799 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,812 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:13: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,826 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,839 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:16: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,854 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:18: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,873 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:20: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,886 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:25: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,899 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:26: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,914 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:30: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,927 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:01,942 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,964 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:10: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:01,987 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:02,003 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,016 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.segmentTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:02,030 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:77: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,047 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:106: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:02,065 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:108: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,082 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:126: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,098 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:129: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,112 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:81: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,128 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:87: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:02,142 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:88: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,157 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:93: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:02,175 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:94: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,188 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:98: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,201 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:101: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:02,215 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:103: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,229 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:112: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,244 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "main functions"...>>,)
2018-03-08 15:26:02,278 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 60%] [35mPlot[39;49;00m                                                                                              
2018-03-08 15:26:02,292 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x111fe4898>, 'Plot')
2018-03-08 15:26:02,307 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Plot', ['Plotting Functions\n==================\n\n.. autofunction:: pyleoclim.Plot.plot\n\n.. aut
2018-03-08 15:26:02,321 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:4: input:
.. autofunction:: pyleoclim.Plot.plot

2018-03-08 15:26:02,335 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot
2018-03-08 15:26:02,348 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2018-03-08 15:26:02,372 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2018-03-08 15:26:02,392 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot')
2018-03-08 15:26:02,406 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot at 0x11ffd2d90>
2018-03-08 15:26:02,445 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot', <function plot at 0x11ffd2d90>, {}, ['Make a 2-D plot', '', 'Arg
2018-03-08 15:26:02,459 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot(x, y, markersize=50, marker='ro', x_label='', y_label='', title='', figsize=[10, 4], ax=None)
   :module: pyleoclim.Plot

   Make a 2-D plot
   
   Args:
       x (numpy array): a 1xn numpy array of values for the x-axis
       y (numpy array): a 1xn numpy array for the y-axis
       markersize (int): the size of the marker
       marker (string or list): color and shape of the marker
       x_axis_label (str): the label for the x-axis
       y_axis_label (str): the label for the y-axis
       title (str): the title for the plot
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
           
   Return:
       The figure       
   
   
2018-03-08 15:26:02,484 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: input:
.. autofunction:: pyleoclim.Pot.plotEns

2018-03-08 15:26:02,497 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Pot import plotEns
2018-03-08 15:26:02,511 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Pot
2018-03-08 15:26:02,525 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'plotEns' from module 'pyleoclim.Pot'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleoclim.Pot'

2018-03-08 15:26:02,556 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: (WARNING/2) autodoc: failed to import function 'plotEns' from module 'pyleoclim.Pot'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleoclim.Pot'
2018-03-08 15:26:02,590 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:8: input:
.. autofunction:: pyleoclim.Plot.plot_hist
2018-03-08 15:26:02,606 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot_hist
2018-03-08 15:26:02,619 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2018-03-08 15:26:02,633 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2018-03-08 15:26:02,647 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_hist')
2018-03-08 15:26:02,661 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_hist at 0x11ffd2ea0>
2018-03-08 15:26:02,681 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot_hist', <function plot_hist at 0x11ffd2ea0>, {}, ['Plot a univariat
2018-03-08 15:26:02,694 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_hist(y, bins=None, hist=True, label='', kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'rug'}, fit_kws={'label': 'fit'}, color='0.7', vertical=False, norm_hist=True, figsize=[5, 5], ax=None)
   :module: pyleoclim.Plot

   Plot a univariate distribution of the PaleoData values
           
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the 
   seaborn kdeplot() and rugplot() functions. It can also fit 
   scipy.stats distributions and plot the estimated PDF over the data.
       
   Args:
       y (array): nx1 numpy array. No missing values allowed 
       bins (int): Specification of hist bins following matplotlib(hist), 
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram 
       label (str): The label for the axis
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning 
           a tuple that can be passed to a pdf method of positional 
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for 
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or 
           fitted density is plotted
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
   
   Returns
      fig - The figure
   
2018-03-08 15:26:02,710 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:02,723 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:02,737 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:02,751 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:02,769 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:26:02,787 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:02,802 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:02,823 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: (WARNING/2) autodoc: failed to import function ‘plotEns’ from module ‘pyleoclim.Pot’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 657, in import_object
    __import__(self.modname)
ImportError: No module named ‘pyleoclim.Pot’
 [filtered system message]
2018-03-08 15:26:02,836 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:02,850 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,863 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:17: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:02,884 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:19: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,899 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,913 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:02,927 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:02,943 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "plotting functions"...>>,)
2018-03-08 15:26:02,961 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 80%] [35mRBchron[39;49;00m                                                                                           
2018-03-08 15:26:02,978 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x111fe4898>, 'RBchron')
2018-03-08 15:26:02,997 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('RBchron', ['RBchron\n=======\n\nThis module helps in the preparation of a Bchron run.\n\nWhen usin
2018-03-08 15:26:03,013 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:10: input:
.. autofunction:: pyleoclim.RBchron.chooseCalCurves

2018-03-08 15:26:03,026 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import chooseCalCurves
2018-03-08 15:26:03,040 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:26:03,062 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:26:03,077 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'chooseCalCurves')
2018-03-08 15:26:03,096 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function chooseCalCurves at 0x1209f06a8>
2018-03-08 15:26:03,194 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.chooseCalCurves', <function chooseCalCurves at 0x1209f06a8>, {}, ['P
2018-03-08 15:26:03,209 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: chooseCalCurves()
   :module: pyleoclim.RBchron

   Prompt for a calibration curve if not given by the user.
   
   Prompt the user for the name of a calibration curve used to run the Bchron 
   software package. The user can enter either enter only one name that will
   be applied to each age or a list of names of different ages. To enter a list, 
   separate each name with a comma. No quotation marks needed. 
   
   Returns:
       A list of calibration curves to be applied  
   
   
2018-03-08 15:26:03,230 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: input:
.. autofunction:: pyleoclim.RBchron.verufyCalCurves

2018-03-08 15:26:03,247 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import verufyCalCurves
2018-03-08 15:26:03,262 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:26:03,277 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:26:03,295 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'verufyCalCurves')
2018-03-08 15:26:03,311 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'verufyCalCurves' from module 'pyleoclim.RBchron'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.RBchron' has no attribute 'verufyCalCurves'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves

2018-03-08 15:26:03,324 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: (WARNING/2) autodoc: failed to import function 'verufyCalCurves' from module 'pyleoclim.RBchron'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.RBchron' has no attribute 'verufyCalCurves'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves
2018-03-08 15:26:03,337 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:14: input:
.. autofunction:: pyleoclim.RBchron.reservoirAgeCorrection

2018-03-08 15:26:03,351 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import reservoirAgeCorrection
2018-03-08 15:26:03,364 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:26:03,378 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:26:03,397 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'reservoirAgeCorrection')
2018-03-08 15:26:03,413 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function reservoirAgeCorrection at 0x1239f7158>
2018-03-08 15:26:03,427 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.reservoirAgeCorrection', <function reservoirAgeCorrection at 0x1239f
2018-03-08 15:26:03,442 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: reservoirAgeCorrection()
   :module: pyleoclim.RBchron

   Estimate reservoir age correction
   
   Assists in estimating the reservoir age correction for marine records.
   If unknown, will direct the user to copy and paste the table available
   on the 14Chrono Marine Reservoir database: http://intcal.qub.ac.uk/marine/
   
   Returns:
       ageCorr -  the DeltaR for the site. 
   
       ageCorrStd - The error on DeltaR estimated as the standard error on the 
       mean if using the 14Chrono Marine Reservoir database.
   
   
2018-03-08 15:26:03,459 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:16: input:
.. autofunction:: pyleoclim.RBchron.runBchron

2018-03-08 15:26:03,473 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import runBchron
2018-03-08 15:26:03,487 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:26:03,507 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:26:03,520 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'runBchron')
2018-03-08 15:26:03,533 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function runBchron at 0x1239f71e0>
2018-03-08 15:26:03,556 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.runBchron', <function runBchron at 0x1239f71e0>, {}, ['Age model for
2018-03-08 15:26:03,580 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: runBchron(ages, agesStd, positions, rejectAges=None, positionsThickness=None, calCurves=None, reservoirAgeCorr=None, outlierProbs=None, predictPositions=None, iterations=10000, burn=2000, thin=8, extractDate=-68, maxExtrap=500, thetaMhSd=0.5, muMhSd=0.1, psiMhSd=0.1, ageScaleVal=1000, positionScaleVal=100)
   :module: pyleoclim.RBchron

   Age model for Tie-Point chronologies
   
   Fits a non-parametric chronology model to age/position data according to
   the Compound Poisson-Gamma model defined by Haslett and Parnell (2008). 
   This version used a slightly modified Markov chain Monte-Carlo fitting
   algorithm which aims to converge quicker and requires fewer iterations.
   It also a slightly modified procedure for identifying outliers.
   
   The Bchronology functions fits a compounf Poisson-Gamma distribution to the
   incrememnts between the dated levels. This involves a stochastic linear
   interpolation step where the age gaps are Gamma distributed, and the position
   gaps are Exponential. Radiocarbon and non-radiocarbon dates (including outliers)
   are updated within the fucntion also by MCMC.
   
   Args:
       ages (array): A vector of ages (most likely 14C)
       ageSds (array): A vector of 1-sigma values for the ages given above
       positions (array): Position values (e.g. depths) for each age
       rejectAges (vector): A vector of 1/0 where 1 include the dates to be rejected. 
           Default it None.
       positionsThickness (array): (Optional) Thickness values for each of the positions.
           The thickness values should be the full thickness value of the
           slice. By default set to zero.
       calCurves (list): (Optional) A vector of values containing either 'intcal13',
           'marine13', 'shcal13', or 'normal'. If none is provided, will
           prompt the user. Should be either of length =1 if using the same
           calibration for each age or the same length as the vector of ages.
       reservoirAgeCorr (array): (Optional) A list (matrix) of two floats that correspond to the
           DeltaR and DeltaR uncertainty. If already added to the ages and
           ages standard deviation, then enter [0,0] to bypass the prompt.
           Will only be applied if CalCurves is set to 'marine13'. Otherwise,
           leave to none.
       outlierProbs (array): (Optional) A vector of prior outlier probabilities,
           one for each age. Defaults to 0.01
       predictPositions (array): (Optional) a vector of positions 
           (e.g. depths) at which predicted age values are required. 
           Defaults to a sequence of length 100 from the top position to the
           bottom position.
       iterations (int): (Optional) The number of iterations to start the procedure. 
           Default and minimum should be 10000.
       burn (int): (Optional) The number of starting iterations to discard.
           Default is 200
       thin (int): (Optional) The step size for every iteration to keep beyond
           the burnin. Default is 8.
       extractDate (float): (Optional) The top age of the core. Used for
           extrapolation purposes so that no extrapolated ages go beyond the
           top age of the core. Defaults to the current year.
       maxExtrap (int): (Optional) The maximum number of extrapolations to
           perform before giving up and setting the predicted ages to NA. 
           Useful for when large amounts of extrapolation are required, i.e.
           some of the predictPositions are a long way from the dated
           positions. Defaults to 500. 
       thetaMhSd (float):  (Optional)  The Metropolis-Hastings standard
           deviation for the age parameters. Defaults to 0.5.
       muMhSd (float): (Optional)  The Metropolis-Hastings standard deviation
           for the compound Poisson-Gamma Scale. Defaults to 0.1
       psiMhSd (float): (Optional) The Metropolis-Hastings standard deviation 
           for the Compound Poisson-Gamma Scale.
       ageScaleVal (int): (Optional) A scale value for the ages. 
           Bchronology works best when the ages are scaled to be 
           approximately between 0 and 100.
           The default value is thus 1000 for ages given in years.
       positionScaleVal (int):  (Optional) A scale value for the positions. 
           Bchronology works best when the positions are scaled to be 
           approximately between 0 and 100. The default value is thus
           100 for positions given in cm.
   
       Returns:
           depth - the predicted positions (either same as the user or the default) 
   
           chron -  a numpy array of possible chronologies in each column.
               The number of rows is the same as the length of depth
           ageDist - the distribution of ages around each dates.
           run - the full R object containing the outputs of the Bchron run
       
       Warnings:
           This function requires R and the Bchron package and all its
               dependencies to be installed on the same machine.
               
       Reference:
           - Haslett, J., and Parnell, A. C. (2008). A simple monotone 
               process with application to radiocarbon-dated depth 
               chronologies. Journal of the Royal Statistical Society, 
               Series C, 57, 399-418. DOI:10.1111/j.1467-9876.2008.00623.x
           - Parnell, A. C., Haslett, J., Allen, J. R. M., Buck, C. E., 
               and Huntley, B. (2008). A flexible approach to assessing 
               synchroneity of past events using Bayesian reconstructions
               of sedimentation history. Quaternary Science Reviews, 
               27(19-20), 1872-1885. DOI:10.1016/j.quascirev.2008.07.009     
   
   
2018-03-08 15:26:03,618 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:03,638 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:03,657 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:26:03,677 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:18: input:
.. autofunction:: pyleoclim.RBchron.plotBchron
2018-03-08 15:26:03,696 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import plotBchron
2018-03-08 15:26:03,731 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:26:03,757 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:26:03,778 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotBchron')
2018-03-08 15:26:03,796 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotBchron at 0x1239f7268>
2018-03-08 15:26:03,813 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.plotBchron', <function plotBchron at 0x1239f7268>, {}, ['Plot a Bchr
2018-03-08 15:26:03,837 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotBchron(depth, chron, positions, ageDist, flipCoor=False, xlabel='Depth', ylabel='Age', xlim=None, ylim=None, violinColor='#8B008B', medianLineColor='black', medianLineWidth=2.0, CIFillColor='Silver', samplePaths=True, samplePathNumber=10, alpha=0.5, figsize=[4, 8], ax=None)
   :module: pyleoclim.RBchron

   Plot a Bchron output
   
   This function creates a plot showing the calibrated calendar ages and
   associated 95% confidence interval as error bars, the 95% ensemble from
   the produced age model as well as randomly drawn members of the ensemble.
   
   Args:
       depth (array): the positions in the archive (often referred to as
           depth) where the age model was interpolated to. Should be a vector
       chron (array): The possible age models returned by BChron. The number
           of rows should be the same length as the depth vector, with each
           possible realization stored in the columns.
       positions (array): The depth on the archive at which chronological
           measurements have been made. Should be a vector 
       agesDist (array): The distribution of ages for each chronological tie
           points. The number of columns should correspond to the number of
           chronological tie points available.
       flipCoor (bool): If True, plots depth on the y-axis.     
       xlabel (str): The label for the x-axis
       ylabel (str): The label for the y-axis
       xlim (list): Limits for the x-axis. Default corresponds to the min/max
           of the depth vector.
       ylim (list): Limits for the y-axis. Default set by matplotlib
       violinColor (str): The color for the violins. Default is purple
       medianLineColor (str): The color for the median line. Default is black.
       medianLineWidth (float): The width for the median line
       CIFillColor (str): Fill color in between the 95% confidence interval.
           Default is silver.
       samplePaths (bool): If True, draws sample paths from the distribution.
           Use the same color as the violins. 
       samplePathNumber (int): The number of sample paths to draw. Default is 10.
           Note: samplePaths need to be set to True. 
       alpha (float): The violins' transparency. Number between 0 and 1
       figsize (list): The figure size. Default is [4,8]
       ax: Default is None. Useful to set for subplots. 
           
   Returns:
       - fig: the figure.      
         
   
2018-03-08 15:26:03,860 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:26:03,876 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:03,895 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:03,914 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:03,930 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:03,946 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:26:03,985 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: (WARNING/2) autodoc: failed to import function ‘verufyCalCurves’ from module ‘pyleoclim.RBchron’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim.RBchron’ has no attribute ‘verufyCalCurves’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves
 [filtered system message]
2018-03-08 15:26:04,012 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:20: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:04,027 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:04,043 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:73: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:04,065 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:18: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:04,088 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:22: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:04,123 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:23: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:04,146 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:28: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:04,162 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:29: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:04,177 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:33: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:04,191 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "rbchron"...>>,)
2018-03-08 15:26:04,218 [INFO] sphinx.util: [01mreading sources... [39;49;00m[100%] [35mTimeseries[39;49;00m                                                                                        
2018-03-08 15:26:04,231 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x111fe4898>, 'Timeseries')
2018-03-08 15:26:04,248 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Timeseries', ['Timeseries Functions\n====================\n\nThis module allows the manipulation o
2018-03-08 15:26:04,263 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:6: input:
.. autofunction:: pyleoclim.Timeseries.bin

2018-03-08 15:26:04,276 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import bin
2018-03-08 15:26:04,289 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:26:04,331 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:26:04,354 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'bin')
2018-03-08 15:26:04,372 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function bin at 0x1208d7ae8>
2018-03-08 15:26:04,475 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.bin', <function bin at 0x1208d7ae8>, {}, ['Bin the values', '', '
2018-03-08 15:26:04,488 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: bin(x, y, bin_size='', start='', end='')
   :module: pyleoclim.Timeseries

   Bin the values
   
   Args:
       x (array): the x-axis series.
       y (array): the y-axis series.
       bin_size (float): The size of the bins. Default is the average resolution
       start (float): Where/when to start binning. Default is the minimum
       end (float): When/where to stop binning. Defulat is the maximum
   
   Returns:
       binned_values - the binned output 
   
       bins - the bins (centered on the median, i.e., the 100-200 bin is 150) 
   
       n - number of data points in each bin 
   
       error -  the standard error on the mean in each bin
   
   
2018-03-08 15:26:04,510 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:8: input:
.. autofunction:: pyleoclim.Timeseries.interp

2018-03-08 15:26:04,528 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import interp
2018-03-08 15:26:04,543 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:26:04,563 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:26:04,578 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interp')
2018-03-08 15:26:04,591 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interp at 0x1208d7c80>
2018-03-08 15:26:04,606 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.interp', <function interp at 0x1208d7c80>, {}, ['Linear interpola
2018-03-08 15:26:04,626 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interp(x, y, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Linear interpolation onto a new x-axis
   
   Args:
       x (array): the x-axis
       y (array): the y-axis
       interp_step (float): the interpolation step. Default is mean resolution.
       start (float): where/when to start the interpolation. Default is min..
       end (float): where/when to stop the interpolation. Default is max.
   
   Returns:
       xi - the interpolated x-axis 
   
       interp_values - the interpolated values
       
   
2018-03-08 15:26:04,643 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:10: input:
.. autofunction:: pyleoclim.Timeseries.onCommonAxis

2018-03-08 15:26:04,656 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import onCommonAxis
2018-03-08 15:26:04,675 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:26:04,697 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:26:04,714 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'onCommonAxis')
2018-03-08 15:26:04,733 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function onCommonAxis at 0x1208d7d08>
2018-03-08 15:26:04,747 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.onCommonAxis', <function onCommonAxis at 0x1208d7d08>, {}, ['Plac
2018-03-08 15:26:04,760 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: onCommonAxis(x1, y1, x2, y2, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Places two timeseries on a common axis
   
   Args:
       x1 (array): x-axis values of the first timeseries
       y1 (array): y-axis values of the first timeseries
       x2 (array): x-axis values of the second timeseries
       y2 (array): y-axis values of the second timeseries
       interp_step (float): The interpolation step. Default is mean resolution
       of lowest resolution series
       start (float): where/when to start. Default is the maximum of the minima of
       the two timeseries
       end (float): Where/when to end. Default is the minimum of the maxima of
       the two timeseries
   
   Returns:
       xi -  the interpolated x-axis 
   
       interp_values1 -  the interpolated y-values for the first timeseries
       interp_values2 - the intespolated y-values for the second timeseries
       
   
2018-03-08 15:26:04,779 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:12: input:
.. autofunction:: pyleoclim.Timeseries.standardize

2018-03-08 15:26:04,794 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import standardize
2018-03-08 15:26:04,808 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:26:04,828 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:26:04,842 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardize')
2018-03-08 15:26:04,855 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardize at 0x1208d7d90>
2018-03-08 15:26:04,869 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.standardize', <function standardize at 0x1208d7d90>, {}, ['Center
2018-03-08 15:26:04,883 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardize(x, scale=1, axis=0, ddof=0, eps=0.001)
   :module: pyleoclim.Timeseries

   Centers and normalizes a given time series. Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed
       mu (real): the mean of the original time series, E[X]
       sig (real): the standard deviation of the original time series, std[X]
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2018-03-08 15:26:04,902 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:14: input:
.. autofunction:: pyleoclim.Timeseries.ts2segments

2018-03-08 15:26:04,926 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import ts2segments
2018-03-08 15:26:04,946 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:26:04,963 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:26:04,979 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ts2segments')
2018-03-08 15:26:04,992 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ts2segments at 0x1208d7e18>
2018-03-08 15:26:05,006 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.ts2segments', <function ts2segments at 0x1208d7e18>, {}, ['Chop a
2018-03-08 15:26:05,023 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ts2segments(ys, ts, factor=10)
   :module: pyleoclim.Timeseries

   Chop a time series into several segments based on gap detection.
   
   The rule of gap detection is very simple:
       we define the intervals between time points as dts, then if dts[i] is larger than factor * dts[i-1],
       we think that the change of dts (or the gradient) is too large, and we regard it as a breaking point
       and chop the time series into two segments here
   
   Args:
       ys (array): a time series, NaNs allowed
       ts (array): the time points
       factor (float): the factor that adjusts the threshold for gap detection
   
   Returns:
       seg_ys (list): a list of several segments with potentially different lengths
       seg_ts (list): a list of the time axis of the several segments
       n_segs (int): the number of segments
   
   @author: fzhu
   
2018-03-08 15:26:05,044 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:16: input:
.. autofunction:: pyleoclim.Timeseries.clean_ts

2018-03-08 15:26:05,058 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import clean_ts
2018-03-08 15:26:05,094 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:26:05,118 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:26:05,156 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'clean_ts')
2018-03-08 15:26:05,175 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function clean_ts at 0x1208d7ea0>
2018-03-08 15:26:05,192 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.clean_ts', <function clean_ts at 0x1208d7ea0>, {}, ['Delete the N
2018-03-08 15:26:05,207 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: clean_ts(ys, ts)
   :module: pyleoclim.Timeseries

   Delete the NaNs in the time series and sort it with time axis ascending
   
   Args:
       ys (array): a time series, NaNs allowed
       ts (array): the time axis of the time series, NaNs allowed
   
   Returns:
       ys (array): the time series without nans
       ts (array): the time axis of the time series without nans
   
   
2018-03-08 15:26:05,228 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: input:
.. autofunction:: pyleoclim.Timeseries.annualize

2018-03-08 15:26:05,245 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import annualize
2018-03-08 15:26:05,259 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:26:05,273 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:26:05,285 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'annualize')
2018-03-08 15:26:05,299 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'annualize' from module 'pyleoclim.Timeseries'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.Timeseries' has no attribute 'annualize'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize

2018-03-08 15:26:05,313 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: (WARNING/2) autodoc: failed to import function 'annualize' from module 'pyleoclim.Timeseries'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.Timeseries' has no attribute 'annualize'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize
2018-03-08 15:26:05,333 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:20: input:
.. autofunction:: pyleoclim.Timeseries.gaussianize

2018-03-08 15:26:05,349 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import gaussianize
2018-03-08 15:26:05,363 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:26:05,376 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:26:05,391 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'gaussianize')
2018-03-08 15:26:05,405 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function gaussianize at 0x1208d7f28>
2018-03-08 15:26:05,427 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.gaussianize', <function gaussianize at 0x1208d7f28>, {}, ['Transf
2018-03-08 15:26:05,457 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: gaussianize(X)
   :module: pyleoclim.Timeseries

   Transforms a (proxy) timeseries to Gaussian distribution.
   
   Originator: Michael Erb, Univ. of Southern California - April 2017
   
2018-03-08 15:26:05,474 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:22: input:
.. autofunction:: pyleoclim.Timeseries.gaussianize_single

2018-03-08 15:26:05,489 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import gaussianize_single
2018-03-08 15:26:05,505 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:26:05,521 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:26:05,549 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'gaussianize_single')
2018-03-08 15:26:05,565 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function gaussianize_single at 0x1208e1048>
2018-03-08 15:26:05,599 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.gaussianize_single', <function gaussianize_single at 0x1208e1048>
2018-03-08 15:26:05,629 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: gaussianize_single(X_single)
   :module: pyleoclim.Timeseries

   Transforms a single (proxy) timeseries to Gaussian distribution.
   
   Originator: Michael Erb, Univ. of Southern California - April 2017
   
2018-03-08 15:26:05,650 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:24: input:
.. autofunction:: pyleoclim.Timeseries.detrend
2018-03-08 15:26:05,668 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import detrend
2018-03-08 15:26:05,685 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:26:05,701 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:26:05,719 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'detrend')
2018-03-08 15:26:05,744 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function detrend at 0x1208e10d0>
2018-03-08 15:26:05,769 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.detrend', <function detrend at 0x1208e10d0>, {}, ['Detrend a time
2018-03-08 15:26:05,790 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: detrend(y, x=None, method='linear', params=['default', 4, 0, 1])
   :module: pyleoclim.Timeseries

   Detrend a timeseries according to three methods
   
   Detrending methods include, "linear" (default), "constant", and using a low-pass
       Savitzky-Golay filters.
       
   Args:
       y (array): The series to be detrended. 
       x (array): The time axis for the timeseries. Necessary for use with 
           the Savitzky-Golay filters method since the series should be evenly spaced.    
       method (str): The type of detrending. If linear (default), the result of
           a linear least-squares fit to y is subtracted from y. If constant, 
           only the mean of data is subtrated. If "savitzy-golay", y is filtered
           using the Savitzky-Golay filters and the resulting filtered series
           is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data) 
           while the second parameter correspond to the order of the filter 
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
           
   Returns:
       ys (array) - the detrended timeseries.        
   
2018-03-08 15:26:05,807 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:26:05,821 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:26:05,858 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: (WARNING/2) autodoc: failed to import function ‘annualize’ from module ‘pyleoclim.Timeseries’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim.Timeseries’ has no attribute ‘annualize’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize
 [filtered system message]
2018-03-08 15:26:05,872 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.detrend:9: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:26:05,900 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.detrend:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:26:05,924 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "timeseries functions"...>>,)
2018-03-08 15:26:05,949 [INFO] sphinx.util: 
2018-03-08 15:26:05,964 [DEBUG] sphinx.application: [app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x111fe4898>,)
2018-03-08 15:26:05,980 [INFO] sphinx.builders: [01mlooking for now-outdated files... [39;49;00m
2018-03-08 15:26:05,994 [DEBUG] sphinx.application: [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x111fe4898>,)
2018-03-08 15:26:06,007 [INFO] sphinx.builders: none found
2018-03-08 15:26:06,020 [INFO] sphinx.builders: [01mpickling environment... [39;49;00m
2018-03-08 15:26:06,056 [INFO] sphinx.builders: done
2018-03-08 15:26:06,077 [INFO] sphinx.builders: [01mchecking consistency... [39;49;00m
2018-03-08 15:26:06,093 [DEBUG] sphinx.application: [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x111fe4898>,)
2018-03-08 15:26:06,129 [INFO] sphinx.builders: done
2018-03-08 15:26:06,173 [INFO] sphinx.builders.latex: processing Pyleoclim.tex...
2018-03-08 15:26:06,195 [INFO] sphinx.builders.latex: [32mindex[39;49;00m 
2018-03-08 15:26:06,211 [INFO] sphinx.util.nodes: [32mIntroduction[39;49;00m 
2018-03-08 15:26:06,228 [INFO] sphinx.util.nodes: [32mMain[39;49;00m 
2018-03-08 15:26:06,348 [INFO] sphinx.util.nodes: [32mMap[39;49;00m 
2018-03-08 15:26:06,368 [INFO] sphinx.util.nodes: [32mPlot[39;49;00m 
2018-03-08 15:26:06,384 [INFO] sphinx.util.nodes: [32mStats[39;49;00m 
2018-03-08 15:26:06,398 [INFO] sphinx.util.nodes: [32mTimeseries[39;49;00m 
2018-03-08 15:26:06,420 [INFO] sphinx.util.nodes: [32mLipdUtils[39;49;00m 
2018-03-08 15:26:06,460 [INFO] sphinx.util.nodes: [32mSummaryPlots[39;49;00m 
2018-03-08 15:26:06,480 [INFO] sphinx.util.nodes: [32mSpectral[39;49;00m 
2018-03-08 15:26:06,502 [INFO] sphinx.util.nodes: [32mRBchron[39;49;00m 
2018-03-08 15:26:06,524 [INFO] sphinx.builders.latex: 
2018-03-08 15:26:06,551 [INFO] sphinx.builders.latex: resolving references...
2018-03-08 15:26:06,600 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <comment...><section "welcome to pyleoclim's documentati ...>, 'index')
2018-03-08 15:26:06,629 [INFO] sphinx.builders.latex: writing... 
2018-03-08 15:26:06,764 [INFO] sphinx.builders.latex: done
2018-03-08 15:26:06,784 [INFO] sphinx.builders.latex: [01mcopying TeX support files...[39;49;00m
2018-03-08 15:26:06,901 [INFO] sphinx.builders.latex: done
2018-03-08 15:26:06,916 [INFO] sphinx.application: [01mbuild succeeded.[39;49;00m
2018-03-08 15:26:06,931 [DEBUG] sphinx.application: [app] emitting event: 'build-finished'(None,)
2018-03-08 15:27:56,825 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:56,828 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'createDir')
2018-03-08 15:27:56,849 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function createDir at 0x112314510>
2018-03-08 15:27:57,000 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.createDir', <function createDir at 0x112314510>, {}, ['Create a ne
2018-03-08 15:27:57,039 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: createDir(path, foldername)
   :module: pyleoclim.LipdUtils

   Create a new folder in a working directory
   
   Create a new folder in a working directory to save outputs from Pyleoclim.
   
   Args:
       path(str): the path to the new folder.
       foldername(str): the name of the folder to be created
       
   Returns:
       newdir - the full path to the new directory
       
   
2018-03-08 15:27:57,075 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:11: input:
.. autofunction:: pyleoclim.LipdUtils.saveFigure

2018-03-08 15:27:57,110 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import saveFigure
2018-03-08 15:27:57,129 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:57,144 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:57,158 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'saveFigure')
2018-03-08 15:27:57,171 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function saveFigure at 0x112314598>
2018-03-08 15:27:57,186 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.saveFigure', <function saveFigure at 0x112314598>, {}, ['Save a fi
2018-03-08 15:27:57,206 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: saveFigure(name, format='eps', dir='')
   :module: pyleoclim.LipdUtils

   Save a figure
   
   Save the figure in the directory. If not given, creates a folder in the 
   current working directory. 
   
   Args:
       name (str): name of the file
       format (str): One of the file extensions supported by the active 
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       dir (str): the name of the folder in the LiPD working directory.
           If not provided, creates a default folder called 'figures'.
           
   
2018-03-08 15:27:57,222 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:27:57,239 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:27:57,257 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:16: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateLipds

2018-03-08 15:27:57,271 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateLipds
2018-03-08 15:27:57,285 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:57,308 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:57,322 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateLipds')
2018-03-08 15:27:57,335 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateLipds at 0x112314620>
2018-03-08 15:27:57,349 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateLipds', <function enumerateLipds at 0x112314620>, {}, ['E
2018-03-08 15:27:57,366 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateLipds(lipds)
   :module: pyleoclim.LipdUtils

   Enumerate the LiPD files loaded in the workspace
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   
2018-03-08 15:27:57,387 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:18: input:
.. autofunction:: pyleoclim.LipdUtils.getLipd

2018-03-08 15:27:57,406 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getLipd
2018-03-08 15:27:57,421 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:57,435 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:57,449 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getLipd')
2018-03-08 15:27:57,462 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getLipd at 0x1123146a8>
2018-03-08 15:27:57,476 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getLipd', <function getLipd at 0x1123146a8>, {}, ['Prompt for a Li
2018-03-08 15:27:57,498 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getLipd(lipds)
   :module: pyleoclim.LipdUtils

   Prompt for a LiPD file
   
   Ask the user to select a LiPD file from a list
   Use this function in conjunction with enumerateLipds()
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   Returns:
       The index of the LiPD file
       
   
2018-03-08 15:27:57,534 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:23: input:
.. autofunction:: pyleoclim.LipdUtils.promptForVariable

2018-03-08 15:27:57,549 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForVariable
2018-03-08 15:27:57,562 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:57,576 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:57,591 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForVariable')
2018-03-08 15:27:57,611 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForVariable at 0x112314730>
2018-03-08 15:27:57,624 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForVariable', <function promptForVariable at 0x112314730>, {
2018-03-08 15:27:57,638 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForVariable()
   :module: pyleoclim.LipdUtils

   Prompt for a specific variable
   
   Ask the user to select the variable they are interested in.
   Use this function in conjunction with readHeaders() or getTSO()
   
   Returns:
       The index of the variable
       
   
2018-03-08 15:27:57,656 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:25: input:
.. autofunction:: pyleoclim.LipdUtils.xAxisTs

2018-03-08 15:27:57,670 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import xAxisTs
2018-03-08 15:27:57,684 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:57,701 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:57,717 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'xAxisTs')
2018-03-08 15:27:57,731 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function xAxisTs at 0x1123147b8>
2018-03-08 15:27:57,745 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.xAxisTs', <function xAxisTs at 0x1123147b8>, {}, ['Prompt the user
2018-03-08 15:27:57,759 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: xAxisTs(timeseries)
   :module: pyleoclim.LipdUtils

   Prompt the user to choose a x-axis representation for the timeseries.
   
   Args:
       timeseries: a timeseries object
       
   Returns:
       x_axis - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"
       
   
2018-03-08 15:27:57,775 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:27: input:
.. autofunction:: pyleoclim.LipdUtils.checkXaxis

2018-03-08 15:27:57,789 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import checkXaxis
2018-03-08 15:27:57,808 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:57,823 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:57,837 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'checkXaxis')
2018-03-08 15:27:57,850 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function checkXaxis at 0x112314840>
2018-03-08 15:27:57,872 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.checkXaxis', <function checkXaxis at 0x112314840>, {}, ['Check tha
2018-03-08 15:27:57,887 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: checkXaxis(timeseries, x_axis='')
   :module: pyleoclim.LipdUtils

   Check that a x-axis is present for the timeseries
   
   Args:
       timeseries : a timeseries
       x_axis (str) : the x-axis representation, either depth, age or year
       
   Returns:
       x - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"    
   
   
2018-03-08 15:27:57,920 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:29: input:
.. autofunction:: pyleoclim.LipdUtils.searchVar

2018-03-08 15:27:57,941 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import searchVar
2018-03-08 15:27:57,960 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:57,978 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:57,993 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'searchVar')
2018-03-08 15:27:58,015 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function searchVar at 0x1123148c8>
2018-03-08 15:27:58,029 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.searchVar', <function searchVar at 0x1123148c8>, {}, ['This functi
2018-03-08 15:27:58,043 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: searchVar(timeseries_list, key, exact=True, override=True)
   :module: pyleoclim.LipdUtils

   This function search for key words (exact match) for a variable
   
   Args:
       timeseries_list (list): A list of available series
       key (list): A list of keys to search
       exact (bool): if True, looks for an exact match.
       override (bool): if True, override the exact match if no match is found
   
   Returns:
       match (list)- A list of keys for the timeseries that match the selection
           criteria.
   
2018-03-08 15:27:58,060 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:34: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateTs

2018-03-08 15:27:58,074 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateTs
2018-03-08 15:27:58,088 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:58,105 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:58,120 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateTs')
2018-03-08 15:27:58,134 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateTs at 0x112314950>
2018-03-08 15:27:58,148 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateTs', <function enumerateTs at 0x112314950>, {}, ['Enumera
2018-03-08 15:27:58,162 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Enumerate the available time series objects
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   
2018-03-08 15:27:58,184 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:36: input:
.. autofunction:: pyleoclim.LipdUtils.getTs

2018-03-08 15:27:58,199 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getTs
2018-03-08 15:27:58,220 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:58,234 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:58,249 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getTs')
2018-03-08 15:27:58,262 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getTs at 0x1123149d8>
2018-03-08 15:27:58,276 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getTs', <function getTs at 0x1123149d8>, {}, ['Get a specific time
2018-03-08 15:27:58,290 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getTs(timeseries_list, option='')
   :module: pyleoclim.LipdUtils

   Get a specific timeseries object from a dictionary of timeseries
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
       option: An expression to filter the datasets. Uses lipd.filterTs()    
           
   Returns:
       A single timeseries object if not optional filter selected or a filtered
       list if optional arguments given
       
   
2018-03-08 15:27:58,307 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:27:58,328 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:41: input:
.. autofunction:: pyleoclim.LipdUtils.LipdToOntology

2018-03-08 15:27:58,341 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import LipdToOntology
2018-03-08 15:27:58,355 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:58,378 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:58,392 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'LipdToOntology')
2018-03-08 15:27:58,405 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function LipdToOntology at 0x112314a60>
2018-03-08 15:27:58,424 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.LipdToOntology', <function LipdToOntology at 0x112314a60>, {}, ['s
2018-03-08 15:27:58,440 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: LipdToOntology(archiveType)
   :module: pyleoclim.LipdUtils

   standardize archiveType
   
   Transform the archiveType from their LiPD name to their ontology counterpart
   
   Args:
       archiveType (STR): name of the archiveType from the LiPD file
       
   Returns:
       archiveType according to the ontology
       
   
2018-03-08 15:27:58,459 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:46: input:
.. autofunction:: pyleoclim.LipdUtils.isModel

2018-03-08 15:27:58,473 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isModel
2018-03-08 15:27:58,487 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:58,502 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:58,519 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isModel')
2018-03-08 15:27:58,536 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isModel at 0x112314ae8>
2018-03-08 15:27:58,550 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isModel', <function isModel at 0x112314ae8>, {}, ['Check for the p
2018-03-08 15:27:58,563 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isModel(csvName, lipd)
   :module: pyleoclim.LipdUtils

   Check for the presence of a model in the same object than the measurement table
   
   Args:
       csvName (str): The name of the csv file corresponding to the measurement table
       lipd (dict): A LiPD object
   
   Returns:
       model (list): List of models already available
   
       dataObject (str): The name of the paleoData or ChronData
           object in which the model(s) are stored
   
2018-03-08 15:27:58,691 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:48: input:
.. autofunction:: pyleoclim.LipdUtils.modelNumber

2018-03-08 15:27:58,705 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import modelNumber
2018-03-08 15:27:58,719 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:58,733 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:58,746 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'modelNumber')
2018-03-08 15:27:58,762 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function modelNumber at 0x112314b70>
2018-03-08 15:27:58,792 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.modelNumber', <function modelNumber at 0x112314b70>, {}, ['Assign 
2018-03-08 15:27:58,810 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: modelNumber(model)
   :module: pyleoclim.LipdUtils

   Assign a new or existing model number
   
   Args:
       model (list): List of possible model number. Obtained from isModel
       
   Returns:
       modelNum (int): The number of the model
   
2018-03-08 15:27:58,827 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:53: input:
.. autofunction:: pyleoclim.LipdUtils.isMeasurement

2018-03-08 15:27:58,840 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isMeasurement
2018-03-08 15:27:58,854 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:58,891 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:58,905 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isMeasurement')
2018-03-08 15:27:58,919 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isMeasurement at 0x112314bf8>
2018-03-08 15:27:58,934 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isMeasurement', <function isMeasurement at 0x112314bf8>, {}, ['Che
2018-03-08 15:27:58,948 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isMeasurement(csv_dict)
   :module: pyleoclim.LipdUtils

   Check whether measurement tables are available
   
   Args:
       csv_dict (dict): Dictionary of available csv
   
   Returns:
       paleoMeasurementTables - List of available paleoMeasurementTables
       chronMeasurementTables - List of available chronMeasurementTables
   
2018-03-08 15:27:58,965 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:55: input:
.. autofunction:: pyleoclim.LipdUtils.whichMeasurement

2018-03-08 15:27:58,994 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import whichMeasurement
2018-03-08 15:27:59,009 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:59,023 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:59,037 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'whichMeasurement')
2018-03-08 15:27:59,050 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function whichMeasurement at 0x112314c80>
2018-03-08 15:27:59,065 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.whichMeasurement', <function whichMeasurement at 0x112314c80>, {},
2018-03-08 15:27:59,081 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: whichMeasurement(measurementTableList, csv_dict)
   :module: pyleoclim.LipdUtils

   Select a measurement table from a list
   
   Use in conjunction with the function isMeasurement
   
   Args:
       measurementTableList (list): List of measurement tables contained in the
           LiPD file. Output from the isMeasurement function
       csv_list (list): Dictionary of available csv     
   
   Returns:
       csvName (str) - the name of the csv file
   
   
2018-03-08 15:27:59,104 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:27:59,122 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:57: input:
.. autofunction:: pyleoclim.LipdUtils.getMeasurement

2018-03-08 15:27:59,135 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getMeasurement
2018-03-08 15:27:59,150 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:59,163 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:59,181 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getMeasurement')
2018-03-08 15:27:59,197 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getMeasurement at 0x112314d08>
2018-03-08 15:27:59,211 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getMeasurement', <function getMeasurement at 0x112314d08>, {}, ['E
2018-03-08 15:27:59,225 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getMeasurement(csvName, lipd)
   :module: pyleoclim.LipdUtils

   Extract the dictionary corresponding to the measurement table
   
   Args:
       csvName (str): The name of the csv file
       lipd (dict): The LiPD object from which to extract the data
   
   Returns:
       ts_list - A dictionary containing data and metadata for each column in the
           csv file.
   
   
2018-03-08 15:27:59,243 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:62: input:
.. autofunction:: pyleoclim.LipdUtils.isEnsemble

2018-03-08 15:27:59,258 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isEnsemble
2018-03-08 15:27:59,273 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:59,296 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:59,314 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isEnsemble')
2018-03-08 15:27:59,330 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isEnsemble at 0x112314d90>
2018-03-08 15:27:59,347 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isEnsemble', <function isEnsemble at 0x112314d90>, {}, ['Check whe
2018-03-08 15:27:59,362 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isEnsemble(csv_dict)
   :module: pyleoclim.LipdUtils

   Check whether ensembles are available
   
   Args:
       csv_dict (dict): Dictionary of available csv
   
   Returns:
       paleoEnsembleTables - List of available paleoEnsembleTables 
   
       chronEnsembleTables - List of availale chronEnsemble Tables
       
   
2018-03-08 15:27:59,381 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: input:
.. autofunction:: pyleocli.LipdUtils.getEnsembleValues

2018-03-08 15:27:59,400 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleocli.LipdUtils import getEnsembleValues
2018-03-08 15:27:59,414 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleocli.LipdUtils
2018-03-08 15:27:59,429 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'getEnsembleValues' from module 'pyleocli.LipdUtils'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleocli'

2018-03-08 15:27:59,443 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: (WARNING/2) autodoc: failed to import function 'getEnsembleValues' from module 'pyleocli.LipdUtils'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleocli'
2018-03-08 15:27:59,460 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:66: input:
.. autofunction:: pyleoclim.LipdUtils.mapAgeEnsembleToPaleoData
2018-03-08 15:27:59,479 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import mapAgeEnsembleToPaleoData
2018-03-08 15:27:59,496 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:27:59,521 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:27:59,535 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAgeEnsembleToPaleoData')
2018-03-08 15:27:59,549 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAgeEnsembleToPaleoData at 0x112314ea0>
2018-03-08 15:27:59,564 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.mapAgeEnsembleToPaleoData', <function mapAgeEnsembleToPaleoData at
2018-03-08 15:27:59,577 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAgeEnsembleToPaleoData(ensembleValues, depthEnsemble, depthPaleo)
   :module: pyleoclim.LipdUtils

   Map the depth for the ensemble age values to the paleo depth
   
   Args:
       ensembleValues (array): A matrix of possible age models. Realizations
           should be stored in columns
       depthEnsemble (array): A vector of depth. The vector should have the same
           length as the number of rows in the ensembleValues
       depthPaleo (array): A vector corresponding to the depth at which there
           are paleodata information
           
   Returns:
       ensembleValuesToPaleo - A matrix of age ensemble on the PaleoData scale 
       
   
   
2018-03-08 15:27:59,626 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:9: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:27:59,641 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:27:59,655 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.getTs:7: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:27:59,668 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.whichMeasurement:8: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:27:59,683 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: (WARNING/2) autodoc: failed to import function ‘getEnsembleValues’ from module ‘pyleocli.LipdUtils’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 657, in import_object
    __import__(self.modname)
ImportError: No module named ‘pyleocli’
 [filtered system message]
2018-03-08 15:27:59,703 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "lipd utilities"...>>,)
2018-03-08 15:27:59,724 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 27%] [35mMain[39;49;00m                                                                                              
2018-03-08 15:27:59,737 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>, 'Main')
2018-03-08 15:27:59,755 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Main', ['Main Functions\n==============\n\n\nUsing Pyleoclim with a LiPD file\n"""""""""""""""""""
2018-03-08 15:27:59,774 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:27: input:
.. autofunction:: pyleoclim.openLipd
2018-03-08 15:27:59,788 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import openLipd
2018-03-08 15:27:59,808 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:27:59,822 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:27:59,835 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'openLipd')
2018-03-08 15:27:59,849 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function openLipd at 0x112314f28>
2018-03-08 15:28:00,259 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.openLipd', <function openLipd at 0x112314f28>, {}, ['Read Lipd files into a 
2018-03-08 15:28:00,273 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: openLipd(usr_path='')
   :module: pyleoclim

   Read Lipd files into a dictionary
   
   Sets the dictionary as global variable so that it doesn't have to be provided
   as an argument for every function.
   
   Args:
       usr_path (str): The path to a directory or a single file. (Optional argument)
       
   Returns:
       lipd_dict - a dictionary containing the LiPD library
   
   
2018-03-08 15:28:00,293 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: input:
.. autofunction:: pyleoclim.fetchTs

2018-03-08 15:28:00,308 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import fetchTs
2018-03-08 15:28:00,327 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:00,341 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:00,355 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'fetchTs')
2018-03-08 15:28:00,372 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function fetchTs at 0x115d3c730>
2018-03-08 15:28:00,389 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.fetchTs', <function fetchTs at 0x115d3c730>, {}, ['Extract timeseries dictio
2018-03-08 15:28:00,404 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: fetchTs(lipds=None)
   :module: pyleoclim

   Extract timeseries dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Set the dictionary as a global variable so that it doesn't have to be
   provided as an argument for every function. 
   
   Args:
       lipds (dict): A dictionary of LiPD files obtained through the 
       readLipd function
   
   Returns:
       ts_list - A list of timeseries object
   
   
2018-03-08 15:28:00,547 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:32: input:
.. autofunction:: pyleoclim.mapAllArchive

2018-03-08 15:28:00,561 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapAllArchive
2018-03-08 15:28:00,577 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:00,590 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:00,604 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAllArchive')
2018-03-08 15:28:00,619 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAllArchive at 0x115d3c7b8>
2018-03-08 15:28:00,639 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapAllArchive', <function mapAllArchive at 0x115d3c7b8>, {}, ['Map all the a
2018-03-08 15:28:00,652 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAllArchive(lipds='', markersize=50, background='shadedrelief', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map all the available records loaded into the workspace by archiveType.
   
   Map of all the records into the workspace by archiveType.
       Uses the default color palette. Enter pyleoclim.plot_default for detail.
   
   Args:
       lipds (dict): A list of LiPD files. (Optional)
       markersize (int): The size of the markers. Default is 50
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
       saveFig (bool): Default is to not save the figure
       dir (str): The absolute path of the directory in which to save the
           figure. If not provided, creates a default folder called 'figures'
           in the LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
2018-03-08 15:28:00,669 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:00,684 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:00,698 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:00,711 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:00,734 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:34: input:
.. autofunction:: pyleoclim.mapLipd

2018-03-08 15:28:00,751 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapLipd
2018-03-08 15:28:00,764 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:00,780 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:00,794 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapLipd')
2018-03-08 15:28:00,808 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapLipd at 0x115d3c840>
2018-03-08 15:28:00,822 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapLipd', <function mapLipd at 0x115d3c840>, {}, ['Create a Map for a single
2018-03-08 15:28:00,843 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapLipd(timeseries='', countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='default', figsize=[4, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Create a Map for a single record
   
   Orthographic projection map of a single record.
   
   Args:
       timeseries: a LiPD timeseries object. Will prompt for one if not given
       countries (bool): Draws the country borders. Default is on (True).
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders.
           Default is off (False)
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief
       scale (float): useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): default is 50
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2018-03-08 15:28:00,862 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:00,885 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:00,915 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:00,929 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:00,954 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:00,967 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:00,981 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:00,997 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:36: input:
.. autofunction:: pyleoclim.mapNearRecords

2018-03-08 15:28:01,010 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapNearRecords
2018-03-08 15:28:01,023 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:01,042 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:01,063 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapNearRecords')
2018-03-08 15:28:01,077 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapNearRecords at 0x115d3c8c8>
2018-03-08 15:28:01,091 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapNearRecords', <function mapNearRecords at 0x115d3c8c8>, {}, ['Map the nea
2018-03-08 15:28:01,105 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapNearRecords(timeseries='', lipds='', n=5, radius=None, sameArchive=False, projection='ortho', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=200, markersize_adjust=True, marker_r='ko', marker_c='default', cmap='Reds', colorbar=True, location='right', label='Distance in km', figsize=[4, 4], ax=None, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map the nearest records from the record of interest
   
   Args:
       timeseries (dict): A timeseries object. If none given, will prompt for one
       lipds (list): A list of LiPD files. (Optional)
       n (int): the number of records to match
       radius (float): The distance (in km) to search for nearby records.
           Default is to search the entire globe
       sameArchive (bool): Returns only records with the same archiveType.
           Default is not to do so.
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): the size of the marker
       markersize_adjust (bool): If True, will proportionaly adjust the size of
           the marker according to distance.
       marker_r (list or str): The color and shape of the marker for the
           reference record.
       marker_c (list or str): The color and shape of the marker for the other
           records. Default is to use the color palette by archiveType. If set
           to None then the color of the marker will represent the distance from
           the reference records.
       cmap (str): The colormap to use to represent the distance from the 
           reference record if no marker is selected.
       colorbar (bool): Create a colorbar. Default is True
       location (str): Location of the colorbar
       label (str): Label for the colorbar.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
       
   Returns:
       ax - The figure       
   
   
2018-03-08 15:28:01,120 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:01,134 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,182 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,199 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:01,215 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,230 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,248 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:01,264 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,280 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,295 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:01,309 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,325 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:40: input:
.. autofunction:: pyleoclim.plotTs

2018-03-08 15:28:01,339 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotTs
2018-03-08 15:28:01,359 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:01,380 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:01,396 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotTs')
2018-03-08 15:28:01,409 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotTs at 0x115d3cc80>
2018-03-08 15:28:01,424 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.plotTs', <function plotTs at 0x115d3cc80>, {}, ['Plot a single time series.'
2018-03-08 15:28:01,439 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotTs(timeseries='', x_axis='', markersize=50, marker='default', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Plot a single time series.
   
   Args:
       A timeseries: By default, will prompt the user for one.
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       markersize (int): default is 50.
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure.
   
   
2018-03-08 15:28:01,461 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:01,476 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,490 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:01,504 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,518 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:01,532 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,550 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: input:
.. autofunction:: pyleoclim.plotEns

2018-03-08 15:28:01,570 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotEns
2018-03-08 15:28:01,583 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:01,597 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:01,610 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotEns')
2018-03-08 15:28:01,623 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'plotEns' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'plotEns'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns

2018-03-08 15:28:01,637 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: (WARNING/2) autodoc: failed to import function 'plotEns' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'plotEns'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns
2018-03-08 15:28:01,653 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:44: input:
.. autofunction:: pyleoclim.histTs

2018-03-08 15:28:01,685 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import histTs
2018-03-08 15:28:01,701 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:01,716 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:01,729 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'histTs')
2018-03-08 15:28:01,743 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function histTs at 0x115d3cd90>
2018-03-08 15:28:01,765 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.histTs', <function histTs at 0x115d3cd90>, {}, ['Plot a univariate distribut
2018-03-08 15:28:01,782 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: histTs(timeseries='', bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'Rug'}, fit_kws={'label': 'Fit'}, color='default', vertical=False, norm_hist=True, figsize=[5, 5], saveFig=False, format='eps', dir='')
   :module: pyleoclim

   Plot a univariate distribution of the PaleoData values
   
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the
   seaborn kdeplot() and rugplot() functions. It can also fit
   scipy.stats distributions and plot the estimated PDF over the data.
   
   Args:
       timeseries: A timeseries. By default, will prompt the user for one.
       bins (int): Specification of hist bins following matplotlib(hist),
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning
           a tuple that can be passed to a pdf method of positional
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in. Default is to use the default paletter for each
           archive type.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or
           fitted density is plotted
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns
       fig - The figure
   
   
2018-03-08 15:28:01,799 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:01,813 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,827 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:01,841 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,875 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,894 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:01,911 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,928 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:01,944 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:01,964 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:52: input:
.. autofunction:: pyleoclim.summaryTs

2018-03-08 15:28:01,981 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import summaryTs
2018-03-08 15:28:01,998 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:02,015 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:02,031 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'summaryTs')
2018-03-08 15:28:02,046 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function summaryTs at 0x115d3ce18>
2018-03-08 15:28:02,062 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.summaryTs', <function summaryTs at 0x115d3ce18>, {}, ['Basic summary plot', 
2018-03-08 15:28:02,082 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: summaryTs(timeseries='', x_axis='', saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Basic summary plot
   
   Plots the following information: the time series, a histogram of
   the PaleoData_values, location map, spectral density using the wwz 
   method, and metadata about the record.
   
   Args:
       timeseries: a timeseries object. By default, will prompt for one
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2018-03-08 15:28:02,099 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:02,114 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:02,128 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:02,144 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:02,168 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:57: input:
.. autofunction:: pyleoclim.statsTs

2018-03-08 15:28:02,189 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import statsTs
2018-03-08 15:28:02,211 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:02,224 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:02,238 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'statsTs')
2018-03-08 15:28:02,252 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function statsTs at 0x115d3cea0>
2018-03-08 15:28:02,271 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.statsTs', <function statsTs at 0x115d3cea0>, {}, ['Calculate simple statisti
2018-03-08 15:28:02,287 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: statsTs(timeseries='')
   :module: pyleoclim

   Calculate simple statistics of a timeseries
   
   Args:
       timeseries: sytem will prompt for one if not given
   
   Returns:
       the mean, median, min, max, standard deviation and the
       inter-quartile range (IQR) of a timeseries.
   
   Examples:
       >>> mean, median, min_, max_, std, IQR = pyleo.statsTs(timeseries)
   
   
2018-03-08 15:28:02,306 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:59: input:
.. autofunction:: pyleoclim.corrSigTs

2018-03-08 15:28:02,320 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import corrSigTs
2018-03-08 15:28:02,333 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:02,352 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:02,381 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrSigTs')
2018-03-08 15:28:02,401 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrSigTs at 0x115d3cf28>
2018-03-08 15:28:02,418 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.corrSigTs', <function corrSigTs at 0x115d3cf28>, {}, ['Estimates the signifi
2018-03-08 15:28:02,432 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrSigTs(timeseries1='', timeseries2='', x_axis='', interp_step='', start='', end='', nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim

   Estimates the significance of correlations between non IID timeseries.
   
   Function written by. F. Zhu.
   
   Args:
       timeseries1, timeseries2: timeseries object. Default is blank.
       x-axis (str): The representation against which to express the
           paleo-data. Options are "age", "year", and "depth".
           Default is to let the system choose if only one available
           or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start time/age/depth. Default is the maximum of
           the minima of the two timeseries
       end (float): End time/age/depth. Default is the minimum of the
           maxima of the two timeseries
       nsim (int): the number of simulations. Default is 1000
       method (str): method use to estimate the correlation and significance.
           Available methods include:
               - 'ttest': T-test where the degrees of freedom are corrected for
               the effect of serial correlation 
   
               - 'isopersistant': AR(1) modeling of the two timeseries 
   
               - 'isospectral' (default): phase randomization of original
               inputs.
           The T-test is parametric test, hence cheap but usually wrong
           except in idyllic circumstances.
           The others are non-parametric, but their computational
           requirements scales with nsim.
       alpha (float): significance level for critical value estimation. Default is 0.05
   
   Returns:
       r (float) - correlation between the two timeseries 
   
       sig (bool) -  Returns True if significant, False otherwise 
   
       p (real) - the p-value
   
   
2018-03-08 15:28:02,448 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:02,462 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:02,481 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:02,509 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:02,530 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:02,546 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:02,568 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:28:02,613 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:28:02,633 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:02,648 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:02,663 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:65: input:
.. autofunction:: pyleoclim.binTs

2018-03-08 15:28:02,680 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import binTs
2018-03-08 15:28:02,699 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:02,713 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:02,726 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'binTs')
2018-03-08 15:28:02,740 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function binTs at 0x115d3e048>
2018-03-08 15:28:02,754 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.binTs', <function binTs at 0x115d3e048>, {}, ['Bin the paleoData values of t
2018-03-08 15:28:02,767 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: binTs(timeseries='', x_axis='', bin_size='', start='', end='')
   :module: pyleoclim

   Bin the paleoData values of the timeseries
   
   Args:
       timeseries. By default, will prompt the user for one.
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system  choose if only one available or prompt the user.
       bin_size (float): the size of the bins to be used. By default,
           will prompt for one
       start (float): Start time/age/depth. Default is the minimum
       end (float): End time/age/depth. Default is the maximum
   
   Returns:
       binned_values- the binned output,
   
       bins-  the bins (centered on the median, i.e. the 100-200 bin is 150),
   
       n-  number of data points in each bin,
   
       error- the standard error on the mean in each bin
   
   
   
2018-03-08 15:28:02,785 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:02,805 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:02,819 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:02,837 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:67: input:
.. autofunction:: pyleoclim.interpTs

2018-03-08 15:28:02,850 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import interpTs
2018-03-08 15:28:02,865 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:02,885 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:02,908 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interpTs')
2018-03-08 15:28:02,933 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interpTs at 0x115d3e0d0>
2018-03-08 15:28:02,956 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.interpTs', <function interpTs at 0x115d3e0d0>, {}, ['Simple linear interpola
2018-03-08 15:28:02,970 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interpTs(timeseries='', x_axis='', interp_step='', start='', end='')
   :module: pyleoclim

   Simple linear interpolation
   
   Simple linear interpolation of the data using the numpy.interp method
   
   Args:
       timeseries. Default is blank, will prompt for it
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start year/age/depth. Default is the minimum
       end (float): End year/age/depth. Default is the maximum
   
   Returns:
       interp_age - the interpolated age/year/depth according to the end/start
       and time step, 
   
       interp_values - the interpolated values
   
   
2018-03-08 15:28:02,987 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:03,007 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:03,023 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:69: input:
.. autofunction:: pyleoclim.standardizeTs

2018-03-08 15:28:03,038 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import standardizeTs
2018-03-08 15:28:03,052 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:03,065 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:03,079 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardizeTs')
2018-03-08 15:28:03,098 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardizeTs at 0x115d3e158>
2018-03-08 15:28:03,115 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.standardizeTs', <function standardizeTs at 0x115d3e158>, {}, ['Centers and n
2018-03-08 15:28:03,130 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardizeTs(timeseries='', scale=1, ddof=0, eps=0.001)
   :module: pyleoclim

   Centers and normalizes the paleoData values of a  given time series.
   
   Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       - z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed 
   
       - mu (real): the mean of the original time series, E[X] 
   
       - sig (real): the standard deviation of the original time series, std[X] 
   
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2018-03-08 15:28:03,150 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:71: input:
.. autofunction:: pyleoclim.segmentTs

2018-03-08 15:28:03,164 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import segmentTs
2018-03-08 15:28:03,177 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:03,192 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:03,213 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'segmentTs')
2018-03-08 15:28:03,228 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function segmentTs at 0x115d3e1e0>
2018-03-08 15:28:03,243 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.segmentTs', <function segmentTs at 0x115d3e1e0>, {}, ['Divides a time series
2018-03-08 15:28:03,257 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: segmentTs(timeseries='', factor=2)
   :module: pyleoclim

   Divides a time series into several segments using a gap detection algorithm
   
   Gap detection rule: If the time interval between some two data points is
   larger than some factor times the mean resolution of the timeseries, then
   a brak point is applied and the timseries is divided. 
   
   Args:
       timeseries: a LiPD timeseries object
       factor (float): factor to adjust the threshold. threshold = factor*dt_mean.
           Default is 2.
   
   Returns:
       seg_y (list) - a list of several segments with potentially different length
       seg_t (list) - A list of the time values for each y segment. 
       n_segs (int) - the number of segments
       
   
   
2018-03-08 15:28:03,273 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:03,289 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:75: input:
.. autofunction:: pyleoclim.wwzTs

2018-03-08 15:28:03,316 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import wwzTs
2018-03-08 15:28:03,331 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:03,344 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:03,358 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwzTs')
2018-03-08 15:28:03,383 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwzTs at 0x115d3e268>
2018-03-08 15:28:03,415 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.wwzTs', <function wwzTs at 0x115d3e268>, {}, ['Weigthed wavelet Z-transform 
2018-03-08 15:28:03,435 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwzTs(timeseries='', lim=None, wwz=False, psd=True, wwz_default=True, psd_default=True, wwaplot_default=True, psdplot_default=True, fig=True, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Weigthed wavelet Z-transform analysis
   
   Wavelet analysis for unevenly spaced data adapted from Foster et al. (1996)
   
   Args:
       timeseries (dict): A LiPD timeseries object (Optional, will prompt for one.)
       lim (list): Truncate the timeseries between min/max time (e.g., [0,10000])
       wwz (bool): If True, will perform wavelet analysis
       psd (bool): If True, will inform the power spectral density of the timeseries
       wwz_default: If True, will use the following default parameters:
           
           wwz_default = {'tau':None,
                          'freqs':None,
                          'c':1/(8*np.pi**2),
                          'Neff':3,
                          'Neff_coi':3,
                          'nMC':200,
                          'nproc':8,
                          'detrend':'no',
                          'params' : ["default",4,0,1],
                          'gaussianize': False,
                          'standardize':True,
                          'method':'Kirchner_f2py',
                          'bc_mode':'reflect',
                          'reflect_type':'odd',
                          'len_bd':0}
               
           Modify the values for specific keys to change the default behavior.
               
       psd_default: If True, will use the following default parameters:
           
           psd_default = {'tau':None,
                      'freqs': None,
                      'c':1e-3,
                      'nproc':8,
                      'nMC':200,
                      'detrend':'no',
                      'params' : ["default",4,0,1],
                      'gaussianize': False,
                      'standardize':True,
                      'Neff':3,
                      'anti_alias':False,
                      'avgs':1,
                      'method':'Kirchner_f2py',
                      }
           
           Modify the values for specific keys to change the default behavior.
           
       wwaplot_default: If True, will use the following default parameters:
           
           wwaplot_default={'AR1_q':AR1_q,
                                'coi':coi,
                                'levels':None,
                                'tick_range':None,
                                'yticks':None,
                                'yticks_label': None,
                                'ylim':None,
                                'xticks':None,
                                'xlabels':None,
                                'figsize':[20,8],
                                'clr_map':'OrRd',
                                'cbar_drawedges':False,
                                'cone_alpha':0.5,
                                'plot_signif':True,
                                'signif_style':'contour',
                                'plot_cone':True,
                                'title':None,
                                'ax':None,
                                'xlabel': label.upper()[0]+label[1:]+'('+s+')',
                                'ylabel': 'Period ('+ageunits+')',
                                'cbar_orientation':'vertical',
                                'cbar_pad':0.05,
                                'cbar_frac':0.15,
                                'cbar_labelsize':None}
           
           Modify the values for specific keys to change the default behavior.
       psdplot_default: If True, will use the following default parameters:
           
           psdplot_default={'lmstyle':'-',
                                'linewidth':None,
                                'color': sns.xkcd_rgb["denim blue"],
                                'ar1_lmstyle':'-',
                                'ar1_linewidth':1,
                                'period_ticks':None,
                                'period_tickslabel':None,
                                'psd_lim':None,
                                'period_lim':None,
                                'figsize':[20,8],
                                'label':'PSD',
                                'plot_ar1':True,
                                'psd_ar1_q95':psd_ar1_q95,
                                'title': None,
                                'psd_ar1_color':sns.xkcd_rgb["pale red"],
                                'ax':None,
                                'vertical':False,
                                'plot_gridlines':True,
                                'period_label':'Period ('+ageunits+')',
                                'psd_label':'Spectral Density',
                                'zorder' : None}    
           
           Modify the values for specific keys to change the default behavior.
           
       fig (bool): If True, plots the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       
   Returns:
       dict_out (dict): A dictionary of outputs. 
           
           For wwz: 
           
           - wwa (array): The weights wavelet amplitude 
       
           - AR1_q (array): AR1 simulations 
       
           - coi (array): cone of influence 
       
           - freqs (array): vector for frequencies 
       
           - tau (array): the evenly-spaced time points, namely the time 
           shift for wavelet analysis. 
       
           - Neffs (array): The matrix of effective number of points in the
           time-scale coordinates.
       
           - coeff (array): The wavelet transform coefficients
       
           For psd: 
           
           - psd (array): power spectral density 
       
           - freqs (array): vector of frequency 
       
           - psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes 
       
       fig: The figure
        
       References:
           Foster, G. (1996). Wavelets for period analysis of unevenly 
           sampled time series. The Astronomical Journal, 112(4), 1709-1729.
       
       Examples:
           To run both wwz and psd: 
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(wwz=True)
           
           Note: This will return a single figure with wwa and psd 
   
           
           To change a default behavior:
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(psd_default = {'nMC':1000}) 
          
   
2018-03-08 15:28:03,456 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:03,471 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:03,485 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:03,508 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:28:03,526 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:28:03,546 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:80: input:
.. autofunction:: pyleoclim.Bchron

2018-03-08 15:28:03,560 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import Bchron
2018-03-08 15:28:03,586 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:03,604 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:03,622 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'Bchron')
2018-03-08 15:28:03,636 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function Bchron at 0x115d3e2f0>
2018-03-08 15:28:03,651 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Bchron', <function Bchron at 0x115d3e2f0>, {}, ['Runs Bchron and plot if ask
2018-03-08 15:28:03,665 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: Bchron(lipd, modelNum=None, objectName=None, rejectAges=None, calCurves=None, reservoirAgeCorr=None, predictPositions='paleo', positionsThickness=None, outlierProbs=None, iterations=1000, burn=2000, thin=8, extractDate=-68, maxExtrap=500, thetaMhSd=0.5, muMhSd=0.1, psiMhSd=0.1, ageScaleVal=1000, positionScaleVal=100, saveLipd=True, plot=True, figsize=[4, 8], flipCoor=False, xlabel=None, ylabel=None, xlim=None, ylim=None, violinColor='#8B008B', medianLineColor='black', medianLineWidth=2.0, CIFillColor='Silver', samplePaths=True, samplePathNumber=10, alpha=0.5, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Runs Bchron and plot if asked 
   
   Fits a non-parametric chronology model to age/position data according to
   the Compound Poisson-Gamma model defined by Haslett and Parnell (2008). 
   This version used a slightly modified Markov chain Monte-Carlo fitting
   algorithm which aims to converge quicker and requires fewer iterations.
   It also a slightly modified procedure for identifying outliers.
   
   The Bchronology functions fits a compounf Poisson-Gamma distribution to the
   incrememnts between the dated levels. This involves a stochastic linear
   interpolation step where the age gaps are Gamma distributed, and the position
   gaps are Exponential. Radiocarbon and non-radiocarbon dates (including outliers)
   are updated within the fucntion also by MCMC.
   
   This function also allows to save the ensemble, distributions, and probability
   tables as well as the parameters with which the model was run into the LiPD file.
   
   Finally allows to make a plot.
   
   Args:
       lipd (dict): A dictionary containing the entry of a LiPD file. Can be
           obtained from lipd.readLipd() or pyleoclim.openLipd(). Please note
           that the Bchron function currently only allows for a single LiPD file
           (i.e., not the entire directory).
       modelNum (int): The model number in which to place the Bchron output. 
           If unknown, the function will try to make a guess and/or prompt
           based on the number of already available models.
       objectName (str): The name of the chron object in which to store the new
           model (e.g. "chron0")
       rejectAges (vector): A vector of 1/0 where 1 include the dates to be rejected. 
           Default it None.
       calCurves (list): (Optional) A vector of values containing either 'intcal13',
           'marine13', 'shcal13', or 'normal'. If none is provided, will
           prompt the user. Should be either of length =1 if using the same
           calibration for each age or the same length as the vector of ages.
       reservoirAgeCorr (array): (Optional) A list (matrix) of two floats that correspond to the
           DeltaR and DeltaR uncertainty. If already added to the ages and
           ages standard deviation, then enter [0,0] to bypass the prompt.
           Will only be applied if CalCurves is set to 'marine13'. Otherwise,
           leave to none.
       predictPositions (array): (Optional) a vector of positions 
           (e.g. depths) at which predicted age values are required. 
           Defaults to a sequence of length 100 from the top position to the
           bottom position.
       positionsThickness (array): (Optional) Thickness values for each of the positions.
           The thickness values should be the full thickness value of the
           slice. By default set to zero.
       outlierProbs (array): (Optional) A vector of prior outlier probabilities,
           one for each age. Defaults to 0.01
       iterations (int): (Optional) The number of iterations to start the procedure. 
           Default and minimum should be 10000.
       burn (int): (Optional) The number of starting iterations to discard.
           Default is 200
       thin (int): (Optional) The step size for every iteration to keep beyond
           the burnin. Default is 8.
       extractDate (float): (Optional) The top age of the core. Used for
           extrapolation purposes so that no extrapolated ages go beyond the
           top age of the core. Defaults to the current year.
       maxExtrap (int): (Optional) The maximum number of extrapolations to
           perform before giving up and setting the predicted ages to NA. 
           Useful for when large amounts of extrapolation are required, i.e.
           some of the predictPositions are a long way from the dated
           positions. Defaults to 500.
       thetaMhSd (float):  (Optional)  The Metropolis-Hastings standard
           deviation for the age parameters. Defaults to 0.5.
       muMhSd (float): (Optional)  The Metropolis-Hastings standard deviation
           for the compound Poisson-Gamma Scale. Defaults to 0.1
       psiMhSd (float): (Optional) The Metropolis-Hastings standard deviation 
           for the Compound Poisson-Gamma Scale.
       ageScaleVal (int): (Optional) A scale value for the ages. 
           Bchronology works best when the ages are scaled to be 
           approximately between 0 and 100.
           The default value is thus 1000 for ages given in years.
       positionScaleVal (int):  (Optional) A scale value for the positions. 
           Bchronology works best when the positions are scaled to be 
           approximately between 0 and 100. The default value is thus
           100 for positions given in cm.
       saveLipd (bool): If True, saves the ensemble, distribution, and probability
           tables along with the parameters used to run the model in the LiPD
           file.
       plot (bool): If True, makes a plot for the chronology
       figsize (list): The figure size. Default is [4,8]
       flipCoor (bool): If True, plots depth on the y-axis.
       xlabel (str): The label for the x-axis
       ylabel (str): The label for the y-axis
       xlim (list): Limits for the x-axis. Default corresponds to the min/max
           of the depth vector.
       ylim (list): Limits for the y-axis. Default set by matplotlib
       violinColor (str): The color for the violins. Default is purple
       medianLineColor (str): The color for the median line. Default is black.
       medianLineWidth (float): The width for the median line
       CIFillColor (str): Fill color in between the 95% confidence interval.
           Default is silver.
       samplePaths (bool): If True, draws sample paths from the distribution.
           Use the same color as the violins. 
       samplePathNumber (int): The number of sample paths to draw. Default is 10.
           Note: samplePaths need to be set to True. 
       alpha (float): The violins' transparency. Number between 0 and 1
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       depth - the predicted positions (either same as the user or the default) 
   
       chron -  a numpy array of possible chronologies in each column.
           The number of rows is the same as the length of depth
       ageDist - the distribution of ages around each dates.
       fig - the figure        
   
   Warnings:
       This function requires R and the Bchron package and all its
           dependencies to be installed on the same machine.
           
   Reference:
       - Haslett, J., and Parnell, A. C. (2008). A simple monotone 
           process with application to radiocarbon-dated depth 
           chronologies. Journal of the Royal Statistical Society, 
           Series C, 57, 399-418. DOI:10.1111/j.1467-9876.2008.00623.x
       - Parnell, A. C., Haslett, J., Allen, J. R. M., Buck, C. E., 
           and Huntley, B. (2008). A flexible approach to assessing 
           synchroneity of past events using Bayesian reconstructions
           of sedimentation history. Quaternary Science Reviews, 
           27(19-20), 1872-1885. DOI:10.1016/j.quascirev.2008.07.009        
   
2018-03-08 15:28:03,686 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:03,700 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:03,719 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:03,733 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:03,748 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:03,762 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:03,777 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:03,799 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:03,840 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:03,936 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:03,956 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:03,969 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:03,983 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:03,996 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,012 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,031 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,045 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:19: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,058 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,072 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,086 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:26: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,101 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,127 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:9: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,145 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:22: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,162 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,176 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:27: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,189 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:32: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,202 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:34: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,218 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:35: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,236 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:43: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,252 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:50: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,267 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:52: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,281 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,295 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,309 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,327 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,345 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:15: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,358 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,383 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: (WARNING/2) autodoc: failed to import function ‘plotEns’ from module ‘pyleoclim’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim’ has no attribute ‘plotEns’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns
 [filtered system message]
2018-03-08 15:28:04,398 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,412 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,427 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,446 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,460 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,473 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,494 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,508 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:31: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,521 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:33: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,538 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,554 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,567 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:14: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,582 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,595 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,609 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,623 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:13: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,640 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,658 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:16: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,672 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:18: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,686 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:20: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,700 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:25: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,714 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:26: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,728 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:30: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,746 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,762 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,776 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:10: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,793 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,809 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,825 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.segmentTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,847 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:77: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,863 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:106: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,879 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:108: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,893 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:126: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,906 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:129: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,920 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:81: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,934 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:87: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,955 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:88: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,968 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:93: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:04,982 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:94: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:04,995 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:98: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:05,009 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:101: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:05,022 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:103: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:05,035 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:112: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:05,057 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "main functions"...>>,)
2018-03-08 15:28:05,092 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 36%] [35mMap[39;49;00m                                                                                               
2018-03-08 15:28:05,106 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>, 'Map')
2018-03-08 15:28:05,123 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Map', ['Mapping Functions\n=================\n\nThis module uses the Basemap package for mapping. 
2018-03-08 15:28:05,137 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:6: input:
.. autofunction:: pyleoclim.Map.mapAll

2018-03-08 15:28:05,158 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapAll
2018-03-08 15:28:05,172 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2018-03-08 15:28:05,186 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2018-03-08 15:28:05,199 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAll')
2018-03-08 15:28:05,212 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAll at 0x103aec378>
2018-03-08 15:28:05,262 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapAll', <function mapAll at 0x103aec378>, {}, ['Map the location of all
2018-03-08 15:28:05,279 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAll(lat, lon, criteria, projection='robin', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=False, counties=False, rivers=False, states=False, figsize=[10, 4], ax=None, background='none', scale=0.5, palette='', markersize=50)
   :module: pyleoclim.Map

   Map the location of all lat/lon according to some criteria 
   
   Map the location of all lat/lon according to some criteria. The choice of 
   plotting color/marker is passed through palette according to unique 
   criteria (e.g., record name, archive type, proxy observation type).
   
   Args:
       lat (list): a list of latitude.
       lon (list): a list of longitude.
       criteria (list): a list of criteria for plotting purposes. For instance,
           a map by the types of archive present in the dataset or proxy
           observations.
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       palette (dict): A dictionary of plotting color/marker by criteria. The
           keys should correspond to ***unique*** criteria with a list of 
           associated values. The list should be in the format 
           ['color', 'marker'].
       markersize (int): The size of the marker.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
       
   Returns:
       The figure       
   
2018-03-08 15:28:05,294 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:05,311 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:05,329 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:05,347 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:05,398 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:05,423 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:05,443 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Map.rst:8: input:
.. autofunction:: pyleoclim.Map.mapOne
2018-03-08 15:28:05,461 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Map import mapOne
2018-03-08 15:28:05,478 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Map
2018-03-08 15:28:05,492 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Map' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Map.py'>
2018-03-08 15:28:05,505 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapOne')
2018-03-08 15:28:05,518 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapOne at 0x112314488>
2018-03-08 15:28:05,532 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Map.mapOne', <function mapOne at 0x112314488>, {}, ['Map one location on the
2018-03-08 15:28:05,547 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapOne(lat, lon, projection='ortho', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='ro', figsize=[4, 4], ax=None)
   :module: pyleoclim.Map

   Map one location on the globe
   
   Args:
       lat (float): a float number representing latitude
       lon (float): a float number representing longitude
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): The size of the marker.
       marker (str or list): color and type of marker. 
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot) 
   
   
2018-03-08 15:28:05,568 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:05,583 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:05,598 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:05,612 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:05,626 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:05,640 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:05,668 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:05,682 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:13: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:05,696 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:05,710 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:28: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:05,724 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:29: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:05,737 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapAll:38: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:05,751 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:7: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:05,774 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:05,789 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:05,803 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:21: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:05,816 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:22: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:05,830 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Map.py:docstring of pyleoclim.Map.mapOne:27: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:05,846 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "mapping functions"...>>,)
2018-03-08 15:28:05,877 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 45%] [35mPlot[39;49;00m                                                                                              
2018-03-08 15:28:05,890 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>, 'Plot')
2018-03-08 15:28:05,906 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Plot', ['Plotting Functions\n==================\n\n.. autofunction:: pyleoclim.Plot.plot\n\n.. aut
2018-03-08 15:28:05,922 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:4: input:
.. autofunction:: pyleoclim.Plot.plot

2018-03-08 15:28:05,935 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot
2018-03-08 15:28:05,949 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2018-03-08 15:28:05,967 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2018-03-08 15:28:05,983 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot')
2018-03-08 15:28:05,997 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot at 0x112320268>
2018-03-08 15:28:06,032 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot', <function plot at 0x112320268>, {}, ['Make a 2-D plot', '', 'Arg
2018-03-08 15:28:06,047 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot(x, y, markersize=50, marker='ro', x_label='', y_label='', title='', figsize=[10, 4], ax=None)
   :module: pyleoclim.Plot

   Make a 2-D plot
   
   Args:
       x (numpy array): a 1xn numpy array of values for the x-axis
       y (numpy array): a 1xn numpy array for the y-axis
       markersize (int): the size of the marker
       marker (string or list): color and shape of the marker
       x_axis_label (str): the label for the x-axis
       y_axis_label (str): the label for the y-axis
       title (str): the title for the plot
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
           
   Return:
       The figure       
   
   
2018-03-08 15:28:06,068 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: input:
.. autofunction:: pyleoclim.Pot.plotEns

2018-03-08 15:28:06,085 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Pot import plotEns
2018-03-08 15:28:06,099 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Pot
2018-03-08 15:28:06,112 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'plotEns' from module 'pyleoclim.Pot'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleoclim.Pot'

2018-03-08 15:28:06,127 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: (WARNING/2) autodoc: failed to import function 'plotEns' from module 'pyleoclim.Pot'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleoclim.Pot'
2018-03-08 15:28:06,142 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:8: input:
.. autofunction:: pyleoclim.Plot.plot_hist
2018-03-08 15:28:06,160 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot_hist
2018-03-08 15:28:06,191 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2018-03-08 15:28:06,208 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2018-03-08 15:28:06,222 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_hist')
2018-03-08 15:28:06,236 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_hist at 0x112320378>
2018-03-08 15:28:06,250 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot_hist', <function plot_hist at 0x112320378>, {}, ['Plot a univariat
2018-03-08 15:28:06,264 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_hist(y, bins=None, hist=True, label='', kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'rug'}, fit_kws={'label': 'fit'}, color='0.7', vertical=False, norm_hist=True, figsize=[5, 5], ax=None)
   :module: pyleoclim.Plot

   Plot a univariate distribution of the PaleoData values
           
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the 
   seaborn kdeplot() and rugplot() functions. It can also fit 
   scipy.stats distributions and plot the estimated PDF over the data.
       
   Args:
       y (array): nx1 numpy array. No missing values allowed 
       bins (int): Specification of hist bins following matplotlib(hist), 
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram 
       label (str): The label for the axis
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning 
           a tuple that can be passed to a pdf method of positional 
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for 
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or 
           fitted density is plotted
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
   
   Returns
      fig - The figure
   
2018-03-08 15:28:06,287 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:06,301 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:06,316 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:06,330 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:06,345 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:06,362 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:06,398 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:06,436 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: (WARNING/2) autodoc: failed to import function ‘plotEns’ from module ‘pyleoclim.Pot’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 657, in import_object
    __import__(self.modname)
ImportError: No module named ‘pyleoclim.Pot’
 [filtered system message]
2018-03-08 15:28:06,450 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:06,463 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:06,483 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:17: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:06,498 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:19: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:06,512 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:06,525 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:06,539 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:06,553 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "plotting functions"...>>,)
2018-03-08 15:28:06,573 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 54%] [35mRBchron[39;49;00m                                                                                           
2018-03-08 15:28:06,592 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>, 'RBchron')
2018-03-08 15:28:06,610 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('RBchron', ['RBchron\n=======\n\nThis module helps in the preparation of a Bchron run.\n\nWhen usin
2018-03-08 15:28:06,626 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:10: input:
.. autofunction:: pyleoclim.RBchron.chooseCalCurves

2018-03-08 15:28:06,640 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import chooseCalCurves
2018-03-08 15:28:06,654 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:28:06,667 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:28:06,694 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'chooseCalCurves')
2018-03-08 15:28:06,708 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function chooseCalCurves at 0x112d5cae8>
2018-03-08 15:28:06,810 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.chooseCalCurves', <function chooseCalCurves at 0x112d5cae8>, {}, ['P
2018-03-08 15:28:06,824 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: chooseCalCurves()
   :module: pyleoclim.RBchron

   Prompt for a calibration curve if not given by the user.
   
   Prompt the user for the name of a calibration curve used to run the Bchron 
   software package. The user can enter either enter only one name that will
   be applied to each age or a list of names of different ages. To enter a list, 
   separate each name with a comma. No quotation marks needed. 
   
   Returns:
       A list of calibration curves to be applied  
   
   
2018-03-08 15:28:06,846 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: input:
.. autofunction:: pyleoclim.RBchron.verufyCalCurves

2018-03-08 15:28:06,868 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import verufyCalCurves
2018-03-08 15:28:06,903 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:28:06,918 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:28:06,936 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'verufyCalCurves')
2018-03-08 15:28:06,956 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'verufyCalCurves' from module 'pyleoclim.RBchron'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.RBchron' has no attribute 'verufyCalCurves'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves

2018-03-08 15:28:06,973 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: (WARNING/2) autodoc: failed to import function 'verufyCalCurves' from module 'pyleoclim.RBchron'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.RBchron' has no attribute 'verufyCalCurves'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves
2018-03-08 15:28:06,991 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:14: input:
.. autofunction:: pyleoclim.RBchron.reservoirAgeCorrection

2018-03-08 15:28:07,006 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import reservoirAgeCorrection
2018-03-08 15:28:07,020 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:28:07,034 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:28:07,048 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'reservoirAgeCorrection')
2018-03-08 15:28:07,063 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function reservoirAgeCorrection at 0x115d3c598>
2018-03-08 15:28:07,077 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.reservoirAgeCorrection', <function reservoirAgeCorrection at 0x115d3
2018-03-08 15:28:07,103 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: reservoirAgeCorrection()
   :module: pyleoclim.RBchron

   Estimate reservoir age correction
   
   Assists in estimating the reservoir age correction for marine records.
   If unknown, will direct the user to copy and paste the table available
   on the 14Chrono Marine Reservoir database: http://intcal.qub.ac.uk/marine/
   
   Returns:
       ageCorr -  the DeltaR for the site. 
   
       ageCorrStd - The error on DeltaR estimated as the standard error on the 
       mean if using the 14Chrono Marine Reservoir database.
   
   
2018-03-08 15:28:07,120 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:16: input:
.. autofunction:: pyleoclim.RBchron.runBchron

2018-03-08 15:28:07,134 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import runBchron
2018-03-08 15:28:07,147 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:28:07,161 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:28:07,175 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'runBchron')
2018-03-08 15:28:07,195 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function runBchron at 0x115d3c620>
2018-03-08 15:28:07,210 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.runBchron', <function runBchron at 0x115d3c620>, {}, ['Age model for
2018-03-08 15:28:07,225 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: runBchron(ages, agesStd, positions, rejectAges=None, positionsThickness=None, calCurves=None, reservoirAgeCorr=None, outlierProbs=None, predictPositions=None, iterations=10000, burn=2000, thin=8, extractDate=-68, maxExtrap=500, thetaMhSd=0.5, muMhSd=0.1, psiMhSd=0.1, ageScaleVal=1000, positionScaleVal=100)
   :module: pyleoclim.RBchron

   Age model for Tie-Point chronologies
   
   Fits a non-parametric chronology model to age/position data according to
   the Compound Poisson-Gamma model defined by Haslett and Parnell (2008). 
   This version used a slightly modified Markov chain Monte-Carlo fitting
   algorithm which aims to converge quicker and requires fewer iterations.
   It also a slightly modified procedure for identifying outliers.
   
   The Bchronology functions fits a compounf Poisson-Gamma distribution to the
   incrememnts between the dated levels. This involves a stochastic linear
   interpolation step where the age gaps are Gamma distributed, and the position
   gaps are Exponential. Radiocarbon and non-radiocarbon dates (including outliers)
   are updated within the fucntion also by MCMC.
   
   Args:
       ages (array): A vector of ages (most likely 14C)
       ageSds (array): A vector of 1-sigma values for the ages given above
       positions (array): Position values (e.g. depths) for each age
       rejectAges (vector): A vector of 1/0 where 1 include the dates to be rejected. 
           Default it None.
       positionsThickness (array): (Optional) Thickness values for each of the positions.
           The thickness values should be the full thickness value of the
           slice. By default set to zero.
       calCurves (list): (Optional) A vector of values containing either 'intcal13',
           'marine13', 'shcal13', or 'normal'. If none is provided, will
           prompt the user. Should be either of length =1 if using the same
           calibration for each age or the same length as the vector of ages.
       reservoirAgeCorr (array): (Optional) A list (matrix) of two floats that correspond to the
           DeltaR and DeltaR uncertainty. If already added to the ages and
           ages standard deviation, then enter [0,0] to bypass the prompt.
           Will only be applied if CalCurves is set to 'marine13'. Otherwise,
           leave to none.
       outlierProbs (array): (Optional) A vector of prior outlier probabilities,
           one for each age. Defaults to 0.01
       predictPositions (array): (Optional) a vector of positions 
           (e.g. depths) at which predicted age values are required. 
           Defaults to a sequence of length 100 from the top position to the
           bottom position.
       iterations (int): (Optional) The number of iterations to start the procedure. 
           Default and minimum should be 10000.
       burn (int): (Optional) The number of starting iterations to discard.
           Default is 200
       thin (int): (Optional) The step size for every iteration to keep beyond
           the burnin. Default is 8.
       extractDate (float): (Optional) The top age of the core. Used for
           extrapolation purposes so that no extrapolated ages go beyond the
           top age of the core. Defaults to the current year.
       maxExtrap (int): (Optional) The maximum number of extrapolations to
           perform before giving up and setting the predicted ages to NA. 
           Useful for when large amounts of extrapolation are required, i.e.
           some of the predictPositions are a long way from the dated
           positions. Defaults to 500. 
       thetaMhSd (float):  (Optional)  The Metropolis-Hastings standard
           deviation for the age parameters. Defaults to 0.5.
       muMhSd (float): (Optional)  The Metropolis-Hastings standard deviation
           for the compound Poisson-Gamma Scale. Defaults to 0.1
       psiMhSd (float): (Optional) The Metropolis-Hastings standard deviation 
           for the Compound Poisson-Gamma Scale.
       ageScaleVal (int): (Optional) A scale value for the ages. 
           Bchronology works best when the ages are scaled to be 
           approximately between 0 and 100.
           The default value is thus 1000 for ages given in years.
       positionScaleVal (int):  (Optional) A scale value for the positions. 
           Bchronology works best when the positions are scaled to be 
           approximately between 0 and 100. The default value is thus
           100 for positions given in cm.
   
       Returns:
           depth - the predicted positions (either same as the user or the default) 
   
           chron -  a numpy array of possible chronologies in each column.
               The number of rows is the same as the length of depth
           ageDist - the distribution of ages around each dates.
           run - the full R object containing the outputs of the Bchron run
       
       Warnings:
           This function requires R and the Bchron package and all its
               dependencies to be installed on the same machine.
               
       Reference:
           - Haslett, J., and Parnell, A. C. (2008). A simple monotone 
               process with application to radiocarbon-dated depth 
               chronologies. Journal of the Royal Statistical Society, 
               Series C, 57, 399-418. DOI:10.1111/j.1467-9876.2008.00623.x
           - Parnell, A. C., Haslett, J., Allen, J. R. M., Buck, C. E., 
               and Huntley, B. (2008). A flexible approach to assessing 
               synchroneity of past events using Bayesian reconstructions
               of sedimentation history. Quaternary Science Reviews, 
               27(19-20), 1872-1885. DOI:10.1016/j.quascirev.2008.07.009     
   
   
2018-03-08 15:28:07,241 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:07,256 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:07,286 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:07,318 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:18: input:
.. autofunction:: pyleoclim.RBchron.plotBchron
2018-03-08 15:28:07,332 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import plotBchron
2018-03-08 15:28:07,347 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:28:07,362 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:28:07,376 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotBchron')
2018-03-08 15:28:07,406 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotBchron at 0x115d3c6a8>
2018-03-08 15:28:07,432 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.plotBchron', <function plotBchron at 0x115d3c6a8>, {}, ['Plot a Bchr
2018-03-08 15:28:07,449 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotBchron(depth, chron, positions, ageDist, flipCoor=False, xlabel='Depth', ylabel='Age', xlim=None, ylim=None, violinColor='#8B008B', medianLineColor='black', medianLineWidth=2.0, CIFillColor='Silver', samplePaths=True, samplePathNumber=10, alpha=0.5, figsize=[4, 8], ax=None)
   :module: pyleoclim.RBchron

   Plot a Bchron output
   
   This function creates a plot showing the calibrated calendar ages and
   associated 95% confidence interval as error bars, the 95% ensemble from
   the produced age model as well as randomly drawn members of the ensemble.
   
   Args:
       depth (array): the positions in the archive (often referred to as
           depth) where the age model was interpolated to. Should be a vector
       chron (array): The possible age models returned by BChron. The number
           of rows should be the same length as the depth vector, with each
           possible realization stored in the columns.
       positions (array): The depth on the archive at which chronological
           measurements have been made. Should be a vector 
       agesDist (array): The distribution of ages for each chronological tie
           points. The number of columns should correspond to the number of
           chronological tie points available.
       flipCoor (bool): If True, plots depth on the y-axis.     
       xlabel (str): The label for the x-axis
       ylabel (str): The label for the y-axis
       xlim (list): Limits for the x-axis. Default corresponds to the min/max
           of the depth vector.
       ylim (list): Limits for the y-axis. Default set by matplotlib
       violinColor (str): The color for the violins. Default is purple
       medianLineColor (str): The color for the median line. Default is black.
       medianLineWidth (float): The width for the median line
       CIFillColor (str): Fill color in between the 95% confidence interval.
           Default is silver.
       samplePaths (bool): If True, draws sample paths from the distribution.
           Use the same color as the violins. 
       samplePathNumber (int): The number of sample paths to draw. Default is 10.
           Note: samplePaths need to be set to True. 
       alpha (float): The violins' transparency. Number between 0 and 1
       figsize (list): The figure size. Default is [4,8]
       ax: Default is None. Useful to set for subplots. 
           
   Returns:
       - fig: the figure.      
         
   
2018-03-08 15:28:07,466 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:07,481 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:07,508 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:07,526 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:07,545 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:07,564 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:07,614 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: (WARNING/2) autodoc: failed to import function ‘verufyCalCurves’ from module ‘pyleoclim.RBchron’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim.RBchron’ has no attribute ‘verufyCalCurves’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves
 [filtered system message]
2018-03-08 15:28:07,629 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:20: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:07,645 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:07,668 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:73: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:07,691 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:18: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:07,709 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:22: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:07,722 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:23: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:07,736 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:28: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:07,750 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:29: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:07,764 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:33: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:07,779 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "rbchron"...>>,)
2018-03-08 15:28:07,806 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 63%] [35mSpectral[39;49;00m                                                                                          
2018-03-08 15:28:07,821 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>, 'Spectral')
2018-03-08 15:28:07,837 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Spectral', ['Spectral Functions\n==================\n\nThis module allows analysis in the frequenc
2018-03-08 15:28:07,862 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:6: input:
.. autofunction:: pyleoclim.Spectral.ar1_fit

2018-03-08 15:28:07,906 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_fit
2018-03-08 15:28:07,935 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:28:07,957 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:28:07,980 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_fit')
2018-03-08 15:28:08,011 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_fit at 0x112320488>
2018-03-08 15:28:08,657 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_fit', <function ar1_fit at 0x112320488>, {}, ['Returns the lag-
2018-03-08 15:28:08,671 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_fit(ys, ts=None, detrend='no', params=['default', 4, 0, 1])
   :module: pyleoclim.Spectral

   Returns the lag-1 autocorrelation from ar1 fit OR persistence from tauest.
   
   Args:
       ys (array): the time series
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
                      'savitzy-golay' - ys is filtered using the Savitzky-Golay
                              filters and the resulting filtered series is subtracted from y.
           params (list): The paramters for the Savitzky-Golay filters. The first parameter
               corresponds to the window size (default it set to half of the data)
               while the second parameter correspond to the order of the filter
               (default is 4). The third parameter is the order of the derivative
               (the default is zero, which means only smoothing.)
   
   Returns:
       g (float): lag-1 autocorrelation coefficient (for evenly-spaced time series)
       OR estimated persistence (for unevenly-spaced time series)
   
2018-03-08 15:28:08,688 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:08,702 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:08,721 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:08,739 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:8: input:
.. autofunction:: pyleoclim.Spectral.ar1_sim

2018-03-08 15:28:08,757 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import ar1_sim
2018-03-08 15:28:08,775 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:28:08,789 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:28:08,803 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ar1_sim')
2018-03-08 15:28:08,821 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ar1_sim at 0x112c24950>
2018-03-08 15:28:08,841 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.ar1_sim', <function ar1_sim at 0x112c24950>, {}, ['Produce p realiz
2018-03-08 15:28:08,855 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ar1_sim(ys, n, p, ts=None, detrend='no', params=['default', 4, 0, 1])
   :module: pyleoclim.Spectral

   Produce p realizations of an AR1 process of length n with lag-1 autocorrelation g calculated from `ys` and `ts`
   
   Args:
       ys (array): a time series
       n, p (int): dimensions as n rows by p columns
       ts (array): the time axis of that series
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
                      'savitzy-golay' - ys is filtered using the Savitzky-Golay
                              filters and the resulting filtered series is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data)
           while the second parameter correspond to the order of the filter
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
   
   Returns:
       red (matrix): n rows by p columns matrix of an AR1 process
   
   
2018-03-08 15:28:08,875 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:08,901 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:08,934 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:08,966 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:10: input:
.. autofunction:: pyleoclim.Spectral.wwz

2018-03-08 15:28:08,981 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz
2018-03-08 15:28:08,996 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:28:09,023 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:28:09,041 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz')
2018-03-08 15:28:09,066 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz at 0x112c249d8>
2018-03-08 15:28:09,093 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz', <function wwz at 0x112c249d8>, {}, ['Return the weighted wave
2018-03-08 15:28:09,118 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz(ys, ts, tau=None, freqs=None, c=0.012665147955292222, Neff=3, Neff_coi=3, nMC=200, nproc=8, detrend='no', params=['default', 4, 0, 1], gaussianize=False, standardize=True, method='Kirchner_f2py', len_bd=0, bc_mode='reflect', reflect_type='odd')
   :module: pyleoclim.Spectral

   Return the weighted wavelet amplitude (WWA) with phase, AR1_q, and cone of influence, as well as WT coeeficients
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       tau (array): the evenly-spaced time points
       freqs (array): vector of frequency
       c (float): the decay constant, the default value 1/(8*np.pi**2) is good for most of the cases
       Neff (int): effective number of points
       nMC (int): the number of Monte-Carlo simulations
       nproc (int): the number of processes for multiprocessing
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
                      'savitzy-golay' - ys is filtered using the Savitzky-Golay
                              filters and the resulting filtered series is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data)
           while the second parameter correspond to the order of the filter
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
       len_bd (int): the number of the ghost grids want to creat on each boundary
       bc_mode (str): see np.lib.pad()
       reflect_type (str): see np.lib.pad()
   
   Returns:
       wwa (array): the weighted wavelet amplitude.
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       Neffs (array): the matrix of effective number of points in the time-scale coordinates
       coeff (array): the wavelet transform coefficents
   
   
2018-03-08 15:28:09,135 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:09,149 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:09,166 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:09,194 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:09,211 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:12: input:
.. autofunction:: pyleoclim.Spectral.wwz_psd

2018-03-08 15:28:09,230 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import wwz_psd
2018-03-08 15:28:09,246 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:28:09,260 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:28:09,273 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwz_psd')
2018-03-08 15:28:09,289 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwz_psd at 0x112c24a60>
2018-03-08 15:28:09,307 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.wwz_psd', <function wwz_psd at 0x112c24a60>, {}, ['Return the psd o
2018-03-08 15:28:09,329 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwz_psd(ys, ts, freqs=None, tau=None, c=0.001, nproc=8, nMC=200, detrend='no', params=['default', 4, 0, 1], gaussianize=False, standardize=True, Neff=3, anti_alias=False, avgs=1, method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the psd of a timeseries directly using wwz method.
   
   Args:
       ys (array): a time series, NaNs will be deleted automatically
       ts (array): the time points, if `ys` contains any NaNs, some of the time points will be deleted accordingly
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       c (float): the decay constant, the default value 1e-3 is good for most of the cases
       nproc (int): the number of processes for multiprocessing
       nMC (int): the number of Monte-Carlo simulations
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
                      'savitzy-golay' - ys is filtered using the Savitzky-Golay
                              filters and the resulting filtered series is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data)
           while the second parameter correspond to the order of the filter
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
       gaussionize (bool): If True, gaussianizes the timeseries
       standardize (bool): If True, standardizes the timeseries
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       psd (array): power spectral density
       freqs (array): vector of frequency
       psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes
       psd_ar1 (array): the psds of AR1 processes
   
   
2018-03-08 15:28:09,346 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:09,360 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:09,375 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:09,390 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:09,423 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:09,447 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:14: input:
.. autofunction:: pyleoclim.Spectral.xwc

2018-03-08 15:28:09,475 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import xwc
2018-03-08 15:28:09,496 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:28:09,510 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:28:09,530 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'xwc')
2018-03-08 15:28:09,545 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function xwc at 0x112c24bf8>
2018-03-08 15:28:09,559 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.xwc', <function xwc at 0x112c24bf8>, {}, ['Return the crosse wavele
2018-03-08 15:28:09,574 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: xwc(ys1, ts1, ys2, ts2, tau=None, freqs=None, c=0.012665147955292222, Neff=3, nproc=8, detrend='no', nMC=200, params=['default', 4, 0, 1], gaussianize=False, standardize=True, method='Kirchner_f2py')
   :module: pyleoclim.Spectral

   Return the crosse wavelet coherence of two time series.
   
   Args:
       ys1, ys2 (array): the two time series
       ts1, ts2 (array): the time axis of the two time series
       tau (array): the evenly-spaced time points
       freqs (array): vector of frequency
       c (float): the decay constant, the default value 1/(8*np.pi**2) is good for most of the cases
       Neff (int): effective number of points
       nproc (int): the number of processes for multiprocessing
       nMC (int): the number of Monte-Carlo simulations
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
                      'savitzy-golay' - ys is filtered using the Savitzky-Golay
                              filters and the resulting filtered series is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data)
           while the second parameter correspond to the order of the filter
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
       gaussionize (bool): If True, gaussianizes the timeseries
       standardize (bool): If True, standardizes the timeseries
       method (str): 'Foster' - the original WWZ method;
                     'Kirchner' - the method Kirchner adapted from Foster;
                     'Kirchner_f2py' - the method Kirchner adapted from Foster with f2py
   
   Returns:
       xw_coherence (array): the cross wavelet coherence
       xw_phase (array): the cross wavelet phase
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
   
   
2018-03-08 15:28:09,606 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:09,633 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:09,649 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:09,664 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:09,679 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:09,695 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:16: input:
.. autofunction:: pyleoclim.Spectral.plot_wwa

2018-03-08 15:28:09,709 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwa
2018-03-08 15:28:09,729 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:28:09,743 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:28:09,758 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwa')
2018-03-08 15:28:09,772 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwa at 0x112c24d08>
2018-03-08 15:28:09,791 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwa', <function plot_wwa at 0x112c24d08>, {}, ['Plot the wavel
2018-03-08 15:28:09,809 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwa(wwa, freqs, tau, AR1_q=None, coi=None, levels=None, tick_range=None, yticks=None, yticks_label=None, ylim=None, xticks=None, xlabels=None, figsize=[20, 8], clr_map='OrRd', cbar_drawedges=False, cone_alpha=0.5, plot_signif=False, signif_style='contour', title=None, plot_cone=False, ax=None, xlabel='Year', ylabel='Period', cbar_orientation='vertical', cbar_pad=0.05, cbar_frac=0.15, cbar_labelsize=None)
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       levels (array): levels of values to plot
       tick_range (array): levels of ticks to show on the colorbar
       yticks (list): ticks on y-axis
       ylim (list): limitations for y-axis
       xticks (list): ticks on x-axis
       figsize (list): the size for the figure
       clr_map (str): the name of the colormap
       cbar_drawedges (bool): whether to draw edges on the colorbar or not
       cone_alpha (float): the alpha value for the area covered by cone of influence
       plot_signif (bool): plot 95% significant area or not
       signif_style (str): plot 95% significant area with `contour` or `shade`
       plot_cone (bool): plot cone of influence or not
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
       cbar_pad (float): the pad for the colorbar
       cbar_frac (float): the frac for the colorbar
       cbar_labelsize (float): the font size of the colorbar label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2018-03-08 15:28:09,843 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:18: input:
.. autofunction:: pyleoclim.Spectral.plot_coherence

2018-03-08 15:28:09,863 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_coherence
2018-03-08 15:28:09,879 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:28:09,897 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:28:09,923 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_coherence')
2018-03-08 15:28:09,966 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_coherence at 0x112c24d90>
2018-03-08 15:28:09,986 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_coherence', <function plot_coherence at 0x112c24d90>, {}, ['Pl
2018-03-08 15:28:09,999 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_coherence(xw_coherence, xw_phase, freqs, tau, AR1_q=None, coi=None, levels=None, tick_range=None, basey=2, yticks=None, ylim=None, xticks=None, xlabels=None, figsize=[20, 8], clr_map='OrRd', exg=5, scale=30, width=0.004, cbar_drawedges=False, cone_alpha=0.5, plot_signif=False, signif_style='contour', title=None, plot_cone=False, ax=None, xlabel='Year', ylabel='Period', cbar_orientation='vertical', cbar_pad=0.05, cbar_frac=0.15, cbar_labelsize=None)
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       xw_coherence (array): the wavelet cohernce
       xw_phase (array): the wavelet cohernce phase
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       AR1_q (array): AR1 simulations
       coi (array): cone of influence
       levels (array): levels of values to plot
       tick_range (array): levels of ticks to show on the colorbar
       yticks (list): ticks on y-axis
       ylim (list): limitations for y-axis
       xticks (list): ticks on x-axis
       figsize (list): the size for the figure
       clr_map (str): the name of the colormap
       cbar_drawedges (bool): whether to draw edges on the colorbar or not
       cone_alpha (float): the alpha value for the area covered by cone of influence
       plot_signif (bool): plot 95% significant area or not
       signif_style (str): plot 95% significant area with `contour` or `shade`
       plot_cone (bool): plot cone of influence or not
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       xlabel (str): The x-axis label
       ylabel (str): The y-axis label
       cbar_pad (float): the pad for the colorbar
       c)bar_frac (float): the frac for the colorbar
       cbar_labelsize (float): the font size of the colorbar label
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2018-03-08 15:28:10,017 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:20: input:
.. autofunction:: pyleoclim.Spectral.plot_wwadist

2018-03-08 15:28:10,038 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_wwadist
2018-03-08 15:28:10,052 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:28:10,066 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:28:10,080 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_wwadist')
2018-03-08 15:28:10,093 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_wwadist at 0x112c24e18>
2018-03-08 15:28:10,107 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_wwadist', <function plot_wwadist at 0x112c24e18>, {}, ['Plot t
2018-03-08 15:28:10,122 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_wwadist(wwa, ylim=None)
   :module: pyleoclim.Spectral

   Plot the distribution of wwa with the 95% quantile line.
   
   Args:
       wwa (array): the weighted wavelet amplitude.
       ylim (list): limitations for y-axis
   
   Returns:
       fig (figure): the 2-D plot of wavelet analysis
   
   
2018-03-08 15:28:10,144 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:22: input:
.. autofunction:: pyleoclim.Spectral.plot_psd

2018-03-08 15:28:10,159 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_psd
2018-03-08 15:28:10,172 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:28:10,186 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:28:10,200 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_psd')
2018-03-08 15:28:10,223 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_psd at 0x112c24ea0>
2018-03-08 15:28:10,254 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_psd', <function plot_psd at 0x112c24ea0>, {}, ['Plot the wavel
2018-03-08 15:28:10,267 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_psd(psd, freqs, lmstyle='-', linewidth=None, color='#3b5b92', ar1_lmstyle='-', ar1_linewidth=None, period_ticks=None, period_tickslabel=None, psd_lim=None, period_lim=None, figsize=[20, 8], label='PSD', plot_ar1=False, psd_ar1_q95=None, title=None, legend=True, psd_ar1_color='#d9544d', ax=None, vertical=False, plot_gridlines=True, period_label='Period (years)', psd_label='Spectral Density', zorder=None)
   :module: pyleoclim.Spectral

   Plot the wavelet amplitude
   
   Args:
       psd (array): power spectral density
       freqs (array): vector of frequency
       period_ticks (list): ticks for period
       psd_lim (list): limits for spectral density axis
       label (str): the label for the PSD
       plot_ar1 (bool): plot the ar1 curve or not
       psd_ar1_q95 (array): the 95% quantile of the AR1 PSD
       psd_ar1_color (str): the color for the 95% quantile of the AR1 PSD
       title (str): the title for the figure
       period_lim (list): limits for period axis
       figsize (list): the size for the figure
       ax (axis): Return as axis instead of figure (useful to integrate plot into a subplot)
       vertical (bool): plot in vertical layout or not
       legend (bool): plot legend or not
       lmstyle (str): the line style
       linewidth (float): the line width
       period_label (str): the label for period
       psd_label (str): the label for psd
       zorder (int): the order of the layer
   
   Returns:
       ax (figure): the 2-D plot of wavelet analysis
   
   
2018-03-08 15:28:10,285 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Spectral.rst:24: input:
.. autofunction:: pyleoclim.Spectral.plot_summary
2018-03-08 15:28:10,298 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Spectral import plot_summary
2018-03-08 15:28:10,312 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Spectral
2018-03-08 15:28:10,327 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Spectral' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py'>
2018-03-08 15:28:10,346 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_summary')
2018-03-08 15:28:10,360 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_summary at 0x112c24f28>
2018-03-08 15:28:10,377 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Spectral.plot_summary', <function plot_summary at 0x112c24f28>, {}, ['Plot t
2018-03-08 15:28:10,390 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_summary(ys, ts, freqs=None, tau=None, c1=0.012665147955292222, c2=0.001, nMC=200, nproc=8, detrend='no', gaussianize=False, standardize=True, levels=None, method='Kirchner_f2py', anti_alias=False, period_ticks=None, ts_color=None, title=None, ts_ylabel=None, wwa_xlabel=None, wwa_ylabel=None, psd_lmstyle='-', psd_lim=None, period_I=[0.125, 0.5], period_D=[0.005, 0.05])
   :module: pyleoclim.Spectral

   Plot the time series with the wavelet analysis and psd
   
   Args:
       ys (array): a time series
       ts (array): time axis of the time series
       freqs (array): vector of frequency
       tau (array): the evenly-spaced time points, namely the time shift for wavelet analysis
       c (float): the decay constant
       Neff (int): the threshold of the number of effective degree of freedom
       nproc (int): fake argument, just for convenience
       detrend (str): 'no' - the original time series is assumed to have no trend;
                      'linear' - a linear least-squares fit to `ys` is subtracted;
                      'constant' - the mean of `ys` is subtracted
       ts_color (str): the color for the time series curve
       title (str): the title for the time series plot
       ts_ylabel (str): label for y-axis in the time series plot
       wwa_xlabel (str): label for x-axis in the wwa plot
       wwa_ylabel (str): label for y-axis in the wwa plot
       psd_lmstyle (str): the line style in the psd plot
       psd_lim (list): the limits for psd
       period_I, period_D (list): the ranges for beta estimation
   
   Returns:
       fig (figure): the summary plot
   
   
2018-03-08 15:28:10,408 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:10,422 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:10,472 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_fit:7: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,486 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_fit:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,501 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_fit:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:10,514 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_sim:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,534 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_sim:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,564 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.ar1_sim:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:10,581 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:13: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,597 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,610 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:10,624 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz:25: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:10,643 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:12: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,658 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:15: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,671 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:10,685 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:21: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:10,699 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.wwz_psd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,712 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.xwc:13: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,726 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.xwc:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,743 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.xwc:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:10,760 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.xwc:22: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:10,773 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.xwc:25: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,786 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.plot_summary:12: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:10,799 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Spectral.py:docstring of pyleoclim.Spectral.plot_summary:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:10,813 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "spectral functions"...>>,)
2018-03-08 15:28:10,833 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 72%] [35mStats[39;49;00m                                                                                             
2018-03-08 15:28:10,855 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>, 'Stats')
2018-03-08 15:28:10,874 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Stats', ['Statistics Functions\n====================\n\n.. autofunction:: pyleoclim.Stats.simpleSt
2018-03-08 15:28:10,891 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Stats.rst:4: input:
.. autofunction:: pyleoclim.Stats.simpleStats

2018-03-08 15:28:10,915 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Stats import simpleStats
2018-03-08 15:28:10,935 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Stats
2018-03-08 15:28:10,960 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Stats' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py'>
2018-03-08 15:28:10,974 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'simpleStats')
2018-03-08 15:28:10,987 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function simpleStats at 0x112c260d0>
2018-03-08 15:28:11,054 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Stats.simpleStats', <function simpleStats at 0x112c260d0>, {}, ['Computes si
2018-03-08 15:28:11,070 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: simpleStats(y, axis=None)
   :module: pyleoclim.Stats

   Computes simple statistics
   
   Computes the mean, median, min, max, standard deviation, and interquartile
   range of a numpy array y.
   
   Args:
       y (array): A Numpy array
       axis (int, typle of ints): Optional. Axis or Axes along which the means
           are computed, the default is to compute the mean of the flattened
           array. If a tuple of ints, performed over multiple axes
   
   Returns:
       The mean, median, min, max, standard deviation and IQR by columns
   
   
2018-03-08 15:28:11,086 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:11,104 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Stats.rst:6: input:
.. autofunction:: pyleoclim.Stats.corrsig
2018-03-08 15:28:11,117 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Stats import corrsig
2018-03-08 15:28:11,131 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Stats
2018-03-08 15:28:11,146 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Stats' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py'>
2018-03-08 15:28:11,165 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrsig')
2018-03-08 15:28:11,179 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrsig at 0x112d071e0>
2018-03-08 15:28:11,195 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Stats.corrsig', <function corrsig at 0x112d071e0>, {}, ['Estimates the signi
2018-03-08 15:28:11,208 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrsig(y1, y2, nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim.Stats

   Estimates the significance of correlations between non IID time series by 3 independent methods:
       1) 'ttest': T-test where d.o.f are corrected for the effect of serial correlation
       2) 'isopersistent': AR(1) modeling of x and y.
       3) 'isospectral': phase randomization of original inputs. (default)
       The T-test is parametric test, hence cheap but usually wrong except in idyllic circumstances.
       The others are non-parametric, but their computational requirements scales with nsim.
   
   Args:
       y1, y2 (array)- vector of (real) numbers of identical length, no NaNs allowed
       nsim (int)- the number of simulations [1000]
       method (str)- methods 1-3 above ['isospectral']
       alpha (float)- significance level for critical value estimation [0.05]
   
   Returns:
        r (real): correlation between x and y 
   
        signif (int): true  if significant; false otherwise 
   
        p (real): Fraction of time series with higher correlation coefficents than observed (approximates the p-value). 
   
           Note that signif = True if and only if p <= alpha.
   
2018-03-08 15:28:11,224 [WARNING] sphinx.util.docutils: Enumerated list ends without a blank line; unexpected unindent.
2018-03-08 15:28:11,252 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py:docstring of pyleoclim.Stats.simpleStats:9: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:11,277 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Stats.py:docstring of pyleoclim.Stats.corrsig:4: (WARNING/2) Enumerated list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:11,293 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "statistics functions"...>>,)
2018-03-08 15:28:11,333 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 81%] [35mSummaryPlots[39;49;00m                                                                                      
2018-03-08 15:28:11,349 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>, 'SummaryPlots')
2018-03-08 15:28:11,380 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('SummaryPlots', ['Summary Plots\n==============\n\nThis module handles some basic return for the su
2018-03-08 15:28:11,410 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:8: input:
.. autofunction:: pyleoclim.SummaryPlots.getMetadata

2018-03-08 15:28:11,426 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import getMetadata
2018-03-08 15:28:11,440 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2018-03-08 15:28:11,455 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2018-03-08 15:28:11,481 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getMetadata')
2018-03-08 15:28:11,497 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getMetadata at 0x112320048>
2018-03-08 15:28:11,570 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.getMetadata', <function getMetadata at 0x112320048>, {}, ['Get 
2018-03-08 15:28:11,591 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getMetadata(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary metadata to be printed out automatically
   
   Args:
       timeseries: a specific timeseries object. 
       
   Returns:
       A dictionary containing the following metadata:
   
       archiveType 
   
       Authors (if more than 2, replace by et al. 
   
       PublicationYear 
   
       Publication DOI 
   
       Variable Name 
   
       Units 
   
       Climate Interpretation 
   
       Calibration Equation 
   
       Calibration References 
   
       Calibration Notes 
   
       
   
2018-03-08 15:28:11,610 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:10: input:
.. autofunction:: pyleoclim.SummaryPlots.TsData

2018-03-08 15:28:11,623 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import TsData
2018-03-08 15:28:11,636 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2018-03-08 15:28:11,650 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2018-03-08 15:28:11,666 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'TsData')
2018-03-08 15:28:11,682 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function TsData at 0x1123200d0>
2018-03-08 15:28:11,696 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.TsData', <function TsData at 0x1123200d0>, {}, ['Get the PaleoD
2018-03-08 15:28:11,709 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: TsData(timeseries, x_axis='')
   :module: pyleoclim.SummaryPlots

   Get the PaleoData with age/depth information
       
   Get the necessary information for the TS plots/necessary to allow for
   axes specification
   
   Args:
       timeseries: a single timeseries object. 
           By default, will prompt the user
       x-axis (str): The representation against which to plot the 
           paleo-data. Options are "age", "year", and "depth". 
           Default is to let the system choose if only one available 
           or prompt the user.
   Returns:
       x - the x-valus 
   
       y - the y-values 
   
       archiveType - the archiveType (for plot settings) 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       label - the results of the x-axis query. Either depth, year, or age
       
   
2018-03-08 15:28:11,727 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/SummaryPlots.rst:12: input:
.. autofunction:: pyleoclim.SummaryPlots.agemodelData
2018-03-08 15:28:11,740 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.SummaryPlots import agemodelData
2018-03-08 15:28:11,754 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.SummaryPlots
2018-03-08 15:28:11,773 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.SummaryPlots' from '//anaconda/lib/python3.5/site-packages/pyleoclim/SummaryPlots.py'>
2018-03-08 15:28:11,789 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'agemodelData')
2018-03-08 15:28:11,802 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function agemodelData at 0x112320158>
2018-03-08 15:28:11,817 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.SummaryPlots.agemodelData', <function agemodelData at 0x112320158>, {}, ['Ge
2018-03-08 15:28:11,832 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: agemodelData(timeseries)
   :module: pyleoclim.SummaryPlots

   Get the necessary information for the agemodel plot
   
   Args:
       timeseries: a single timeseries object. By default, will
           prompt the user
   
   Returns:
       depth - the depth values 
   
       age - the age values 
   
       x_label - the label for the x-axis 
   
       y_label - the label for the y-axis 
   
       archiveType - the archiveType (for default plot settings)
   
   
2018-03-08 15:28:11,856 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "summary plots"...>>,)
2018-03-08 15:28:11,881 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 90%] [35mTimeseries[39;49;00m                                                                                        
2018-03-08 15:28:11,895 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>, 'Timeseries')
2018-03-08 15:28:11,911 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Timeseries', ['Timeseries Functions\n====================\n\nThis module allows the manipulation o
2018-03-08 15:28:11,945 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:6: input:
.. autofunction:: pyleoclim.Timeseries.bin

2018-03-08 15:28:11,982 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import bin
2018-03-08 15:28:12,007 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:12,021 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:12,034 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'bin')
2018-03-08 15:28:12,050 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function bin at 0x112c1bf28>
2018-03-08 15:28:12,245 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.bin', <function bin at 0x112c1bf28>, {}, ['Bin the values', '', '
2018-03-08 15:28:12,259 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: bin(x, y, bin_size='', start='', end='')
   :module: pyleoclim.Timeseries

   Bin the values
   
   Args:
       x (array): the x-axis series.
       y (array): the y-axis series.
       bin_size (float): The size of the bins. Default is the average resolution
       start (float): Where/when to start binning. Default is the minimum
       end (float): When/where to stop binning. Defulat is the maximum
   
   Returns:
       binned_values - the binned output 
   
       bins - the bins (centered on the median, i.e., the 100-200 bin is 150) 
   
       n - number of data points in each bin 
   
       error -  the standard error on the mean in each bin
   
   
2018-03-08 15:28:12,276 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:8: input:
.. autofunction:: pyleoclim.Timeseries.interp

2018-03-08 15:28:12,290 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import interp
2018-03-08 15:28:12,304 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:12,317 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:12,336 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interp')
2018-03-08 15:28:12,350 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interp at 0x112c22158>
2018-03-08 15:28:12,364 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.interp', <function interp at 0x112c22158>, {}, ['Linear interpola
2018-03-08 15:28:12,381 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interp(x, y, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Linear interpolation onto a new x-axis
   
   Args:
       x (array): the x-axis
       y (array): the y-axis
       interp_step (float): the interpolation step. Default is mean resolution.
       start (float): where/when to start the interpolation. Default is min..
       end (float): where/when to stop the interpolation. Default is max.
   
   Returns:
       xi - the interpolated x-axis 
   
       interp_values - the interpolated values
       
   
2018-03-08 15:28:12,399 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:10: input:
.. autofunction:: pyleoclim.Timeseries.onCommonAxis

2018-03-08 15:28:12,414 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import onCommonAxis
2018-03-08 15:28:12,439 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:12,454 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:12,470 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'onCommonAxis')
2018-03-08 15:28:12,492 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function onCommonAxis at 0x112c221e0>
2018-03-08 15:28:12,506 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.onCommonAxis', <function onCommonAxis at 0x112c221e0>, {}, ['Plac
2018-03-08 15:28:12,520 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: onCommonAxis(x1, y1, x2, y2, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Places two timeseries on a common axis
   
   Args:
       x1 (array): x-axis values of the first timeseries
       y1 (array): y-axis values of the first timeseries
       x2 (array): x-axis values of the second timeseries
       y2 (array): y-axis values of the second timeseries
       interp_step (float): The interpolation step. Default is mean resolution
       of lowest resolution series
       start (float): where/when to start. Default is the maximum of the minima of
       the two timeseries
       end (float): Where/when to end. Default is the minimum of the maxima of
       the two timeseries
   
   Returns:
       xi -  the interpolated x-axis 
   
       interp_values1 -  the interpolated y-values for the first timeseries
       interp_values2 - the intespolated y-values for the second timeseries
       
   
2018-03-08 15:28:12,543 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:12: input:
.. autofunction:: pyleoclim.Timeseries.standardize

2018-03-08 15:28:12,560 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import standardize
2018-03-08 15:28:12,573 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:12,586 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:12,600 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardize')
2018-03-08 15:28:12,614 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardize at 0x112c22268>
2018-03-08 15:28:12,629 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.standardize', <function standardize at 0x112c22268>, {}, ['Center
2018-03-08 15:28:12,652 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardize(x, scale=1, axis=0, ddof=0, eps=0.001)
   :module: pyleoclim.Timeseries

   Centers and normalizes a given time series. Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed
       mu (real): the mean of the original time series, E[X]
       sig (real): the standard deviation of the original time series, std[X]
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2018-03-08 15:28:12,671 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:14: input:
.. autofunction:: pyleoclim.Timeseries.ts2segments

2018-03-08 15:28:12,685 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import ts2segments
2018-03-08 15:28:12,699 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:12,712 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:12,731 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ts2segments')
2018-03-08 15:28:12,782 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ts2segments at 0x112c222f0>
2018-03-08 15:28:12,803 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.ts2segments', <function ts2segments at 0x112c222f0>, {}, ['Chop a
2018-03-08 15:28:12,820 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ts2segments(ys, ts, factor=10)
   :module: pyleoclim.Timeseries

   Chop a time series into several segments based on gap detection.
   
   The rule of gap detection is very simple:
       we define the intervals between time points as dts, then if dts[i] is larger than factor * dts[i-1],
       we think that the change of dts (or the gradient) is too large, and we regard it as a breaking point
       and chop the time series into two segments here
   
   Args:
       ys (array): a time series, NaNs allowed
       ts (array): the time points
       factor (float): the factor that adjusts the threshold for gap detection
   
   Returns:
       seg_ys (list): a list of several segments with potentially different lengths
       seg_ts (list): a list of the time axis of the several segments
       n_segs (int): the number of segments
   
   @author: fzhu
   
2018-03-08 15:28:12,844 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:16: input:
.. autofunction:: pyleoclim.Timeseries.clean_ts

2018-03-08 15:28:12,858 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import clean_ts
2018-03-08 15:28:12,871 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:12,889 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:12,904 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'clean_ts')
2018-03-08 15:28:12,918 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function clean_ts at 0x112c22378>
2018-03-08 15:28:12,933 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.clean_ts', <function clean_ts at 0x112c22378>, {}, ['Delete the N
2018-03-08 15:28:12,968 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: clean_ts(ys, ts)
   :module: pyleoclim.Timeseries

   Delete the NaNs in the time series and sort it with time axis ascending
   
   Args:
       ys (array): a time series, NaNs allowed
       ts (array): the time axis of the time series, NaNs allowed
   
   Returns:
       ys (array): the time series without nans
       ts (array): the time axis of the time series without nans
   
   
2018-03-08 15:28:12,990 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: input:
.. autofunction:: pyleoclim.Timeseries.annualize

2018-03-08 15:28:13,011 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import annualize
2018-03-08 15:28:13,035 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:13,057 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:13,071 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'annualize')
2018-03-08 15:28:13,084 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'annualize' from module 'pyleoclim.Timeseries'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.Timeseries' has no attribute 'annualize'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize

2018-03-08 15:28:13,098 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: (WARNING/2) autodoc: failed to import function 'annualize' from module 'pyleoclim.Timeseries'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.Timeseries' has no attribute 'annualize'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize
2018-03-08 15:28:13,112 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:20: input:
.. autofunction:: pyleoclim.Timeseries.gaussianize

2018-03-08 15:28:13,126 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import gaussianize
2018-03-08 15:28:13,152 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:13,170 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:13,184 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'gaussianize')
2018-03-08 15:28:13,198 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function gaussianize at 0x112c22400>
2018-03-08 15:28:13,211 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.gaussianize', <function gaussianize at 0x112c22400>, {}, ['Transf
2018-03-08 15:28:13,225 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: gaussianize(X)
   :module: pyleoclim.Timeseries

   Transforms a (proxy) timeseries to Gaussian distribution.
   
   Originator: Michael Erb, Univ. of Southern California - April 2017
   
2018-03-08 15:28:13,250 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:22: input:
.. autofunction:: pyleoclim.Timeseries.gaussianize_single

2018-03-08 15:28:13,270 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import gaussianize_single
2018-03-08 15:28:13,283 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:13,297 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:13,330 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'gaussianize_single')
2018-03-08 15:28:13,350 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function gaussianize_single at 0x112c22488>
2018-03-08 15:28:13,375 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.gaussianize_single', <function gaussianize_single at 0x112c22488>
2018-03-08 15:28:13,401 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: gaussianize_single(X_single)
   :module: pyleoclim.Timeseries

   Transforms a single (proxy) timeseries to Gaussian distribution.
   
   Originator: Michael Erb, Univ. of Southern California - April 2017
   
2018-03-08 15:28:13,423 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:24: input:
.. autofunction:: pyleoclim.Timeseries.detrend
2018-03-08 15:28:13,442 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import detrend
2018-03-08 15:28:13,476 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:13,494 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:13,510 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'detrend')
2018-03-08 15:28:13,527 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function detrend at 0x112c22510>
2018-03-08 15:28:13,540 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.detrend', <function detrend at 0x112c22510>, {}, ['Detrend a time
2018-03-08 15:28:13,561 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: detrend(y, x=None, method='linear', params=['default', 4, 0, 1])
   :module: pyleoclim.Timeseries

   Detrend a timeseries according to three methods
   
   Detrending methods include, "linear" (default), "constant", and using a low-pass
       Savitzky-Golay filters.
       
   Args:
       y (array): The series to be detrended. 
       x (array): The time axis for the timeseries. Necessary for use with 
           the Savitzky-Golay filters method since the series should be evenly spaced.    
       method (str): The type of detrending. If linear (default), the result of
           a linear least-squares fit to y is subtracted from y. If constant, 
           only the mean of data is subtrated. If "savitzy-golay", y is filtered
           using the Savitzky-Golay filters and the resulting filtered series
           is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data) 
           while the second parameter correspond to the order of the filter 
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
           
   Returns:
       ys (array) - the detrended timeseries.        
   
2018-03-08 15:28:13,577 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:13,592 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:13,620 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: (WARNING/2) autodoc: failed to import function ‘annualize’ from module ‘pyleoclim.Timeseries’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim.Timeseries’ has no attribute ‘annualize’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize
 [filtered system message]
2018-03-08 15:28:13,633 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.detrend:9: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:13,649 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.detrend:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:13,668 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "timeseries functions"...>>,)
2018-03-08 15:28:13,693 [INFO] sphinx.util: [01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                                                             
2018-03-08 15:28:13,706 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>, 'index')
2018-03-08 15:28:13,722 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('index', [".. Pyleoclim documentation master file, created by\n   sphinx-quickstart on Fri Feb 10 1
2018-03-08 15:28:13,743 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <comment...><section "welcome to pyleoclim's documentati ...>,)
2018-03-08 15:28:13,768 [INFO] sphinx.util: 
2018-03-08 15:28:13,781 [DEBUG] sphinx.application: [app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>,)
2018-03-08 15:27:53,766 [WARNING] sphinx.util.docutils: Literal block expected; none found.
2018-03-08 15:28:13,808 [INFO] sphinx.builders: [01mlooking for now-outdated files... [39;49;00m
2018-03-08 15:28:13,823 [DEBUG] sphinx.application: [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>,)
2018-03-08 15:28:13,836 [INFO] sphinx.builders: none found
2018-03-08 15:28:13,869 [INFO] sphinx.builders: [01mpickling environment... [39;49;00m
2018-03-08 15:28:13,909 [INFO] sphinx.builders: done
2018-03-08 15:28:13,928 [INFO] sphinx.builders: [01mchecking consistency... [39;49;00m
2018-03-08 15:28:13,953 [DEBUG] sphinx.application: [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x1043842b0>,)
2018-03-08 15:28:13,977 [INFO] sphinx.builders: done
2018-03-08 15:28:14,014 [INFO] sphinx.builders.latex: processing Pyleoclim.tex...
2018-03-08 15:28:14,034 [INFO] sphinx.builders.latex: [32mindex[39;49;00m 
2018-03-08 15:28:14,049 [INFO] sphinx.util.nodes: [32mIntroduction[39;49;00m 
2018-03-08 15:28:14,074 [INFO] sphinx.util.nodes: [32mMain[39;49;00m 
2018-03-08 15:28:14,117 [INFO] sphinx.util.nodes: [32mMap[39;49;00m 
2018-03-08 15:28:14,137 [INFO] sphinx.util.nodes: [32mPlot[39;49;00m 
2018-03-08 15:28:14,152 [INFO] sphinx.util.nodes: [32mStats[39;49;00m 
2018-03-08 15:28:14,172 [INFO] sphinx.util.nodes: [32mTimeseries[39;49;00m 
2018-03-08 15:28:14,192 [INFO] sphinx.util.nodes: [32mLipdUtils[39;49;00m 
2018-03-08 15:28:14,214 [INFO] sphinx.util.nodes: [32mSummaryPlots[39;49;00m 
2018-03-08 15:28:14,230 [INFO] sphinx.util.nodes: [32mSpectral[39;49;00m 
2018-03-08 15:28:14,251 [INFO] sphinx.util.nodes: [32mRBchron[39;49;00m 
2018-03-08 15:28:14,283 [INFO] sphinx.builders.latex: 
2018-03-08 15:28:14,296 [INFO] sphinx.builders.latex: resolving references...
2018-03-08 15:28:14,323 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <comment...><section "welcome to pyleoclim's documentati ...>, 'index')
2018-03-08 15:28:14,341 [INFO] sphinx.builders.latex: writing... 
2018-03-08 15:28:14,501 [INFO] sphinx.builders.latex: done
2018-03-08 15:28:14,533 [INFO] sphinx.builders.latex: [01mcopying TeX support files...[39;49;00m
2018-03-08 15:28:14,569 [INFO] sphinx.builders.latex: done
2018-03-08 15:28:14,587 [INFO] sphinx.application: [01mbuild succeeded, 1 warning.[39;49;00m
2018-03-08 15:28:14,601 [DEBUG] sphinx.application: [app] emitting event: 'build-finished'(None,)
2018-03-08 15:28:27,752 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:27,754 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'createDir')
2018-03-08 15:28:27,770 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function createDir at 0x11e7c1158>
2018-03-08 15:28:27,913 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.createDir', <function createDir at 0x11e7c1158>, {}, ['Create a ne
2018-03-08 15:28:27,929 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: createDir(path, foldername)
   :module: pyleoclim.LipdUtils

   Create a new folder in a working directory
   
   Create a new folder in a working directory to save outputs from Pyleoclim.
   
   Args:
       path(str): the path to the new folder.
       foldername(str): the name of the folder to be created
       
   Returns:
       newdir - the full path to the new directory
       
   
2018-03-08 15:28:27,952 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:11: input:
.. autofunction:: pyleoclim.LipdUtils.saveFigure

2018-03-08 15:28:27,967 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import saveFigure
2018-03-08 15:28:27,982 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:28,006 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:28,022 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'saveFigure')
2018-03-08 15:28:28,036 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function saveFigure at 0x11e7c11e0>
2018-03-08 15:28:28,050 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.saveFigure', <function saveFigure at 0x11e7c11e0>, {}, ['Save a fi
2018-03-08 15:28:28,071 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: saveFigure(name, format='eps', dir='')
   :module: pyleoclim.LipdUtils

   Save a figure
   
   Save the figure in the directory. If not given, creates a folder in the 
   current working directory. 
   
   Args:
       name (str): name of the file
       format (str): One of the file extensions supported by the active 
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       dir (str): the name of the folder in the LiPD working directory.
           If not provided, creates a default folder called 'figures'.
           
   
2018-03-08 15:28:28,108 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:28,136 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:28,166 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:16: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateLipds

2018-03-08 15:28:28,229 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateLipds
2018-03-08 15:28:28,247 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:28,262 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:28,276 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateLipds')
2018-03-08 15:28:28,309 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateLipds at 0x11e7c1268>
2018-03-08 15:28:28,327 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateLipds', <function enumerateLipds at 0x11e7c1268>, {}, ['E
2018-03-08 15:28:28,342 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateLipds(lipds)
   :module: pyleoclim.LipdUtils

   Enumerate the LiPD files loaded in the workspace
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   
2018-03-08 15:28:28,367 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:18: input:
.. autofunction:: pyleoclim.LipdUtils.getLipd

2018-03-08 15:28:28,387 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getLipd
2018-03-08 15:28:28,413 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:28,427 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:28,441 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getLipd')
2018-03-08 15:28:28,455 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getLipd at 0x11e7c12f0>
2018-03-08 15:28:28,468 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getLipd', <function getLipd at 0x11e7c12f0>, {}, ['Prompt for a Li
2018-03-08 15:28:28,482 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getLipd(lipds)
   :module: pyleoclim.LipdUtils

   Prompt for a LiPD file
   
   Ask the user to select a LiPD file from a list
   Use this function in conjunction with enumerateLipds()
   
   Args:
       lipds (dict): A dictionary of LiPD files. Can be obtained from
           pyleoclim.readLipd()
   
   Returns:
       The index of the LiPD file
       
   
2018-03-08 15:28:28,508 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:23: input:
.. autofunction:: pyleoclim.LipdUtils.promptForVariable

2018-03-08 15:28:28,530 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import promptForVariable
2018-03-08 15:28:28,575 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:28,618 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:28,639 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'promptForVariable')
2018-03-08 15:28:28,656 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function promptForVariable at 0x11e7c1378>
2018-03-08 15:28:28,674 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.promptForVariable', <function promptForVariable at 0x11e7c1378>, {
2018-03-08 15:28:28,709 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: promptForVariable()
   :module: pyleoclim.LipdUtils

   Prompt for a specific variable
   
   Ask the user to select the variable they are interested in.
   Use this function in conjunction with readHeaders() or getTSO()
   
   Returns:
       The index of the variable
       
   
2018-03-08 15:28:28,748 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:25: input:
.. autofunction:: pyleoclim.LipdUtils.xAxisTs

2018-03-08 15:28:28,774 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import xAxisTs
2018-03-08 15:28:28,815 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:28,846 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:28,867 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'xAxisTs')
2018-03-08 15:28:28,885 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function xAxisTs at 0x11e7c1400>
2018-03-08 15:28:28,918 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.xAxisTs', <function xAxisTs at 0x11e7c1400>, {}, ['Prompt the user
2018-03-08 15:28:28,957 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: xAxisTs(timeseries)
   :module: pyleoclim.LipdUtils

   Prompt the user to choose a x-axis representation for the timeseries.
   
   Args:
       timeseries: a timeseries object
       
   Returns:
       x_axis - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"
       
   
2018-03-08 15:28:29,248 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:27: input:
.. autofunction:: pyleoclim.LipdUtils.checkXaxis

2018-03-08 15:28:29,272 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import checkXaxis
2018-03-08 15:28:29,295 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:29,325 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:29,351 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'checkXaxis')
2018-03-08 15:28:29,375 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function checkXaxis at 0x11e7c1488>
2018-03-08 15:28:29,397 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.checkXaxis', <function checkXaxis at 0x11e7c1488>, {}, ['Check tha
2018-03-08 15:28:29,436 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: checkXaxis(timeseries, x_axis='')
   :module: pyleoclim.LipdUtils

   Check that a x-axis is present for the timeseries
   
   Args:
       timeseries : a timeseries
       x_axis (str) : the x-axis representation, either depth, age or year
       
   Returns:
       x - the values for the x-axis representation, 
   
       label - returns either "age", "year", or "depth"    
   
   
2018-03-08 15:28:29,469 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:29: input:
.. autofunction:: pyleoclim.LipdUtils.searchVar

2018-03-08 15:28:29,489 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import searchVar
2018-03-08 15:28:29,506 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:29,528 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:29,545 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'searchVar')
2018-03-08 15:28:29,560 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function searchVar at 0x11e7c1510>
2018-03-08 15:28:29,574 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.searchVar', <function searchVar at 0x11e7c1510>, {}, ['This functi
2018-03-08 15:28:29,589 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: searchVar(timeseries_list, key, exact=True, override=True)
   :module: pyleoclim.LipdUtils

   This function search for key words (exact match) for a variable
   
   Args:
       timeseries_list (list): A list of available series
       key (list): A list of keys to search
       exact (bool): if True, looks for an exact match.
       override (bool): if True, override the exact match if no match is found
   
   Returns:
       match (list)- A list of keys for the timeseries that match the selection
           criteria.
   
2018-03-08 15:28:29,610 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:34: input:
.. autofunction:: pyleoclim.LipdUtils.enumerateTs

2018-03-08 15:28:29,633 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import enumerateTs
2018-03-08 15:28:29,647 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:29,662 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:29,676 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'enumerateTs')
2018-03-08 15:28:29,691 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function enumerateTs at 0x11e7c1598>
2018-03-08 15:28:29,708 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.enumerateTs', <function enumerateTs at 0x11e7c1598>, {}, ['Enumera
2018-03-08 15:28:29,731 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: enumerateTs(timeseries_list)
   :module: pyleoclim.LipdUtils

   Enumerate the available time series objects
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
           
   
2018-03-08 15:28:29,751 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:36: input:
.. autofunction:: pyleoclim.LipdUtils.getTs

2018-03-08 15:28:29,766 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getTs
2018-03-08 15:28:29,780 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:29,795 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:29,811 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getTs')
2018-03-08 15:28:29,832 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getTs at 0x11e7c1620>
2018-03-08 15:28:29,849 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getTs', <function getTs at 0x11e7c1620>, {}, ['Get a specific time
2018-03-08 15:28:29,863 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getTs(timeseries_list, option='')
   :module: pyleoclim.LipdUtils

   Get a specific timeseries object from a dictionary of timeseries
   
   Args:
       timeseries_list: a  list of available timeseries objects. 
           To use the timeseries loaded upon initiation of the 
           pyleoclim package, use pyleo.time_series.
       option: An expression to filter the datasets. Uses lipd.filterTs()    
           
   Returns:
       A single timeseries object if not optional filter selected or a filtered
       list if optional arguments given
       
   
2018-03-08 15:28:29,880 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:29,898 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:41: input:
.. autofunction:: pyleoclim.LipdUtils.LipdToOntology

2018-03-08 15:28:29,911 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import LipdToOntology
2018-03-08 15:28:29,934 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:29,951 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:29,966 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'LipdToOntology')
2018-03-08 15:28:29,980 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function LipdToOntology at 0x11e7c16a8>
2018-03-08 15:28:29,994 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.LipdToOntology', <function LipdToOntology at 0x11e7c16a8>, {}, ['s
2018-03-08 15:28:30,009 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: LipdToOntology(archiveType)
   :module: pyleoclim.LipdUtils

   standardize archiveType
   
   Transform the archiveType from their LiPD name to their ontology counterpart
   
   Args:
       archiveType (STR): name of the archiveType from the LiPD file
       
   Returns:
       archiveType according to the ontology
       
   
2018-03-08 15:28:30,034 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:46: input:
.. autofunction:: pyleoclim.LipdUtils.isModel

2018-03-08 15:28:30,053 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isModel
2018-03-08 15:28:30,067 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:30,082 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:30,095 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isModel')
2018-03-08 15:28:30,110 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isModel at 0x11e7c1730>
2018-03-08 15:28:30,129 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isModel', <function isModel at 0x11e7c1730>, {}, ['Check for the p
2018-03-08 15:28:30,149 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isModel(csvName, lipd)
   :module: pyleoclim.LipdUtils

   Check for the presence of a model in the same object than the measurement table
   
   Args:
       csvName (str): The name of the csv file corresponding to the measurement table
       lipd (dict): A LiPD object
   
   Returns:
       model (list): List of models already available
   
       dataObject (str): The name of the paleoData or ChronData
           object in which the model(s) are stored
   
2018-03-08 15:28:30,171 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:48: input:
.. autofunction:: pyleoclim.LipdUtils.modelNumber

2018-03-08 15:28:30,186 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import modelNumber
2018-03-08 15:28:30,204 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:30,221 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:30,248 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'modelNumber')
2018-03-08 15:28:30,264 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function modelNumber at 0x11e7c17b8>
2018-03-08 15:28:30,278 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.modelNumber', <function modelNumber at 0x11e7c17b8>, {}, ['Assign 
2018-03-08 15:28:30,295 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: modelNumber(model)
   :module: pyleoclim.LipdUtils

   Assign a new or existing model number
   
   Args:
       model (list): List of possible model number. Obtained from isModel
       
   Returns:
       modelNum (int): The number of the model
   
2018-03-08 15:28:30,316 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:53: input:
.. autofunction:: pyleoclim.LipdUtils.isMeasurement

2018-03-08 15:28:30,333 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isMeasurement
2018-03-08 15:28:30,354 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:30,369 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:30,384 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isMeasurement')
2018-03-08 15:28:30,398 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isMeasurement at 0x11e7c1840>
2018-03-08 15:28:30,412 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isMeasurement', <function isMeasurement at 0x11e7c1840>, {}, ['Che
2018-03-08 15:28:30,431 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isMeasurement(csv_dict)
   :module: pyleoclim.LipdUtils

   Check whether measurement tables are available
   
   Args:
       csv_dict (dict): Dictionary of available csv
   
   Returns:
       paleoMeasurementTables - List of available paleoMeasurementTables
       chronMeasurementTables - List of available chronMeasurementTables
   
2018-03-08 15:28:30,458 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:55: input:
.. autofunction:: pyleoclim.LipdUtils.whichMeasurement

2018-03-08 15:28:30,473 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import whichMeasurement
2018-03-08 15:28:30,488 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:30,503 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:30,517 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'whichMeasurement')
2018-03-08 15:28:30,533 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function whichMeasurement at 0x11e7c18c8>
2018-03-08 15:28:30,555 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.whichMeasurement', <function whichMeasurement at 0x11e7c18c8>, {},
2018-03-08 15:28:30,570 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: whichMeasurement(measurementTableList, csv_dict)
   :module: pyleoclim.LipdUtils

   Select a measurement table from a list
   
   Use in conjunction with the function isMeasurement
   
   Args:
       measurementTableList (list): List of measurement tables contained in the
           LiPD file. Output from the isMeasurement function
       csv_list (list): Dictionary of available csv     
   
   Returns:
       csvName (str) - the name of the csv file
   
   
2018-03-08 15:28:30,586 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:30,603 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:57: input:
.. autofunction:: pyleoclim.LipdUtils.getMeasurement

2018-03-08 15:28:30,622 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import getMeasurement
2018-03-08 15:28:30,657 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:30,676 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:30,692 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'getMeasurement')
2018-03-08 15:28:30,708 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function getMeasurement at 0x11e7c1950>
2018-03-08 15:28:30,725 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.getMeasurement', <function getMeasurement at 0x11e7c1950>, {}, ['E
2018-03-08 15:28:30,747 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: getMeasurement(csvName, lipd)
   :module: pyleoclim.LipdUtils

   Extract the dictionary corresponding to the measurement table
   
   Args:
       csvName (str): The name of the csv file
       lipd (dict): The LiPD object from which to extract the data
   
   Returns:
       ts_list - A dictionary containing data and metadata for each column in the
           csv file.
   
   
2018-03-08 15:28:30,770 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:62: input:
.. autofunction:: pyleoclim.LipdUtils.isEnsemble

2018-03-08 15:28:30,785 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import isEnsemble
2018-03-08 15:28:30,799 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:30,817 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:30,834 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'isEnsemble')
2018-03-08 15:28:30,862 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function isEnsemble at 0x11e7c19d8>
2018-03-08 15:28:30,878 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.isEnsemble', <function isEnsemble at 0x11e7c19d8>, {}, ['Check whe
2018-03-08 15:28:30,894 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: isEnsemble(csv_dict)
   :module: pyleoclim.LipdUtils

   Check whether ensembles are available
   
   Args:
       csv_dict (dict): Dictionary of available csv
   
   Returns:
       paleoEnsembleTables - List of available paleoEnsembleTables 
   
       chronEnsembleTables - List of availale chronEnsemble Tables
       
   
2018-03-08 15:28:30,915 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: input:
.. autofunction:: pyleocli.LipdUtils.getEnsembleValues

2018-03-08 15:28:30,931 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleocli.LipdUtils import getEnsembleValues
2018-03-08 15:28:30,950 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleocli.LipdUtils
2018-03-08 15:28:30,970 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'getEnsembleValues' from module 'pyleocli.LipdUtils'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleocli'

2018-03-08 15:28:30,985 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: (WARNING/2) autodoc: failed to import function 'getEnsembleValues' from module 'pyleocli.LipdUtils'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleocli'
2018-03-08 15:28:31,000 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:66: input:
.. autofunction:: pyleoclim.LipdUtils.mapAgeEnsembleToPaleoData
2018-03-08 15:28:31,016 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.LipdUtils import mapAgeEnsembleToPaleoData
2018-03-08 15:28:31,030 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.LipdUtils
2018-03-08 15:28:31,046 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.LipdUtils' from '//anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py'>
2018-03-08 15:28:31,070 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAgeEnsembleToPaleoData')
2018-03-08 15:28:31,084 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAgeEnsembleToPaleoData at 0x11e7c1ae8>
2018-03-08 15:28:31,099 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.LipdUtils.mapAgeEnsembleToPaleoData', <function mapAgeEnsembleToPaleoData at
2018-03-08 15:28:31,113 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAgeEnsembleToPaleoData(ensembleValues, depthEnsemble, depthPaleo)
   :module: pyleoclim.LipdUtils

   Map the depth for the ensemble age values to the paleo depth
   
   Args:
       ensembleValues (array): A matrix of possible age models. Realizations
           should be stored in columns
       depthEnsemble (array): A vector of depth. The vector should have the same
           length as the number of rows in the ensembleValues
       depthPaleo (array): A vector corresponding to the depth at which there
           are paleodata information
           
   Returns:
       ensembleValuesToPaleo - A matrix of age ensemble on the PaleoData scale 
       
   
   
2018-03-08 15:28:31,174 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:9: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:31,191 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.saveFigure:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:31,206 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.getTs:7: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:31,223 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/LipdUtils.py:docstring of pyleoclim.LipdUtils.whichMeasurement:8: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:31,238 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/LipdUtils.rst:64: (WARNING/2) autodoc: failed to import function ‘getEnsembleValues’ from module ‘pyleocli.LipdUtils’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 657, in import_object
    __import__(self.modname)
ImportError: No module named ‘pyleocli’
 [filtered system message]
2018-03-08 15:28:31,258 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "lipd utilities"...>>,)
2018-03-08 15:28:31,286 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 40%] [35mMain[39;49;00m                                                                                              
2018-03-08 15:28:31,301 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110bc7fd0>, 'Main')
2018-03-08 15:28:31,319 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Main', ['Main Functions\n==============\n\n\nUsing Pyleoclim with a LiPD file\n"""""""""""""""""""
2018-03-08 15:28:31,338 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:27: input:
.. autofunction:: pyleoclim.openLipd
2018-03-08 15:28:31,372 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import openLipd
2018-03-08 15:28:31,405 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:31,434 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:31,458 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'openLipd')
2018-03-08 15:28:31,478 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function openLipd at 0x11e7c1b70>
2018-03-08 15:28:31,943 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.openLipd', <function openLipd at 0x11e7c1b70>, {}, ['Read Lipd files into a 
2018-03-08 15:28:31,959 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: openLipd(usr_path='')
   :module: pyleoclim

   Read Lipd files into a dictionary
   
   Sets the dictionary as global variable so that it doesn't have to be provided
   as an argument for every function.
   
   Args:
       usr_path (str): The path to a directory or a single file. (Optional argument)
       
   Returns:
       lipd_dict - a dictionary containing the LiPD library
   
   
2018-03-08 15:28:31,980 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:28: input:
.. autofunction:: pyleoclim.fetchTs

2018-03-08 15:28:31,995 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import fetchTs
2018-03-08 15:28:32,012 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:32,038 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:32,059 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'fetchTs')
2018-03-08 15:28:32,075 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function fetchTs at 0x1221ea378>
2018-03-08 15:28:32,091 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.fetchTs', <function fetchTs at 0x1221ea378>, {}, ['Extract timeseries dictio
2018-03-08 15:28:32,105 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: fetchTs(lipds=None)
   :module: pyleoclim

   Extract timeseries dictionary
   
   This function is based on the function of the same name in the LiPD utilities.
   Set the dictionary as a global variable so that it doesn't have to be
   provided as an argument for every function. 
   
   Args:
       lipds (dict): A dictionary of LiPD files obtained through the 
       readLipd function
   
   Returns:
       ts_list - A list of timeseries object
   
   
2018-03-08 15:28:32,127 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:32: input:
.. autofunction:: pyleoclim.mapAllArchive

2018-03-08 15:28:32,151 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapAllArchive
2018-03-08 15:28:32,166 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:32,182 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:32,196 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapAllArchive')
2018-03-08 15:28:32,212 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapAllArchive at 0x1221ea400>
2018-03-08 15:28:32,255 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapAllArchive', <function mapAllArchive at 0x1221ea400>, {}, ['Map all the a
2018-03-08 15:28:32,275 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapAllArchive(lipds='', markersize=50, background='shadedrelief', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map all the available records loaded into the workspace by archiveType.
   
   Map of all the records into the workspace by archiveType.
       Uses the default color palette. Enter pyleoclim.plot_default for detail.
   
   Args:
       lipds (dict): A list of LiPD files. (Optional)
       markersize (int): The size of the markers. Default is 50
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
       saveFig (bool): Default is to not save the figure
       dir (str): The absolute path of the directory in which to save the
           figure. If not provided, creates a default folder called 'figures'
           in the LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
2018-03-08 15:28:32,300 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:32,316 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:32,339 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:32,360 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:32,382 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:34: input:
.. autofunction:: pyleoclim.mapLipd

2018-03-08 15:28:32,398 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapLipd
2018-03-08 15:28:32,415 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:32,434 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:32,459 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapLipd')
2018-03-08 15:28:32,475 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapLipd at 0x1221ea488>
2018-03-08 15:28:32,490 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapLipd', <function mapLipd at 0x1221ea488>, {}, ['Create a Map for a single
2018-03-08 15:28:32,507 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapLipd(timeseries='', countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=50, marker='default', figsize=[4, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Create a Map for a single record
   
   Orthographic projection map of a single record.
   
   Args:
       timeseries: a LiPD timeseries object. Will prompt for one if not given
       countries (bool): Draws the country borders. Default is on (True).
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders.
           Default is off (False)
       background (str): Plots one of the following images on the map:
           bluemarble, etopo, shadedrelief, or none (filled continents).
           Default is shadedrelief
       scale (float): useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): default is 50
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2018-03-08 15:28:32,524 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:32,544 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:32,568 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:32,585 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:32,600 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:32,618 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:32,651 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:32,682 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:36: input:
.. autofunction:: pyleoclim.mapNearRecords

2018-03-08 15:28:32,717 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import mapNearRecords
2018-03-08 15:28:32,782 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:32,803 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:32,843 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'mapNearRecords')
2018-03-08 15:28:32,903 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function mapNearRecords at 0x1221ea510>
2018-03-08 15:28:32,924 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.mapNearRecords', <function mapNearRecords at 0x1221ea510>, {}, ['Map the nea
2018-03-08 15:28:32,958 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: mapNearRecords(timeseries='', lipds='', n=5, radius=None, sameArchive=False, projection='ortho', lat_0='', lon_0='', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, countries=True, counties=False, rivers=False, states=False, background='shadedrelief', scale=0.5, markersize=200, markersize_adjust=True, marker_r='ko', marker_c='default', cmap='Reds', colorbar=True, location='right', label='Distance in km', figsize=[4, 4], ax=None, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Map the nearest records from the record of interest
   
   Args:
       timeseries (dict): A timeseries object. If none given, will prompt for one
       lipds (list): A list of LiPD files. (Optional)
       n (int): the number of records to match
       radius (float): The distance (in km) to search for nearby records.
           Default is to search the entire globe
       sameArchive (bool): Returns only records with the same archiveType.
           Default is not to do so.
       projection (string): the map projection. Refers to the Basemap
           documentation for a list of available projections. Only projections
           supporting setting the map center with a single lat/lon or with
           the coordinates of the rectangle are currently supported. 
           Default is to use a Robinson projection.
       lat_0, lon_0 (float): the center coordinates for the map. Default is
           mean latitude/longitude in the list. 
           If the chosen projection doesn't support it, Basemap will
           ignore the given values.
       llcrnrlat, urcrnrlat, llcrnrlon, urcrnrlon (float): The coordinates
           of the two opposite corners of the rectangle.
       countries (bool): Draws the countries border. Defaults is off (False). 
       counties (bool): Draws the USA counties. Default is off (False).
       rivers (bool): Draws the rivers. Default is off (False).
       states (bool): Draws the American and Australian states borders. 
           Default is off (False).
       background (string): Plots one of the following images on the map: 
           bluemarble, etopo, shadedrelief, or none (filled continents). 
           Default is none.
       scale (float): Useful to downgrade the original image resolution to
           speed up the process. Default is 0.5.
       markersize (int): the size of the marker
       markersize_adjust (bool): If True, will proportionaly adjust the size of
           the marker according to distance.
       marker_r (list or str): The color and shape of the marker for the
           reference record.
       marker_c (list or str): The color and shape of the marker for the other
           records. Default is to use the color palette by archiveType. If set
           to None then the color of the marker will represent the distance from
           the reference records.
       cmap (str): The colormap to use to represent the distance from the 
           reference record if no marker is selected.
       colorbar (bool): Create a colorbar. Default is True
       location (str): Location of the colorbar
       label (str): Label for the colorbar.
       figsize (list): the size for the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
       
   Returns:
       ax - The figure       
   
   
2018-03-08 15:28:32,991 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:33,006 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:33,172 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:33,188 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:33,209 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:33,275 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:33,312 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:33,332 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:33,439 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:33,468 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:33,517 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:33,536 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:40: input:
.. autofunction:: pyleoclim.plotTs

2018-03-08 15:28:33,554 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotTs
2018-03-08 15:28:33,582 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:33,600 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:33,629 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotTs')
2018-03-08 15:28:33,648 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotTs at 0x1221ea8c8>
2018-03-08 15:28:33,664 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.plotTs', <function plotTs at 0x1221ea8c8>, {}, ['Plot a single time series.'
2018-03-08 15:28:33,684 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotTs(timeseries='', x_axis='', markersize=50, marker='default', figsize=[10, 4], saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Plot a single time series.
   
   Args:
       A timeseries: By default, will prompt the user for one.
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       markersize (int): default is 50.
       marker (str): a string (or list) containing the color and shape of the
           marker. Default is by archiveType. Type pyleo.plot_default to see
           the default palette.
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure.
   
   
2018-03-08 15:28:33,700 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:33,715 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:33,729 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:33,744 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:33,763 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:33,818 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:33,847 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: input:
.. autofunction:: pyleoclim.plotEns

2018-03-08 15:28:33,892 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import plotEns
2018-03-08 15:28:33,916 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:34,034 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:34,119 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotEns')
2018-03-08 15:28:34,178 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'plotEns' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'plotEns'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns

2018-03-08 15:28:34,227 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: (WARNING/2) autodoc: failed to import function 'plotEns' from module 'pyleoclim'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim' has no attribute 'plotEns'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns
2018-03-08 15:28:34,252 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:44: input:
.. autofunction:: pyleoclim.histTs

2018-03-08 15:28:34,296 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import histTs
2018-03-08 15:28:34,324 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:34,339 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:34,354 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'histTs')
2018-03-08 15:28:34,374 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function histTs at 0x1221ea9d8>
2018-03-08 15:28:34,405 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.histTs', <function histTs at 0x1221ea9d8>, {}, ['Plot a univariate distribut
2018-03-08 15:28:34,420 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: histTs(timeseries='', bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'Rug'}, fit_kws={'label': 'Fit'}, color='default', vertical=False, norm_hist=True, figsize=[5, 5], saveFig=False, format='eps', dir='')
   :module: pyleoclim

   Plot a univariate distribution of the PaleoData values
   
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the
   seaborn kdeplot() and rugplot() functions. It can also fit
   scipy.stats distributions and plot the estimated PDF over the data.
   
   Args:
       timeseries: A timeseries. By default, will prompt the user for one.
       bins (int): Specification of hist bins following matplotlib(hist),
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning
           a tuple that can be passed to a pdf method of positional
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in. Default is to use the default paletter for each
           archive type.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or
           fitted density is plotted
       figsize (list): the size for the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns
       fig - The figure
   
   
2018-03-08 15:28:34,437 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:34,453 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:34,469 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:34,490 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:34,537 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:34,552 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:34,568 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:34,591 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:34,621 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:34,671 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:52: input:
.. autofunction:: pyleoclim.summaryTs

2018-03-08 15:28:34,734 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import summaryTs
2018-03-08 15:28:34,760 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:34,782 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:34,832 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'summaryTs')
2018-03-08 15:28:34,848 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function summaryTs at 0x1221eaa60>
2018-03-08 15:28:34,864 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.summaryTs', <function summaryTs at 0x1221eaa60>, {}, ['Basic summary plot', 
2018-03-08 15:28:34,880 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: summaryTs(timeseries='', x_axis='', saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Basic summary plot
   
   Plots the following information: the time series, a histogram of
   the PaleoData_values, location map, spectral density using the wwz 
   method, and metadata about the record.
   
   Args:
       timeseries: a timeseries object. By default, will prompt for one
       x_axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       The figure
   
   
2018-03-08 15:28:34,906 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:34,925 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:34,940 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:34,956 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:34,973 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:57: input:
.. autofunction:: pyleoclim.statsTs

2018-03-08 15:28:34,988 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import statsTs
2018-03-08 15:28:35,011 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:35,027 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:35,043 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'statsTs')
2018-03-08 15:28:35,062 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function statsTs at 0x1221eaae8>
2018-03-08 15:28:35,087 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.statsTs', <function statsTs at 0x1221eaae8>, {}, ['Calculate simple statisti
2018-03-08 15:28:35,156 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: statsTs(timeseries='')
   :module: pyleoclim

   Calculate simple statistics of a timeseries
   
   Args:
       timeseries: sytem will prompt for one if not given
   
   Returns:
       the mean, median, min, max, standard deviation and the
       inter-quartile range (IQR) of a timeseries.
   
   Examples:
       >>> mean, median, min_, max_, std, IQR = pyleo.statsTs(timeseries)
   
   
2018-03-08 15:28:35,192 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:59: input:
.. autofunction:: pyleoclim.corrSigTs

2018-03-08 15:28:35,227 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import corrSigTs
2018-03-08 15:28:35,257 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:35,286 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:35,334 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'corrSigTs')
2018-03-08 15:28:35,374 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function corrSigTs at 0x1221eab70>
2018-03-08 15:28:35,396 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.corrSigTs', <function corrSigTs at 0x1221eab70>, {}, ['Estimates the signifi
2018-03-08 15:28:35,448 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: corrSigTs(timeseries1='', timeseries2='', x_axis='', interp_step='', start='', end='', nsim=1000, method='isospectral', alpha=0.5)
   :module: pyleoclim

   Estimates the significance of correlations between non IID timeseries.
   
   Function written by. F. Zhu.
   
   Args:
       timeseries1, timeseries2: timeseries object. Default is blank.
       x-axis (str): The representation against which to express the
           paleo-data. Options are "age", "year", and "depth".
           Default is to let the system choose if only one available
           or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start time/age/depth. Default is the maximum of
           the minima of the two timeseries
       end (float): End time/age/depth. Default is the minimum of the
           maxima of the two timeseries
       nsim (int): the number of simulations. Default is 1000
       method (str): method use to estimate the correlation and significance.
           Available methods include:
               - 'ttest': T-test where the degrees of freedom are corrected for
               the effect of serial correlation 
   
               - 'isopersistant': AR(1) modeling of the two timeseries 
   
               - 'isospectral' (default): phase randomization of original
               inputs.
           The T-test is parametric test, hence cheap but usually wrong
           except in idyllic circumstances.
           The others are non-parametric, but their computational
           requirements scales with nsim.
       alpha (float): significance level for critical value estimation. Default is 0.05
   
   Returns:
       r (float) - correlation between the two timeseries 
   
       sig (bool) -  Returns True if significant, False otherwise 
   
       p (real) - the p-value
   
   
2018-03-08 15:28:35,479 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:35,501 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:35,538 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:35,555 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:35,573 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:35,589 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:35,606 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:28:35,634 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:28:35,650 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:35,668 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:35,685 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:65: input:
.. autofunction:: pyleoclim.binTs

2018-03-08 15:28:35,699 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import binTs
2018-03-08 15:28:35,720 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:35,744 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:35,762 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'binTs')
2018-03-08 15:28:35,785 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function binTs at 0x1221eabf8>
2018-03-08 15:28:35,806 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.binTs', <function binTs at 0x1221eabf8>, {}, ['Bin the paleoData values of t
2018-03-08 15:28:35,833 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: binTs(timeseries='', x_axis='', bin_size='', start='', end='')
   :module: pyleoclim

   Bin the paleoData values of the timeseries
   
   Args:
       timeseries. By default, will prompt the user for one.
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system  choose if only one available or prompt the user.
       bin_size (float): the size of the bins to be used. By default,
           will prompt for one
       start (float): Start time/age/depth. Default is the minimum
       end (float): End time/age/depth. Default is the maximum
   
   Returns:
       binned_values- the binned output,
   
       bins-  the bins (centered on the median, i.e. the 100-200 bin is 150),
   
       n-  number of data points in each bin,
   
       error- the standard error on the mean in each bin
   
   
   
2018-03-08 15:28:35,856 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:35,876 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:35,894 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:35,917 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:67: input:
.. autofunction:: pyleoclim.interpTs

2018-03-08 15:28:35,937 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import interpTs
2018-03-08 15:28:35,957 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:35,972 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:35,986 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interpTs')
2018-03-08 15:28:36,002 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interpTs at 0x1221eac80>
2018-03-08 15:28:36,022 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.interpTs', <function interpTs at 0x1221eac80>, {}, ['Simple linear interpola
2018-03-08 15:28:36,039 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interpTs(timeseries='', x_axis='', interp_step='', start='', end='')
   :module: pyleoclim

   Simple linear interpolation
   
   Simple linear interpolation of the data using the numpy.interp method
   
   Args:
       timeseries. Default is blank, will prompt for it
       x-axis (str): The representation against which to plot the paleo-data.
           Options are "age", "year", and "depth". Default is to let the
           system choose if only one available or prompt the user.
       interp_step (float): the step size. By default, will prompt the user.
       start (float): Start year/age/depth. Default is the minimum
       end (float): End year/age/depth. Default is the maximum
   
   Returns:
       interp_age - the interpolated age/year/depth according to the end/start
       and time step, 
   
       interp_values - the interpolated values
   
   
2018-03-08 15:28:36,059 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:36,090 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:36,146 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:69: input:
.. autofunction:: pyleoclim.standardizeTs

2018-03-08 15:28:36,173 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import standardizeTs
2018-03-08 15:28:36,192 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:36,209 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:36,233 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardizeTs')
2018-03-08 15:28:36,255 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardizeTs at 0x1221ead08>
2018-03-08 15:28:36,273 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.standardizeTs', <function standardizeTs at 0x1221ead08>, {}, ['Centers and n
2018-03-08 15:28:36,290 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardizeTs(timeseries='', scale=1, ddof=0, eps=0.001)
   :module: pyleoclim

   Centers and normalizes the paleoData values of a  given time series.
   
   Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       - z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed 
   
       - mu (real): the mean of the original time series, E[X] 
   
       - sig (real): the standard deviation of the original time series, std[X] 
   
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2018-03-08 15:28:36,317 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:71: input:
.. autofunction:: pyleoclim.segmentTs

2018-03-08 15:28:36,343 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import segmentTs
2018-03-08 15:28:36,359 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:36,379 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:36,396 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'segmentTs')
2018-03-08 15:28:36,410 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function segmentTs at 0x1221ead90>
2018-03-08 15:28:36,427 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.segmentTs', <function segmentTs at 0x1221ead90>, {}, ['Divides a time series
2018-03-08 15:28:36,462 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: segmentTs(timeseries='', factor=2)
   :module: pyleoclim

   Divides a time series into several segments using a gap detection algorithm
   
   Gap detection rule: If the time interval between some two data points is
   larger than some factor times the mean resolution of the timeseries, then
   a brak point is applied and the timseries is divided. 
   
   Args:
       timeseries: a LiPD timeseries object
       factor (float): factor to adjust the threshold. threshold = factor*dt_mean.
           Default is 2.
   
   Returns:
       seg_y (list) - a list of several segments with potentially different length
       seg_t (list) - A list of the time values for each y segment. 
       n_segs (int) - the number of segments
       
   
   
2018-03-08 15:28:36,482 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:36,511 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:75: input:
.. autofunction:: pyleoclim.wwzTs

2018-03-08 15:28:36,530 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import wwzTs
2018-03-08 15:28:36,559 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:36,577 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:36,593 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'wwzTs')
2018-03-08 15:28:36,611 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function wwzTs at 0x1221eae18>
2018-03-08 15:28:36,629 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.wwzTs', <function wwzTs at 0x1221eae18>, {}, ['Weigthed wavelet Z-transform 
2018-03-08 15:28:36,663 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: wwzTs(timeseries='', lim=None, wwz=False, psd=True, wwz_default=True, psd_default=True, wwaplot_default=True, psdplot_default=True, fig=True, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Weigthed wavelet Z-transform analysis
   
   Wavelet analysis for unevenly spaced data adapted from Foster et al. (1996)
   
   Args:
       timeseries (dict): A LiPD timeseries object (Optional, will prompt for one.)
       lim (list): Truncate the timeseries between min/max time (e.g., [0,10000])
       wwz (bool): If True, will perform wavelet analysis
       psd (bool): If True, will inform the power spectral density of the timeseries
       wwz_default: If True, will use the following default parameters:
           
           wwz_default = {'tau':None,
                          'freqs':None,
                          'c':1/(8*np.pi**2),
                          'Neff':3,
                          'Neff_coi':3,
                          'nMC':200,
                          'nproc':8,
                          'detrend':'no',
                          'params' : ["default",4,0,1],
                          'gaussianize': False,
                          'standardize':True,
                          'method':'Kirchner_f2py',
                          'bc_mode':'reflect',
                          'reflect_type':'odd',
                          'len_bd':0}
               
           Modify the values for specific keys to change the default behavior.
               
       psd_default: If True, will use the following default parameters:
           
           psd_default = {'tau':None,
                      'freqs': None,
                      'c':1e-3,
                      'nproc':8,
                      'nMC':200,
                      'detrend':'no',
                      'params' : ["default",4,0,1],
                      'gaussianize': False,
                      'standardize':True,
                      'Neff':3,
                      'anti_alias':False,
                      'avgs':1,
                      'method':'Kirchner_f2py',
                      }
           
           Modify the values for specific keys to change the default behavior.
           
       wwaplot_default: If True, will use the following default parameters:
           
           wwaplot_default={'AR1_q':AR1_q,
                                'coi':coi,
                                'levels':None,
                                'tick_range':None,
                                'yticks':None,
                                'yticks_label': None,
                                'ylim':None,
                                'xticks':None,
                                'xlabels':None,
                                'figsize':[20,8],
                                'clr_map':'OrRd',
                                'cbar_drawedges':False,
                                'cone_alpha':0.5,
                                'plot_signif':True,
                                'signif_style':'contour',
                                'plot_cone':True,
                                'title':None,
                                'ax':None,
                                'xlabel': label.upper()[0]+label[1:]+'('+s+')',
                                'ylabel': 'Period ('+ageunits+')',
                                'cbar_orientation':'vertical',
                                'cbar_pad':0.05,
                                'cbar_frac':0.15,
                                'cbar_labelsize':None}
           
           Modify the values for specific keys to change the default behavior.
       psdplot_default: If True, will use the following default parameters:
           
           psdplot_default={'lmstyle':'-',
                                'linewidth':None,
                                'color': sns.xkcd_rgb["denim blue"],
                                'ar1_lmstyle':'-',
                                'ar1_linewidth':1,
                                'period_ticks':None,
                                'period_tickslabel':None,
                                'psd_lim':None,
                                'period_lim':None,
                                'figsize':[20,8],
                                'label':'PSD',
                                'plot_ar1':True,
                                'psd_ar1_q95':psd_ar1_q95,
                                'title': None,
                                'psd_ar1_color':sns.xkcd_rgb["pale red"],
                                'ax':None,
                                'vertical':False,
                                'plot_gridlines':True,
                                'period_label':'Period ('+ageunits+')',
                                'psd_label':'Spectral Density',
                                'zorder' : None}    
           
           Modify the values for specific keys to change the default behavior.
           
       fig (bool): If True, plots the figure
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
       
   Returns:
       dict_out (dict): A dictionary of outputs. 
           
           For wwz: 
           
           - wwa (array): The weights wavelet amplitude 
       
           - AR1_q (array): AR1 simulations 
       
           - coi (array): cone of influence 
       
           - freqs (array): vector for frequencies 
       
           - tau (array): the evenly-spaced time points, namely the time 
           shift for wavelet analysis. 
       
           - Neffs (array): The matrix of effective number of points in the
           time-scale coordinates.
       
           - coeff (array): The wavelet transform coefficients
       
           For psd: 
           
           - psd (array): power spectral density 
       
           - freqs (array): vector of frequency 
       
           - psd_ar1_q95 (array): the 95% quantile of the psds of AR1 processes 
       
       fig: The figure
        
       References:
           Foster, G. (1996). Wavelets for period analysis of unevenly 
           sampled time series. The Astronomical Journal, 112(4), 1709-1729.
       
       Examples:
           To run both wwz and psd: 
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(wwz=True)
           
           Note: This will return a single figure with wwa and psd 
   
           
           To change a default behavior:
   
           
           >>> dict_out, fig = pyleoclim.wwzTs(psd_default = {'nMC':1000}) 
          
   
2018-03-08 15:28:36,687 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:36,710 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:36,727 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:36,763 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:28:36,780 [WARNING] sphinx.util.docutils: Bullet list ends without a blank line; unexpected unindent.
2018-03-08 15:28:36,804 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:80: input:
.. autofunction:: pyleoclim.Bchron

2018-03-08 15:28:36,820 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim import Bchron
2018-03-08 15:28:36,856 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim
2018-03-08 15:28:36,876 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim' from '//anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py'>
2018-03-08 15:28:36,891 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'Bchron')
2018-03-08 15:28:36,904 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function Bchron at 0x1221eaea0>
2018-03-08 15:28:36,919 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Bchron', <function Bchron at 0x1221eaea0>, {}, ['Runs Bchron and plot if ask
2018-03-08 15:28:36,935 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: Bchron(lipd, modelNum=None, objectName=None, rejectAges=None, calCurves=None, reservoirAgeCorr=None, predictPositions='paleo', positionsThickness=None, outlierProbs=None, iterations=1000, burn=2000, thin=8, extractDate=-68, maxExtrap=500, thetaMhSd=0.5, muMhSd=0.1, psiMhSd=0.1, ageScaleVal=1000, positionScaleVal=100, saveLipd=True, plot=True, figsize=[4, 8], flipCoor=False, xlabel=None, ylabel=None, xlim=None, ylim=None, violinColor='#8B008B', medianLineColor='black', medianLineWidth=2.0, CIFillColor='Silver', samplePaths=True, samplePathNumber=10, alpha=0.5, saveFig=False, dir='', format='eps')
   :module: pyleoclim

   Runs Bchron and plot if asked 
   
   Fits a non-parametric chronology model to age/position data according to
   the Compound Poisson-Gamma model defined by Haslett and Parnell (2008). 
   This version used a slightly modified Markov chain Monte-Carlo fitting
   algorithm which aims to converge quicker and requires fewer iterations.
   It also a slightly modified procedure for identifying outliers.
   
   The Bchronology functions fits a compounf Poisson-Gamma distribution to the
   incrememnts between the dated levels. This involves a stochastic linear
   interpolation step where the age gaps are Gamma distributed, and the position
   gaps are Exponential. Radiocarbon and non-radiocarbon dates (including outliers)
   are updated within the fucntion also by MCMC.
   
   This function also allows to save the ensemble, distributions, and probability
   tables as well as the parameters with which the model was run into the LiPD file.
   
   Finally allows to make a plot.
   
   Args:
       lipd (dict): A dictionary containing the entry of a LiPD file. Can be
           obtained from lipd.readLipd() or pyleoclim.openLipd(). Please note
           that the Bchron function currently only allows for a single LiPD file
           (i.e., not the entire directory).
       modelNum (int): The model number in which to place the Bchron output. 
           If unknown, the function will try to make a guess and/or prompt
           based on the number of already available models.
       objectName (str): The name of the chron object in which to store the new
           model (e.g. "chron0")
       rejectAges (vector): A vector of 1/0 where 1 include the dates to be rejected. 
           Default it None.
       calCurves (list): (Optional) A vector of values containing either 'intcal13',
           'marine13', 'shcal13', or 'normal'. If none is provided, will
           prompt the user. Should be either of length =1 if using the same
           calibration for each age or the same length as the vector of ages.
       reservoirAgeCorr (array): (Optional) A list (matrix) of two floats that correspond to the
           DeltaR and DeltaR uncertainty. If already added to the ages and
           ages standard deviation, then enter [0,0] to bypass the prompt.
           Will only be applied if CalCurves is set to 'marine13'. Otherwise,
           leave to none.
       predictPositions (array): (Optional) a vector of positions 
           (e.g. depths) at which predicted age values are required. 
           Defaults to a sequence of length 100 from the top position to the
           bottom position.
       positionsThickness (array): (Optional) Thickness values for each of the positions.
           The thickness values should be the full thickness value of the
           slice. By default set to zero.
       outlierProbs (array): (Optional) A vector of prior outlier probabilities,
           one for each age. Defaults to 0.01
       iterations (int): (Optional) The number of iterations to start the procedure. 
           Default and minimum should be 10000.
       burn (int): (Optional) The number of starting iterations to discard.
           Default is 200
       thin (int): (Optional) The step size for every iteration to keep beyond
           the burnin. Default is 8.
       extractDate (float): (Optional) The top age of the core. Used for
           extrapolation purposes so that no extrapolated ages go beyond the
           top age of the core. Defaults to the current year.
       maxExtrap (int): (Optional) The maximum number of extrapolations to
           perform before giving up and setting the predicted ages to NA. 
           Useful for when large amounts of extrapolation are required, i.e.
           some of the predictPositions are a long way from the dated
           positions. Defaults to 500.
       thetaMhSd (float):  (Optional)  The Metropolis-Hastings standard
           deviation for the age parameters. Defaults to 0.5.
       muMhSd (float): (Optional)  The Metropolis-Hastings standard deviation
           for the compound Poisson-Gamma Scale. Defaults to 0.1
       psiMhSd (float): (Optional) The Metropolis-Hastings standard deviation 
           for the Compound Poisson-Gamma Scale.
       ageScaleVal (int): (Optional) A scale value for the ages. 
           Bchronology works best when the ages are scaled to be 
           approximately between 0 and 100.
           The default value is thus 1000 for ages given in years.
       positionScaleVal (int):  (Optional) A scale value for the positions. 
           Bchronology works best when the positions are scaled to be 
           approximately between 0 and 100. The default value is thus
           100 for positions given in cm.
       saveLipd (bool): If True, saves the ensemble, distribution, and probability
           tables along with the parameters used to run the model in the LiPD
           file.
       plot (bool): If True, makes a plot for the chronology
       figsize (list): The figure size. Default is [4,8]
       flipCoor (bool): If True, plots depth on the y-axis.
       xlabel (str): The label for the x-axis
       ylabel (str): The label for the y-axis
       xlim (list): Limits for the x-axis. Default corresponds to the min/max
           of the depth vector.
       ylim (list): Limits for the y-axis. Default set by matplotlib
       violinColor (str): The color for the violins. Default is purple
       medianLineColor (str): The color for the median line. Default is black.
       medianLineWidth (float): The width for the median line
       CIFillColor (str): Fill color in between the 95% confidence interval.
           Default is silver.
       samplePaths (bool): If True, draws sample paths from the distribution.
           Use the same color as the violins. 
       samplePathNumber (int): The number of sample paths to draw. Default is 10.
           Note: samplePaths need to be set to True. 
       alpha (float): The violins' transparency. Number between 0 and 1
       saveFig (bool): default is to not save the figure
       dir (str): the full path of the directory in which to save the figure.
           If not provided, creates a default folder called 'figures' in the
           LiPD working directory (lipd.path).
       format (str): One of the file extensions supported by the active
           backend. Default is "eps". Most backend support png, pdf, ps, eps,
           and svg.
   
   Returns:
       depth - the predicted positions (either same as the user or the default) 
   
       chron -  a numpy array of possible chronologies in each column.
           The number of rows is the same as the length of depth
       ageDist - the distribution of ages around each dates.
       fig - the figure        
   
   Warnings:
       This function requires R and the Bchron package and all its
           dependencies to be installed on the same machine.
           
   Reference:
       - Haslett, J., and Parnell, A. C. (2008). A simple monotone 
           process with application to radiocarbon-dated depth 
           chronologies. Journal of the Royal Statistical Society, 
           Series C, 57, 399-418. DOI:10.1111/j.1467-9876.2008.00623.x
       - Parnell, A. C., Haslett, J., Allen, J. R. M., Buck, C. E., 
           and Huntley, B. (2008). A flexible approach to assessing 
           synchroneity of past events using Bayesian reconstructions
           of sedimentation history. Quaternary Science Reviews, 
           27(19-20), 1872-1885. DOI:10.1016/j.quascirev.2008.07.009        
   
2018-03-08 15:28:36,966 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:36,982 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:36,998 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:37,013 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:37,029 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:37,051 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:37,068 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:37,083 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:37,102 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:37,204 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,220 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,234 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,261 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapAllArchive:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,302 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,335 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,357 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:17: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,378 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:19: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,394 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,410 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:24: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,426 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapLipd:26: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,441 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,459 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:9: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,478 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:22: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,493 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,509 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:27: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,524 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:32: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,540 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:34: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,558 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:35: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,580 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:43: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,595 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:50: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,610 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.mapNearRecords:52: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,624 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,639 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,654 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,675 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,689 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:15: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,702 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.plotTs:17: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,716 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Main.rst:42: (WARNING/2) autodoc: failed to import function ‘plotEns’ from module ‘pyleoclim’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim’ has no attribute ‘plotEns’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: plotEns
 [filtered system message]
2018-03-08 15:28:37,730 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,745 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,764 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:16: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,782 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:18: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,798 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,814 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,831 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,846 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:31: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,863 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.histTs:33: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,885 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,898 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,913 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:14: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,929 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.summaryTs:16: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,943 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,958 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:11: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:37,982 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:13: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:37,999 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:14: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,014 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:16: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,029 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:18: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:38,045 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:20: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,060 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:25: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,088 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:26: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,102 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.corrSigTs:30: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,118 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:6: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:38,138 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:8: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,161 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.binTs:10: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,212 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:8: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:38,234 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.interpTs:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,261 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.segmentTs:10: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:38,299 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:77: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,324 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:106: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:38,347 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:108: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,382 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:126: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,407 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.wwzTs:129: (WARNING/2) Bullet list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,428 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:81: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,445 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:87: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:38,462 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:88: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,490 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:93: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:38,507 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:94: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,523 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:98: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,539 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:101: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:38,554 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:103: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,570 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/__init__.py:docstring of pyleoclim.Bchron:112: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:38,593 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "main functions"...>>,)
2018-03-08 15:28:38,624 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 60%] [35mPlot[39;49;00m                                                                                              
2018-03-08 15:28:38,639 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110bc7fd0>, 'Plot')
2018-03-08 15:28:38,656 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Plot', ['Plotting Functions\n==================\n\n.. autofunction:: pyleoclim.Plot.plot\n\n.. aut
2018-03-08 15:28:38,676 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:4: input:
.. autofunction:: pyleoclim.Plot.plot

2018-03-08 15:28:38,696 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot
2018-03-08 15:28:38,710 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2018-03-08 15:28:38,725 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2018-03-08 15:28:38,741 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot')
2018-03-08 15:28:38,755 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot at 0x11e7c1e18>
2018-03-08 15:28:38,803 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot', <function plot at 0x11e7c1e18>, {}, ['Make a 2-D plot', '', 'Arg
2018-03-08 15:28:38,834 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot(x, y, markersize=50, marker='ro', x_label='', y_label='', title='', figsize=[10, 4], ax=None)
   :module: pyleoclim.Plot

   Make a 2-D plot
   
   Args:
       x (numpy array): a 1xn numpy array of values for the x-axis
       y (numpy array): a 1xn numpy array for the y-axis
       markersize (int): the size of the marker
       marker (string or list): color and shape of the marker
       x_axis_label (str): the label for the x-axis
       y_axis_label (str): the label for the y-axis
       title (str): the title for the plot
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)
           
   Return:
       The figure       
   
   
2018-03-08 15:28:38,890 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: input:
.. autofunction:: pyleoclim.Pot.plotEns

2018-03-08 15:28:38,918 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Pot import plotEns
2018-03-08 15:28:38,941 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Pot
2018-03-08 15:28:38,959 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'plotEns' from module 'pyleoclim.Pot'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleoclim.Pot'

2018-03-08 15:28:38,975 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: (WARNING/2) autodoc: failed to import function 'plotEns' from module 'pyleoclim.Pot'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 657, in import_object
    __import__(self.modname)
ImportError: No module named 'pyleoclim.Pot'
2018-03-08 15:28:38,997 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:8: input:
.. autofunction:: pyleoclim.Plot.plot_hist
2018-03-08 15:28:39,012 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Plot import plot_hist
2018-03-08 15:28:39,028 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Plot
2018-03-08 15:28:39,045 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Plot' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py'>
2018-03-08 15:28:39,080 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plot_hist')
2018-03-08 15:28:39,127 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plot_hist at 0x11e7c1f28>
2018-03-08 15:28:39,144 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Plot.plot_hist', <function plot_hist at 0x11e7c1f28>, {}, ['Plot a univariat
2018-03-08 15:28:39,161 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plot_hist(y, bins=None, hist=True, label='', kde=True, rug=False, fit=None, hist_kws={'label': 'Histogram'}, kde_kws={'label': 'KDE fit'}, rug_kws={'label': 'rug'}, fit_kws={'label': 'fit'}, color='0.7', vertical=False, norm_hist=True, figsize=[5, 5], ax=None)
   :module: pyleoclim.Plot

   Plot a univariate distribution of the PaleoData values
           
   This function is based on the seaborn displot function, which is
   itself a combination of the matplotlib hist function with the 
   seaborn kdeplot() and rugplot() functions. It can also fit 
   scipy.stats distributions and plot the estimated PDF over the data.
       
   Args:
       y (array): nx1 numpy array. No missing values allowed 
       bins (int): Specification of hist bins following matplotlib(hist), 
           or None to use Freedman-Diaconis rule
       hist (bool): Whether to plot a (normed) histogram 
       label (str): The label for the axis
       kde (bool): Whether to plot a gaussian kernel density estimate
       rug (bool): Whether to draw a rugplot on the support axis
       fit: Random variable object. An object with fit method, returning 
           a tuple that can be passed to a pdf method of positional 
           arguments following a grid of values to evaluate the pdf on.
       {hist, kde, rug, fit}_kws: Dictionaries. Keyword arguments for 
           underlying plotting functions. If modifying the dictionary, make
           sure the labels "hist", "kde", "rug" and "fit" are still passed.
       color (str): matplotlib color. Color to plot everything but the
           fitted curve in.
       vertical (bool): if True, oberved values are on y-axis.
       norm_hist (bool): If True (default), the histrogram height shows
           a density rather than a count. This is implied if a KDE or 
           fitted density is plotted
       figsize (list): the size of the figure
       ax: Return as axis instead of figure (useful to integrate plot into a subplot)     
   
   Returns
      fig - The figure
   
2018-03-08 15:28:39,196 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:39,216 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:39,233 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:39,250 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:39,270 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:39,294 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:39,317 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:39,348 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Plot.rst:6: (WARNING/2) autodoc: failed to import function ‘plotEns’ from module ‘pyleoclim.Pot’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 657, in import_object
    __import__(self.modname)
ImportError: No module named ‘pyleoclim.Pot’
 [filtered system message]
2018-03-08 15:28:39,366 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:11: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:39,384 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:12: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:39,426 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:17: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:39,465 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:19: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:39,490 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:24: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:39,519 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:26: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:39,539 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Plot.py:docstring of pyleoclim.Plot.plot_hist:28: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:39,559 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "plotting functions"...>>,)
2018-03-08 15:28:39,578 [INFO] sphinx.util: [01mreading sources... [39;49;00m[ 80%] [35mRBchron[39;49;00m                                                                                           
2018-03-08 15:28:39,595 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110bc7fd0>, 'RBchron')
2018-03-08 15:28:39,623 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('RBchron', ['RBchron\n=======\n\nThis module helps in the preparation of a Bchron run.\n\nWhen usin
2018-03-08 15:28:39,639 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:10: input:
.. autofunction:: pyleoclim.RBchron.chooseCalCurves

2018-03-08 15:28:39,653 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import chooseCalCurves
2018-03-08 15:28:39,667 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:28:39,682 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:28:39,701 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'chooseCalCurves')
2018-03-08 15:28:39,719 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function chooseCalCurves at 0x11f209730>
2018-03-08 15:28:39,840 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.chooseCalCurves', <function chooseCalCurves at 0x11f209730>, {}, ['P
2018-03-08 15:28:39,871 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: chooseCalCurves()
   :module: pyleoclim.RBchron

   Prompt for a calibration curve if not given by the user.
   
   Prompt the user for the name of a calibration curve used to run the Bchron 
   software package. The user can enter either enter only one name that will
   be applied to each age or a list of names of different ages. To enter a list, 
   separate each name with a comma. No quotation marks needed. 
   
   Returns:
       A list of calibration curves to be applied  
   
   
2018-03-08 15:28:39,921 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: input:
.. autofunction:: pyleoclim.RBchron.verufyCalCurves

2018-03-08 15:28:39,944 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import verufyCalCurves
2018-03-08 15:28:39,964 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:28:39,978 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:28:39,996 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'verufyCalCurves')
2018-03-08 15:28:40,023 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'verufyCalCurves' from module 'pyleoclim.RBchron'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.RBchron' has no attribute 'verufyCalCurves'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves

2018-03-08 15:28:40,042 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: (WARNING/2) autodoc: failed to import function 'verufyCalCurves' from module 'pyleoclim.RBchron'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.RBchron' has no attribute 'verufyCalCurves'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves
2018-03-08 15:28:40,064 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:14: input:
.. autofunction:: pyleoclim.RBchron.reservoirAgeCorrection

2018-03-08 15:28:40,083 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import reservoirAgeCorrection
2018-03-08 15:28:40,111 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:28:40,138 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:28:40,154 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'reservoirAgeCorrection')
2018-03-08 15:28:40,169 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function reservoirAgeCorrection at 0x1221ea1e0>
2018-03-08 15:28:40,184 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.reservoirAgeCorrection', <function reservoirAgeCorrection at 0x1221e
2018-03-08 15:28:40,206 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: reservoirAgeCorrection()
   :module: pyleoclim.RBchron

   Estimate reservoir age correction
   
   Assists in estimating the reservoir age correction for marine records.
   If unknown, will direct the user to copy and paste the table available
   on the 14Chrono Marine Reservoir database: http://intcal.qub.ac.uk/marine/
   
   Returns:
       ageCorr -  the DeltaR for the site. 
   
       ageCorrStd - The error on DeltaR estimated as the standard error on the 
       mean if using the 14Chrono Marine Reservoir database.
   
   
2018-03-08 15:28:40,229 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:16: input:
.. autofunction:: pyleoclim.RBchron.runBchron

2018-03-08 15:28:40,248 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import runBchron
2018-03-08 15:28:40,273 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:28:40,305 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:28:40,349 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'runBchron')
2018-03-08 15:28:40,372 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function runBchron at 0x1221ea268>
2018-03-08 15:28:40,406 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.runBchron', <function runBchron at 0x1221ea268>, {}, ['Age model for
2018-03-08 15:28:40,443 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: runBchron(ages, agesStd, positions, rejectAges=None, positionsThickness=None, calCurves=None, reservoirAgeCorr=None, outlierProbs=None, predictPositions=None, iterations=10000, burn=2000, thin=8, extractDate=-68, maxExtrap=500, thetaMhSd=0.5, muMhSd=0.1, psiMhSd=0.1, ageScaleVal=1000, positionScaleVal=100)
   :module: pyleoclim.RBchron

   Age model for Tie-Point chronologies
   
   Fits a non-parametric chronology model to age/position data according to
   the Compound Poisson-Gamma model defined by Haslett and Parnell (2008). 
   This version used a slightly modified Markov chain Monte-Carlo fitting
   algorithm which aims to converge quicker and requires fewer iterations.
   It also a slightly modified procedure for identifying outliers.
   
   The Bchronology functions fits a compounf Poisson-Gamma distribution to the
   incrememnts between the dated levels. This involves a stochastic linear
   interpolation step where the age gaps are Gamma distributed, and the position
   gaps are Exponential. Radiocarbon and non-radiocarbon dates (including outliers)
   are updated within the fucntion also by MCMC.
   
   Args:
       ages (array): A vector of ages (most likely 14C)
       ageSds (array): A vector of 1-sigma values for the ages given above
       positions (array): Position values (e.g. depths) for each age
       rejectAges (vector): A vector of 1/0 where 1 include the dates to be rejected. 
           Default it None.
       positionsThickness (array): (Optional) Thickness values for each of the positions.
           The thickness values should be the full thickness value of the
           slice. By default set to zero.
       calCurves (list): (Optional) A vector of values containing either 'intcal13',
           'marine13', 'shcal13', or 'normal'. If none is provided, will
           prompt the user. Should be either of length =1 if using the same
           calibration for each age or the same length as the vector of ages.
       reservoirAgeCorr (array): (Optional) A list (matrix) of two floats that correspond to the
           DeltaR and DeltaR uncertainty. If already added to the ages and
           ages standard deviation, then enter [0,0] to bypass the prompt.
           Will only be applied if CalCurves is set to 'marine13'. Otherwise,
           leave to none.
       outlierProbs (array): (Optional) A vector of prior outlier probabilities,
           one for each age. Defaults to 0.01
       predictPositions (array): (Optional) a vector of positions 
           (e.g. depths) at which predicted age values are required. 
           Defaults to a sequence of length 100 from the top position to the
           bottom position.
       iterations (int): (Optional) The number of iterations to start the procedure. 
           Default and minimum should be 10000.
       burn (int): (Optional) The number of starting iterations to discard.
           Default is 200
       thin (int): (Optional) The step size for every iteration to keep beyond
           the burnin. Default is 8.
       extractDate (float): (Optional) The top age of the core. Used for
           extrapolation purposes so that no extrapolated ages go beyond the
           top age of the core. Defaults to the current year.
       maxExtrap (int): (Optional) The maximum number of extrapolations to
           perform before giving up and setting the predicted ages to NA. 
           Useful for when large amounts of extrapolation are required, i.e.
           some of the predictPositions are a long way from the dated
           positions. Defaults to 500. 
       thetaMhSd (float):  (Optional)  The Metropolis-Hastings standard
           deviation for the age parameters. Defaults to 0.5.
       muMhSd (float): (Optional)  The Metropolis-Hastings standard deviation
           for the compound Poisson-Gamma Scale. Defaults to 0.1
       psiMhSd (float): (Optional) The Metropolis-Hastings standard deviation 
           for the Compound Poisson-Gamma Scale.
       ageScaleVal (int): (Optional) A scale value for the ages. 
           Bchronology works best when the ages are scaled to be 
           approximately between 0 and 100.
           The default value is thus 1000 for ages given in years.
       positionScaleVal (int):  (Optional) A scale value for the positions. 
           Bchronology works best when the positions are scaled to be 
           approximately between 0 and 100. The default value is thus
           100 for positions given in cm.
   
       Returns:
           depth - the predicted positions (either same as the user or the default) 
   
           chron -  a numpy array of possible chronologies in each column.
               The number of rows is the same as the length of depth
           ageDist - the distribution of ages around each dates.
           run - the full R object containing the outputs of the Bchron run
       
       Warnings:
           This function requires R and the Bchron package and all its
               dependencies to be installed on the same machine.
               
       Reference:
           - Haslett, J., and Parnell, A. C. (2008). A simple monotone 
               process with application to radiocarbon-dated depth 
               chronologies. Journal of the Royal Statistical Society, 
               Series C, 57, 399-418. DOI:10.1111/j.1467-9876.2008.00623.x
           - Parnell, A. C., Haslett, J., Allen, J. R. M., Buck, C. E., 
               and Huntley, B. (2008). A flexible approach to assessing 
               synchroneity of past events using Bayesian reconstructions
               of sedimentation history. Quaternary Science Reviews, 
               27(19-20), 1872-1885. DOI:10.1016/j.quascirev.2008.07.009     
   
   
2018-03-08 15:28:40,463 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:40,485 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:40,516 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:40,542 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:18: input:
.. autofunction:: pyleoclim.RBchron.plotBchron
2018-03-08 15:28:40,558 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.RBchron import plotBchron
2018-03-08 15:28:40,574 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.RBchron
2018-03-08 15:28:40,597 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.RBchron' from '//anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py'>
2018-03-08 15:28:40,619 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'plotBchron')
2018-03-08 15:28:40,639 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function plotBchron at 0x1221ea2f0>
2018-03-08 15:28:40,655 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.RBchron.plotBchron', <function plotBchron at 0x1221ea2f0>, {}, ['Plot a Bchr
2018-03-08 15:28:40,671 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: plotBchron(depth, chron, positions, ageDist, flipCoor=False, xlabel='Depth', ylabel='Age', xlim=None, ylim=None, violinColor='#8B008B', medianLineColor='black', medianLineWidth=2.0, CIFillColor='Silver', samplePaths=True, samplePathNumber=10, alpha=0.5, figsize=[4, 8], ax=None)
   :module: pyleoclim.RBchron

   Plot a Bchron output
   
   This function creates a plot showing the calibrated calendar ages and
   associated 95% confidence interval as error bars, the 95% ensemble from
   the produced age model as well as randomly drawn members of the ensemble.
   
   Args:
       depth (array): the positions in the archive (often referred to as
           depth) where the age model was interpolated to. Should be a vector
       chron (array): The possible age models returned by BChron. The number
           of rows should be the same length as the depth vector, with each
           possible realization stored in the columns.
       positions (array): The depth on the archive at which chronological
           measurements have been made. Should be a vector 
       agesDist (array): The distribution of ages for each chronological tie
           points. The number of columns should correspond to the number of
           chronological tie points available.
       flipCoor (bool): If True, plots depth on the y-axis.     
       xlabel (str): The label for the x-axis
       ylabel (str): The label for the y-axis
       xlim (list): Limits for the x-axis. Default corresponds to the min/max
           of the depth vector.
       ylim (list): Limits for the y-axis. Default set by matplotlib
       violinColor (str): The color for the violins. Default is purple
       medianLineColor (str): The color for the median line. Default is black.
       medianLineWidth (float): The width for the median line
       CIFillColor (str): Fill color in between the 95% confidence interval.
           Default is silver.
       samplePaths (bool): If True, draws sample paths from the distribution.
           Use the same color as the violins. 
       samplePathNumber (int): The number of sample paths to draw. Default is 10.
           Note: samplePaths need to be set to True. 
       alpha (float): The violins' transparency. Number between 0 and 1
       figsize (list): The figure size. Default is [4,8]
       ax: Default is None. Useful to set for subplots. 
           
   Returns:
       - fig: the figure.      
         
   
2018-03-08 15:28:40,696 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:40,729 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:40,749 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:40,769 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:40,785 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:40,804 [WARNING] sphinx.util.docutils: Definition list ends without a blank line; unexpected unindent.
2018-03-08 15:28:40,868 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/RBchron.rst:12: (WARNING/2) autodoc: failed to import function ‘verufyCalCurves’ from module ‘pyleoclim.RBchron’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim.RBchron’ has no attribute ‘verufyCalCurves’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: verufyCalCurves
 [filtered system message]
2018-03-08 15:28:40,930 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:20: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:40,995 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:21: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:41,014 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.runBchron:73: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:41,056 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:18: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:41,077 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:22: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:41,094 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:23: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:41,109 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:28: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:41,131 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:29: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:41,149 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/RBchron.py:docstring of pyleoclim.RBchron.plotBchron:33: (WARNING/2) Definition list ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:41,167 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "rbchron"...>>,)
2018-03-08 15:28:41,204 [INFO] sphinx.util: [01mreading sources... [39;49;00m[100%] [35mTimeseries[39;49;00m                                                                                        
2018-03-08 15:28:41,220 [DEBUG] sphinx.application: [app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x110bc7fd0>, 'Timeseries')
2018-03-08 15:28:41,246 [DEBUG] sphinx.application: [app] emitting event: 'source-read'('Timeseries', ['Timeseries Functions\n====================\n\nThis module allows the manipulation o
2018-03-08 15:28:41,285 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:6: input:
.. autofunction:: pyleoclim.Timeseries.bin

2018-03-08 15:28:41,304 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import bin
2018-03-08 15:28:41,327 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:41,348 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:41,373 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'bin')
2018-03-08 15:28:41,398 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function bin at 0x11f0c5b70>
2018-03-08 15:28:41,511 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.bin', <function bin at 0x11f0c5b70>, {}, ['Bin the values', '', '
2018-03-08 15:28:41,548 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: bin(x, y, bin_size='', start='', end='')
   :module: pyleoclim.Timeseries

   Bin the values
   
   Args:
       x (array): the x-axis series.
       y (array): the y-axis series.
       bin_size (float): The size of the bins. Default is the average resolution
       start (float): Where/when to start binning. Default is the minimum
       end (float): When/where to stop binning. Defulat is the maximum
   
   Returns:
       binned_values - the binned output 
   
       bins - the bins (centered on the median, i.e., the 100-200 bin is 150) 
   
       n - number of data points in each bin 
   
       error -  the standard error on the mean in each bin
   
   
2018-03-08 15:28:41,571 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:8: input:
.. autofunction:: pyleoclim.Timeseries.interp

2018-03-08 15:28:41,588 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import interp
2018-03-08 15:28:41,604 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:41,624 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:41,659 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'interp')
2018-03-08 15:28:41,675 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function interp at 0x11f0c5d08>
2018-03-08 15:28:41,691 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.interp', <function interp at 0x11f0c5d08>, {}, ['Linear interpola
2018-03-08 15:28:41,709 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: interp(x, y, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Linear interpolation onto a new x-axis
   
   Args:
       x (array): the x-axis
       y (array): the y-axis
       interp_step (float): the interpolation step. Default is mean resolution.
       start (float): where/when to start the interpolation. Default is min..
       end (float): where/when to stop the interpolation. Default is max.
   
   Returns:
       xi - the interpolated x-axis 
   
       interp_values - the interpolated values
       
   
2018-03-08 15:28:41,728 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:10: input:
.. autofunction:: pyleoclim.Timeseries.onCommonAxis

2018-03-08 15:28:41,751 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import onCommonAxis
2018-03-08 15:28:41,769 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:41,785 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:41,802 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'onCommonAxis')
2018-03-08 15:28:41,818 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function onCommonAxis at 0x11f0c5d90>
2018-03-08 15:28:41,837 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.onCommonAxis', <function onCommonAxis at 0x11f0c5d90>, {}, ['Plac
2018-03-08 15:28:41,863 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: onCommonAxis(x1, y1, x2, y2, interp_step='', start='', end='')
   :module: pyleoclim.Timeseries

   Places two timeseries on a common axis
   
   Args:
       x1 (array): x-axis values of the first timeseries
       y1 (array): y-axis values of the first timeseries
       x2 (array): x-axis values of the second timeseries
       y2 (array): y-axis values of the second timeseries
       interp_step (float): The interpolation step. Default is mean resolution
       of lowest resolution series
       start (float): where/when to start. Default is the maximum of the minima of
       the two timeseries
       end (float): Where/when to end. Default is the minimum of the maxima of
       the two timeseries
   
   Returns:
       xi -  the interpolated x-axis 
   
       interp_values1 -  the interpolated y-values for the first timeseries
       interp_values2 - the intespolated y-values for the second timeseries
       
   
2018-03-08 15:28:41,893 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:12: input:
.. autofunction:: pyleoclim.Timeseries.standardize

2018-03-08 15:28:41,914 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import standardize
2018-03-08 15:28:41,931 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:41,957 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:41,973 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'standardize')
2018-03-08 15:28:41,989 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function standardize at 0x11f0c5e18>
2018-03-08 15:28:42,006 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.standardize', <function standardize at 0x11f0c5e18>, {}, ['Center
2018-03-08 15:28:42,021 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: standardize(x, scale=1, axis=0, ddof=0, eps=0.001)
   :module: pyleoclim.Timeseries

   Centers and normalizes a given time series. Constant or nearly constant time series not rescaled.
   
   Args:
       x (array): vector of (real) numbers as a time series, NaNs allowed
       scale (real): a scale factor used to scale a record to a match a given variance
       axis (int or None): axis along which to operate, if None, compute over the whole array
       ddof (int): degress of freedom correction in the calculation of the standard deviation
       eps (real): a threshold to determine if the standard deviation is too close to zero
   
   Returns:
       z (array): the standardized time series (z-score), Z = (X - E[X])/std(X)*scale, NaNs allowed
       mu (real): the mean of the original time series, E[X]
       sig (real): the standard deviation of the original time series, std[X]
   
   References:
       1. Tapio Schneider's MATLAB code: http://www.clidyn.ethz.ch/imputation/standardize.m
       2. The zscore function in SciPy: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py
   
   @author: fzhu
   
2018-03-08 15:28:42,048 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:14: input:
.. autofunction:: pyleoclim.Timeseries.ts2segments

2018-03-08 15:28:42,068 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import ts2segments
2018-03-08 15:28:42,084 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:42,101 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:42,117 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'ts2segments')
2018-03-08 15:28:42,134 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function ts2segments at 0x11f0c5ea0>
2018-03-08 15:28:42,157 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.ts2segments', <function ts2segments at 0x11f0c5ea0>, {}, ['Chop a
2018-03-08 15:28:42,174 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: ts2segments(ys, ts, factor=10)
   :module: pyleoclim.Timeseries

   Chop a time series into several segments based on gap detection.
   
   The rule of gap detection is very simple:
       we define the intervals between time points as dts, then if dts[i] is larger than factor * dts[i-1],
       we think that the change of dts (or the gradient) is too large, and we regard it as a breaking point
       and chop the time series into two segments here
   
   Args:
       ys (array): a time series, NaNs allowed
       ts (array): the time points
       factor (float): the factor that adjusts the threshold for gap detection
   
   Returns:
       seg_ys (list): a list of several segments with potentially different lengths
       seg_ts (list): a list of the time axis of the several segments
       n_segs (int): the number of segments
   
   @author: fzhu
   
2018-03-08 15:28:42,194 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:16: input:
.. autofunction:: pyleoclim.Timeseries.clean_ts

2018-03-08 15:28:42,210 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import clean_ts
2018-03-08 15:28:42,229 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:42,260 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:42,279 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'clean_ts')
2018-03-08 15:28:42,298 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function clean_ts at 0x11f0c5f28>
2018-03-08 15:28:42,321 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.clean_ts', <function clean_ts at 0x11f0c5f28>, {}, ['Delete the N
2018-03-08 15:28:42,341 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: clean_ts(ys, ts)
   :module: pyleoclim.Timeseries

   Delete the NaNs in the time series and sort it with time axis ascending
   
   Args:
       ys (array): a time series, NaNs allowed
       ts (array): the time axis of the time series, NaNs allowed
   
   Returns:
       ys (array): the time series without nans
       ts (array): the time axis of the time series without nans
   
   
2018-03-08 15:28:42,396 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: input:
.. autofunction:: pyleoclim.Timeseries.annualize

2018-03-08 15:28:42,433 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import annualize
2018-03-08 15:28:42,457 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:42,476 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:42,501 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'annualize')
2018-03-08 15:28:42,528 [DEBUG] sphinx.ext.autodoc: autodoc: failed to import function 'annualize' from module 'pyleoclim.Timeseries'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.Timeseries' has no attribute 'annualize'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize

2018-03-08 15:28:42,547 [WARNING] sphinx.util.docutils: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: (WARNING/2) autodoc: failed to import function 'annualize' from module 'pyleoclim.Timeseries'; the following exception was raised:
Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module 'pyleoclim.Timeseries' has no attribute 'annualize'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 664, in import_object
    obj = self.get_attr(obj, part)
  File "//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py", line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File "//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py", line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize
2018-03-08 15:28:42,571 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:20: input:
.. autofunction:: pyleoclim.Timeseries.gaussianize

2018-03-08 15:28:42,588 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import gaussianize
2018-03-08 15:28:42,605 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:42,627 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:42,654 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'gaussianize')
2018-03-08 15:28:42,688 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function gaussianize at 0x11f0cd048>
2018-03-08 15:28:42,704 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.gaussianize', <function gaussianize at 0x11f0cd048>, {}, ['Transf
2018-03-08 15:28:42,720 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: gaussianize(X)
   :module: pyleoclim.Timeseries

   Transforms a (proxy) timeseries to Gaussian distribution.
   
   Originator: Michael Erb, Univ. of Southern California - April 2017
   
2018-03-08 15:28:42,739 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:22: input:
.. autofunction:: pyleoclim.Timeseries.gaussianize_single

2018-03-08 15:28:42,790 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import gaussianize_single
2018-03-08 15:28:42,815 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:42,847 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:42,869 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'gaussianize_single')
2018-03-08 15:28:42,886 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function gaussianize_single at 0x11f0cd0d0>
2018-03-08 15:28:42,903 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.gaussianize_single', <function gaussianize_single at 0x11f0cd0d0>
2018-03-08 15:28:42,919 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: gaussianize_single(X_single)
   :module: pyleoclim.Timeseries

   Transforms a single (proxy) timeseries to Gaussian distribution.
   
   Originator: Michael Erb, Univ. of Southern California - April 2017
   
2018-03-08 15:28:42,941 [DEBUG] sphinx.ext.autodoc: [autodoc] /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:24: input:
.. autofunction:: pyleoclim.Timeseries.detrend
2018-03-08 15:28:42,989 [DEBUG] sphinx.ext.autodoc: [autodoc] from pyleoclim.Timeseries import detrend
2018-03-08 15:28:43,029 [DEBUG] sphinx.ext.autodoc: [autodoc] import pyleoclim.Timeseries
2018-03-08 15:28:43,083 [DEBUG] sphinx.ext.autodoc: [autodoc] => <module 'pyleoclim.Timeseries' from '//anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py'>
2018-03-08 15:28:43,117 [DEBUG] sphinx.ext.autodoc: [autodoc] getattr(_, 'detrend')
2018-03-08 15:28:43,154 [DEBUG] sphinx.ext.autodoc: [autodoc] => <function detrend at 0x11f0cd158>
2018-03-08 15:28:43,196 [DEBUG] sphinx.application: [app] emitting event: 'autodoc-process-docstring'('function', 'pyleoclim.Timeseries.detrend', <function detrend at 0x11f0cd158>, {}, ['Detrend a time
2018-03-08 15:28:43,220 [DEBUG] sphinx.ext.autodoc: [autodoc] output:

.. py:function:: detrend(y, x=None, method='linear', params=['default', 4, 0, 1])
   :module: pyleoclim.Timeseries

   Detrend a timeseries according to three methods
   
   Detrending methods include, "linear" (default), "constant", and using a low-pass
       Savitzky-Golay filters.
       
   Args:
       y (array): The series to be detrended. 
       x (array): The time axis for the timeseries. Necessary for use with 
           the Savitzky-Golay filters method since the series should be evenly spaced.    
       method (str): The type of detrending. If linear (default), the result of
           a linear least-squares fit to y is subtracted from y. If constant, 
           only the mean of data is subtrated. If "savitzy-golay", y is filtered
           using the Savitzky-Golay filters and the resulting filtered series
           is subtracted from y.
       params (list): The paramters for the Savitzky-Golay filters. The first parameter
           corresponds to the window size (default it set to half of the data) 
           while the second parameter correspond to the order of the filter 
           (default is 4). The third parameter is the order of the derivative
           (the default is zero, which means only smoothing.)
           
   Returns:
       ys (array) - the detrended timeseries.        
   
2018-03-08 15:28:43,243 [ERROR] sphinx.util.docutils: Unexpected indentation.
2018-03-08 15:28:43,260 [WARNING] sphinx.util.docutils: Block quote ends without a blank line; unexpected unindent.
2018-03-08 15:28:43,307 [DEBUG] sphinx.transforms: /Users/deborahkhider/Documents/Python/Pyleoclim_util/Documentation/Timeseries.rst:18: (WARNING/2) autodoc: failed to import function ‘annualize’ from module ‘pyleoclim.Timeseries’; the following exception was raised:
Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 169, in safe_getattr
    return getattr(obj, name, *defargs)
AttributeError: module ‘pyleoclim.Timeseries’ has no attribute ‘annualize’

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 664, in import_object
    obj = self.get_attr(obj, part)
  File “//anaconda/lib/python3.5/site-packages/sphinx/ext/autodoc.py”, line 554, in get_attr
    return safe_getattr(obj, name, *defargs)
  File “//anaconda/lib/python3.5/site-packages/sphinx/util/inspect.py”, line 185, in safe_getattr
    raise AttributeError(name)
AttributeError: annualize
 [filtered system message]
2018-03-08 15:28:43,324 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.detrend:9: (ERROR/3) Unexpected indentation. [filtered system message]
2018-03-08 15:28:43,340 [DEBUG] sphinx.transforms: //anaconda/lib/python3.5/site-packages/pyleoclim/Timeseries.py:docstring of pyleoclim.Timeseries.detrend:10: (WARNING/2) Block quote ends without a blank line; unexpected unindent. [filtered system message]
2018-03-08 15:28:43,372 [DEBUG] sphinx.application: [app] emitting event: 'doctree-read'(<document: <section "timeseries functions"...>>,)
2018-03-08 15:28:43,416 [INFO] sphinx.util: 
2018-03-08 15:28:43,445 [DEBUG] sphinx.application: [app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x110bc7fd0>,)
2018-03-08 15:28:43,461 [INFO] sphinx.builders: [01mlooking for now-outdated files... [39;49;00m
2018-03-08 15:28:43,489 [DEBUG] sphinx.application: [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x110bc7fd0>,)
2018-03-08 15:28:43,504 [INFO] sphinx.builders: none found
2018-03-08 15:28:43,520 [INFO] sphinx.builders: [01mpickling environment... [39;49;00m
2018-03-08 15:28:43,540 [INFO] sphinx.builders: done
2018-03-08 15:28:43,555 [INFO] sphinx.builders: [01mchecking consistency... [39;49;00m
2018-03-08 15:28:43,584 [DEBUG] sphinx.application: [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x110bc7fd0>,)
2018-03-08 15:28:43,602 [INFO] sphinx.builders: done
2018-03-08 15:28:43,620 [DEBUG] sphinx.builders: docnames to write: Introduction, LipdUtils, Main, Map, Plot, RBchron, Spectral, Stats, SummaryPlots, Timeseries, index
2018-03-08 15:28:43,637 [INFO] sphinx.builders: [01mpreparing documents... [39;49;00m
2018-03-08 15:28:43,678 [INFO] sphinx.builders: done
2018-03-08 15:28:43,695 [INFO] sphinx.util: [01mwriting output... [39;49;00m[  9%] [32mIntroduction[39;49;00m                                                                                       
2018-03-08 15:28:43,713 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "pyleoclim"...>>, 'Introduction')
2018-03-08 15:28:44,009 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 18%] [32mLipdUtils[39;49;00m                                                                                          
2018-03-08 15:28:44,033 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "lipd utilities"...>>, 'LipdUtils')
2018-03-08 15:28:44,115 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 27%] [32mMain[39;49;00m                                                                                               
2018-03-08 15:28:44,245 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "main functions"...>>, 'Main')
2018-03-08 15:28:44,391 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 36%] [32mMap[39;49;00m                                                                                                
2018-03-08 15:28:44,422 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "mapping functions"...>>, 'Map')
2018-03-08 15:28:44,566 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 45%] [32mPlot[39;49;00m                                                                                               
2018-03-08 15:28:44,599 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "plotting functions"...>>, 'Plot')
2018-03-08 15:28:44,654 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 54%] [32mRBchron[39;49;00m                                                                                            
2018-03-08 15:28:44,687 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "rbchron"...>>, 'RBchron')
2018-03-08 15:28:44,756 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 63%] [32mSpectral[39;49;00m                                                                                           
2018-03-08 15:28:44,791 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "spectral functions"...>>, 'Spectral')
2018-03-08 15:28:44,887 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 72%] [32mStats[39;49;00m                                                                                              
2018-03-08 15:28:44,915 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "statistics functions"...>>, 'Stats')
2018-03-08 15:28:45,033 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 81%] [32mSummaryPlots[39;49;00m                                                                                       
2018-03-08 15:28:45,078 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "summary plots"...>>, 'SummaryPlots')
2018-03-08 15:28:45,200 [INFO] sphinx.util: [01mwriting output... [39;49;00m[ 90%] [32mTimeseries[39;49;00m                                                                                         
2018-03-08 15:28:45,224 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <section "timeseries functions"...>>, 'Timeseries')
2018-03-08 15:28:45,312 [INFO] sphinx.util: [01mwriting output... [39;49;00m[100%] [32mindex[39;49;00m                                                                                              
2018-03-08 15:28:45,363 [DEBUG] sphinx.application: [app] emitting event: 'doctree-resolved'(<document: <comment...><section "welcome to pyleoclim's documentati ...>, 'index')
2018-03-08 15:28:45,526 [INFO] sphinx.util: 
2018-03-08 15:28:45,562 [INFO] sphinx.builders.html: [01mgenerating indices...[39;49;00m
2018-03-08 15:28:45,596 [INFO] sphinx.builders.html:  genindex
2018-03-08 15:28:45,712 [INFO] sphinx.builders.html: 
2018-03-08 15:28:45,731 [DEBUG] sphinx.application: [app] emitting event: 'html-collect-pages'()
2018-03-08 15:28:45,752 [INFO] sphinx.builders.html: [01mwriting additional pages...[39;49;00m
2018-03-08 15:28:45,790 [INFO] sphinx.builders.html:  search
2018-03-08 15:28:45,853 [INFO] sphinx.builders.html: 
2018-03-08 15:28:45,895 [INFO] sphinx.builders.html: [01mcopying static files... [39;49;00m
2018-03-08 15:28:46,145 [INFO] sphinx.builders.html: done
2018-03-08 15:28:46,186 [INFO] sphinx.builders.html: [01mcopying extra files... [39;49;00m
2018-03-08 15:28:46,212 [INFO] sphinx.builders.html: done
2018-03-08 15:28:46,252 [INFO] sphinx.builders.html: [01mdumping search index in English (code: en) ... [39;49;00m
2018-03-08 15:28:46,450 [INFO] sphinx.builders.html: done
2018-03-08 15:28:46,490 [INFO] sphinx.builders.html: [01mdumping object inventory... [39;49;00m
2018-03-08 15:28:46,550 [INFO] sphinx.builders.html: done
2018-03-08 15:28:46,592 [INFO] sphinx.application: [01mbuild succeeded.[39;49;00m
2018-03-08 15:28:46,625 [DEBUG] sphinx.application: [app] emitting event: 'build-finished'(None,)
2018-08-06 15:38:56,530 [DEBUG] matplotlib: $HOME=/Users/fzhu
2018-08-06 15:38:56,533 [DEBUG] matplotlib: matplotlib data path /Users/fzhu/.pyenv/versions/py3.6/lib/python3.6/site-packages/matplotlib/mpl-data
2018-08-06 15:38:56,537 [DEBUG] matplotlib: loaded rc file /Users/fzhu/.matplotlib/matplotlibrc
2018-08-06 15:38:56,540 [DEBUG] matplotlib: matplotlib version 2.2.2
2018-08-06 15:38:56,540 [DEBUG] matplotlib: interactive is False
2018-08-06 15:38:56,540 [DEBUG] matplotlib: platform is darwin
2018-08-06 15:38:56,541 [DEBUG] matplotlib: loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', '_locale', 'copyreg', '_bootlocale', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'sphinx', '__future__', 'sphinx.deprecation', 'sphinx.cmd', 'sphinx.cmd.build', 'sphinx.make_mode', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'sphinx.cmdline', 'argparse', 'copy', 'textwrap', 'gettext', 'locale', 'struct', '_struct', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'pickle', '_compat_pickle', '_pickle', 'socket', '_socket', 'array', '__mp_main__', 'docutils', 'docutils.utils', 'unicodedata', 'docutils.nodes', 'docutils.io', 'docutils._compat', 'docutils.utils.error_reporting', 'six', 'sphinx.application', 'docutils.parsers', 'docutils.parsers.rst', 'docutils.statemachine', 'docutils.parsers.rst.states', 'docutils.parsers.rst.directives', 'docutils.parsers.rst.languages', 'docutils.parsers.rst.languages.en', 'docutils.parsers.rst.tableparser', 'docutils.parsers.rst.roles', 'docutils.utils.code_analyzer', 'pygments', 'pygments.util', 'pygments.lexers', 'fnmatch', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'pygments.token', 'docutils.utils.punctuation_chars', 'docutils.utils.roman', 'docutils.utils.urischemes', 'docutils.frontend', 'configparser', 'optparse', 'docutils.transforms', 'docutils.languages', 'docutils.transforms.universal', 'docutils.utils.smartquotes', 'six.moves', 'sphinx.locale', 'sphinx.config', 'typing', 'typing.io', 'typing.re', 'sphinx.errors', 'sphinx.util', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'datetime', '_datetime', 'six.moves.urllib', 'six.moves.urllib.parse', 'urllib', 'urllib.parse', 'sphinx.util.logging', 'logging', 'string', '_string', 'atexit', 'logging.handlers', 'queue', 'sphinx.util.console', 'termios', 'fcntl', 'sphinx.util.fileutil', 'sphinx.util.osutil', 'filecmp', 'sphinx.util.smartypants', 'sphinx.util.docutils', 'distutils', 'distutils.version', 'sphinx.util.nodes', 'sphinx.addnodes', 'sphinx.util.matching', 'sphinx.util.i18n', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'decimal', 'numbers', '_decimal', 'babel.plural', 'babel.dates', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'babel.messages', 'babel.messages.catalog', 'cgi', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'html', 'html.entities', 'difflib', 'babel.messages.plurals', 'babel.messages.mofile', 'babel.messages.pofile', 'sphinx.util.pycompat', 'sphinx.environment', 'sphinx.versioning', 'uuid', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'sphinx.transforms', 'docutils.transforms.parts', 'sphinx.environment.adapters', 'sphinx.environment.adapters.indexentries', 'sphinx.environment.adapters.toctree', 'sphinx.io', 'docutils.core', 'pprint', 'docutils.readers', 'docutils.writers', 'docutils.readers.doctree', 'docutils.readers.standalone', 'docutils.transforms.frontmatter', 'docutils.transforms.references', 'docutils.transforms.misc', 'sphinx.transforms.compact_bullet_list', 'sphinx.transforms.i18n', 'sphinx.domains', 'sphinx.domains.std', 'sphinx.directives', 'sphinx.util.docfields', 'sphinx.directives.code', 'sphinx.directives.other', 'docutils.parsers.rst.directives.admonitions', 'docutils.parsers.rst.directives.misc', 'docutils.parsers.rst.directives.body', 'sphinx.directives.patches', 'docutils.parsers.rst.directives.images', 'urllib.request', 'http', 'http.client', 'ssl', 'ipaddress', '_ssl', 'urllib.error', 'urllib.response', '_scproxy', 'PIL', 'PIL.version', 'PIL.Image', 'PIL._imaging', 'PIL.ImageMode', 'PIL._binary', 'PIL._util', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'pathlib', 'ntpath', 'docutils.parsers.rst.directives.html', 'docutils.transforms.components', 'docutils.parsers.rst.directives.tables', 'csv', '_csv', 'sphinx.roles', 'sphinx.util.rst', 'sphinx.util.parallel', 'sphinx.util.websupport', 'sphinxcontrib.websupport', 'pkg_resources', 'zipfile', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sphinxcontrib.websupport.core', 'jinja2', 'jinja2.environment', 'jinja2.nodes', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2._compat', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.exceptions', 'jinja2.tests', 'jinja2.lexer', 'jinja2.parser', 'jinja2.compiler', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.idtracking', 'jinja2.loaders', 'jinja2.bccache', 'jinja2.asyncsupport', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.sslproto', 'jinja2.asyncfilters', 'sphinx.util.jsonimpl', 'sphinxcontrib.websupport.errors', 'sphinxcontrib.websupport.search', 'sphinxcontrib.websupport.storage', 'sphinxcontrib.websupport.version', 'sphinxcontrib.websupport.utils', 'sphinx.events', 'sphinx.extension', 'sphinx.registry', 'sphinx.parsers', 'sphinx.util.tags', 'sphinx.builders', 'sphinx.environment.adapters.asset', 'sphinx.builders.applehelp', 'pipes', 'shlex', 'sphinx.builders.html', 'sphinx.highlighting', 'pygments.filters', 'pygments.filter', 'pygments.formatters.latex', 'pygments.lexer', 'pygments.regexopt', 'pygments.lexers.python', 'pygments.unistring', 'pygments.lexers.c_cpp', 'pygments.lexers.special', 'pygments.lexers.markup', 'pygments.lexers.html', 'pygments.lexers.javascript', 'pygments.lexers.jvm', 'pygments.lexers.css', 'pygments.lexers.ruby', 'sphinx.ext', 'sphinx.ext.doctest', 'doctest', 'pdb', 'cmd', 'bdb', 'code', 'codeop', 'glob', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'packaging', 'packaging.__about__', 'packaging.specifiers', 'packaging._compat', 'packaging.version', 'packaging._structures', 'sphinx.pygments_styles', 'pygments.style', 'pygments.styles.friendly', 'sphinx.util.texescape', 'sphinx.search', 'sphinx.util.jsdump', 'sphinx.search.jssplitter', 'sphinx.search.en', 'sphinx.util.stemmer', 'sphinx.util.stemmer.porter', 'sphinx.theming', 'sphinx.util.inventory', 'sphinx.writers', 'sphinx.writers.html', 'docutils.writers.html4css1', 'docutils.transforms.writer_aux', 'docutils.writers._html_base', 'docutils.utils.math', 'docutils.utils.math.unichar2tex', 'docutils.utils.math.math2html', 'docutils.utils.math.latex2mathml', 'docutils.utils.math.tex2unichar', 'docutils.utils.math.tex2mathml_extern', 'sphinx.util.images', 'imghdr', 'imagesize', 'sphinx.writers.html5', 'docutils.writers.html5_polyglot', 'sphinx.builders.changes', 'sphinx.builders.epub3', 'sphinx.builders._epub_base', 'sphinx.builders.devhelp', 'gzip', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'sphinx.builders.dummy', 'sphinx.builders.gettext', 'sphinx.builders.htmlhelp', 'sphinx.builders.latex', 'sphinx.transforms.references', 'sphinx.writers.latex', 'docutils.writers.latex2e', 'sphinx.util.template', 'jinja2.sandbox', 'sphinx.jinja2glue', 'sphinx.builders.latex.transforms', 'sphinx.builders.linkcheck', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.util.selectors', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._elliptic_curve', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._errors', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._types', 'asn1crypto._ordereddict', 'asn1crypto._ffi', 'asn1crypto._perf', 'asn1crypto._perf._big_num_ctypes', 'asn1crypto.algos', 'asn1crypto.core', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.x509.general_name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.primitives.mac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.selectors', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'html.parser', '_markupbase', 'six.moves.html_parser', 'sphinx.util.requests', 'sphinx.builders.manpage', 'sphinx.writers.manpage', 'docutils.writers.manpage', 'sphinx.builders.qthelp', 'sphinx.builders.texinfo', 'sphinx.writers.texinfo', 'sphinx.builders.text', 'sphinx.writers.text', 'sphinx.builders.websupport', 'sphinxcontrib.websupport.builder', 'sphinxcontrib.websupport.writer', 'sphinx.builders.xml', 'docutils.writers.docutils_xml', 'xml.sax', 'xml.sax.xmlreader', 'xml.sax.handler', 'xml.sax._exceptions', 'xml.sax.saxutils', 'xml.sax.expatreader', 'sphinx.writers.xml', 'sphinx.domains.c', 'sphinx.domains.cpp', 'sphinx.domains.javascript', 'sphinx.domains.python', 'sphinx.domains.rst', 'sphinx.transforms.post_transforms', 'sphinx.transforms.post_transforms.images', 'sphinx.util.compat', 'sphinx.environment.collectors', 'sphinx.environment.collectors.dependencies', 'sphinx.environment.collectors.asset', 'sphinx.environment.collectors.metadata', 'sphinx.environment.collectors.title', 'sphinx.environment.collectors.toctree', 'sphinx.environment.collectors.indexentries', 'alabaster', 'alabaster._version', 'sphinx.ext.autodoc', 'sphinx.ext.autodoc.importer', 'sphinx.util.inspect', 'sphinx.ext.autodoc.inspector', 'sphinx.pycode', 'sphinx.pycode.parser', 'sphinx.util.docstrings', 'sphinx.ext.autodoc.directive', 'sphinx.ext.mathjax', 'sphinx.ext.mathbase', 'sphinx.ext.githubpages', 'jinja2.ext', 'encodings.utf_8_sig', 'docutils.languages.en', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'lipd.loggers', 'logging.config', 'socketserver', 'lipd.directory', 'lipd.bag', 'bagit', 'lipd.csvs', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'numpy.testing.decorators', 'numpy.testing.nose_tools', 'numpy.testing.nose_tools.decorators', 'numpy.testing.nose_tools.utils', 'numpy.lib.utils', 'numpy.testing.nosetester', 'numpy.testing.nose_tools.nosetester', 'numpy.testing.utils', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy._distributor_init', 'numpy._mklinit', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'mkl_fft', '_cython_0_27_3', 'cython_runtime', 'mkl_fft._pydfti', 'numpy.core.multiarray_tests', 'mkl_fft._numpy_fft', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'lipd.excel', 'xlrd', 'xlrd.info', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.formula', 'xlrd.book', 'xlrd.sheet', 'xlrd.formatting', 'xlrd.compdoc', 'gc', 'mmap', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.chainmap', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.np_datetime', '_cython_0_28_2', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.config', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.printing', 'pandas.core.dtypes', 'pandas.core.dtypes.inference', 'pandas.io.formats.console', 'pandas.io.formats.terminal', 'pandas.core.api', 'pandas.core.algorithms', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.missing', 'pandas.core.common', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util._validators', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.core.missing', 'pandas.core.groupby', 'pandas.core.groupby.groupby', 'pandas.core.index', 'pandas.core.indexes', 'pandas.core.indexes.api', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.resolution', 'pandas.tseries', 'pandas.tseries.offsets', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'dateutil.easter', 'pandas._libs.tslibs.offsets', 'pandas.tseries.frequencies', 'pandas._libs.join', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.indexes.frozen', 'pandas.core.dtypes.concat', 'pandas.core.sorting', 'pandas.core.strings', 'pandas.core.indexes.category', 'pandas.core.indexes.multi', 'pandas.core.indexes.interval', 'pandas._libs.interval', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.numeric', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.range', 'pandas.core.indexes.period', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas._libs.internals', 'pandas.core.sparse', 'pandas.core.sparse.array', 'pandas._libs.sparse', 'pandas.io.formats.format', 'pandas.io.common', 'pandas.core.series', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._misc', 'pandas.plotting._style', 'pandas.plotting._compat', 'pandas.plotting._tools', 'pandas.plotting._core', 'pandas.plotting._converter', 'matplotlib', 'distutils.sysconfig', 'distutils.errors', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.cbook._backports', 'matplotlib.compat', 'matplotlib.compat.subprocess', 'matplotlib.rcsetup', 'matplotlib.testing', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'six.moves.urllib.request', 'matplotlib._version']
2018-08-06 15:38:56,746 [DEBUG] matplotlib: CACHEDIR=/Users/fzhu/.matplotlib
2018-08-06 15:38:56,752 [DEBUG] matplotlib.font_manager: Using fontManager instance from /Users/fzhu/.matplotlib/fontList.json
2018-08-06 15:38:56,918 [DEBUG] matplotlib.backends: backend TkAgg version unknown
2018-08-06 15:39:11,096 [DEBUG] matplotlib: $HOME=/Users/fzhu
2018-08-06 15:39:11,099 [DEBUG] matplotlib: matplotlib data path /Users/fzhu/.pyenv/versions/py3.6/lib/python3.6/site-packages/matplotlib/mpl-data
2018-08-06 15:39:11,103 [DEBUG] matplotlib: loaded rc file /Users/fzhu/.matplotlib/matplotlibrc
2018-08-06 15:39:11,104 [DEBUG] matplotlib: matplotlib version 2.2.2
2018-08-06 15:39:11,105 [DEBUG] matplotlib: interactive is False
2018-08-06 15:39:11,105 [DEBUG] matplotlib: platform is darwin
2018-08-06 15:39:11,105 [DEBUG] matplotlib: loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', '_locale', 'copyreg', '_bootlocale', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'sphinx', '__future__', 'sphinx.deprecation', 'sphinx.cmd', 'sphinx.cmd.build', 'sphinx.make_mode', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'sphinx.cmdline', 'argparse', 'copy', 'textwrap', 'gettext', 'locale', 'struct', '_struct', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'pickle', '_compat_pickle', '_pickle', 'socket', '_socket', 'array', '__mp_main__', 'docutils', 'docutils.utils', 'unicodedata', 'docutils.nodes', 'docutils.io', 'docutils._compat', 'docutils.utils.error_reporting', 'six', 'sphinx.application', 'docutils.parsers', 'docutils.parsers.rst', 'docutils.statemachine', 'docutils.parsers.rst.states', 'docutils.parsers.rst.directives', 'docutils.parsers.rst.languages', 'docutils.parsers.rst.languages.en', 'docutils.parsers.rst.tableparser', 'docutils.parsers.rst.roles', 'docutils.utils.code_analyzer', 'pygments', 'pygments.util', 'pygments.lexers', 'fnmatch', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'pygments.token', 'docutils.utils.punctuation_chars', 'docutils.utils.roman', 'docutils.utils.urischemes', 'docutils.frontend', 'configparser', 'optparse', 'docutils.transforms', 'docutils.languages', 'docutils.transforms.universal', 'docutils.utils.smartquotes', 'six.moves', 'sphinx.locale', 'sphinx.config', 'typing', 'typing.io', 'typing.re', 'sphinx.errors', 'sphinx.util', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'datetime', '_datetime', 'six.moves.urllib', 'six.moves.urllib.parse', 'urllib', 'urllib.parse', 'sphinx.util.logging', 'logging', 'string', '_string', 'atexit', 'logging.handlers', 'queue', 'sphinx.util.console', 'termios', 'fcntl', 'sphinx.util.fileutil', 'sphinx.util.osutil', 'filecmp', 'sphinx.util.smartypants', 'sphinx.util.docutils', 'distutils', 'distutils.version', 'sphinx.util.nodes', 'sphinx.addnodes', 'sphinx.util.matching', 'sphinx.util.i18n', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'decimal', 'numbers', '_decimal', 'babel.plural', 'babel.dates', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'babel.messages', 'babel.messages.catalog', 'cgi', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'html', 'html.entities', 'difflib', 'babel.messages.plurals', 'babel.messages.mofile', 'babel.messages.pofile', 'sphinx.util.pycompat', 'sphinx.environment', 'sphinx.versioning', 'uuid', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'sphinx.transforms', 'docutils.transforms.parts', 'sphinx.environment.adapters', 'sphinx.environment.adapters.indexentries', 'sphinx.environment.adapters.toctree', 'sphinx.io', 'docutils.core', 'pprint', 'docutils.readers', 'docutils.writers', 'docutils.readers.doctree', 'docutils.readers.standalone', 'docutils.transforms.frontmatter', 'docutils.transforms.references', 'docutils.transforms.misc', 'sphinx.transforms.compact_bullet_list', 'sphinx.transforms.i18n', 'sphinx.domains', 'sphinx.domains.std', 'sphinx.directives', 'sphinx.util.docfields', 'sphinx.directives.code', 'sphinx.directives.other', 'docutils.parsers.rst.directives.admonitions', 'docutils.parsers.rst.directives.misc', 'docutils.parsers.rst.directives.body', 'sphinx.directives.patches', 'docutils.parsers.rst.directives.images', 'urllib.request', 'http', 'http.client', 'ssl', 'ipaddress', '_ssl', 'urllib.error', 'urllib.response', '_scproxy', 'PIL', 'PIL.version', 'PIL.Image', 'PIL._imaging', 'PIL.ImageMode', 'PIL._binary', 'PIL._util', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'pathlib', 'ntpath', 'docutils.parsers.rst.directives.html', 'docutils.transforms.components', 'docutils.parsers.rst.directives.tables', 'csv', '_csv', 'sphinx.roles', 'sphinx.util.rst', 'sphinx.util.parallel', 'sphinx.util.websupport', 'sphinxcontrib.websupport', 'pkg_resources', 'zipfile', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sphinxcontrib.websupport.core', 'jinja2', 'jinja2.environment', 'jinja2.nodes', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2._compat', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.exceptions', 'jinja2.tests', 'jinja2.lexer', 'jinja2.parser', 'jinja2.compiler', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.idtracking', 'jinja2.loaders', 'jinja2.bccache', 'jinja2.asyncsupport', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.sslproto', 'jinja2.asyncfilters', 'sphinx.util.jsonimpl', 'sphinxcontrib.websupport.errors', 'sphinxcontrib.websupport.search', 'sphinxcontrib.websupport.storage', 'sphinxcontrib.websupport.version', 'sphinxcontrib.websupport.utils', 'sphinx.events', 'sphinx.extension', 'sphinx.registry', 'sphinx.parsers', 'sphinx.util.tags', 'sphinx.builders', 'sphinx.environment.adapters.asset', 'sphinx.builders.applehelp', 'pipes', 'shlex', 'sphinx.builders.html', 'sphinx.highlighting', 'pygments.filters', 'pygments.filter', 'pygments.formatters.latex', 'pygments.lexer', 'pygments.regexopt', 'pygments.lexers.python', 'pygments.unistring', 'pygments.lexers.c_cpp', 'pygments.lexers.special', 'pygments.lexers.markup', 'pygments.lexers.html', 'pygments.lexers.javascript', 'pygments.lexers.jvm', 'pygments.lexers.css', 'pygments.lexers.ruby', 'sphinx.ext', 'sphinx.ext.doctest', 'doctest', 'pdb', 'cmd', 'bdb', 'code', 'codeop', 'glob', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'packaging', 'packaging.__about__', 'packaging.specifiers', 'packaging._compat', 'packaging.version', 'packaging._structures', 'sphinx.pygments_styles', 'pygments.style', 'pygments.styles.friendly', 'sphinx.util.texescape', 'sphinx.search', 'sphinx.util.jsdump', 'sphinx.search.jssplitter', 'sphinx.search.en', 'sphinx.util.stemmer', 'sphinx.util.stemmer.porter', 'sphinx.theming', 'sphinx.util.inventory', 'sphinx.writers', 'sphinx.writers.html', 'docutils.writers.html4css1', 'docutils.transforms.writer_aux', 'docutils.writers._html_base', 'docutils.utils.math', 'docutils.utils.math.unichar2tex', 'docutils.utils.math.math2html', 'docutils.utils.math.latex2mathml', 'docutils.utils.math.tex2unichar', 'docutils.utils.math.tex2mathml_extern', 'sphinx.util.images', 'imghdr', 'imagesize', 'sphinx.writers.html5', 'docutils.writers.html5_polyglot', 'sphinx.builders.changes', 'sphinx.builders.epub3', 'sphinx.builders._epub_base', 'sphinx.builders.devhelp', 'gzip', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'sphinx.builders.dummy', 'sphinx.builders.gettext', 'sphinx.builders.htmlhelp', 'sphinx.builders.latex', 'sphinx.transforms.references', 'sphinx.writers.latex', 'docutils.writers.latex2e', 'sphinx.util.template', 'jinja2.sandbox', 'sphinx.jinja2glue', 'sphinx.builders.latex.transforms', 'sphinx.builders.linkcheck', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.util.selectors', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._elliptic_curve', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._errors', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._types', 'asn1crypto._ordereddict', 'asn1crypto._ffi', 'asn1crypto._perf', 'asn1crypto._perf._big_num_ctypes', 'asn1crypto.algos', 'asn1crypto.core', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.x509.general_name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.primitives.mac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.selectors', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'html.parser', '_markupbase', 'six.moves.html_parser', 'sphinx.util.requests', 'sphinx.builders.manpage', 'sphinx.writers.manpage', 'docutils.writers.manpage', 'sphinx.builders.qthelp', 'sphinx.builders.texinfo', 'sphinx.writers.texinfo', 'sphinx.builders.text', 'sphinx.writers.text', 'sphinx.builders.websupport', 'sphinxcontrib.websupport.builder', 'sphinxcontrib.websupport.writer', 'sphinx.builders.xml', 'docutils.writers.docutils_xml', 'xml.sax', 'xml.sax.xmlreader', 'xml.sax.handler', 'xml.sax._exceptions', 'xml.sax.saxutils', 'xml.sax.expatreader', 'sphinx.writers.xml', 'sphinx.domains.c', 'sphinx.domains.cpp', 'sphinx.domains.javascript', 'sphinx.domains.python', 'sphinx.domains.rst', 'sphinx.transforms.post_transforms', 'sphinx.transforms.post_transforms.images', 'sphinx.util.compat', 'sphinx.environment.collectors', 'sphinx.environment.collectors.dependencies', 'sphinx.environment.collectors.asset', 'sphinx.environment.collectors.metadata', 'sphinx.environment.collectors.title', 'sphinx.environment.collectors.toctree', 'sphinx.environment.collectors.indexentries', 'alabaster', 'alabaster._version', 'sphinx.ext.autodoc', 'sphinx.ext.autodoc.importer', 'sphinx.util.inspect', 'sphinx.ext.autodoc.inspector', 'sphinx.pycode', 'sphinx.pycode.parser', 'sphinx.util.docstrings', 'sphinx.ext.autodoc.directive', 'sphinx.ext.mathjax', 'sphinx.ext.mathbase', 'sphinx.ext.githubpages', 'encodings.utf_8_sig', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'lipd.loggers', 'logging.config', 'socketserver', 'lipd.directory', 'lipd.bag', 'bagit', 'lipd.csvs', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'numpy.testing.decorators', 'numpy.testing.nose_tools', 'numpy.testing.nose_tools.decorators', 'numpy.testing.nose_tools.utils', 'numpy.lib.utils', 'numpy.testing.nosetester', 'numpy.testing.nose_tools.nosetester', 'numpy.testing.utils', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy._distributor_init', 'numpy._mklinit', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'mkl_fft', '_cython_0_27_3', 'cython_runtime', 'mkl_fft._pydfti', 'numpy.core.multiarray_tests', 'mkl_fft._numpy_fft', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'lipd.excel', 'xlrd', 'xlrd.info', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.formula', 'xlrd.book', 'xlrd.sheet', 'xlrd.formatting', 'xlrd.compdoc', 'gc', 'mmap', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.chainmap', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.np_datetime', '_cython_0_28_2', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.config', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.printing', 'pandas.core.dtypes', 'pandas.core.dtypes.inference', 'pandas.io.formats.console', 'pandas.io.formats.terminal', 'pandas.core.api', 'pandas.core.algorithms', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.missing', 'pandas.core.common', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util._validators', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.core.missing', 'pandas.core.groupby', 'pandas.core.groupby.groupby', 'pandas.core.index', 'pandas.core.indexes', 'pandas.core.indexes.api', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.resolution', 'pandas.tseries', 'pandas.tseries.offsets', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'dateutil.easter', 'pandas._libs.tslibs.offsets', 'pandas.tseries.frequencies', 'pandas._libs.join', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.indexes.frozen', 'pandas.core.dtypes.concat', 'pandas.core.sorting', 'pandas.core.strings', 'pandas.core.indexes.category', 'pandas.core.indexes.multi', 'pandas.core.indexes.interval', 'pandas._libs.interval', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.numeric', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.range', 'pandas.core.indexes.period', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas._libs.internals', 'pandas.core.sparse', 'pandas.core.sparse.array', 'pandas._libs.sparse', 'pandas.io.formats.format', 'pandas.io.common', 'pandas.core.series', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._misc', 'pandas.plotting._style', 'pandas.plotting._compat', 'pandas.plotting._tools', 'pandas.plotting._core', 'pandas.plotting._converter', 'matplotlib', 'distutils.sysconfig', 'distutils.errors', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.cbook._backports', 'matplotlib.compat', 'matplotlib.compat.subprocess', 'matplotlib.rcsetup', 'matplotlib.testing', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'six.moves.urllib.request', 'matplotlib._version']
2018-08-06 15:39:11,339 [DEBUG] matplotlib: CACHEDIR=/Users/fzhu/.matplotlib
2018-08-06 15:39:11,347 [DEBUG] matplotlib.font_manager: Using fontManager instance from /Users/fzhu/.matplotlib/fontList.json
2018-08-06 15:39:11,518 [DEBUG] matplotlib.backends: backend TkAgg version unknown
2018-08-06 15:48:01,959 [DEBUG] matplotlib: $HOME=/Users/fzhu
2018-08-06 15:48:01,962 [DEBUG] matplotlib: matplotlib data path /Users/fzhu/.pyenv/versions/py3.6/lib/python3.6/site-packages/matplotlib/mpl-data
2018-08-06 15:48:01,966 [DEBUG] matplotlib: loaded rc file /Users/fzhu/.matplotlib/matplotlibrc
2018-08-06 15:48:01,967 [DEBUG] matplotlib: matplotlib version 2.2.2
2018-08-06 15:48:01,968 [DEBUG] matplotlib: interactive is False
2018-08-06 15:48:01,968 [DEBUG] matplotlib: platform is darwin
2018-08-06 15:48:01,968 [DEBUG] matplotlib: loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', '_locale', 'copyreg', '_bootlocale', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'sphinx', '__future__', 'sphinx.deprecation', 'sphinx.cmd', 'sphinx.cmd.build', 'sphinx.make_mode', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'sphinx.cmdline', 'argparse', 'copy', 'textwrap', 'gettext', 'locale', 'struct', '_struct', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'pickle', '_compat_pickle', '_pickle', 'socket', '_socket', 'array', '__mp_main__', 'docutils', 'docutils.utils', 'unicodedata', 'docutils.nodes', 'docutils.io', 'docutils._compat', 'docutils.utils.error_reporting', 'six', 'sphinx.application', 'docutils.parsers', 'docutils.parsers.rst', 'docutils.statemachine', 'docutils.parsers.rst.states', 'docutils.parsers.rst.directives', 'docutils.parsers.rst.languages', 'docutils.parsers.rst.languages.en', 'docutils.parsers.rst.tableparser', 'docutils.parsers.rst.roles', 'docutils.utils.code_analyzer', 'pygments', 'pygments.util', 'pygments.lexers', 'fnmatch', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'pygments.token', 'docutils.utils.punctuation_chars', 'docutils.utils.roman', 'docutils.utils.urischemes', 'docutils.frontend', 'configparser', 'optparse', 'docutils.transforms', 'docutils.languages', 'docutils.transforms.universal', 'docutils.utils.smartquotes', 'six.moves', 'sphinx.locale', 'sphinx.config', 'typing', 'typing.io', 'typing.re', 'sphinx.errors', 'sphinx.util', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'datetime', '_datetime', 'six.moves.urllib', 'six.moves.urllib.parse', 'urllib', 'urllib.parse', 'sphinx.util.logging', 'logging', 'string', '_string', 'atexit', 'logging.handlers', 'queue', 'sphinx.util.console', 'termios', 'fcntl', 'sphinx.util.fileutil', 'sphinx.util.osutil', 'filecmp', 'sphinx.util.smartypants', 'sphinx.util.docutils', 'distutils', 'distutils.version', 'sphinx.util.nodes', 'sphinx.addnodes', 'sphinx.util.matching', 'sphinx.util.i18n', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'decimal', 'numbers', '_decimal', 'babel.plural', 'babel.dates', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'babel.messages', 'babel.messages.catalog', 'cgi', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'html', 'html.entities', 'difflib', 'babel.messages.plurals', 'babel.messages.mofile', 'babel.messages.pofile', 'sphinx.util.pycompat', 'sphinx.environment', 'sphinx.versioning', 'uuid', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'sphinx.transforms', 'docutils.transforms.parts', 'sphinx.environment.adapters', 'sphinx.environment.adapters.indexentries', 'sphinx.environment.adapters.toctree', 'sphinx.io', 'docutils.core', 'pprint', 'docutils.readers', 'docutils.writers', 'docutils.readers.doctree', 'docutils.readers.standalone', 'docutils.transforms.frontmatter', 'docutils.transforms.references', 'docutils.transforms.misc', 'sphinx.transforms.compact_bullet_list', 'sphinx.transforms.i18n', 'sphinx.domains', 'sphinx.domains.std', 'sphinx.directives', 'sphinx.util.docfields', 'sphinx.directives.code', 'sphinx.directives.other', 'docutils.parsers.rst.directives.admonitions', 'docutils.parsers.rst.directives.misc', 'docutils.parsers.rst.directives.body', 'sphinx.directives.patches', 'docutils.parsers.rst.directives.images', 'urllib.request', 'http', 'http.client', 'ssl', 'ipaddress', '_ssl', 'urllib.error', 'urllib.response', '_scproxy', 'PIL', 'PIL.version', 'PIL.Image', 'PIL._imaging', 'PIL.ImageMode', 'PIL._binary', 'PIL._util', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'pathlib', 'ntpath', 'docutils.parsers.rst.directives.html', 'docutils.transforms.components', 'docutils.parsers.rst.directives.tables', 'csv', '_csv', 'sphinx.roles', 'sphinx.util.rst', 'sphinx.util.parallel', 'sphinx.util.websupport', 'sphinxcontrib.websupport', 'pkg_resources', 'zipfile', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sphinxcontrib.websupport.core', 'jinja2', 'jinja2.environment', 'jinja2.nodes', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2._compat', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.exceptions', 'jinja2.tests', 'jinja2.lexer', 'jinja2.parser', 'jinja2.compiler', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.idtracking', 'jinja2.loaders', 'jinja2.bccache', 'jinja2.asyncsupport', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.sslproto', 'jinja2.asyncfilters', 'sphinx.util.jsonimpl', 'sphinxcontrib.websupport.errors', 'sphinxcontrib.websupport.search', 'sphinxcontrib.websupport.storage', 'sphinxcontrib.websupport.version', 'sphinxcontrib.websupport.utils', 'sphinx.events', 'sphinx.extension', 'sphinx.registry', 'sphinx.parsers', 'sphinx.util.tags', 'sphinx.builders', 'sphinx.environment.adapters.asset', 'sphinx.builders.applehelp', 'pipes', 'shlex', 'sphinx.builders.html', 'sphinx.highlighting', 'pygments.filters', 'pygments.filter', 'pygments.formatters.latex', 'pygments.lexer', 'pygments.regexopt', 'pygments.lexers.python', 'pygments.unistring', 'pygments.lexers.c_cpp', 'pygments.lexers.special', 'pygments.lexers.markup', 'pygments.lexers.html', 'pygments.lexers.javascript', 'pygments.lexers.jvm', 'pygments.lexers.css', 'pygments.lexers.ruby', 'sphinx.ext', 'sphinx.ext.doctest', 'doctest', 'pdb', 'cmd', 'bdb', 'code', 'codeop', 'glob', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'packaging', 'packaging.__about__', 'packaging.specifiers', 'packaging._compat', 'packaging.version', 'packaging._structures', 'sphinx.pygments_styles', 'pygments.style', 'pygments.styles.friendly', 'sphinx.util.texescape', 'sphinx.search', 'sphinx.util.jsdump', 'sphinx.search.jssplitter', 'sphinx.search.en', 'sphinx.util.stemmer', 'sphinx.util.stemmer.porter', 'sphinx.theming', 'sphinx.util.inventory', 'sphinx.writers', 'sphinx.writers.html', 'docutils.writers.html4css1', 'docutils.transforms.writer_aux', 'docutils.writers._html_base', 'docutils.utils.math', 'docutils.utils.math.unichar2tex', 'docutils.utils.math.math2html', 'docutils.utils.math.latex2mathml', 'docutils.utils.math.tex2unichar', 'docutils.utils.math.tex2mathml_extern', 'sphinx.util.images', 'imghdr', 'imagesize', 'sphinx.writers.html5', 'docutils.writers.html5_polyglot', 'sphinx.builders.changes', 'sphinx.builders.epub3', 'sphinx.builders._epub_base', 'sphinx.builders.devhelp', 'gzip', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'sphinx.builders.dummy', 'sphinx.builders.gettext', 'sphinx.builders.htmlhelp', 'sphinx.builders.latex', 'sphinx.transforms.references', 'sphinx.writers.latex', 'docutils.writers.latex2e', 'sphinx.util.template', 'jinja2.sandbox', 'sphinx.jinja2glue', 'sphinx.builders.latex.transforms', 'sphinx.builders.linkcheck', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.util.selectors', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._elliptic_curve', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._errors', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._types', 'asn1crypto._ordereddict', 'asn1crypto._ffi', 'asn1crypto._perf', 'asn1crypto._perf._big_num_ctypes', 'asn1crypto.algos', 'asn1crypto.core', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.x509.general_name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.primitives.mac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.selectors', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'html.parser', '_markupbase', 'six.moves.html_parser', 'sphinx.util.requests', 'sphinx.builders.manpage', 'sphinx.writers.manpage', 'docutils.writers.manpage', 'sphinx.builders.qthelp', 'sphinx.builders.texinfo', 'sphinx.writers.texinfo', 'sphinx.builders.text', 'sphinx.writers.text', 'sphinx.builders.websupport', 'sphinxcontrib.websupport.builder', 'sphinxcontrib.websupport.writer', 'sphinx.builders.xml', 'docutils.writers.docutils_xml', 'xml.sax', 'xml.sax.xmlreader', 'xml.sax.handler', 'xml.sax._exceptions', 'xml.sax.saxutils', 'xml.sax.expatreader', 'sphinx.writers.xml', 'sphinx.domains.c', 'sphinx.domains.cpp', 'sphinx.domains.javascript', 'sphinx.domains.python', 'sphinx.domains.rst', 'sphinx.transforms.post_transforms', 'sphinx.transforms.post_transforms.images', 'sphinx.util.compat', 'sphinx.environment.collectors', 'sphinx.environment.collectors.dependencies', 'sphinx.environment.collectors.asset', 'sphinx.environment.collectors.metadata', 'sphinx.environment.collectors.title', 'sphinx.environment.collectors.toctree', 'sphinx.environment.collectors.indexentries', 'alabaster', 'alabaster._version', 'sphinx.ext.autodoc', 'sphinx.ext.autodoc.importer', 'sphinx.util.inspect', 'sphinx.ext.autodoc.inspector', 'sphinx.pycode', 'sphinx.pycode.parser', 'sphinx.util.docstrings', 'sphinx.ext.autodoc.directive', 'sphinx.ext.mathjax', 'sphinx.ext.mathbase', 'sphinx.ext.githubpages', 'jinja2.ext', 'encodings.utf_8_sig', 'docutils.languages.en', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'lipd.loggers', 'logging.config', 'socketserver', 'lipd.directory', 'lipd.bag', 'bagit', 'lipd.csvs', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'numpy.testing.decorators', 'numpy.testing.nose_tools', 'numpy.testing.nose_tools.decorators', 'numpy.testing.nose_tools.utils', 'numpy.lib.utils', 'numpy.testing.nosetester', 'numpy.testing.nose_tools.nosetester', 'numpy.testing.utils', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy._distributor_init', 'numpy._mklinit', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'mkl_fft', '_cython_0_27_3', 'cython_runtime', 'mkl_fft._pydfti', 'numpy.core.multiarray_tests', 'mkl_fft._numpy_fft', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'lipd.excel', 'xlrd', 'xlrd.info', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.formula', 'xlrd.book', 'xlrd.sheet', 'xlrd.formatting', 'xlrd.compdoc', 'gc', 'mmap', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.chainmap', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.np_datetime', '_cython_0_28_2', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.config', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.printing', 'pandas.core.dtypes', 'pandas.core.dtypes.inference', 'pandas.io.formats.console', 'pandas.io.formats.terminal', 'pandas.core.api', 'pandas.core.algorithms', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.missing', 'pandas.core.common', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util._validators', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.core.missing', 'pandas.core.groupby', 'pandas.core.groupby.groupby', 'pandas.core.index', 'pandas.core.indexes', 'pandas.core.indexes.api', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.resolution', 'pandas.tseries', 'pandas.tseries.offsets', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'dateutil.easter', 'pandas._libs.tslibs.offsets', 'pandas.tseries.frequencies', 'pandas._libs.join', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.indexes.frozen', 'pandas.core.dtypes.concat', 'pandas.core.sorting', 'pandas.core.strings', 'pandas.core.indexes.category', 'pandas.core.indexes.multi', 'pandas.core.indexes.interval', 'pandas._libs.interval', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.numeric', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.range', 'pandas.core.indexes.period', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas._libs.internals', 'pandas.core.sparse', 'pandas.core.sparse.array', 'pandas._libs.sparse', 'pandas.io.formats.format', 'pandas.io.common', 'pandas.core.series', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._misc', 'pandas.plotting._style', 'pandas.plotting._compat', 'pandas.plotting._tools', 'pandas.plotting._core', 'pandas.plotting._converter', 'matplotlib', 'distutils.sysconfig', 'distutils.errors', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.cbook._backports', 'matplotlib.compat', 'matplotlib.compat.subprocess', 'matplotlib.rcsetup', 'matplotlib.testing', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'six.moves.urllib.request', 'matplotlib._version']
2018-08-06 15:48:02,141 [DEBUG] matplotlib: CACHEDIR=/Users/fzhu/.matplotlib
2018-08-06 15:48:02,147 [DEBUG] matplotlib.font_manager: Using fontManager instance from /Users/fzhu/.matplotlib/fontList.json
2018-08-06 15:48:02,275 [DEBUG] matplotlib.backends: backend TkAgg version unknown
2018-08-06 15:48:07,025 [DEBUG] matplotlib: $HOME=/Users/fzhu
2018-08-06 15:48:07,030 [DEBUG] matplotlib: matplotlib data path /Users/fzhu/.pyenv/versions/py3.6/lib/python3.6/site-packages/matplotlib/mpl-data
2018-08-06 15:48:07,034 [DEBUG] matplotlib: loaded rc file /Users/fzhu/.matplotlib/matplotlibrc
2018-08-06 15:48:07,036 [DEBUG] matplotlib: matplotlib version 2.2.2
2018-08-06 15:48:07,037 [DEBUG] matplotlib: interactive is False
2018-08-06 15:48:07,037 [DEBUG] matplotlib: platform is darwin
2018-08-06 15:48:07,038 [DEBUG] matplotlib: loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', '_locale', 'copyreg', '_bootlocale', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'sphinx', '__future__', 'sphinx.deprecation', 'sphinx.cmd', 'sphinx.cmd.build', 'sphinx.make_mode', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'sphinx.cmdline', 'argparse', 'copy', 'textwrap', 'gettext', 'locale', 'struct', '_struct', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'pickle', '_compat_pickle', '_pickle', 'socket', '_socket', 'array', '__mp_main__', 'docutils', 'docutils.utils', 'unicodedata', 'docutils.nodes', 'docutils.io', 'docutils._compat', 'docutils.utils.error_reporting', 'six', 'sphinx.application', 'docutils.parsers', 'docutils.parsers.rst', 'docutils.statemachine', 'docutils.parsers.rst.states', 'docutils.parsers.rst.directives', 'docutils.parsers.rst.languages', 'docutils.parsers.rst.languages.en', 'docutils.parsers.rst.tableparser', 'docutils.parsers.rst.roles', 'docutils.utils.code_analyzer', 'pygments', 'pygments.util', 'pygments.lexers', 'fnmatch', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'pygments.token', 'docutils.utils.punctuation_chars', 'docutils.utils.roman', 'docutils.utils.urischemes', 'docutils.frontend', 'configparser', 'optparse', 'docutils.transforms', 'docutils.languages', 'docutils.transforms.universal', 'docutils.utils.smartquotes', 'six.moves', 'sphinx.locale', 'sphinx.config', 'typing', 'typing.io', 'typing.re', 'sphinx.errors', 'sphinx.util', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'datetime', '_datetime', 'six.moves.urllib', 'six.moves.urllib.parse', 'urllib', 'urllib.parse', 'sphinx.util.logging', 'logging', 'string', '_string', 'atexit', 'logging.handlers', 'queue', 'sphinx.util.console', 'termios', 'fcntl', 'sphinx.util.fileutil', 'sphinx.util.osutil', 'filecmp', 'sphinx.util.smartypants', 'sphinx.util.docutils', 'distutils', 'distutils.version', 'sphinx.util.nodes', 'sphinx.addnodes', 'sphinx.util.matching', 'sphinx.util.i18n', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'decimal', 'numbers', '_decimal', 'babel.plural', 'babel.dates', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'babel.messages', 'babel.messages.catalog', 'cgi', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'html', 'html.entities', 'difflib', 'babel.messages.plurals', 'babel.messages.mofile', 'babel.messages.pofile', 'sphinx.util.pycompat', 'sphinx.environment', 'sphinx.versioning', 'uuid', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'sphinx.transforms', 'docutils.transforms.parts', 'sphinx.environment.adapters', 'sphinx.environment.adapters.indexentries', 'sphinx.environment.adapters.toctree', 'sphinx.io', 'docutils.core', 'pprint', 'docutils.readers', 'docutils.writers', 'docutils.readers.doctree', 'docutils.readers.standalone', 'docutils.transforms.frontmatter', 'docutils.transforms.references', 'docutils.transforms.misc', 'sphinx.transforms.compact_bullet_list', 'sphinx.transforms.i18n', 'sphinx.domains', 'sphinx.domains.std', 'sphinx.directives', 'sphinx.util.docfields', 'sphinx.directives.code', 'sphinx.directives.other', 'docutils.parsers.rst.directives.admonitions', 'docutils.parsers.rst.directives.misc', 'docutils.parsers.rst.directives.body', 'sphinx.directives.patches', 'docutils.parsers.rst.directives.images', 'urllib.request', 'http', 'http.client', 'ssl', 'ipaddress', '_ssl', 'urllib.error', 'urllib.response', '_scproxy', 'PIL', 'PIL.version', 'PIL.Image', 'PIL._imaging', 'PIL.ImageMode', 'PIL._binary', 'PIL._util', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'pathlib', 'ntpath', 'docutils.parsers.rst.directives.html', 'docutils.transforms.components', 'docutils.parsers.rst.directives.tables', 'csv', '_csv', 'sphinx.roles', 'sphinx.util.rst', 'sphinx.util.parallel', 'sphinx.util.websupport', 'sphinxcontrib.websupport', 'pkg_resources', 'zipfile', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sphinxcontrib.websupport.core', 'jinja2', 'jinja2.environment', 'jinja2.nodes', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2._compat', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.exceptions', 'jinja2.tests', 'jinja2.lexer', 'jinja2.parser', 'jinja2.compiler', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.idtracking', 'jinja2.loaders', 'jinja2.bccache', 'jinja2.asyncsupport', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.sslproto', 'jinja2.asyncfilters', 'sphinx.util.jsonimpl', 'sphinxcontrib.websupport.errors', 'sphinxcontrib.websupport.search', 'sphinxcontrib.websupport.storage', 'sphinxcontrib.websupport.version', 'sphinxcontrib.websupport.utils', 'sphinx.events', 'sphinx.extension', 'sphinx.registry', 'sphinx.parsers', 'sphinx.util.tags', 'sphinx.builders', 'sphinx.environment.adapters.asset', 'sphinx.builders.applehelp', 'pipes', 'shlex', 'sphinx.builders.html', 'sphinx.highlighting', 'pygments.filters', 'pygments.filter', 'pygments.formatters.latex', 'pygments.lexer', 'pygments.regexopt', 'pygments.lexers.python', 'pygments.unistring', 'pygments.lexers.c_cpp', 'pygments.lexers.special', 'pygments.lexers.markup', 'pygments.lexers.html', 'pygments.lexers.javascript', 'pygments.lexers.jvm', 'pygments.lexers.css', 'pygments.lexers.ruby', 'sphinx.ext', 'sphinx.ext.doctest', 'doctest', 'pdb', 'cmd', 'bdb', 'code', 'codeop', 'glob', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'packaging', 'packaging.__about__', 'packaging.specifiers', 'packaging._compat', 'packaging.version', 'packaging._structures', 'sphinx.pygments_styles', 'pygments.style', 'pygments.styles.friendly', 'sphinx.util.texescape', 'sphinx.search', 'sphinx.util.jsdump', 'sphinx.search.jssplitter', 'sphinx.search.en', 'sphinx.util.stemmer', 'sphinx.util.stemmer.porter', 'sphinx.theming', 'sphinx.util.inventory', 'sphinx.writers', 'sphinx.writers.html', 'docutils.writers.html4css1', 'docutils.transforms.writer_aux', 'docutils.writers._html_base', 'docutils.utils.math', 'docutils.utils.math.unichar2tex', 'docutils.utils.math.math2html', 'docutils.utils.math.latex2mathml', 'docutils.utils.math.tex2unichar', 'docutils.utils.math.tex2mathml_extern', 'sphinx.util.images', 'imghdr', 'imagesize', 'sphinx.writers.html5', 'docutils.writers.html5_polyglot', 'sphinx.builders.changes', 'sphinx.builders.epub3', 'sphinx.builders._epub_base', 'sphinx.builders.devhelp', 'gzip', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'sphinx.builders.dummy', 'sphinx.builders.gettext', 'sphinx.builders.htmlhelp', 'sphinx.builders.latex', 'sphinx.transforms.references', 'sphinx.writers.latex', 'docutils.writers.latex2e', 'sphinx.util.template', 'jinja2.sandbox', 'sphinx.jinja2glue', 'sphinx.builders.latex.transforms', 'sphinx.builders.linkcheck', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.util.selectors', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._elliptic_curve', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._errors', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._types', 'asn1crypto._ordereddict', 'asn1crypto._ffi', 'asn1crypto._perf', 'asn1crypto._perf._big_num_ctypes', 'asn1crypto.algos', 'asn1crypto.core', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.x509.general_name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.primitives.mac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.selectors', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'html.parser', '_markupbase', 'six.moves.html_parser', 'sphinx.util.requests', 'sphinx.builders.manpage', 'sphinx.writers.manpage', 'docutils.writers.manpage', 'sphinx.builders.qthelp', 'sphinx.builders.texinfo', 'sphinx.writers.texinfo', 'sphinx.builders.text', 'sphinx.writers.text', 'sphinx.builders.websupport', 'sphinxcontrib.websupport.builder', 'sphinxcontrib.websupport.writer', 'sphinx.builders.xml', 'docutils.writers.docutils_xml', 'xml.sax', 'xml.sax.xmlreader', 'xml.sax.handler', 'xml.sax._exceptions', 'xml.sax.saxutils', 'xml.sax.expatreader', 'sphinx.writers.xml', 'sphinx.domains.c', 'sphinx.domains.cpp', 'sphinx.domains.javascript', 'sphinx.domains.python', 'sphinx.domains.rst', 'sphinx.transforms.post_transforms', 'sphinx.transforms.post_transforms.images', 'sphinx.util.compat', 'sphinx.environment.collectors', 'sphinx.environment.collectors.dependencies', 'sphinx.environment.collectors.asset', 'sphinx.environment.collectors.metadata', 'sphinx.environment.collectors.title', 'sphinx.environment.collectors.toctree', 'sphinx.environment.collectors.indexentries', 'alabaster', 'alabaster._version', 'sphinx.ext.autodoc', 'sphinx.ext.autodoc.importer', 'sphinx.util.inspect', 'sphinx.ext.autodoc.inspector', 'sphinx.pycode', 'sphinx.pycode.parser', 'sphinx.util.docstrings', 'sphinx.ext.autodoc.directive', 'sphinx.ext.mathjax', 'sphinx.ext.mathbase', 'sphinx.ext.githubpages', 'encodings.utf_8_sig', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'lipd.loggers', 'logging.config', 'socketserver', 'lipd.directory', 'lipd.bag', 'bagit', 'lipd.csvs', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'numpy.testing.decorators', 'numpy.testing.nose_tools', 'numpy.testing.nose_tools.decorators', 'numpy.testing.nose_tools.utils', 'numpy.lib.utils', 'numpy.testing.nosetester', 'numpy.testing.nose_tools.nosetester', 'numpy.testing.utils', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy._distributor_init', 'numpy._mklinit', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'mkl_fft', '_cython_0_27_3', 'cython_runtime', 'mkl_fft._pydfti', 'numpy.core.multiarray_tests', 'mkl_fft._numpy_fft', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'lipd.excel', 'xlrd', 'xlrd.info', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.formula', 'xlrd.book', 'xlrd.sheet', 'xlrd.formatting', 'xlrd.compdoc', 'gc', 'mmap', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.chainmap', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.np_datetime', '_cython_0_28_2', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.config', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.printing', 'pandas.core.dtypes', 'pandas.core.dtypes.inference', 'pandas.io.formats.console', 'pandas.io.formats.terminal', 'pandas.core.api', 'pandas.core.algorithms', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.missing', 'pandas.core.common', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util._validators', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.core.missing', 'pandas.core.groupby', 'pandas.core.groupby.groupby', 'pandas.core.index', 'pandas.core.indexes', 'pandas.core.indexes.api', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.resolution', 'pandas.tseries', 'pandas.tseries.offsets', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'dateutil.easter', 'pandas._libs.tslibs.offsets', 'pandas.tseries.frequencies', 'pandas._libs.join', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.indexes.frozen', 'pandas.core.dtypes.concat', 'pandas.core.sorting', 'pandas.core.strings', 'pandas.core.indexes.category', 'pandas.core.indexes.multi', 'pandas.core.indexes.interval', 'pandas._libs.interval', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.numeric', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.range', 'pandas.core.indexes.period', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas._libs.internals', 'pandas.core.sparse', 'pandas.core.sparse.array', 'pandas._libs.sparse', 'pandas.io.formats.format', 'pandas.io.common', 'pandas.core.series', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._misc', 'pandas.plotting._style', 'pandas.plotting._compat', 'pandas.plotting._tools', 'pandas.plotting._core', 'pandas.plotting._converter', 'matplotlib', 'distutils.sysconfig', 'distutils.errors', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.cbook._backports', 'matplotlib.compat', 'matplotlib.compat.subprocess', 'matplotlib.rcsetup', 'matplotlib.testing', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'six.moves.urllib.request', 'matplotlib._version']
2018-08-06 15:48:07,217 [DEBUG] matplotlib: CACHEDIR=/Users/fzhu/.matplotlib
2018-08-06 15:48:07,223 [DEBUG] matplotlib.font_manager: Using fontManager instance from /Users/fzhu/.matplotlib/fontList.json
2018-08-06 15:48:07,380 [DEBUG] matplotlib.backends: backend TkAgg version unknown
2018-08-06 15:48:43,506 [DEBUG] matplotlib: $HOME=/Users/fzhu
2018-08-06 15:48:43,510 [DEBUG] matplotlib: matplotlib data path /Users/fzhu/.pyenv/versions/py3.6/lib/python3.6/site-packages/matplotlib/mpl-data
2018-08-06 15:48:43,514 [DEBUG] matplotlib: loaded rc file /Users/fzhu/.matplotlib/matplotlibrc
2018-08-06 15:48:43,516 [DEBUG] matplotlib: matplotlib version 2.2.2
2018-08-06 15:48:43,516 [DEBUG] matplotlib: interactive is False
2018-08-06 15:48:43,516 [DEBUG] matplotlib: platform is darwin
2018-08-06 15:48:43,517 [DEBUG] matplotlib: loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', '_locale', 'copyreg', '_bootlocale', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'sphinx', '__future__', 'sphinx.deprecation', 'sphinx.cmd', 'sphinx.cmd.build', 'sphinx.make_mode', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'sphinx.cmdline', 'argparse', 'copy', 'textwrap', 'gettext', 'locale', 'struct', '_struct', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'pickle', '_compat_pickle', '_pickle', 'socket', '_socket', 'array', '__mp_main__', 'docutils', 'docutils.utils', 'unicodedata', 'docutils.nodes', 'docutils.io', 'docutils._compat', 'docutils.utils.error_reporting', 'six', 'sphinx.application', 'docutils.parsers', 'docutils.parsers.rst', 'docutils.statemachine', 'docutils.parsers.rst.states', 'docutils.parsers.rst.directives', 'docutils.parsers.rst.languages', 'docutils.parsers.rst.languages.en', 'docutils.parsers.rst.tableparser', 'docutils.parsers.rst.roles', 'docutils.utils.code_analyzer', 'pygments', 'pygments.util', 'pygments.lexers', 'fnmatch', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'pygments.token', 'docutils.utils.punctuation_chars', 'docutils.utils.roman', 'docutils.utils.urischemes', 'docutils.frontend', 'configparser', 'optparse', 'docutils.transforms', 'docutils.languages', 'docutils.transforms.universal', 'docutils.utils.smartquotes', 'six.moves', 'sphinx.locale', 'sphinx.config', 'typing', 'typing.io', 'typing.re', 'sphinx.errors', 'sphinx.util', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'datetime', '_datetime', 'six.moves.urllib', 'six.moves.urllib.parse', 'urllib', 'urllib.parse', 'sphinx.util.logging', 'logging', 'string', '_string', 'atexit', 'logging.handlers', 'queue', 'sphinx.util.console', 'termios', 'fcntl', 'sphinx.util.fileutil', 'sphinx.util.osutil', 'filecmp', 'sphinx.util.smartypants', 'sphinx.util.docutils', 'distutils', 'distutils.version', 'sphinx.util.nodes', 'sphinx.addnodes', 'sphinx.util.matching', 'sphinx.util.i18n', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'decimal', 'numbers', '_decimal', 'babel.plural', 'babel.dates', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'babel.messages', 'babel.messages.catalog', 'cgi', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'html', 'html.entities', 'difflib', 'babel.messages.plurals', 'babel.messages.mofile', 'babel.messages.pofile', 'sphinx.util.pycompat', 'sphinx.environment', 'sphinx.versioning', 'uuid', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'sphinx.transforms', 'docutils.transforms.parts', 'sphinx.environment.adapters', 'sphinx.environment.adapters.indexentries', 'sphinx.environment.adapters.toctree', 'sphinx.io', 'docutils.core', 'pprint', 'docutils.readers', 'docutils.writers', 'docutils.readers.doctree', 'docutils.readers.standalone', 'docutils.transforms.frontmatter', 'docutils.transforms.references', 'docutils.transforms.misc', 'sphinx.transforms.compact_bullet_list', 'sphinx.transforms.i18n', 'sphinx.domains', 'sphinx.domains.std', 'sphinx.directives', 'sphinx.util.docfields', 'sphinx.directives.code', 'sphinx.directives.other', 'docutils.parsers.rst.directives.admonitions', 'docutils.parsers.rst.directives.misc', 'docutils.parsers.rst.directives.body', 'sphinx.directives.patches', 'docutils.parsers.rst.directives.images', 'urllib.request', 'http', 'http.client', 'ssl', 'ipaddress', '_ssl', 'urllib.error', 'urllib.response', '_scproxy', 'PIL', 'PIL.version', 'PIL.Image', 'PIL._imaging', 'PIL.ImageMode', 'PIL._binary', 'PIL._util', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'pathlib', 'ntpath', 'docutils.parsers.rst.directives.html', 'docutils.transforms.components', 'docutils.parsers.rst.directives.tables', 'csv', '_csv', 'sphinx.roles', 'sphinx.util.rst', 'sphinx.util.parallel', 'sphinx.util.websupport', 'sphinxcontrib.websupport', 'pkg_resources', 'zipfile', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sphinxcontrib.websupport.core', 'jinja2', 'jinja2.environment', 'jinja2.nodes', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2._compat', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.exceptions', 'jinja2.tests', 'jinja2.lexer', 'jinja2.parser', 'jinja2.compiler', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.idtracking', 'jinja2.loaders', 'jinja2.bccache', 'jinja2.asyncsupport', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.sslproto', 'jinja2.asyncfilters', 'sphinx.util.jsonimpl', 'sphinxcontrib.websupport.errors', 'sphinxcontrib.websupport.search', 'sphinxcontrib.websupport.storage', 'sphinxcontrib.websupport.version', 'sphinxcontrib.websupport.utils', 'sphinx.events', 'sphinx.extension', 'sphinx.registry', 'sphinx.parsers', 'sphinx.util.tags', 'sphinx.builders', 'sphinx.environment.adapters.asset', 'sphinx.builders.applehelp', 'pipes', 'shlex', 'sphinx.builders.html', 'sphinx.highlighting', 'pygments.filters', 'pygments.filter', 'pygments.formatters.latex', 'pygments.lexer', 'pygments.regexopt', 'pygments.lexers.python', 'pygments.unistring', 'pygments.lexers.c_cpp', 'pygments.lexers.special', 'pygments.lexers.markup', 'pygments.lexers.html', 'pygments.lexers.javascript', 'pygments.lexers.jvm', 'pygments.lexers.css', 'pygments.lexers.ruby', 'sphinx.ext', 'sphinx.ext.doctest', 'doctest', 'pdb', 'cmd', 'bdb', 'code', 'codeop', 'glob', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'packaging', 'packaging.__about__', 'packaging.specifiers', 'packaging._compat', 'packaging.version', 'packaging._structures', 'sphinx.pygments_styles', 'pygments.style', 'pygments.styles.friendly', 'sphinx.util.texescape', 'sphinx.search', 'sphinx.util.jsdump', 'sphinx.search.jssplitter', 'sphinx.search.en', 'sphinx.util.stemmer', 'sphinx.util.stemmer.porter', 'sphinx.theming', 'sphinx.util.inventory', 'sphinx.writers', 'sphinx.writers.html', 'docutils.writers.html4css1', 'docutils.transforms.writer_aux', 'docutils.writers._html_base', 'docutils.utils.math', 'docutils.utils.math.unichar2tex', 'docutils.utils.math.math2html', 'docutils.utils.math.latex2mathml', 'docutils.utils.math.tex2unichar', 'docutils.utils.math.tex2mathml_extern', 'sphinx.util.images', 'imghdr', 'imagesize', 'sphinx.writers.html5', 'docutils.writers.html5_polyglot', 'sphinx.builders.changes', 'sphinx.builders.epub3', 'sphinx.builders._epub_base', 'sphinx.builders.devhelp', 'gzip', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'sphinx.builders.dummy', 'sphinx.builders.gettext', 'sphinx.builders.htmlhelp', 'sphinx.builders.latex', 'sphinx.transforms.references', 'sphinx.writers.latex', 'docutils.writers.latex2e', 'sphinx.util.template', 'jinja2.sandbox', 'sphinx.jinja2glue', 'sphinx.builders.latex.transforms', 'sphinx.builders.linkcheck', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.util.selectors', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._elliptic_curve', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._errors', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._types', 'asn1crypto._ordereddict', 'asn1crypto._ffi', 'asn1crypto._perf', 'asn1crypto._perf._big_num_ctypes', 'asn1crypto.algos', 'asn1crypto.core', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.x509.general_name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.primitives.mac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.selectors', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'html.parser', '_markupbase', 'six.moves.html_parser', 'sphinx.util.requests', 'sphinx.builders.manpage', 'sphinx.writers.manpage', 'docutils.writers.manpage', 'sphinx.builders.qthelp', 'sphinx.builders.texinfo', 'sphinx.writers.texinfo', 'sphinx.builders.text', 'sphinx.writers.text', 'sphinx.builders.websupport', 'sphinxcontrib.websupport.builder', 'sphinxcontrib.websupport.writer', 'sphinx.builders.xml', 'docutils.writers.docutils_xml', 'xml.sax', 'xml.sax.xmlreader', 'xml.sax.handler', 'xml.sax._exceptions', 'xml.sax.saxutils', 'xml.sax.expatreader', 'sphinx.writers.xml', 'sphinx.domains.c', 'sphinx.domains.cpp', 'sphinx.domains.javascript', 'sphinx.domains.python', 'sphinx.domains.rst', 'sphinx.transforms.post_transforms', 'sphinx.transforms.post_transforms.images', 'sphinx.util.compat', 'sphinx.environment.collectors', 'sphinx.environment.collectors.dependencies', 'sphinx.environment.collectors.asset', 'sphinx.environment.collectors.metadata', 'sphinx.environment.collectors.title', 'sphinx.environment.collectors.toctree', 'sphinx.environment.collectors.indexentries', 'alabaster', 'alabaster._version', 'sphinx.ext.autodoc', 'sphinx.ext.autodoc.importer', 'sphinx.util.inspect', 'sphinx.ext.autodoc.inspector', 'sphinx.pycode', 'sphinx.pycode.parser', 'sphinx.util.docstrings', 'sphinx.ext.autodoc.directive', 'sphinx.ext.mathjax', 'sphinx.ext.mathbase', 'sphinx.ext.githubpages', 'encodings.utf_8_sig', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'lipd.loggers', 'logging.config', 'socketserver', 'lipd.directory', 'lipd.bag', 'bagit', 'lipd.csvs', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'numpy.testing.decorators', 'numpy.testing.nose_tools', 'numpy.testing.nose_tools.decorators', 'numpy.testing.nose_tools.utils', 'numpy.lib.utils', 'numpy.testing.nosetester', 'numpy.testing.nose_tools.nosetester', 'numpy.testing.utils', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy._distributor_init', 'numpy._mklinit', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'mkl_fft', '_cython_0_27_3', 'cython_runtime', 'mkl_fft._pydfti', 'numpy.core.multiarray_tests', 'mkl_fft._numpy_fft', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'lipd.excel', 'xlrd', 'xlrd.info', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.formula', 'xlrd.book', 'xlrd.sheet', 'xlrd.formatting', 'xlrd.compdoc', 'gc', 'mmap', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.chainmap', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.np_datetime', '_cython_0_28_2', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.config', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.printing', 'pandas.core.dtypes', 'pandas.core.dtypes.inference', 'pandas.io.formats.console', 'pandas.io.formats.terminal', 'pandas.core.api', 'pandas.core.algorithms', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.missing', 'pandas.core.common', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util._validators', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.core.missing', 'pandas.core.groupby', 'pandas.core.groupby.groupby', 'pandas.core.index', 'pandas.core.indexes', 'pandas.core.indexes.api', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.resolution', 'pandas.tseries', 'pandas.tseries.offsets', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'dateutil.easter', 'pandas._libs.tslibs.offsets', 'pandas.tseries.frequencies', 'pandas._libs.join', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.indexes.frozen', 'pandas.core.dtypes.concat', 'pandas.core.sorting', 'pandas.core.strings', 'pandas.core.indexes.category', 'pandas.core.indexes.multi', 'pandas.core.indexes.interval', 'pandas._libs.interval', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.numeric', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.range', 'pandas.core.indexes.period', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas._libs.internals', 'pandas.core.sparse', 'pandas.core.sparse.array', 'pandas._libs.sparse', 'pandas.io.formats.format', 'pandas.io.common', 'pandas.core.series', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._misc', 'pandas.plotting._style', 'pandas.plotting._compat', 'pandas.plotting._tools', 'pandas.plotting._core', 'pandas.plotting._converter', 'matplotlib', 'distutils.sysconfig', 'distutils.errors', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.cbook._backports', 'matplotlib.compat', 'matplotlib.compat.subprocess', 'matplotlib.rcsetup', 'matplotlib.testing', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'six.moves.urllib.request', 'matplotlib._version']
2018-08-06 15:48:43,692 [DEBUG] matplotlib: CACHEDIR=/Users/fzhu/.matplotlib
2018-08-06 15:48:43,698 [DEBUG] matplotlib.font_manager: Using fontManager instance from /Users/fzhu/.matplotlib/fontList.json
2018-08-06 15:48:43,831 [DEBUG] matplotlib.backends: backend TkAgg version unknown
2018-08-06 15:49:05,936 [DEBUG] matplotlib: $HOME=/Users/fzhu
2018-08-06 15:49:05,940 [DEBUG] matplotlib: matplotlib data path /Users/fzhu/.pyenv/versions/py3.6/lib/python3.6/site-packages/matplotlib/mpl-data
2018-08-06 15:49:05,943 [DEBUG] matplotlib: loaded rc file /Users/fzhu/.matplotlib/matplotlibrc
2018-08-06 15:49:05,946 [DEBUG] matplotlib: matplotlib version 2.2.2
2018-08-06 15:49:05,946 [DEBUG] matplotlib: interactive is False
2018-08-06 15:49:05,946 [DEBUG] matplotlib: platform is darwin
2018-08-06 15:49:05,946 [DEBUG] matplotlib: loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', '_locale', 'copyreg', '_bootlocale', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'sphinx', '__future__', 'sphinx.deprecation', 'sphinx.cmd', 'sphinx.cmd.build', 'sphinx.make_mode', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'sphinx.cmdline', 'argparse', 'copy', 'textwrap', 'gettext', 'locale', 'struct', '_struct', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'pickle', '_compat_pickle', '_pickle', 'socket', '_socket', 'array', '__mp_main__', 'docutils', 'docutils.utils', 'unicodedata', 'docutils.nodes', 'docutils.io', 'docutils._compat', 'docutils.utils.error_reporting', 'six', 'sphinx.application', 'docutils.parsers', 'docutils.parsers.rst', 'docutils.statemachine', 'docutils.parsers.rst.states', 'docutils.parsers.rst.directives', 'docutils.parsers.rst.languages', 'docutils.parsers.rst.languages.en', 'docutils.parsers.rst.tableparser', 'docutils.parsers.rst.roles', 'docutils.utils.code_analyzer', 'pygments', 'pygments.util', 'pygments.lexers', 'fnmatch', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'pygments.token', 'docutils.utils.punctuation_chars', 'docutils.utils.roman', 'docutils.utils.urischemes', 'docutils.frontend', 'configparser', 'optparse', 'docutils.transforms', 'docutils.languages', 'docutils.transforms.universal', 'docutils.utils.smartquotes', 'six.moves', 'sphinx.locale', 'sphinx.config', 'typing', 'typing.io', 'typing.re', 'sphinx.errors', 'sphinx.util', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'datetime', '_datetime', 'six.moves.urllib', 'six.moves.urllib.parse', 'urllib', 'urllib.parse', 'sphinx.util.logging', 'logging', 'string', '_string', 'atexit', 'logging.handlers', 'queue', 'sphinx.util.console', 'termios', 'fcntl', 'sphinx.util.fileutil', 'sphinx.util.osutil', 'filecmp', 'sphinx.util.smartypants', 'sphinx.util.docutils', 'distutils', 'distutils.version', 'sphinx.util.nodes', 'sphinx.addnodes', 'sphinx.util.matching', 'sphinx.util.i18n', 'babel', 'babel.core', 'babel.localedata', 'babel._compat', 'decimal', 'numbers', '_decimal', 'babel.plural', 'babel.dates', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'babel.util', 'babel.localtime', 'babel.localtime._unix', 'babel.messages', 'babel.messages.catalog', 'cgi', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'binascii', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'html', 'html.entities', 'difflib', 'babel.messages.plurals', 'babel.messages.mofile', 'babel.messages.pofile', 'sphinx.util.pycompat', 'sphinx.environment', 'sphinx.versioning', 'uuid', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'sphinx.transforms', 'docutils.transforms.parts', 'sphinx.environment.adapters', 'sphinx.environment.adapters.indexentries', 'sphinx.environment.adapters.toctree', 'sphinx.io', 'docutils.core', 'pprint', 'docutils.readers', 'docutils.writers', 'docutils.readers.doctree', 'docutils.readers.standalone', 'docutils.transforms.frontmatter', 'docutils.transforms.references', 'docutils.transforms.misc', 'sphinx.transforms.compact_bullet_list', 'sphinx.transforms.i18n', 'sphinx.domains', 'sphinx.domains.std', 'sphinx.directives', 'sphinx.util.docfields', 'sphinx.directives.code', 'sphinx.directives.other', 'docutils.parsers.rst.directives.admonitions', 'docutils.parsers.rst.directives.misc', 'docutils.parsers.rst.directives.body', 'sphinx.directives.patches', 'docutils.parsers.rst.directives.images', 'urllib.request', 'http', 'http.client', 'ssl', 'ipaddress', '_ssl', 'urllib.error', 'urllib.response', '_scproxy', 'PIL', 'PIL.version', 'PIL.Image', 'PIL._imaging', 'PIL.ImageMode', 'PIL._binary', 'PIL._util', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'pathlib', 'ntpath', 'docutils.parsers.rst.directives.html', 'docutils.transforms.components', 'docutils.parsers.rst.directives.tables', 'csv', '_csv', 'sphinx.roles', 'sphinx.util.rst', 'sphinx.util.parallel', 'sphinx.util.websupport', 'sphinxcontrib.websupport', 'pkg_resources', 'zipfile', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'sphinxcontrib.websupport.core', 'jinja2', 'jinja2.environment', 'jinja2.nodes', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2._compat', 'markupsafe', 'markupsafe._compat', 'markupsafe._speedups', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.exceptions', 'jinja2.tests', 'jinja2.lexer', 'jinja2.parser', 'jinja2.compiler', 'jinja2.visitor', 'jinja2.optimizer', 'jinja2.idtracking', 'jinja2.loaders', 'jinja2.bccache', 'jinja2.asyncsupport', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.sslproto', 'jinja2.asyncfilters', 'sphinx.util.jsonimpl', 'sphinxcontrib.websupport.errors', 'sphinxcontrib.websupport.search', 'sphinxcontrib.websupport.storage', 'sphinxcontrib.websupport.version', 'sphinxcontrib.websupport.utils', 'sphinx.events', 'sphinx.extension', 'sphinx.registry', 'sphinx.parsers', 'sphinx.util.tags', 'sphinx.builders', 'sphinx.environment.adapters.asset', 'sphinx.builders.applehelp', 'pipes', 'shlex', 'sphinx.builders.html', 'sphinx.highlighting', 'pygments.filters', 'pygments.filter', 'pygments.formatters.latex', 'pygments.lexer', 'pygments.regexopt', 'pygments.lexers.python', 'pygments.unistring', 'pygments.lexers.c_cpp', 'pygments.lexers.special', 'pygments.lexers.markup', 'pygments.lexers.html', 'pygments.lexers.javascript', 'pygments.lexers.jvm', 'pygments.lexers.css', 'pygments.lexers.ruby', 'sphinx.ext', 'sphinx.ext.doctest', 'doctest', 'pdb', 'cmd', 'bdb', 'code', 'codeop', 'glob', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'packaging', 'packaging.__about__', 'packaging.specifiers', 'packaging._compat', 'packaging.version', 'packaging._structures', 'sphinx.pygments_styles', 'pygments.style', 'pygments.styles.friendly', 'sphinx.util.texescape', 'sphinx.search', 'sphinx.util.jsdump', 'sphinx.search.jssplitter', 'sphinx.search.en', 'sphinx.util.stemmer', 'sphinx.util.stemmer.porter', 'sphinx.theming', 'sphinx.util.inventory', 'sphinx.writers', 'sphinx.writers.html', 'docutils.writers.html4css1', 'docutils.transforms.writer_aux', 'docutils.writers._html_base', 'docutils.utils.math', 'docutils.utils.math.unichar2tex', 'docutils.utils.math.math2html', 'docutils.utils.math.latex2mathml', 'docutils.utils.math.tex2unichar', 'docutils.utils.math.tex2mathml_extern', 'sphinx.util.images', 'imghdr', 'imagesize', 'sphinx.writers.html5', 'docutils.writers.html5_polyglot', 'sphinx.builders.changes', 'sphinx.builders.epub3', 'sphinx.builders._epub_base', 'sphinx.builders.devhelp', 'gzip', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'sphinx.builders.dummy', 'sphinx.builders.gettext', 'sphinx.builders.htmlhelp', 'sphinx.builders.latex', 'sphinx.transforms.references', 'sphinx.writers.latex', 'docutils.writers.latex2e', 'sphinx.util.template', 'jinja2.sandbox', 'sphinx.jinja2glue', 'sphinx.builders.latex.transforms', 'sphinx.builders.linkcheck', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.util.selectors', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'hmac', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.exceptions', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'asn1crypto', 'asn1crypto.version', 'asn1crypto.keys', 'asn1crypto._elliptic_curve', 'asn1crypto._int', 'asn1crypto.util', 'asn1crypto._errors', 'asn1crypto._iri', 'encodings.idna', 'stringprep', 'asn1crypto._types', 'asn1crypto._ordereddict', 'asn1crypto._ffi', 'asn1crypto._perf', 'asn1crypto._perf._big_num_ctypes', 'asn1crypto.algos', 'asn1crypto.core', 'asn1crypto._teletex_codec', 'asn1crypto.parser', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.x509.general_name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.primitives.mac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.selectors', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'html.parser', '_markupbase', 'six.moves.html_parser', 'sphinx.util.requests', 'sphinx.builders.manpage', 'sphinx.writers.manpage', 'docutils.writers.manpage', 'sphinx.builders.qthelp', 'sphinx.builders.texinfo', 'sphinx.writers.texinfo', 'sphinx.builders.text', 'sphinx.writers.text', 'sphinx.builders.websupport', 'sphinxcontrib.websupport.builder', 'sphinxcontrib.websupport.writer', 'sphinx.builders.xml', 'docutils.writers.docutils_xml', 'xml.sax', 'xml.sax.xmlreader', 'xml.sax.handler', 'xml.sax._exceptions', 'xml.sax.saxutils', 'xml.sax.expatreader', 'sphinx.writers.xml', 'sphinx.domains.c', 'sphinx.domains.cpp', 'sphinx.domains.javascript', 'sphinx.domains.python', 'sphinx.domains.rst', 'sphinx.transforms.post_transforms', 'sphinx.transforms.post_transforms.images', 'sphinx.util.compat', 'sphinx.environment.collectors', 'sphinx.environment.collectors.dependencies', 'sphinx.environment.collectors.asset', 'sphinx.environment.collectors.metadata', 'sphinx.environment.collectors.title', 'sphinx.environment.collectors.toctree', 'sphinx.environment.collectors.indexentries', 'alabaster', 'alabaster._version', 'sphinx.ext.autodoc', 'sphinx.ext.autodoc.importer', 'sphinx.util.inspect', 'sphinx.ext.autodoc.inspector', 'sphinx.pycode', 'sphinx.pycode.parser', 'sphinx.util.docstrings', 'sphinx.ext.autodoc.directive', 'sphinx.ext.mathjax', 'sphinx.ext.mathbase', 'sphinx.ext.githubpages', 'encodings.utf_8_sig', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'lipd.loggers', 'logging.config', 'socketserver', 'lipd.directory', 'lipd.bag', 'bagit', 'lipd.csvs', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'numpy.testing.decorators', 'numpy.testing.nose_tools', 'numpy.testing.nose_tools.decorators', 'numpy.testing.nose_tools.utils', 'numpy.lib.utils', 'numpy.testing.nosetester', 'numpy.testing.nose_tools.nosetester', 'numpy.testing.utils', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy._distributor_init', 'numpy._mklinit', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'mkl_fft', '_cython_0_27_3', 'cython_runtime', 'mkl_fft._pydfti', 'numpy.core.multiarray_tests', 'mkl_fft._numpy_fft', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'lipd.excel', 'xlrd', 'xlrd.info', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.formula', 'xlrd.book', 'xlrd.sheet', 'xlrd.formatting', 'xlrd.compdoc', 'gc', 'mmap', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.chainmap', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.np_datetime', '_cython_0_28_2', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.config', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.printing', 'pandas.core.dtypes', 'pandas.core.dtypes.inference', 'pandas.io.formats.console', 'pandas.io.formats.terminal', 'pandas.core.api', 'pandas.core.algorithms', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.missing', 'pandas.core.common', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util._validators', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.core.missing', 'pandas.core.groupby', 'pandas.core.groupby.groupby', 'pandas.core.index', 'pandas.core.indexes', 'pandas.core.indexes.api', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.resolution', 'pandas.tseries', 'pandas.tseries.offsets', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'dateutil.easter', 'pandas._libs.tslibs.offsets', 'pandas.tseries.frequencies', 'pandas._libs.join', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.indexes.frozen', 'pandas.core.dtypes.concat', 'pandas.core.sorting', 'pandas.core.strings', 'pandas.core.indexes.category', 'pandas.core.indexes.multi', 'pandas.core.indexes.interval', 'pandas._libs.interval', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.numeric', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.range', 'pandas.core.indexes.period', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas._libs.internals', 'pandas.core.sparse', 'pandas.core.sparse.array', 'pandas._libs.sparse', 'pandas.io.formats.format', 'pandas.io.common', 'pandas.core.series', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._misc', 'pandas.plotting._style', 'pandas.plotting._compat', 'pandas.plotting._tools', 'pandas.plotting._core', 'pandas.plotting._converter', 'matplotlib', 'distutils.sysconfig', 'distutils.errors', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.cbook._backports', 'matplotlib.compat', 'matplotlib.compat.subprocess', 'matplotlib.rcsetup', 'matplotlib.testing', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'six.moves.urllib.request', 'matplotlib._version']
2018-08-06 15:49:06,123 [DEBUG] matplotlib: CACHEDIR=/Users/fzhu/.matplotlib
2018-08-06 15:49:06,129 [DEBUG] matplotlib.font_manager: Using fontManager instance from /Users/fzhu/.matplotlib/fontList.json
2018-08-06 15:49:06,298 [DEBUG] matplotlib.backends: backend TkAgg version unknown
