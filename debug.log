2019-11-10 16:29:10,128 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-11-10 16:29:10,493 [DEBUG] shapely.geos: Trying `CDLL(/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1)`
2019-11-10 16:29:10,497 [DEBUG] shapely.geos: Library path: '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1'
2019-11-10 16:29:10,497 [DEBUG] shapely.geos: DLL: <CDLL '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1', handle 55e718fc2da0 at 0x7f9d7f927f28>
2019-11-10 16:29:10,509 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2019-11-10 16:29:10,509 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2019-11-10 16:29:10,509 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7f9dbd21e4f0 at 0x7f9d7f933198>
2019-11-10 16:29:10,913 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-11-10 16:31:30,376 [DEBUG] matplotlib: $HOME=/home/myron
2019-11-10 16:31:30,377 [DEBUG] matplotlib: CONFIGDIR=/home/myron/.config/matplotlib
2019-11-10 16:31:30,377 [DEBUG] matplotlib: matplotlib data path: /home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data
2019-11-10 16:31:30,380 [DEBUG] matplotlib: loaded rc file /home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc
2019-11-10 16:31:30,382 [DEBUG] matplotlib: matplotlib version 3.1.1
2019-11-10 16:31:30,382 [DEBUG] matplotlib: interactive is False
2019-11-10 16:31:30,382 [DEBUG] matplotlib: platform is linux
2019-11-10 16:31:30,382 [DEBUG] matplotlib: loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', '_sysconfigdata_x86_64_conda_cos6_linux_gnu', '_bootlocale', '_locale', 'mpl_toolkits', 'google', 'sphinxcontrib', 'readline', 'atexit', 'rlcompleter', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'zipfile', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'time', 'shutil', 'fnmatch', 'zlib', 'bz2', '_compression', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'struct', '_struct', 'binascii', 'lipd.loggers', 'datetime', 'math', '_datetime', 'logging', 'string', '_string', 'logging.config', 'logging.handlers', 'socket', '_socket', 'selectors', 'select', 'pickle', '_compat_pickle', '_pickle', 'queue', 'socketserver', 'lipd.directory', 'tempfile', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ntpath', 'subprocess', 'signal', '_posixsubprocess', 'lipd.bag', 'bagit', '__future__', 'argparse', 'copy', 'textwrap', 'gettext', 'locale', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'array', '__mp_main__', 'unicodedata', 'pkg_resources', 'pkgutil', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pprint', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'lipd.csvs', 'csv', '_csv', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'numpy.core.umath', 'numpy.core.numerictypes', 'numbers', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._exceptions', 'numpy.core._asarray', 'numpy.core._ufunc_config', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', '_ctypes', 'ctypes', 'ctypes._endian', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'decimal', '_decimal', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random.common', 'numpy.random.bounded_integers', 'numpy.random.mt19937', 'numpy.random.bit_generator', '_cython_0_29_13', 'secrets', 'hmac', 'numpy.random.philox', 'numpy.random.pcg64', 'numpy.random.sfc64', 'numpy.random.generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'gc', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'urllib.error', 'urllib.response', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'ssl', 'ipaddress', '_ssl', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'http', 'http.client', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'six', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.exceptions', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'cryptography.hazmat._der', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.x509.general_name', 'six.moves', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'urllib.request', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'encodings.idna', 'stringprep', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'lipd.excel', 'xlrd', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.book', 'xlrd.compdoc', 'xlrd.formatting', 'xlrd.sheet', 'xlrd.formula', 'mmap', 'xlrd.info', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'typing', 'typing.io', 'typing.re', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.relativedelta', 'dateutil._common', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'glob', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2019-11-10 16:31:30,426 [DEBUG] matplotlib: CACHEDIR=/home/myron/.cache/matplotlib
2019-11-10 16:31:30,429 [DEBUG] matplotlib.font_manager: Using fontManager instance from /home/myron/.cache/matplotlib/fontlist-v310.json
2019-11-10 16:31:30,766 [DEBUG] matplotlib.pyplot: Loaded backend qt5agg version unknown.
2019-11-10 16:31:30,767 [DEBUG] matplotlib.pyplot: Loaded backend Qt5Agg version unknown.
2019-11-10 16:31:31,412 [DEBUG] shapely.geos: Trying `CDLL(/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1)`
2019-11-10 16:31:31,415 [DEBUG] shapely.geos: Library path: '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1'
2019-11-10 16:31:31,415 [DEBUG] shapely.geos: DLL: <CDLL '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1', handle 55f894eff200 at 0x7f7d6fe33cc0>
2019-11-10 16:31:31,426 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2019-11-10 16:31:31,427 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2019-11-10 16:31:31,427 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7f7d916214f0 at 0x7f7d7c97e0f0>
2019-11-10 16:32:51,084 [DEBUG] matplotlib: $HOME=/home/myron
2019-11-10 16:32:51,084 [DEBUG] matplotlib: CONFIGDIR=/home/myron/.config/matplotlib
2019-11-10 16:32:51,084 [DEBUG] matplotlib: matplotlib data path: /home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data
2019-11-10 16:32:51,088 [DEBUG] matplotlib: loaded rc file /home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc
2019-11-10 16:32:51,090 [DEBUG] matplotlib: matplotlib version 3.1.1
2019-11-10 16:32:51,090 [DEBUG] matplotlib: interactive is False
2019-11-10 16:32:51,090 [DEBUG] matplotlib: platform is linux
2019-11-10 16:32:51,090 [DEBUG] matplotlib: loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', '_sysconfigdata_x86_64_conda_cos6_linux_gnu', '_bootlocale', '_locale', 'mpl_toolkits', 'google', 'sphinxcontrib', 'readline', 'atexit', 'rlcompleter', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'zipfile', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'time', 'shutil', 'fnmatch', 'zlib', 'bz2', '_compression', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'struct', '_struct', 'binascii', 'lipd.loggers', 'datetime', 'math', '_datetime', 'logging', 'string', '_string', 'logging.config', 'logging.handlers', 'socket', '_socket', 'selectors', 'select', 'pickle', '_compat_pickle', '_pickle', 'queue', 'socketserver', 'lipd.directory', 'tempfile', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ntpath', 'subprocess', 'signal', '_posixsubprocess', 'lipd.bag', 'bagit', '__future__', 'argparse', 'copy', 'textwrap', 'gettext', 'locale', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'array', '__mp_main__', 'unicodedata', 'pkg_resources', 'pkgutil', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pprint', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'lipd.csvs', 'csv', '_csv', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'numpy.core.umath', 'numpy.core.numerictypes', 'numbers', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._exceptions', 'numpy.core._asarray', 'numpy.core._ufunc_config', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', '_ctypes', 'ctypes', 'ctypes._endian', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'decimal', '_decimal', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random.common', 'numpy.random.bounded_integers', 'numpy.random.mt19937', 'numpy.random.bit_generator', '_cython_0_29_13', 'secrets', 'hmac', 'numpy.random.philox', 'numpy.random.pcg64', 'numpy.random.sfc64', 'numpy.random.generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'gc', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'urllib.error', 'urllib.response', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'ssl', 'ipaddress', '_ssl', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'http', 'http.client', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'six', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.exceptions', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'cryptography.hazmat._der', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.x509.general_name', 'six.moves', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'urllib.request', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'encodings.idna', 'stringprep', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'lipd.excel', 'xlrd', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.book', 'xlrd.compdoc', 'xlrd.formatting', 'xlrd.sheet', 'xlrd.formula', 'mmap', 'xlrd.info', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'typing', 'typing.io', 'typing.re', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.relativedelta', 'dateutil._common', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'glob', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2019-11-10 16:32:51,133 [DEBUG] matplotlib: CACHEDIR=/home/myron/.cache/matplotlib
2019-11-10 16:32:51,135 [DEBUG] matplotlib.font_manager: Using fontManager instance from /home/myron/.cache/matplotlib/fontlist-v310.json
2019-11-10 16:32:51,376 [DEBUG] matplotlib.pyplot: Loaded backend qt5agg version unknown.
2019-11-10 16:32:51,377 [DEBUG] matplotlib.pyplot: Loaded backend Qt5Agg version unknown.
2019-11-10 16:32:52,000 [DEBUG] shapely.geos: Trying `CDLL(/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1)`
2019-11-10 16:32:52,004 [DEBUG] shapely.geos: Library path: '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1'
2019-11-10 16:32:52,004 [DEBUG] shapely.geos: DLL: <CDLL '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1', handle 55c0062566e0 at 0x7fa503bb6b00>
2019-11-10 16:32:52,015 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2019-11-10 16:32:52,016 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2019-11-10 16:32:52,016 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7fa5253ad4f0 at 0x7fa50fc1c1d0>
2019-11-10 16:35:43,809 [DEBUG] matplotlib: $HOME=/home/myron
2019-11-10 16:35:43,810 [DEBUG] matplotlib: CONFIGDIR=/home/myron/.config/matplotlib
2019-11-10 16:35:43,810 [DEBUG] matplotlib: matplotlib data path: /home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data
2019-11-10 16:35:43,813 [DEBUG] matplotlib: loaded rc file /home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc
2019-11-10 16:35:43,816 [DEBUG] matplotlib: matplotlib version 3.1.1
2019-11-10 16:35:43,816 [DEBUG] matplotlib: interactive is False
2019-11-10 16:35:43,817 [DEBUG] matplotlib: platform is linux
2019-11-10 16:35:43,817 [DEBUG] matplotlib: loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', '_sysconfigdata_x86_64_conda_cos6_linux_gnu', '_bootlocale', '_locale', 'mpl_toolkits', 'google', 'sphinxcontrib', 'readline', 'atexit', 'rlcompleter', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'zipfile', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'time', 'shutil', 'fnmatch', 'zlib', 'bz2', '_compression', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'struct', '_struct', 'binascii', 'lipd.loggers', 'datetime', 'math', '_datetime', 'logging', 'string', '_string', 'logging.config', 'logging.handlers', 'socket', '_socket', 'selectors', 'select', 'pickle', '_compat_pickle', '_pickle', 'queue', 'socketserver', 'lipd.directory', 'tempfile', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ntpath', 'subprocess', 'signal', '_posixsubprocess', 'lipd.bag', 'bagit', '__future__', 'argparse', 'copy', 'textwrap', 'gettext', 'locale', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'array', '__mp_main__', 'unicodedata', 'pkg_resources', 'pkgutil', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pprint', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'lipd.csvs', 'csv', '_csv', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'numpy.core.umath', 'numpy.core.numerictypes', 'numbers', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._exceptions', 'numpy.core._asarray', 'numpy.core._ufunc_config', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', '_ctypes', 'ctypes', 'ctypes._endian', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'decimal', '_decimal', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random.common', 'numpy.random.bounded_integers', 'numpy.random.mt19937', 'numpy.random.bit_generator', '_cython_0_29_13', 'secrets', 'hmac', 'numpy.random.philox', 'numpy.random.pcg64', 'numpy.random.sfc64', 'numpy.random.generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'gc', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'urllib.error', 'urllib.response', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'ssl', 'ipaddress', '_ssl', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'http', 'http.client', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'six', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.exceptions', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'cryptography.hazmat._der', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.x509.general_name', 'six.moves', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'urllib.request', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'encodings.idna', 'stringprep', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'lipd.excel', 'xlrd', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.book', 'xlrd.compdoc', 'xlrd.formatting', 'xlrd.sheet', 'xlrd.formula', 'mmap', 'xlrd.info', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'typing', 'typing.io', 'typing.re', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.relativedelta', 'dateutil._common', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'glob', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2019-11-10 16:35:43,860 [DEBUG] matplotlib: CACHEDIR=/home/myron/.cache/matplotlib
2019-11-10 16:35:43,862 [DEBUG] matplotlib.font_manager: Using fontManager instance from /home/myron/.cache/matplotlib/fontlist-v310.json
2019-11-10 16:35:44,105 [DEBUG] matplotlib.pyplot: Loaded backend qt5agg version unknown.
2019-11-10 16:35:44,106 [DEBUG] matplotlib.pyplot: Loaded backend Qt5Agg version unknown.
2019-11-10 16:35:44,721 [DEBUG] shapely.geos: Trying `CDLL(/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1)`
2019-11-10 16:35:44,724 [DEBUG] shapely.geos: Library path: '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1'
2019-11-10 16:35:44,725 [DEBUG] shapely.geos: DLL: <CDLL '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1', handle 55d6935289a0 at 0x7f10ff81ca90>
2019-11-10 16:35:44,735 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2019-11-10 16:35:44,736 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2019-11-10 16:35:44,736 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7f11210084f0 at 0x7f110c352e48>
2019-11-10 16:37:38,773 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-11-10 16:37:39,138 [DEBUG] shapely.geos: Trying `CDLL(/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1)`
2019-11-10 16:37:39,141 [DEBUG] shapely.geos: Library path: '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1'
2019-11-10 16:37:39,141 [DEBUG] shapely.geos: DLL: <CDLL '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1', handle 55ca6b209aa0 at 0x7f8c298a2518>
2019-11-10 16:37:39,151 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2019-11-10 16:37:39,152 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2019-11-10 16:37:39,152 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7f8c6711e4f0 at 0x7f8c298a2748>
2019-11-10 16:37:39,848 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-11-10 16:45:30,650 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-11-10 16:45:30,970 [DEBUG] shapely.geos: Trying `CDLL(/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1)`
2019-11-10 16:45:30,973 [DEBUG] shapely.geos: Library path: '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1'
2019-11-10 16:45:30,973 [DEBUG] shapely.geos: DLL: <CDLL '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1', handle 55aec5e507b0 at 0x7f4324299828>
2019-11-10 16:45:30,983 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2019-11-10 16:45:30,984 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2019-11-10 16:45:30,984 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7f4361b164f0 at 0x7f4324299f60>
2019-11-10 16:45:31,317 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-11-10 16:48:05,415 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.5.
2019-11-10 16:48:05,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 3.335
2019-11-10 16:48:05,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2019-11-10 16:48:05,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 2.335
2019-11-10 16:48:05,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2019-11-10 16:48:05,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 16:48:05,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
2019-11-10 16:48:05,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 16:48:05,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 16:48:05,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 5.335
2019-11-10 16:48:05,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 16:48:05,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 16:48:05,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 16:48:05,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
2019-11-10 16:48:05,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 16:48:05,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 16:48:05,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 16:48:05,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 16:48:05,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 16:48:05,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 16:48:05,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 16:48:05,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 16:48:05,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 16:48:05,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 16:48:05,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 16:48:05,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 4.335
2019-11-10 16:48:05,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 16:48:05,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 16:48:05,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,454 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.5 to DejaVu Sans ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 2.050000.
2019-11-10 16:48:05,472 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 16:48:05,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 3.335
2019-11-10 16:48:05,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2019-11-10 16:48:05,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 2.335
2019-11-10 16:48:05,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2019-11-10 16:48:05,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 16:48:05,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
2019-11-10 16:48:05,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 16:48:05,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 16:48:05,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 5.335
2019-11-10 16:48:05,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 16:48:05,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 16:48:05,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 16:48:05,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
2019-11-10 16:48:05,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 16:48:05,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 16:48:05,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 16:48:05,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 16:48:05,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 16:48:05,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 16:48:05,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 16:48:05,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 16:48:05,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 16:48:05,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 16:48:05,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 16:48:05,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 16:48:05,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 4.335
2019-11-10 16:48:05,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 16:48:05,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 16:48:05,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 16:48:05,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 16:48:05,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 16:48:05,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 16:48:05,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 16:48:05,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 16:48:05,509 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 2.050000.
2019-11-10 16:48:19,188 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-11-10 16:48:19,278 [DEBUG] shapely.geos: Trying `CDLL(/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1)`
2019-11-10 16:48:19,283 [DEBUG] shapely.geos: Library path: '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1'
2019-11-10 16:48:19,283 [DEBUG] shapely.geos: DLL: <CDLL '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1', handle 55e977ae6420 at 0x7f6466eaac18>
2019-11-10 16:48:19,296 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2019-11-10 16:48:19,296 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2019-11-10 16:48:19,297 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7f64a4ab24f0 at 0x7f6466eaaf98>
2019-11-10 16:48:20,041 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-11-10 17:55:20,575 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.5.
2019-11-10 17:55:20,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 3.335
2019-11-10 17:55:20,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2019-11-10 17:55:20,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 2.335
2019-11-10 17:55:20,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2019-11-10 17:55:20,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 17:55:20,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
2019-11-10 17:55:20,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 17:55:20,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 17:55:20,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 5.335
2019-11-10 17:55:20,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 17:55:20,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 17:55:20,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 17:55:20,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
2019-11-10 17:55:20,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 17:55:20,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 17:55:20,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 17:55:20,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 17:55:20,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 17:55:20,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 17:55:20,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 17:55:20,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 17:55:20,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 17:55:20,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 17:55:20,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 17:55:20,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 4.335
2019-11-10 17:55:20,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 17:55:20,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 17:55:20,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,605 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.5 to DejaVu Sans ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 2.050000.
2019-11-10 17:55:20,616 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 17:55:20,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 3.335
2019-11-10 17:55:20,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2019-11-10 17:55:20,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 2.335
2019-11-10 17:55:20,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2019-11-10 17:55:20,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 17:55:20,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
2019-11-10 17:55:20,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 17:55:20,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 17:55:20,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 5.335
2019-11-10 17:55:20,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 17:55:20,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 17:55:20,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 17:55:20,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
2019-11-10 17:55:20,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 17:55:20,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 17:55:20,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 17:55:20,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 17:55:20,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 17:55:20,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 17:55:20,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 17:55:20,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 17:55:20,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 17:55:20,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 17:55:20,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 17:55:20,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 17:55:20,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 4.335
2019-11-10 17:55:20,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 17:55:20,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 17:55:20,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 17:55:20,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 17:55:20,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 17:55:20,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 17:55:20,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 17:55:20,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 17:55:20,643 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 2.050000.
2019-11-10 17:55:57,559 [DEBUG] root: ------------> onesided onesided
2019-11-10 17:55:57,559 [DEBUG] root: NFFT set to data length
2019-11-10 17:55:57,560 [DEBUG] root: Computing PSD.
2019-11-10 17:56:53,328 [DEBUG] root: ------------> onesided onesided
2019-11-10 17:56:53,328 [DEBUG] root: NFFT set to data length
2019-11-10 17:56:53,330 [DEBUG] root: Computing PSD.
2019-11-10 18:00:37,445 [DEBUG] root: ------------> onesided onesided
2019-11-10 18:00:37,445 [DEBUG] root: NFFT set to data length
2019-11-10 18:00:37,446 [DEBUG] root: Computing PSD.
2019-11-10 18:02:42,772 [DEBUG] root: ------------> onesided onesided
2019-11-10 18:02:42,773 [DEBUG] root: NFFT set to data length
2019-11-10 18:02:42,777 [DEBUG] root: Computing PSD.
2019-11-10 18:03:00,843 [DEBUG] root: ------------> onesided onesided
2019-11-10 18:03:00,844 [DEBUG] root: NFFT set to data length
2019-11-10 18:03:00,844 [DEBUG] root: Computing PSD.
2019-11-10 18:04:35,312 [DEBUG] root: ------------> onesided onesided
2019-11-10 18:04:35,313 [DEBUG] root: NFFT set to data length
2019-11-10 18:04:35,314 [DEBUG] root: Computing PSD.
2019-11-10 18:04:41,058 [DEBUG] root: ------------> onesided onesided
2019-11-10 18:04:41,058 [DEBUG] root: NFFT set to data length
2019-11-10 18:04:41,060 [DEBUG] root: Computing PSD.
2019-11-10 18:04:47,080 [DEBUG] root: ------------> onesided onesided
2019-11-10 18:04:47,080 [DEBUG] root: NFFT set to data length
2019-11-10 18:04:47,081 [DEBUG] root: Computing PSD.
2019-11-10 18:04:56,775 [DEBUG] root: ------------> onesided onesided
2019-11-10 18:04:56,775 [DEBUG] root: NFFT set to data length
2019-11-10 18:04:56,776 [DEBUG] root: Computing PSD.
2019-11-10 18:04:57,207 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:57,209 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:57,215 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:57,215 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:57,217 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:57,217 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:57,279 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:57,279 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:57,281 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:57,281 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:57,282 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:57,283 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:57,296 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:57,296 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:57,302 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:57,302 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:57,304 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:57,304 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:57,352 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 1.05
2019-11-10 18:04:57,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 1.335
2019-11-10 18:04:57,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 0.05
2019-11-10 18:04:57,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-11-10 18:04:57,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,375 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,376 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,377 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,378 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,379 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,381 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,388 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to STIXGeneral ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf') with score of 0.050000.
2019-11-10 18:04:57,389 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 0.05
2019-11-10 18:04:57,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 0.33499999999999996
2019-11-10 18:04:57,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 1.05
2019-11-10 18:04:57,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 1.335
2019-11-10 18:04:57,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 10.24
2019-11-10 18:04:57,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 11.335
2019-11-10 18:04:57,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 11.335
2019-11-10 18:04:57,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 11.24
2019-11-10 18:04:57,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 11.145
2019-11-10 18:04:57,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 10.34
2019-11-10 18:04:57,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 10.535
2019-11-10 18:04:57,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2019-11-10 18:04:57,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 11.05
2019-11-10 18:04:57,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2019-11-10 18:04:57,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 11.24
2019-11-10 18:04:57,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2019-11-10 18:04:57,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2019-11-10 18:04:57,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 11.05
2019-11-10 18:04:57,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 11.145
2019-11-10 18:04:57,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 11.535
2019-11-10 18:04:57,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 11.0
2019-11-10 18:04:57,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 10.145
2019-11-10 18:04:57,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 11.05
2019-11-10 18:04:57,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,420 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=18.0 to STIXGeneral ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf') with score of 0.050000.
2019-11-10 18:04:57,421 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=18.0.
2019-11-10 18:04:57,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:57,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.335
2019-11-10 18:04:57,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.0
2019-11-10 18:04:57,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:57,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 1.335
2019-11-10 18:04:57,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:57,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.335
2019-11-10 18:04:57,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.335
2019-11-10 18:04:57,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 1.0
2019-11-10 18:04:57,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.0
2019-11-10 18:04:57,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 0.33499999999999996
2019-11-10 18:04:57,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:57,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:57,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
2019-11-10 18:04:57,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.335
2019-11-10 18:04:57,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:57,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:57,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:57,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:57,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.0
2019-11-10 18:04:57,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 0.0
2019-11-10 18:04:57,423 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=18.0 to STIXGeneral ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf') with score of 0.000000.
2019-11-10 18:04:57,424 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 1.05
2019-11-10 18:04:57,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 0.05
2019-11-10 18:04:57,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 1.335
2019-11-10 18:04:57,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-11-10 18:04:57,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,432 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,433 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,434 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,435 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,436 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,437 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,438 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,439 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,440 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,441 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,442 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,443 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,444 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,445 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,446 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,447 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,448 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,449 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,450 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,451 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,452 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,453 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to STIXNonUnicode ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf') with score of 0.050000.
2019-11-10 18:04:57,453 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 0.05
2019-11-10 18:04:57,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 1.05
2019-11-10 18:04:57,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 0.33499999999999996
2019-11-10 18:04:57,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 1.335
2019-11-10 18:04:57,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 10.24
2019-11-10 18:04:57,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 11.335
2019-11-10 18:04:57,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 11.335
2019-11-10 18:04:57,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 11.24
2019-11-10 18:04:57,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 11.145
2019-11-10 18:04:57,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 10.34
2019-11-10 18:04:57,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 10.535
2019-11-10 18:04:57,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2019-11-10 18:04:57,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,470 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,471 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 11.05
2019-11-10 18:04:57,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,472 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2019-11-10 18:04:57,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 11.24
2019-11-10 18:04:57,473 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2019-11-10 18:04:57,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,474 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,475 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,476 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2019-11-10 18:04:57,477 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 11.05
2019-11-10 18:04:57,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 11.145
2019-11-10 18:04:57,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 11.535
2019-11-10 18:04:57,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,480 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 11.0
2019-11-10 18:04:57,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 10.145
2019-11-10 18:04:57,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 11.05
2019-11-10 18:04:57,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,486 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=18.0 to STIXNonUnicode ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf') with score of 0.050000.
2019-11-10 18:04:57,486 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=18.0.
2019-11-10 18:04:57,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:57,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.335
2019-11-10 18:04:57,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.0
2019-11-10 18:04:57,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:57,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
2019-11-10 18:04:57,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:57,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.335
2019-11-10 18:04:57,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.335
2019-11-10 18:04:57,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.0
2019-11-10 18:04:57,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.0
2019-11-10 18:04:57,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.335
2019-11-10 18:04:57,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:57,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:57,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 1.335
2019-11-10 18:04:57,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 0.33499999999999996
2019-11-10 18:04:57,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:57,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:57,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:57,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:57,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 1.0
2019-11-10 18:04:57,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:57,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:57,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.335
2019-11-10 18:04:57,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2019-11-10 18:04:57,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 0.0
2019-11-10 18:04:57,490 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=18.0 to STIXNonUnicode ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf') with score of 0.000000.
2019-11-10 18:04:57,491 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-11-10 18:04:57,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 0.05
2019-11-10 18:04:57,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,516 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,517 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,518 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,519 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,520 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,521 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,522 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,523 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,524 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to STIXSizeOneSym ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf') with score of 0.050000.
2019-11-10 18:04:57,524 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,524 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,525 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,526 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,527 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,528 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 0.05
2019-11-10 18:04:57,529 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,530 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-11-10 18:04:57,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,531 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,532 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,533 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,534 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,535 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,536 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,537 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,538 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,539 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,540 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,541 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,542 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,543 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,544 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,545 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,546 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,547 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,548 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,561 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,561 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,561 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,561 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to STIXSizeTwoSym ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf') with score of 0.050000.
2019-11-10 18:04:57,561 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,562 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,562 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 0.05
2019-11-10 18:04:57,562 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,562 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-11-10 18:04:57,562 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,568 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,568 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,568 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,568 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,568 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,574 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,574 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,574 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,574 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,574 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,574 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,575 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,575 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,575 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,575 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,575 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,576 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,576 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,576 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,576 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,576 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,576 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,577 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,578 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,579 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,580 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,581 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,582 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,583 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,584 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,585 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,586 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,587 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,588 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,589 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,590 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,591 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,599 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to STIXSizeThreeSym ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf') with score of 0.050000.
2019-11-10 18:04:57,600 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 0.05
2019-11-10 18:04:57,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 0.33499999999999996
2019-11-10 18:04:57,607 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,607 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,607 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,607 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,608 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,609 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,610 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,611 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,612 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,613 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,614 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,641 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to STIXSizeFourSym ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf') with score of 0.050000.
2019-11-10 18:04:57,642 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 0.05
2019-11-10 18:04:57,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,644 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,648 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,667 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,668 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,669 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,670 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,671 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,672 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,673 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,674 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,675 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,676 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,677 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,678 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,679 [DEBUG] matplotlib.font_manager: findfont: Matching :family=STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to STIXSizeFiveSym ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf') with score of 0.050000.
2019-11-10 18:04:57,679 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 0.05
2019-11-10 18:04:57,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,685 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,699 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,700 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,701 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,702 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,703 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,704 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,705 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,706 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,707 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,708 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,709 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,710 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,710 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to cmsy10 ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf') with score of 0.050000.
2019-11-10 18:04:57,711 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,711 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,712 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,713 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,714 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,715 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,716 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 0.05
2019-11-10 18:04:57,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,717 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,718 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,719 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,720 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,721 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,722 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,723 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,724 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,725 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,726 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,727 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,728 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,729 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,730 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,731 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,732 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,733 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,746 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to cmr10 ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf') with score of 0.050000.
2019-11-10 18:04:57,747 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,752 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 0.05
2019-11-10 18:04:57,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,753 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,756 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,756 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,756 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,757 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,757 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,757 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,758 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,758 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,759 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,759 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,760 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,761 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,762 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,763 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,764 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,765 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,766 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,767 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,768 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,769 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,770 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,771 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,772 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,773 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,774 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,775 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,776 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,777 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,778 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,779 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,780 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,781 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,782 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,783 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,784 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,785 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,786 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,786 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to cmtt10 ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf') with score of 0.050000.
2019-11-10 18:04:57,787 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,787 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,788 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 0.05
2019-11-10 18:04:57,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,789 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,790 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,791 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,792 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,793 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,794 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,795 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,796 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,797 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,798 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,799 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,800 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,801 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,802 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,803 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,804 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,805 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,806 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,807 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,808 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,809 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,810 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,811 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,812 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,813 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,814 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,815 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,816 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,817 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,818 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,819 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,820 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,820 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to cmmi10 ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf') with score of 0.050000.
2019-11-10 18:04:57,821 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,821 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,821 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,821 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,822 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,823 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 0.05
2019-11-10 18:04:57,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,824 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,825 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,826 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,827 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,828 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,829 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,855 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to cmb10 ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf') with score of 0.050000.
2019-11-10 18:04:57,856 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,857 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 0.05
2019-11-10 18:04:57,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,861 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,862 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,864 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,866 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,872 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,873 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,874 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,875 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,876 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,877 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,878 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,879 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,880 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,881 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,882 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,883 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,884 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,885 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,886 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,887 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,888 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,889 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,890 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,891 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,892 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,893 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,893 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to cmss10 ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf') with score of 0.050000.
2019-11-10 18:04:57,893 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,894 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,895 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,896 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,897 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,898 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,899 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,899 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,899 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,899 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,900 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 0.05
2019-11-10 18:04:57,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,901 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,902 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,903 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,904 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,905 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,906 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,907 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,908 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,909 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,910 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,911 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,912 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,913 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,914 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,915 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,916 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,917 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,918 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,919 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,920 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,921 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,922 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,923 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,924 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,925 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,926 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,927 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,928 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,929 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,930 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,931 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,932 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,932 [DEBUG] matplotlib.font_manager: findfont: Matching :family=cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to cmex10 ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf') with score of 0.050000.
2019-11-10 18:04:57,933 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,933 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2019-11-10 18:04:57,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2019-11-10 18:04:57,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,934 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2019-11-10 18:04:57,935 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2019-11-10 18:04:57,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,936 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,937 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:57,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,938 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,939 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,940 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,941 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,942 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,943 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,944 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:57,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,945 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,946 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,947 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,948 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:57,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,949 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,950 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,950 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,950 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,950 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:57,951 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,952 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,953 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,954 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:57,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:57,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,955 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,956 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,957 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,958 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,958 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,958 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,958 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,958 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,958 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:57,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,959 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,960 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,960 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,960 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,960 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:57,960 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,960 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,961 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:57,961 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,961 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,961 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,961 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,961 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,962 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,962 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,962 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,963 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:57,963 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,963 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,963 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,963 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,964 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,964 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,964 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,964 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,964 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,965 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,965 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,965 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:57,965 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,965 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,965 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,966 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,966 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,966 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,966 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,967 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:57,967 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,967 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,967 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,968 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:57,968 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,968 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:57,968 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,968 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:57,968 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,968 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,968 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:57,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:57,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:57,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:57,970 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2019-11-10 18:04:57,971 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:57,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 0.43499999999999994
2019-11-10 18:04:57,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 0.15000000000000002
2019-11-10 18:04:57,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 1.335
2019-11-10 18:04:57,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 1.05
2019-11-10 18:04:57,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 10.24
2019-11-10 18:04:57,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 11.335
2019-11-10 18:04:57,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 11.335
2019-11-10 18:04:57,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 11.24
2019-11-10 18:04:57,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,983 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,983 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,983 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,983 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,983 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,984 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,984 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 11.145
2019-11-10 18:04:57,984 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,984 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,984 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,984 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 10.34
2019-11-10 18:04:57,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,985 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,986 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,986 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,986 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,986 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,986 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,986 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,987 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,987 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,987 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,987 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,987 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,987 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,988 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,988 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,988 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,988 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,988 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,989 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 10.535
2019-11-10 18:04:57,989 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,989 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,989 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,989 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,989 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,990 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2019-11-10 18:04:57,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,991 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,992 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,992 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,992 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,992 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,992 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,992 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,993 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,993 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,993 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 11.05
2019-11-10 18:04:57,993 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,993 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,993 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2019-11-10 18:04:57,994 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,994 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,994 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,994 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 11.24
2019-11-10 18:04:57,994 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2019-11-10 18:04:57,994 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,995 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,995 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,995 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,995 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,995 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,996 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,996 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,996 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:57,996 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,996 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,997 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 11.05
2019-11-10 18:04:57,997 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,997 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,997 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 11.335
2019-11-10 18:04:57,997 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:57,997 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,998 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,998 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,998 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:57,998 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,998 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,999 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:57,999 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:57,999 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2019-11-10 18:04:57,999 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,000 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:58,000 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,000 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:58,000 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 11.05
2019-11-10 18:04:58,001 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:58,001 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:58,001 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2019-11-10 18:04:58,001 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,001 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,001 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 11.145
2019-11-10 18:04:58,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:58,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:58,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,002 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,003 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:58,003 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:58,003 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 11.535
2019-11-10 18:04:58,003 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,003 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,003 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,004 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 11.335
2019-11-10 18:04:58,004 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:58,004 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,004 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,004 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:58,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 11.0
2019-11-10 18:04:58,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,005 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:58,006 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,006 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,006 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:58,006 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,006 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,006 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 10.335
2019-11-10 18:04:58,006 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,007 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:58,007 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,007 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 10.145
2019-11-10 18:04:58,007 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,007 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2019-11-10 18:04:58,007 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,008 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 11.05
2019-11-10 18:04:58,008 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,008 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:58,008 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,008 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,008 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 11.05
2019-11-10 18:04:58,009 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:58,009 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 10.434999999999999
2019-11-10 18:04:58,009 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,009 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,009 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,009 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 11.335
2019-11-10 18:04:58,009 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,010 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,010 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2019-11-10 18:04:58,010 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf') with score of 0.150000.
2019-11-10 18:04:58,011 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=18.0.
2019-11-10 18:04:58,011 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:58,011 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.335
2019-11-10 18:04:58,011 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.0
2019-11-10 18:04:58,012 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:58,012 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
2019-11-10 18:04:58,012 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:58,012 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.335
2019-11-10 18:04:58,013 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.335
2019-11-10 18:04:58,013 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.0
2019-11-10 18:04:58,013 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.0
2019-11-10 18:04:58,013 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.335
2019-11-10 18:04:58,013 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:58,014 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.0
2019-11-10 18:04:58,014 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
2019-11-10 18:04:58,014 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.335
2019-11-10 18:04:58,015 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2019-11-10 18:04:58,015 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.0
2019-11-10 18:04:58,015 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=18.0 to DejaVu Sans ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf') with score of 0.000000.
2019-11-10 18:04:58,016 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:58,016 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,017 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,018 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2019-11-10 18:04:58,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 1.05
2019-11-10 18:04:58,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,019 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 0.05
2019-11-10 18:04:58,020 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2019-11-10 18:04:58,021 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,021 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,021 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,021 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,021 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:58,021 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,021 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,022 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:58,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:58,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,023 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:58,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,024 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,025 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:58,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,026 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,027 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,027 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,027 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,027 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,027 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:58,028 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,028 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,028 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,028 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,028 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,029 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,029 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,029 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,030 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,030 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,030 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,030 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,030 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,031 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,031 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,031 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,032 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,032 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,032 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,032 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:58,033 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,033 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,033 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,034 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,034 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,034 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,034 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,035 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,035 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,035 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,035 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,035 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,036 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:58,036 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,036 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,036 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,037 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,037 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,037 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,037 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,038 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:58,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:58,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:58,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:58,039 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,040 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,040 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,040 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,040 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,040 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,040 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,041 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,042 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:58,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:58,043 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,044 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,044 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,044 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,044 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,044 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:58,044 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,045 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,045 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,045 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,045 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,045 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,046 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,046 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,046 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:58,046 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,047 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,047 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,047 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,047 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,047 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,048 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,048 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,048 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,048 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,049 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,049 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:58,049 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,050 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,051 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,051 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,051 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,051 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,051 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:58,051 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:58,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,052 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,053 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,054 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,054 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,054 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,054 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,054 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans Mono ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf') with score of 0.050000.
2019-11-10 18:04:58,055 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-10 18:04:58,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,055 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,056 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,057 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,058 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 0.05
2019-11-10 18:04:58,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,059 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-10 18:04:58,060 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,061 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:58,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,062 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:58,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,063 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:58,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,064 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,065 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,066 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:58,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,067 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,068 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-10 18:04:58,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,069 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,070 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-10 18:04:58,071 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,072 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-10 18:04:58,073 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,074 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,075 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:58,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:58,076 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-10 18:04:58,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-10 18:04:58,077 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,078 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,079 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,080 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,081 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,082 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-10 18:04:58,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,083 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:58,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-10 18:04:58,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-10 18:04:58,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-10 18:04:58,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-10 18:04:58,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-10 18:04:58,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-10 18:04:58,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-10 18:04:58,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-10 18:04:58,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-10 18:04:58,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-10 18:04:58,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-10 18:04:58,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-10 18:04:58,092 [DEBUG] matplotlib.font_manager: findfont: Matching :family=DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans Display ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf') with score of 0.050000.
2019-11-10 18:04:58,228 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:58,228 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:58,230 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:58,230 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:58,232 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:58,233 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:58,254 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:58,255 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,260 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:58,261 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,262 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:58,262 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:58,326 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:58,326 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,328 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:58,328 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,330 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:58,330 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:58,343 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:58,343 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:04:58,350 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:58,351 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:04:58,352 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:58,353 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:58,446 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:58,447 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:04:58,449 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:58,449 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:04:58,453 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:58,453 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:58,483 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:58,484 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,489 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:58,489 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,491 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:58,491 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:58,557 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:58,558 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,559 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:58,560 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,561 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:58,561 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:58,577 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:58,577 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:58,586 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:58,586 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:58,588 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:58,588 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:58,705 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:58,706 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:58,708 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:58,708 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:58,710 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:58,710 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:58,744 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:58,744 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,749 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:58,749 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,751 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:58,751 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:58,802 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:58,803 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,804 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:58,804 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,806 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:58,806 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:58,817 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:58,817 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:04:58,822 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:58,823 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:04:58,824 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:58,824 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:04:58,873 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:58,874 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:04:58,876 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:58,876 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:04:58,877 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:58,877 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:04:58,995 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:58,995 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,997 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:58,997 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:58,998 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:58,999 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:59,020 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:59,021 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,022 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:59,023 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,024 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:59,024 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:59,037 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:59,037 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:59,039 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:59,040 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:59,041 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:59,042 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:59,061 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:59,061 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:59,063 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:59,064 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:59,065 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:04:59,066 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:59,086 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:59,086 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,088 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:59,088 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,090 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:59,090 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:59,111 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:59,111 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,113 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:59,113 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,115 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:04:59,115 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:59,128 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:59,128 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:04:59,130 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:59,131 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:04:59,132 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:59,133 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:59,160 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:59,160 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:04:59,162 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:59,162 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:04:59,164 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:04:59,164 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:59,192 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:59,193 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,195 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:59,195 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,196 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:59,197 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:59,217 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:59,218 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,219 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:59,220 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,221 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:04:59,221 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:59,235 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:59,235 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:59,237 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:59,237 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:59,239 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:59,239 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:59,275 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:59,276 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:59,278 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:59,278 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:04:59,280 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:04:59,280 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:04:59,313 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:59,313 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,315 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:59,315 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,317 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:59,317 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:59,333 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:59,333 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,335 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:59,335 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:04:59,337 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:04:59,337 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:04:59,347 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:59,348 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:04:59,350 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:59,350 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:04:59,352 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:59,352 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:04:59,367 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:59,367 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:04:59,369 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:59,369 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:04:59,371 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:04:59,371 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:05:01,521 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,522 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,523 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,524 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,525 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,525 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,536 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,536 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,538 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,538 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,540 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,540 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,556 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,557 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,559 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,559 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,560 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,561 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:01,569 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,569 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,571 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,571 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,573 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,573 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:01,591 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,592 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,593 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,594 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,595 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,596 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,603 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,604 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,605 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,606 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,607 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,607 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,623 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,624 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:01,626 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,626 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:01,627 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,628 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:01,637 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,638 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:01,640 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,640 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:01,642 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,642 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:01,665 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,665 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,667 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,667 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,668 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,669 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,677 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,677 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,679 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,679 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,680 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,681 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,696 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:01,696 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,699 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:01,699 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,700 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:01,701 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:01,712 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:01,712 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,715 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:01,715 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,716 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:01,717 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:01,744 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:01,745 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,746 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:01,747 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,748 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:01,748 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,756 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:01,756 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,757 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:01,758 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,759 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:01,759 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,777 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:01,778 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:01,780 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:01,780 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:01,781 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:01,782 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:05:01,789 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:01,789 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:01,791 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:01,791 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:01,793 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:01,793 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:05:01,823 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,823 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,825 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,825 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,826 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,827 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,834 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,835 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,836 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,836 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,838 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,838 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,853 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,853 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,855 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,856 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,857 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,857 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:01,865 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,866 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,868 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,868 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,869 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:01,870 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:01,888 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,888 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,889 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,890 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,892 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,892 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,900 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,900 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,902 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,902 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,904 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:01,904 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,920 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,920 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:01,922 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,923 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:01,924 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,924 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:01,934 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,934 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:01,936 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,937 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:01,938 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:01,939 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:01,960 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,960 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,962 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,962 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,964 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,964 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,972 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,972 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,974 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,974 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:01,976 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:01,976 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:01,991 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:01,992 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,994 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:01,994 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:01,996 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:01,996 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,007 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,008 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,010 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,010 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,012 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,012 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,038 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,039 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,040 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,041 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,042 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,043 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,049 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,050 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,051 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,052 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,053 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,053 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,066 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,066 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,068 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,068 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,069 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,070 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:05:02,077 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,077 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,079 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,079 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,080 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,081 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:05:02,108 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,108 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,110 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,110 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,112 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,112 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,120 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,120 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,122 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,122 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,124 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,124 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,139 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,139 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,141 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,141 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,143 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,143 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,151 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,151 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,153 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,154 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,155 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,156 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,173 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,174 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,175 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,176 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,177 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,178 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,186 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,186 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,188 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,188 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,190 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,190 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,205 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,205 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:02,207 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,208 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:02,209 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,210 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,219 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,219 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:02,221 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,222 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:02,223 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,224 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,245 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,246 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,247 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,248 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,249 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,249 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,257 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,258 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,259 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,259 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,261 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,261 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,276 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,277 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,279 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,279 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,281 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,281 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,292 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,293 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,295 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,295 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,297 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,297 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,324 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,324 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,326 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,327 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,328 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,328 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,335 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,336 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,337 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,338 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,339 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,339 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,351 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,352 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,353 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,354 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,355 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,356 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:05:02,362 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,363 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,365 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,365 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,367 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,367 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:05:02,484 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,485 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,487 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,487 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,488 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,489 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,511 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,511 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,513 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,513 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,515 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,515 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,528 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,528 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,530 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,531 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,532 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,533 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,572 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,572 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,574 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,575 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,576 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:05:02,576 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,597 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,598 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,599 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,600 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,601 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,601 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,622 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,623 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,636 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,637 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,638 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:05:02,639 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,652 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,652 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:02,654 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,655 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:02,656 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,656 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,696 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,697 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:02,699 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,699 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:05:02,701 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:05:02,701 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,730 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,731 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,732 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,732 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,734 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,734 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,755 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,755 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,757 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,757 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,759 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:05:02,759 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,772 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,772 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,774 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,775 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,776 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,777 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,828 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,828 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,830 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,831 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:05:02,832 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:05:02,833 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:05:02,866 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,866 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,868 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,868 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,869 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,870 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,886 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,886 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,888 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,888 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:05:02,889 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:05:02,890 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:05:02,901 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,901 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,903 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,903 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,905 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,905 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:05:02,920 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,920 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,922 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,922 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:05:02,924 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:05:02,924 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:13,931 [DEBUG] root: ------------> onesided onesided
2019-11-10 18:06:13,932 [DEBUG] root: NFFT set to data length
2019-11-10 18:06:13,932 [DEBUG] root: Computing PSD.
2019-11-10 18:06:14,402 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,403 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,408 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,409 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,410 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,411 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:14,473 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,473 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,475 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,475 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,476 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,477 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:14,490 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:14,490 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:14,496 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:14,496 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:14,497 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:14,498 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:14,578 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:14,579 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:14,581 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:14,581 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:14,582 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:14,583 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:14,604 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,605 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,610 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,611 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,612 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,613 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:14,675 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,675 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,677 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,677 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,678 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:14,679 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:14,691 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:14,692 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:14,700 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:14,700 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:14,702 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:14,702 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:14,808 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:14,809 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:14,811 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:14,812 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:14,813 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:14,813 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:14,845 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:14,846 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,851 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:14,851 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,853 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:14,853 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:14,915 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:14,916 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,917 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:14,917 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:14,920 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:14,920 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:14,935 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:14,935 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:14,945 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:14,945 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:14,947 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:14,947 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:15,078 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:15,078 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:15,081 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:15,081 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:15,083 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:15,083 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:15,118 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,118 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,123 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,123 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,125 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,125 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:15,176 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,176 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,177 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,178 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,179 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,179 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:15,190 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,190 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:15,195 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,196 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:15,198 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,198 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:15,252 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,253 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:15,255 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,255 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:15,257 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,257 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:15,389 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,389 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,391 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,392 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,393 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,394 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:15,417 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,417 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,419 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,419 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,421 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,421 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:15,435 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:15,436 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:15,438 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:15,439 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:15,440 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:15,440 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:15,462 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:15,462 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:15,464 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:15,464 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:15,466 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:15,466 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:15,487 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,487 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,489 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,489 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,490 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,491 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:15,512 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,512 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,514 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,515 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,516 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:15,516 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:15,529 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:15,530 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:15,532 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:15,532 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:15,534 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:15,534 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:15,561 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:15,561 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:15,563 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:15,563 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:15,565 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:15,565 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:15,594 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:15,594 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,596 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:15,596 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,598 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:15,598 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:15,621 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:15,621 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,623 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:15,624 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,625 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:15,626 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:15,643 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:15,643 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:15,645 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:15,646 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:15,648 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:15,648 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:15,689 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:15,689 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:15,691 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:15,692 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:15,693 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:15,693 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:15,731 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,731 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,733 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,733 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,735 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,735 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:15,753 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,753 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,755 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,755 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:15,757 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:15,757 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:15,769 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,770 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:15,772 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,772 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:15,773 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,774 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:15,791 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,791 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:15,793 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,794 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:15,795 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:15,796 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:17,979 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:17,979 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:17,980 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:17,981 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:17,982 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:17,983 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:17,990 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:17,991 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:17,992 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:17,993 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:17,995 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:17,995 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,010 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,011 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,012 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,013 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,014 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,014 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,023 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,023 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,025 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,025 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,026 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,027 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,045 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,045 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,047 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,047 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,049 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,049 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,057 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,057 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,059 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,060 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,061 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,061 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,076 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,077 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,079 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,079 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,081 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,081 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,091 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,091 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,093 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,093 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,095 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,095 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,120 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,121 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,123 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,123 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,125 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,125 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,134 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,134 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,136 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,136 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,138 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,139 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,155 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,155 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,158 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,158 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,160 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,160 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,173 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,173 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,175 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,175 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,177 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,178 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,209 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,210 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,212 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,212 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,213 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,214 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,226 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,227 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,228 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,229 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,230 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,231 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,244 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,244 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,246 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,247 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,249 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,249 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:18,257 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,257 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,259 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,260 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,261 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,262 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:18,294 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,295 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,296 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,297 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,299 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,299 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,308 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,308 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,310 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,310 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,312 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,312 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,330 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,330 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,333 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,333 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,335 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,335 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,344 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,344 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,347 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,347 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,349 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,349 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,368 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,369 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,371 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,371 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,373 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,373 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,382 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,382 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,384 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,384 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,386 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,386 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,403 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,403 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,405 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,405 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,407 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,407 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,417 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,418 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,420 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,420 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,422 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,422 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,443 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,444 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,445 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,446 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,447 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,448 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,455 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,456 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,457 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,458 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,459 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,459 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,475 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,475 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,477 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,477 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,479 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,479 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,491 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,491 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,493 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,493 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,495 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,495 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,522 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,522 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,524 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,524 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,525 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,526 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,532 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,533 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,534 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,535 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,536 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,537 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,549 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,549 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,551 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,551 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,553 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,553 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:18,560 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,560 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,562 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,562 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,564 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,564 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:18,591 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,591 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,593 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,593 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,595 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,595 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,603 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,604 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,605 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,606 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,607 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,608 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,623 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,624 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,626 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,626 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,627 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,628 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,635 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,636 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,638 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,638 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,640 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:18,640 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,658 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,658 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,660 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,660 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,662 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,662 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,670 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,670 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,672 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,672 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,674 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,674 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,689 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,690 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,692 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,692 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,693 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,694 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,703 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,704 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,706 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,706 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:18,708 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:18,708 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,732 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,732 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,734 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,734 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,736 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,736 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,744 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,745 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,747 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,747 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,749 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:18,749 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,764 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,765 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,767 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,767 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,769 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,769 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,780 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,781 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,783 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,783 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:18,785 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:18,785 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:18,814 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,814 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,816 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,816 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,818 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,818 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,825 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,825 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,827 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,827 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,829 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:18,829 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:18,841 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,842 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,844 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,844 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,845 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,846 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:18,853 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,853 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,855 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,855 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:18,856 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:18,857 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:18,976 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,976 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,978 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,978 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:18,980 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:18,980 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:19,002 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:19,002 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,004 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:19,004 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,006 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:19,006 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:19,020 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:19,020 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:19,022 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:19,022 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:19,024 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:19,024 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:19,063 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:19,063 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:19,065 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:19,066 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:19,067 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:19,068 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:19,088 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:19,089 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,090 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:19,091 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,092 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:19,093 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:19,114 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:19,115 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,116 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:19,117 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,118 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:19,119 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:19,131 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:19,132 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:19,134 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:19,134 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:19,136 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:19,136 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:19,176 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:19,177 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:19,179 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:19,179 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:19,180 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:19,181 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:19,211 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:19,211 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,213 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:19,213 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,215 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:19,215 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:19,236 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:19,236 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,238 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:19,238 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,240 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:19,240 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:19,253 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:19,253 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:19,255 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:19,256 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:19,257 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:19,258 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:19,309 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:19,309 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:19,311 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:19,312 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:19,313 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:19,314 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:19,348 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:19,348 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,350 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:19,350 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,351 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:19,352 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:19,367 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:19,368 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,369 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:19,369 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:19,371 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:19,371 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:19,382 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:19,382 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:19,384 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:19,384 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:19,385 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:19,386 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:19,401 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:19,401 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:19,403 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:19,403 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:19,405 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:19,405 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:36,038 [DEBUG] root: ------------> onesided onesided
2019-11-10 18:06:36,038 [DEBUG] root: NFFT set to data length
2019-11-10 18:06:36,039 [DEBUG] root: Computing PSD.
2019-11-10 18:06:36,396 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,396 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:36,401 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,402 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:36,404 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,404 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:36,478 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,478 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:36,480 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,480 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:36,482 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,482 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:36,499 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:36,499 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:36,507 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:36,507 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:36,509 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:36,509 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:36,739 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:36,740 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:36,742 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:36,742 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:36,745 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:36,745 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:36,772 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,772 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:36,781 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,782 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:36,783 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,783 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:36,847 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,847 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:36,849 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,849 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:36,851 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:36,851 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:36,864 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:36,865 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:36,878 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:36,879 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:36,881 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:36,881 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:36,991 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:36,991 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:36,994 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:36,994 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:36,996 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:36,996 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:37,030 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,031 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,037 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,037 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,039 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,039 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,107 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,107 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,109 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,109 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,111 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,111 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,124 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,124 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,133 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,133 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,135 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,135 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:37,248 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,248 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,251 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,251 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,252 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,253 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:37,287 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,287 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,292 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,292 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,293 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,294 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,350 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,350 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,352 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,352 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,354 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,354 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,366 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,366 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:37,372 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,372 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:37,374 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,374 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:37,428 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,428 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:37,430 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,431 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:37,432 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,432 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:37,549 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,549 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,551 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,551 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,553 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,553 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,574 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,574 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,576 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,576 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,578 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,578 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,591 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:37,591 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,593 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:37,593 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,595 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:37,595 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:37,615 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:37,615 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,617 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:37,617 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,618 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:37,619 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:37,638 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,639 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,640 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,641 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,642 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,643 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,664 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,664 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,666 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,667 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,668 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:37,669 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,682 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:37,682 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:37,684 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:37,684 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:37,686 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:37,686 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:37,713 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:37,713 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:37,715 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:37,715 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:37,717 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:37,717 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:37,745 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,745 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,747 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,747 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,749 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,749 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,770 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,771 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,773 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,773 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,774 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:37,775 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,789 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,789 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,792 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,792 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,793 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,794 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:37,830 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,830 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,832 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,832 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:37,834 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:37,834 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:37,867 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,868 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,869 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,870 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,871 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,872 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,887 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,888 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,889 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,889 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:37,891 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:37,891 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:37,902 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,903 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:37,904 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,905 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:37,906 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,906 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:37,921 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,922 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:37,924 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,924 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:37,925 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:37,925 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:40,057 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,057 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,059 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,059 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,061 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,061 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,069 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,069 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,071 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,071 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,073 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,073 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,088 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,089 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,091 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,091 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,093 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,093 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,101 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,101 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,103 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,103 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,106 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,106 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,126 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,127 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,129 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,129 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,131 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,131 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,140 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,141 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,142 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,142 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,144 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,144 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,161 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,161 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,164 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,164 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,166 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,166 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,177 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,177 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,179 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,179 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,181 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,181 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,212 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,212 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,214 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,214 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,216 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,216 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,226 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,227 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,228 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,228 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,230 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,230 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,248 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,249 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,251 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,251 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,253 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,254 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,266 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,266 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,269 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,269 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,271 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,272 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,301 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,301 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,303 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,304 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,305 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,305 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,313 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,314 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,315 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,315 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,317 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,317 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,329 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,330 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,331 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,332 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,333 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,334 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:40,341 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,341 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,343 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,343 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,345 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,345 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:40,377 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,378 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,380 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,381 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,382 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,382 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,391 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,392 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,393 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,394 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,396 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,396 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,413 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,413 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,415 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,415 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,417 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,417 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,426 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,426 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,429 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,429 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,431 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,431 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,451 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,451 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,453 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,454 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,456 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,456 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,465 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,466 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,468 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,468 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,470 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,471 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,489 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,489 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,492 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,492 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,494 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,494 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,504 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,505 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,507 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,507 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,509 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,509 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,533 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,533 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,534 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,535 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,536 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,537 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,545 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,545 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,547 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,547 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,548 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,549 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,564 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,565 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,567 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,567 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,569 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,569 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,581 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,581 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,583 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,584 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,585 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,586 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,613 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,613 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,615 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,615 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,616 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,617 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,623 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,624 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,625 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,626 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,627 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,627 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,640 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,640 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,642 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,642 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,644 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,644 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:40,651 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,651 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,653 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,653 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,655 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,655 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:40,683 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,683 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,685 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,685 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,686 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,687 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,695 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,695 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,697 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,697 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,698 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,699 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,714 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,714 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,716 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,716 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,717 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,718 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,725 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,726 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,727 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,728 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,729 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:40,729 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,747 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,748 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,749 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,750 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,751 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,751 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,759 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,759 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,761 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,761 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,763 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:40,763 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,778 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,779 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,780 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,781 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,782 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,783 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,793 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,793 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,795 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,795 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:40,797 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:40,797 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,820 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,820 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,822 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,822 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,823 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,824 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,832 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,832 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,833 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,834 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,835 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:40,835 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,850 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,851 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,853 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,853 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,855 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,855 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,867 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,867 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,870 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,870 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:40,872 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:40,872 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:40,899 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,900 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,901 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,901 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,903 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,903 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,910 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,911 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,912 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,912 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:40,914 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:40,914 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:40,926 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,926 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,928 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,928 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,930 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,930 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:40,937 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,937 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,939 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,939 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:40,941 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:40,941 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:41,060 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,061 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,062 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,063 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,064 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,064 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:41,087 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,087 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,088 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,089 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,090 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,091 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:41,104 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:41,104 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:41,106 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:41,106 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:41,108 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:41,108 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:41,147 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:41,147 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:41,149 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:41,149 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:41,151 [DEBUG] matplotlib.ticker: vmin 0.1892465472036992 vmax 377.59650387340906
2019-11-10 18:06:41,151 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:41,172 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,172 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,174 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,174 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,176 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,176 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:41,197 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,197 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,199 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,199 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,200 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:06:41,201 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:41,214 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:41,214 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:41,216 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:41,216 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:41,218 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:41,218 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:41,257 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:41,257 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:41,259 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:41,259 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03,
       1.e+04])
2019-11-10 18:06:41,261 [DEBUG] matplotlib.ticker: vmin 0.005887265356491307 vmax 387.6161366973351
2019-11-10 18:06:41,261 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:41,291 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:41,291 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,293 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:41,293 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,295 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:41,295 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:41,315 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:41,316 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,317 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:41,318 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,319 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:06:41,320 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:41,332 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:41,333 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:41,335 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:41,335 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:41,336 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:41,337 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:41,403 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:41,403 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:41,405 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:41,405 [DEBUG] matplotlib.ticker: ticklocs array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01,
       1.e+02, 1.e+03, 1.e+04])
2019-11-10 18:06:41,407 [DEBUG] matplotlib.ticker: vmin 4.4940721010988835e-05 vmax 272.0503879109288
2019-11-10 18:06:41,407 [DEBUG] matplotlib.ticker: ticklocs array([2.e-06, 3.e-06, 4.e-06, 5.e-06, 6.e-06, 7.e-06, 8.e-06, 9.e-06,
       2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2019-11-10 18:06:41,440 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:41,441 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,442 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:41,443 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,444 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:41,445 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:41,460 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:41,460 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,462 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:41,462 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:06:41,464 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:06:41,464 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:06:41,475 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:41,475 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:41,477 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:41,477 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:41,479 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:41,479 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:06:41,495 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:41,495 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:41,497 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:41,497 [DEBUG] matplotlib.ticker: ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:06:41,499 [DEBUG] matplotlib.ticker: vmin 0.11321101864806732 vmax 34.92440107735901
2019-11-10 18:06:41,499 [DEBUG] matplotlib.ticker: ticklocs array([2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:09,274 [DEBUG] root: ------------> onesided onesided
2019-11-10 18:07:09,274 [DEBUG] root: NFFT set to data length
2019-11-10 18:07:09,275 [DEBUG] root: Computing PSD.
2019-11-10 18:07:09,601 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:09,601 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:09,607 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:09,607 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:09,609 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:09,609 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:09,672 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:09,672 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:09,674 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:09,674 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:09,676 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:09,676 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:09,689 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:09,689 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:09,697 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:09,697 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:09,699 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:09,699 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:09,921 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:09,921 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:09,923 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:09,923 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:09,925 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:09,925 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:09,949 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:09,950 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:09,955 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:09,956 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:09,957 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:09,957 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,021 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,021 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,023 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,023 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,025 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,025 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,038 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,038 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:10,047 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,047 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:10,049 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,049 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:10,174 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,174 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:10,176 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,176 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:10,178 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,178 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:10,211 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,211 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,216 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,217 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,218 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,219 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,282 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,282 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,284 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,284 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,285 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,286 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,299 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,299 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:10,305 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,306 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:10,307 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,308 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:10,318 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,319 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:10,321 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,321 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:10,322 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,323 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:10,341 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,341 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,345 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,346 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,347 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,348 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,399 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,400 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,401 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,402 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,403 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,404 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,414 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,415 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:10,420 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,420 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:10,422 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,422 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:10,481 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,481 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:10,483 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,483 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:10,485 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,485 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:10,597 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,597 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,599 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,599 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,601 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,601 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,622 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,622 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,624 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,624 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,625 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,626 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,639 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:10,639 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:10,641 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:10,642 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:10,643 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:10,643 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:10,670 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:10,671 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:10,673 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:10,673 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:10,674 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:10,675 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:10,698 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,698 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,700 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,700 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,702 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,703 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,723 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,723 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,725 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,725 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,727 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:10,727 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,740 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,741 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:10,743 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,743 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:10,745 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,745 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:10,788 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,788 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:10,791 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,791 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:10,793 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:10,793 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:10,828 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,829 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,830 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,831 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,833 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,833 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,860 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,860 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,862 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,862 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,864 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:10,865 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,879 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,879 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:10,881 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,882 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:10,883 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,884 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:10,888 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,889 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:10,891 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,891 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:10,893 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:10,893 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:10,911 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,911 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,913 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,914 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,915 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,916 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,932 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,933 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,935 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,935 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:10,937 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:10,937 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:10,949 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,950 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:10,952 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,952 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:10,954 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,955 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:10,983 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,984 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:10,987 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,987 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:10,990 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:10,991 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:13,232 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,232 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,233 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,234 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,235 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,235 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,243 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,244 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,245 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,246 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,247 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,247 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,262 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,263 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,265 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,265 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,266 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,267 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,276 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,277 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,279 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,279 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,280 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,281 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,304 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,304 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,306 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,306 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,307 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,308 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,317 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,317 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,319 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,319 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,320 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,320 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,338 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,338 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,341 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,341 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,343 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,343 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,358 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,358 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,360 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,361 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,363 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,363 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,395 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,396 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,397 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,398 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,399 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,400 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,408 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,409 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,411 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,411 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,413 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,413 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,430 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,430 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:13,432 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,433 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:13,436 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,436 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:13,439 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,440 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:13,443 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,443 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:13,445 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,445 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:13,456 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,456 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,458 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,458 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,460 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,460 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,469 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,470 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,472 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,472 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,474 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,474 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,487 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,488 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:13,490 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,490 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:13,491 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,492 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:13,501 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,501 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:13,503 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,503 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:13,505 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,505 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:13,538 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,538 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,540 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,540 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,541 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,542 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,550 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,551 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,553 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,553 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,555 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,555 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,571 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,572 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,574 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,574 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,575 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,576 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,587 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,587 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,589 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,590 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,591 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,592 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,615 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,616 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,618 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,619 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,620 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,621 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,629 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,629 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,631 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,631 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,633 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,634 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,650 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,650 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,653 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,653 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,655 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,655 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,667 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,667 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,669 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,669 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,671 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,671 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,699 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,700 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,702 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,702 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,704 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,704 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,712 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,712 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,714 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,714 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,716 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,716 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,731 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,732 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:13,733 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,734 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:13,735 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,736 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:13,737 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,738 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:13,740 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,740 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:13,741 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:13,742 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:13,747 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,748 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,749 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,749 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,751 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,752 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,759 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,759 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,761 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,761 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,762 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:13,763 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,775 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,775 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:13,777 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,777 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:13,779 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,779 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:13,787 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,787 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:13,789 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,790 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:13,791 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:13,791 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:13,822 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,822 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,824 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,825 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,826 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,827 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,836 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,836 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,837 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,838 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,839 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,839 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,854 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,855 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,857 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,857 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,858 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,859 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,869 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,869 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,871 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,871 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:13,873 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:13,873 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,895 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,895 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,897 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,897 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,899 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,899 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,907 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,907 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,909 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,909 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,911 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:13,911 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,926 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,926 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,928 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,929 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,930 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,931 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,942 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,942 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,945 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,945 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:13,946 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:13,947 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:13,974 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,975 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,976 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,976 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,978 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,978 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:13,986 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,987 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,988 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,988 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:13,990 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:13,990 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:14,005 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,006 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:14,008 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,008 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:14,009 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,010 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:14,011 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,011 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:14,013 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,013 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:14,015 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,015 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:14,022 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,022 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,024 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,024 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,025 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,025 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:14,033 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,033 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,035 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,035 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,036 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,037 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:14,048 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,049 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:14,051 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,051 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:14,053 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,053 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:14,061 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,061 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:14,063 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,063 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:14,065 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,065 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:14,190 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,190 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,192 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,192 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,194 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,195 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:14,222 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,222 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,224 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,224 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,226 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,226 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:14,242 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:14,242 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:14,244 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:14,245 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:14,247 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:14,247 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:14,317 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:14,318 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:14,320 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:14,321 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04,
       1.e+05])
2019-11-10 18:07:14,322 [DEBUG] matplotlib.ticker: vmin 0.03565142736069088 vmax 1819.2889782501318
2019-11-10 18:07:14,322 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:14,351 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,351 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,353 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,353 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,354 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,355 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:14,379 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,380 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,382 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,382 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,384 [DEBUG] matplotlib.ticker: vmin 0.00035379599419497164 vmax 0.7059158144041751
2019-11-10 18:07:14,384 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:14,397 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:14,398 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:14,400 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:14,400 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:14,402 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:14,402 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:14,455 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:14,455 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:14,457 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:14,458 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04, 1.e+05])
2019-11-10 18:07:14,459 [DEBUG] matplotlib.ticker: vmin 0.00017094607344396643 vmax 1344.1726173572865
2019-11-10 18:07:14,460 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04,
       2.e+05, 3.e+05, 4.e+05, 5.e+05, 6.e+05, 7.e+05, 8.e+05, 9.e+05])
2019-11-10 18:07:14,494 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:14,495 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,496 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:14,496 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,499 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:14,499 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:14,522 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:14,523 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,525 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:14,525 [DEBUG] matplotlib.ticker: ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,527 [DEBUG] matplotlib.ticker: vmin 0.00035397289219206895 vmax 0.7062687723113772
2019-11-10 18:07:14,527 [DEBUG] matplotlib.ticker: ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:14,547 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,548 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:14,550 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,550 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:14,552 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,552 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:14,566 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,566 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:14,568 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,569 [DEBUG] matplotlib.ticker: ticklocs array([1.e-08, 1.e-06, 1.e-04, 1.e-02, 1.e+00, 1.e+02, 1.e+04, 1.e+06])
2019-11-10 18:07:14,570 [DEBUG] matplotlib.ticker: vmin 6.748184334676923e-06 vmax 1324.598709671206
2019-11-10 18:07:14,571 [DEBUG] matplotlib.ticker: ticklocs array([], dtype=float64)
2019-11-10 18:07:14,591 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,591 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,593 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,593 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,595 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,595 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:14,614 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,614 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,617 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,617 [DEBUG] matplotlib.ticker: ticklocs array([1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01])
2019-11-10 18:07:14,619 [DEBUG] matplotlib.ticker: vmin 0.0030647816324091835 vmax 0.6372803136596311
2019-11-10 18:07:14,620 [DEBUG] matplotlib.ticker: ticklocs array([2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01])
2019-11-10 18:07:14,631 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,631 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:14,634 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,635 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:14,637 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,637 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-10 18:07:14,662 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,662 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:14,664 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,664 [DEBUG] matplotlib.ticker: ticklocs array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03])
2019-11-10 18:07:14,666 [DEBUG] matplotlib.ticker: vmin 0.023277968929953676 vmax 26.78221769324693
2019-11-10 18:07:14,666 [DEBUG] matplotlib.ticker: ticklocs array([2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03])
2019-11-14 00:04:01,350 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-11-14 00:04:01,445 [DEBUG] shapely.geos: Trying `CDLL(/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1)`
2019-11-14 00:04:01,449 [DEBUG] shapely.geos: Library path: '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1'
2019-11-14 00:04:01,449 [DEBUG] shapely.geos: DLL: <CDLL '/home/myron/miniconda3/envs/pyleoclim/lib/libgeos_c.so.1', handle 55d9d2ecb090 at 0x7f3043b1ab38>
2019-11-14 00:04:01,460 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2019-11-14 00:04:01,461 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2019-11-14 00:04:01,461 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7f308171f4f0 at 0x7f3043b1aeb8>
2019-11-14 00:04:02,250 [DEBUG] matplotlib.pyplot: Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2019-11-14 00:04:11,758 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:04:11,759 [DEBUG] root: NFFT set to data length
2019-11-14 00:04:11,762 [DEBUG] root: Computing PSD.
2019-11-14 00:04:12,325 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.5.
2019-11-14 00:04:12,326 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,326 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,326 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 3.335
2019-11-14 00:04:12,326 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,327 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,327 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,327 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2019-11-14 00:04:12,327 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,327 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,327 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,328 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,328 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,328 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,328 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,329 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,329 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,329 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 2.335
2019-11-14 00:04:12,329 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2019-11-14 00:04:12,329 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,330 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,330 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,330 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,330 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,331 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,331 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,331 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,331 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,332 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,332 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,332 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,332 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,333 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,333 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,333 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,333 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-14 00:04:12,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
2019-11-14 00:04:12,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,336 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,336 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,336 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,336 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-14 00:04:12,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-14 00:04:12,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 5.335
2019-11-14 00:04:12,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-14 00:04:12,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-14 00:04:12,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-14 00:04:12,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
2019-11-14 00:04:12,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-14 00:04:12,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,350 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-14 00:04:12,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,354 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-14 00:04:12,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-14 00:04:12,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-14 00:04:12,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-14 00:04:12,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,360 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-14 00:04:12,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-14 00:04:12,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-14 00:04:12,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-14 00:04:12,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-14 00:04:12,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 4.335
2019-11-14 00:04:12,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-14 00:04:12,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-14 00:04:12,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,374 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.5 to DejaVu Sans ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 2.050000.
2019-11-14 00:04:12,389 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2019-11-14 00:04:12,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 3.335
2019-11-14 00:04:12,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
2019-11-14 00:04:12,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 2.335
2019-11-14 00:04:12,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
2019-11-14 00:04:12,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2019-11-14 00:04:12,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
2019-11-14 00:04:12,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2019-11-14 00:04:12,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2019-11-14 00:04:12,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 5.335
2019-11-14 00:04:12,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2019-11-14 00:04:12,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2019-11-14 00:04:12,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2019-11-14 00:04:12,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
2019-11-14 00:04:12,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2019-11-14 00:04:12,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,409 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2019-11-14 00:04:12,411 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,412 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,413 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2019-11-14 00:04:12,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,414 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2019-11-14 00:04:12,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2019-11-14 00:04:12,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2019-11-14 00:04:12,415 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,416 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,417 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,418 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,419 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2019-11-14 00:04:12,420 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2019-11-14 00:04:12,421 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2019-11-14 00:04:12,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,422 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2019-11-14 00:04:12,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,423 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2019-11-14 00:04:12,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,424 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,425 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2019-11-14 00:04:12,426 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 4.335
2019-11-14 00:04:12,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2019-11-14 00:04:12,427 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2019-11-14 00:04:12,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2019-11-14 00:04:12,428 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2019-11-14 00:04:12,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,429 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2019-11-14 00:04:12,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2019-11-14 00:04:12,430 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2019-11-14 00:04:12,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,431 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2019-11-14 00:04:12,432 [DEBUG] matplotlib.font_manager: findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans ('/home/myron/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 2.050000.
2019-11-14 00:05:49,379 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:05:49,380 [DEBUG] root: NFFT set to data length
2019-11-14 00:05:49,381 [DEBUG] root: Computing PSD.
2019-11-14 00:05:49,664 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:05:49,664 [DEBUG] root: NFFT set to data length
2019-11-14 00:05:49,665 [DEBUG] root: Computing PSD.
2019-11-14 00:07:28,113 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:07:28,114 [DEBUG] root: NFFT set to data length
2019-11-14 00:07:28,115 [DEBUG] root: Computing PSD.
2019-11-14 00:07:29,191 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:07:29,191 [DEBUG] root: NFFT set to data length
2019-11-14 00:07:29,192 [DEBUG] root: Computing PSD.
2019-11-14 00:07:30,616 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:07:30,616 [DEBUG] root: NFFT set to data length
2019-11-14 00:07:30,617 [DEBUG] root: Computing PSD.
2019-11-14 00:08:11,476 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:08:11,476 [DEBUG] root: NFFT set to data length
2019-11-14 00:08:11,477 [DEBUG] root: Computing PSD.
2019-11-14 00:22:57,133 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:22:57,133 [DEBUG] root: NFFT set to data length
2019-11-14 00:22:57,134 [DEBUG] root: Computing PSD.
2019-11-14 00:26:55,654 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:26:55,655 [DEBUG] root: NFFT set to data length
2019-11-14 00:26:55,655 [DEBUG] root: Computing PSD.
2019-11-14 00:26:55,901 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:26:55,902 [DEBUG] root: NFFT set to data length
2019-11-14 00:26:55,902 [DEBUG] root: Computing PSD.
2019-11-14 00:26:56,121 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:26:56,121 [DEBUG] root: NFFT set to data length
2019-11-14 00:26:56,122 [DEBUG] root: Computing PSD.
2019-11-14 00:26:56,416 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:26:56,417 [DEBUG] root: NFFT set to data length
2019-11-14 00:26:56,417 [DEBUG] root: Computing PSD.
2019-11-14 00:26:57,131 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:26:57,131 [DEBUG] root: NFFT set to data length
2019-11-14 00:26:57,132 [DEBUG] root: Computing PSD.
2019-11-14 00:26:57,750 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:26:57,750 [DEBUG] root: NFFT set to data length
2019-11-14 00:26:57,751 [DEBUG] root: Computing PSD.
2019-11-14 00:26:58,049 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:26:58,050 [DEBUG] root: NFFT set to data length
2019-11-14 00:26:58,050 [DEBUG] root: Computing PSD.
2019-11-14 00:34:36,765 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:34:36,765 [DEBUG] root: NFFT set to data length
2019-11-14 00:34:36,766 [DEBUG] root: Computing PSD.
2019-11-14 00:34:39,894 [DEBUG] root: ------------> onesided onesided
2019-11-14 00:34:39,894 [DEBUG] root: NFFT set to data length
2019-11-14 00:34:39,895 [DEBUG] root: Computing PSD.
2020-01-31 15:43:58,034 [DEBUG] matplotlib: $HOME=/home/fzhu
2020-01-31 15:43:58,037 [DEBUG] matplotlib: CONFIGDIR=/home/fzhu/.config/matplotlib
2020-01-31 15:43:58,037 [DEBUG] matplotlib: matplotlib data path: /home/fzhu/Apps/miniconda3/envs/test/lib/python3.7/site-packages/matplotlib/mpl-data
2020-01-31 15:43:58,039 [DEBUG] matplotlib: loaded rc file /home/fzhu/Apps/miniconda3/envs/test/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-01-31 15:43:58,040 [DEBUG] matplotlib: matplotlib version 3.1.2
2020-01-31 15:43:58,040 [DEBUG] matplotlib: interactive is False
2020-01-31 15:43:58,041 [DEBUG] matplotlib: platform is linux
2020-01-31 15:43:58,041 [DEBUG] matplotlib: loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'readline', 'atexit', 'rlcompleter', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'zipfile', 'time', 'shutil', 'fnmatch', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'errno', 'zlib', 'bz2', '_compression', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'struct', '_struct', 'binascii', 'lipd.loggers', 'datetime', 'math', '_datetime', 'logging', 'weakref', 'collections.abc', 'string', '_string', 'logging.config', 'logging.handlers', 'socket', '_socket', 'selectors', 'select', 'pickle', '_compat_pickle', '_pickle', 'queue', '_queue', 'copy', 'socketserver', 'lipd.directory', 'tempfile', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ntpath', 'subprocess', 'signal', '_posixsubprocess', 'lipd.bag', 'bagit', '__future__', 'argparse', 'gettext', 'locale', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'array', '__mp_main__', 'unicodedata', 'pkg_resources', 'pkgutil', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'textwrap', 'inspect', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pprint', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'lipd.csvs', 'csv', '_csv', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'six', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'numpy.core.umath', 'numpy.core.numerictypes', 'numbers', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'ast', '_ast', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'decimal', '_decimal', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'hmac', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'urllib.error', 'urllib.response', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'ssl', '_ssl', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'http', 'http.client', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'urllib.request', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'encodings.idna', 'stringprep', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'lipd.excel', 'xlrd', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.book', 'gc', 'xlrd.compdoc', 'xlrd.formatting', 'xlrd.sheet', 'xlrd.formula', 'mmap', 'xlrd.info', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'typing', 'typing.io', 'typing.re', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.relativedelta', 'dateutil._common', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.frequencies', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.ops_dispatch', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas._libs.algos', 'pandas._typing', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape', 'pandas.core.reshape.api', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.util', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlsxwriter', 'pandas._libs.json', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'lipd.tables', 'lipd.validator_api', 'lipd.json_viewer', 'PyQt5', 'sip', 'PyQt5.sip', 'PyQt5.QtCore', 'PyQt5.QtGui', 'PyQt5.QtWidgets', 'lipd.fetch_doi', 'lipd.download_lipd', 'matplotlib', 'matplotlib.cbook', 'glob', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-01-31 15:43:58,067 [DEBUG] matplotlib: CACHEDIR=/home/fzhu/.cache/matplotlib
2020-01-31 15:43:58,070 [DEBUG] matplotlib.font_manager: Using fontManager instance from /home/fzhu/.cache/matplotlib/fontlist-v310.json
2020-01-31 15:43:58,151 [DEBUG] matplotlib.pyplot: Loaded backend qt5agg version unknown.
2020-01-31 15:43:58,151 [DEBUG] matplotlib.pyplot: Loaded backend Qt5Agg version unknown.
2020-01-31 15:46:26,100 [DEBUG] matplotlib: $HOME=/home/fzhu
2020-01-31 15:46:26,100 [DEBUG] matplotlib: CONFIGDIR=/home/fzhu/.config/matplotlib
2020-01-31 15:46:26,100 [DEBUG] matplotlib: matplotlib data path: /home/fzhu/Apps/miniconda3/envs/test/lib/python3.7/site-packages/matplotlib/mpl-data
2020-01-31 15:46:26,102 [DEBUG] matplotlib: loaded rc file /home/fzhu/Apps/miniconda3/envs/test/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-01-31 15:46:26,103 [DEBUG] matplotlib: matplotlib version 3.1.2
2020-01-31 15:46:26,103 [DEBUG] matplotlib: interactive is False
2020-01-31 15:46:26,103 [DEBUG] matplotlib: platform is linux
2020-01-31 15:46:26,103 [DEBUG] matplotlib: loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'readline', 'atexit', 'rlcompleter', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'zipfile', 'time', 'shutil', 'fnmatch', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'errno', 'zlib', 'bz2', '_compression', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'struct', '_struct', 'binascii', 'lipd.loggers', 'datetime', 'math', '_datetime', 'logging', 'weakref', 'collections.abc', 'string', '_string', 'logging.config', 'logging.handlers', 'socket', '_socket', 'selectors', 'select', 'pickle', '_compat_pickle', '_pickle', 'queue', '_queue', 'copy', 'socketserver', 'lipd.directory', 'tempfile', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ntpath', 'subprocess', 'signal', '_posixsubprocess', 'lipd.bag', 'bagit', '__future__', 'argparse', 'gettext', 'locale', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'array', '__mp_main__', 'unicodedata', 'pkg_resources', 'pkgutil', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'textwrap', 'inspect', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pprint', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'lipd.csvs', 'csv', '_csv', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'six', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'numpy.core.umath', 'numpy.core.numerictypes', 'numbers', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'ast', '_ast', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'decimal', '_decimal', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'hmac', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'urllib.error', 'urllib.response', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'ssl', '_ssl', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'http', 'http.client', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.exceptions', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'cryptography.hazmat._der', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.x509.general_name', 'six.moves', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'urllib.request', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'encodings.idna', 'stringprep', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'lipd.excel', 'xlrd', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.book', 'gc', 'xlrd.compdoc', 'xlrd.formatting', 'xlrd.sheet', 'xlrd.formula', 'mmap', 'xlrd.info', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'typing', 'typing.io', 'typing.re', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.relativedelta', 'dateutil._common', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.frequencies', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.ops_dispatch', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas._libs.algos', 'pandas._typing', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape', 'pandas.core.reshape.api', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.util', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlsxwriter', 'pandas._libs.json', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'lipd.tables', 'lipd.validator_api', 'lipd.json_viewer', 'PyQt5', 'sip', 'PyQt5.sip', 'PyQt5.QtCore', 'PyQt5.QtGui', 'PyQt5.QtWidgets', 'lipd.fetch_doi', 'lipd.download_lipd', 'matplotlib', 'matplotlib.cbook', 'glob', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-01-31 15:46:26,130 [DEBUG] matplotlib: CACHEDIR=/home/fzhu/.cache/matplotlib
2020-01-31 15:46:26,133 [DEBUG] matplotlib.font_manager: Using fontManager instance from /home/fzhu/.cache/matplotlib/fontlist-v310.json
2020-01-31 15:46:26,217 [DEBUG] matplotlib.pyplot: Loaded backend qt5agg version unknown.
2020-01-31 15:46:26,217 [DEBUG] matplotlib.pyplot: Loaded backend Qt5Agg version unknown.
2020-01-31 15:46:26,396 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2020-01-31 15:46:26,397 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2020-01-31 15:46:26,397 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7f3ab4cca4f0 at 0x7f3a966968d0>
2020-01-31 15:47:01,328 [DEBUG] matplotlib: $HOME=/home/fzhu
2020-01-31 15:47:01,329 [DEBUG] matplotlib: CONFIGDIR=/home/fzhu/.config/matplotlib
2020-01-31 15:47:01,329 [DEBUG] matplotlib: matplotlib data path: /home/fzhu/Apps/miniconda3/envs/test/lib/python3.7/site-packages/matplotlib/mpl-data
2020-01-31 15:47:01,331 [DEBUG] matplotlib: loaded rc file /home/fzhu/Apps/miniconda3/envs/test/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-01-31 15:47:01,332 [DEBUG] matplotlib: matplotlib version 3.1.2
2020-01-31 15:47:01,332 [DEBUG] matplotlib: interactive is False
2020-01-31 15:47:01,332 [DEBUG] matplotlib: platform is linux
2020-01-31 15:47:01,332 [DEBUG] matplotlib: loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'readline', 'atexit', 'rlcompleter', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'zipfile', 'time', 'shutil', 'fnmatch', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'errno', 'zlib', 'bz2', '_compression', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'struct', '_struct', 'binascii', 'lipd.loggers', 'datetime', 'math', '_datetime', 'logging', 'weakref', 'collections.abc', 'string', '_string', 'logging.config', 'logging.handlers', 'socket', '_socket', 'selectors', 'select', 'pickle', '_compat_pickle', '_pickle', 'queue', '_queue', 'copy', 'socketserver', 'lipd.directory', 'tempfile', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ntpath', 'subprocess', 'signal', '_posixsubprocess', 'lipd.bag', 'bagit', '__future__', 'argparse', 'gettext', 'locale', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'array', '__mp_main__', 'unicodedata', 'pkg_resources', 'pkgutil', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'textwrap', 'inspect', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pprint', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'lipd.csvs', 'csv', '_csv', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'six', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'numpy.core.umath', 'numpy.core.numerictypes', 'numbers', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'ast', '_ast', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'decimal', '_decimal', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'hmac', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'urllib.error', 'urllib.response', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'ssl', '_ssl', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'http', 'http.client', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.exceptions', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'cryptography.hazmat._der', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.x509.general_name', 'six.moves', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'urllib.request', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'encodings.idna', 'stringprep', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'lipd.excel', 'xlrd', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.book', 'gc', 'xlrd.compdoc', 'xlrd.formatting', 'xlrd.sheet', 'xlrd.formula', 'mmap', 'xlrd.info', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'typing', 'typing.io', 'typing.re', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.relativedelta', 'dateutil._common', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.frequencies', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.ops_dispatch', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas._libs.algos', 'pandas._typing', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape', 'pandas.core.reshape.api', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.util', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlsxwriter', 'pandas._libs.json', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'lipd.tables', 'lipd.validator_api', 'lipd.json_viewer', 'PyQt5', 'sip', 'PyQt5.sip', 'PyQt5.QtCore', 'PyQt5.QtGui', 'PyQt5.QtWidgets', 'lipd.fetch_doi', 'lipd.download_lipd', 'matplotlib', 'matplotlib.cbook', 'glob', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-01-31 15:47:01,358 [DEBUG] matplotlib: CACHEDIR=/home/fzhu/.cache/matplotlib
2020-01-31 15:47:01,360 [DEBUG] matplotlib.font_manager: Using fontManager instance from /home/fzhu/.cache/matplotlib/fontlist-v310.json
2020-01-31 15:47:01,444 [DEBUG] matplotlib.pyplot: Loaded backend qt5agg version unknown.
2020-01-31 15:47:01,444 [DEBUG] matplotlib.pyplot: Loaded backend Qt5Agg version unknown.
2020-01-31 15:47:01,636 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2020-01-31 15:47:01,636 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2020-01-31 15:47:01,636 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7f47dcec24f0 at 0x7f47be71efd0>
2020-01-31 15:47:32,395 [DEBUG] matplotlib: $HOME=/home/fzhu
2020-01-31 15:47:32,395 [DEBUG] matplotlib: CONFIGDIR=/home/fzhu/.config/matplotlib
2020-01-31 15:47:32,395 [DEBUG] matplotlib: matplotlib data path: /home/fzhu/Apps/miniconda3/envs/test/lib/python3.7/site-packages/matplotlib/mpl-data
2020-01-31 15:47:32,397 [DEBUG] matplotlib: loaded rc file /home/fzhu/Apps/miniconda3/envs/test/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-01-31 15:47:32,398 [DEBUG] matplotlib: matplotlib version 3.1.2
2020-01-31 15:47:32,398 [DEBUG] matplotlib: interactive is False
2020-01-31 15:47:32,398 [DEBUG] matplotlib: platform is linux
2020-01-31 15:47:32,398 [DEBUG] matplotlib: loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'readline', 'atexit', 'rlcompleter', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'zipfile', 'time', 'shutil', 'fnmatch', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'errno', 'zlib', 'bz2', '_compression', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'struct', '_struct', 'binascii', 'lipd.loggers', 'datetime', 'math', '_datetime', 'logging', 'weakref', 'collections.abc', 'string', '_string', 'logging.config', 'logging.handlers', 'socket', '_socket', 'selectors', 'select', 'pickle', '_compat_pickle', '_pickle', 'queue', '_queue', 'copy', 'socketserver', 'lipd.directory', 'tempfile', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ntpath', 'subprocess', 'signal', '_posixsubprocess', 'lipd.bag', 'bagit', '__future__', 'argparse', 'gettext', 'locale', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'array', '__mp_main__', 'unicodedata', 'pkg_resources', 'pkgutil', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'textwrap', 'inspect', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pprint', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'lipd.csvs', 'csv', '_csv', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'six', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'numpy.core.umath', 'numpy.core.numerictypes', 'numbers', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'ast', '_ast', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'decimal', '_decimal', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'hmac', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'urllib.error', 'urllib.response', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'ssl', '_ssl', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'http', 'http.client', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.exceptions', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'cryptography.hazmat._der', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.x509.general_name', 'six.moves', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'urllib.request', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'encodings.idna', 'stringprep', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'lipd.excel', 'xlrd', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.book', 'gc', 'xlrd.compdoc', 'xlrd.formatting', 'xlrd.sheet', 'xlrd.formula', 'mmap', 'xlrd.info', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'typing', 'typing.io', 'typing.re', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.relativedelta', 'dateutil._common', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.frequencies', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.ops_dispatch', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas._libs.algos', 'pandas._typing', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape', 'pandas.core.reshape.api', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.util', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlsxwriter', 'pandas._libs.json', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'lipd.tables', 'lipd.validator_api', 'lipd.json_viewer', 'PyQt5', 'sip', 'PyQt5.sip', 'PyQt5.QtCore', 'PyQt5.QtGui', 'PyQt5.QtWidgets', 'lipd.fetch_doi', 'lipd.download_lipd', 'matplotlib', 'matplotlib.cbook', 'glob', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-01-31 15:47:32,424 [DEBUG] matplotlib: CACHEDIR=/home/fzhu/.cache/matplotlib
2020-01-31 15:47:32,426 [DEBUG] matplotlib.font_manager: Using fontManager instance from /home/fzhu/.cache/matplotlib/fontlist-v310.json
2020-01-31 15:47:32,510 [DEBUG] matplotlib.pyplot: Loaded backend qt5agg version unknown.
2020-01-31 15:47:32,510 [DEBUG] matplotlib.pyplot: Loaded backend Qt5Agg version unknown.
2020-01-31 15:47:32,689 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2020-01-31 15:47:32,689 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2020-01-31 15:47:32,689 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7fb849df34f0 at 0x7fb82b653190>
2020-01-31 15:51:29,083 [DEBUG] matplotlib: $HOME=/home/fzhu
2020-01-31 15:51:29,083 [DEBUG] matplotlib: CONFIGDIR=/home/fzhu/.config/matplotlib
2020-01-31 15:51:29,083 [DEBUG] matplotlib: matplotlib data path: /home/fzhu/Apps/miniconda3/envs/test/lib/python3.7/site-packages/matplotlib/mpl-data
2020-01-31 15:51:29,085 [DEBUG] matplotlib: loaded rc file /home/fzhu/Apps/miniconda3/envs/test/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-01-31 15:51:29,086 [DEBUG] matplotlib: matplotlib version 3.1.2
2020-01-31 15:51:29,086 [DEBUG] matplotlib: interactive is False
2020-01-31 15:51:29,086 [DEBUG] matplotlib: platform is linux
2020-01-31 15:51:29,087 [DEBUG] matplotlib: loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', '_bootlocale', '_locale', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'readline', 'atexit', 'rlcompleter', 'pyleoclim', 'lipd', 'lipd.lipd_io', 'lipd.zips', 'zipfile', 'time', 'shutil', 'fnmatch', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'errno', 'zlib', 'bz2', '_compression', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'struct', '_struct', 'binascii', 'lipd.loggers', 'datetime', 'math', '_datetime', 'logging', 'weakref', 'collections.abc', 'string', '_string', 'logging.config', 'logging.handlers', 'socket', '_socket', 'selectors', 'select', 'pickle', '_compat_pickle', '_pickle', 'queue', '_queue', 'copy', 'socketserver', 'lipd.directory', 'tempfile', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ntpath', 'subprocess', 'signal', '_posixsubprocess', 'lipd.bag', 'bagit', '__future__', 'argparse', 'gettext', 'locale', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'array', '__mp_main__', 'unicodedata', 'pkg_resources', 'pkgutil', 'platform', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'base64', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'urllib', 'urllib.parse', 'email._parseaddr', 'calendar', 'textwrap', 'inspect', 'dis', 'opcode', '_opcode', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pprint', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'lipd.csvs', 'csv', '_csv', 'lipd.inferred_data', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'numpy.core.umath', 'numpy.core.numerictypes', 'numbers', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core._exceptions', 'numpy.core._asarray', 'numpy.core._ufunc_config', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', '_ctypes', 'ctypes', 'ctypes._endian', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'ast', '_ast', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'decimal', '_decimal', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random.common', 'numpy.random.bounded_integers', 'numpy.random.mt19937', 'numpy.random.bit_generator', '_cython_0_29_14', 'secrets', 'hmac', 'numpy.random.philox', 'numpy.random.pcg64', 'numpy.random.sfc64', 'numpy.random.generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'gc', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'lipd.misc', 'lipd.alternates', 'lipd.blanks', 'lipd.regexes', 'lipd.jsons', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'demjson', 'lipd.versions', 'lipd.timeseries', 'lipd.doi_main', 'lipd.doi_resolver', 'urllib.error', 'urllib.response', 'requests', 'urllib3', 'urllib3.connectionpool', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'ssl', '_ssl', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'http', 'http.client', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib3.packages.six.moves.http_client', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3._collections', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'mimetypes', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'urllib3.contrib.pyopenssl', 'OpenSSL', 'OpenSSL.crypto', 'six', 'cryptography', 'cryptography.__about__', 'cryptography.x509', 'cryptography.x509.certificate_transparency', 'cryptography.x509.base', 'cryptography.utils', 'cryptography.hazmat', 'cryptography.hazmat.primitives', 'cryptography.hazmat.primitives.asymmetric', 'cryptography.hazmat.primitives.asymmetric.dsa', 'cryptography.hazmat.primitives.asymmetric.ec', 'cryptography.hazmat._oid', 'cryptography.hazmat.primitives.asymmetric.ed25519', 'cryptography.exceptions', 'cryptography.hazmat.primitives.asymmetric.ed448', 'cryptography.hazmat.primitives.asymmetric.rsa', 'cryptography.hazmat.backends', 'cryptography.hazmat.backends.interfaces', 'cryptography.x509.extensions', 'ipaddress', 'cryptography.hazmat._der', 'cryptography.hazmat.primitives.constant_time', 'cryptography.hazmat.bindings', '_cffi_backend', '_constant_time.lib', '_constant_time', 'cryptography.hazmat.bindings._constant_time', 'cryptography.hazmat.primitives.serialization', 'cryptography.hazmat.primitives.serialization.base', 'cryptography.hazmat.primitives.serialization.ssh', 'cryptography.x509.general_name', 'six.moves', 'cryptography.x509.name', 'cryptography.x509.oid', 'cryptography.hazmat.primitives.hashes', 'OpenSSL._util', 'cryptography.hazmat.bindings.openssl', 'cryptography.hazmat.bindings.openssl.binding', '_openssl.lib', '_openssl', 'cryptography.hazmat.bindings._openssl', 'cryptography.hazmat.bindings.openssl._conditional', 'OpenSSL.SSL', 'OpenSSL.version', 'cryptography.hazmat.backends.openssl', 'cryptography.hazmat.backends.openssl.backend', 'cryptography.hazmat.backends.openssl.aead', 'cryptography.hazmat.backends.openssl.ciphers', 'cryptography.hazmat.primitives.ciphers', 'cryptography.hazmat.primitives.ciphers.base', 'cryptography.hazmat.primitives.ciphers.modes', 'cryptography.hazmat.backends.openssl.cmac', 'cryptography.hazmat.backends.openssl.decode_asn1', 'cryptography.hazmat.backends.openssl.dh', 'cryptography.hazmat.primitives.asymmetric.dh', 'cryptography.hazmat.backends.openssl.dsa', 'cryptography.hazmat.backends.openssl.utils', 'cryptography.hazmat.primitives.asymmetric.utils', 'cryptography.hazmat.backends.openssl.ec', 'cryptography.hazmat.backends.openssl.ed25519', 'cryptography.hazmat.backends.openssl.ed448', 'cryptography.hazmat.backends.openssl.encode_asn1', 'cryptography.hazmat.backends.openssl.hashes', 'cryptography.hazmat.backends.openssl.hmac', 'cryptography.hazmat.backends.openssl.ocsp', 'cryptography.hazmat.backends.openssl.x509', 'cryptography.x509.ocsp', 'cryptography.hazmat.backends.openssl.poly1305', 'cryptography.hazmat.backends.openssl.rsa', 'cryptography.hazmat.primitives.asymmetric.padding', 'cryptography.hazmat.backends.openssl.x25519', 'cryptography.hazmat.primitives.asymmetric.x25519', 'cryptography.hazmat.backends.openssl.x448', 'cryptography.hazmat.primitives.asymmetric.x448', 'cryptography.hazmat.primitives.ciphers.algorithms', 'cryptography.hazmat.primitives.kdf', 'cryptography.hazmat.primitives.kdf.scrypt', 'urllib3.packages.backports', 'urllib3.packages.backports.makefile', 'requests.__version__', 'requests.utils', 'requests.certs', 'certifi', 'certifi.core', 'requests._internal_utils', 'requests.compat', 'urllib.request', 'http.cookiejar', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3.contrib.pyopenssl', 'requests.packages.urllib3.packages.backports', 'requests.packages.urllib3.packages.backports.makefile', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'encodings.idna', 'stringprep', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'urllib3.contrib.socks', 'socks', 'lipd.excel', 'xlrd', 'xlrd.timemachine', 'xlrd.biffh', 'xlrd.book', 'xlrd.compdoc', 'xlrd.formatting', 'xlrd.sheet', 'xlrd.formula', 'mmap', 'xlrd.info', 'xlrd.xldate', 'xlrd.xlsx', 'lipd.noaa', 'lipd.lpd_noaa', 'lipd.noaa_lpd', 'lipd.dataframes', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'dateutil', 'dateutil._version', 'pandas.compat', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'dateutil.tz', 'dateutil.tz.tz', 'dateutil.tz._common', 'dateutil.tz._factories', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'typing', 'typing.io', 'typing.re', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.relativedelta', 'dateutil._common', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.frequencies', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.ops_dispatch', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas._libs.algos', 'pandas._typing', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape', 'pandas.core.reshape.api', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.util', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlsxwriter', 'pandas._libs.json', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'lipd.tables', 'lipd.validator_api', 'lipd.json_viewer', 'PyQt5', 'sip', 'PyQt5.sip', 'PyQt5.QtCore', 'PyQt5.QtGui', 'PyQt5.QtWidgets', 'lipd.fetch_doi', 'lipd.download_lipd', 'matplotlib', 'matplotlib.cbook', 'glob', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-01-31 15:51:29,112 [DEBUG] matplotlib: CACHEDIR=/home/fzhu/.cache/matplotlib
2020-01-31 15:51:29,114 [DEBUG] matplotlib.font_manager: Using fontManager instance from /home/fzhu/.cache/matplotlib/fontlist-v310.json
2020-01-31 15:51:29,198 [DEBUG] matplotlib.pyplot: Loaded backend qt5agg version unknown.
2020-01-31 15:51:29,198 [DEBUG] matplotlib.pyplot: Loaded backend Qt5Agg version unknown.
2020-01-31 15:51:29,388 [DEBUG] shapely.geos: Trying `CDLL(libc.so.6)`
2020-01-31 15:51:29,388 [DEBUG] shapely.geos: Library path: 'libc.so.6'
2020-01-31 15:51:29,388 [DEBUG] shapely.geos: DLL: <CDLL 'libc.so.6', handle 7f4c03c984f0 at 0x7f4be105e850>
